From: <ÓÉ Windows Internet Explorer 7 ±£´æ>
Subject: Ext.ux.UploadDialog user extension.
Date: Sun, 6 Jul 2008 17:08:16 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01C8DF8A.E1D9FE20"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/upload-dialog-2.0/index.php

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en" =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>Ext.ux.UploadDialog =
user extension.</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3Dutf-8">
<STYLE type=3Dtext/css>@import url( ../ExtJS/resources/css/ext-all.css =
);
@import url( ExtJS.ux/UploadDialog/css/Ext.ux.UploadDialog.css );
@import url( upload-dialog.css );
</STYLE>

<STYLE type=3Dtext/css>#loading-mask {
	Z-INDEX: 20000; BACKGROUND: #c3daf9; LEFT: 0px; WIDTH: 100%; POSITION: =
absolute; TOP: 0px; HEIGHT: 100%
}
#loading {
	BORDER-RIGHT: #6593cf 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#6593cf 1px solid; PADDING-LEFT: 2px; Z-INDEX: 20001; BACKGROUND: =
#c3daf9; LEFT: 42%; PADDING-BOTTOM: 2px; BORDER-LEFT: #6593cf 1px solid; =
WIDTH: 200px; PADDING-TOP: 2px; BORDER-BOTTOM: #6593cf 1px solid; =
POSITION: absolute; TOP: 40%; TEXT-ALIGN: center
}
#loading .loading-indicator {
	BORDER-RIGHT: #a3bad9 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#a3bad9 1px solid; PADDING-LEFT: 10px; BACKGROUND: white 15px center; =
PADDING-BOTTOM: 10px; MARGIN: 0px; FONT: bold 13px =
tahoma,arial,helvetica; BORDER-LEFT: #a3bad9 1px solid; COLOR: #003366; =
PADDING-TOP: 10px; BORDER-BOTTOM: #a3bad9 1px solid
}
</STYLE>

<META content=3D"MSHTML 6.00.6000.16674" name=3DGENERATOR></HEAD>
<BODY style=3D"OVERFLOW: hidden">
<DIV id=3Dloading-mask=20
style=3D"Z-INDEX: 20000; BACKGROUND: #c3daf9; LEFT: 0px; WIDTH: 100%; =
POSITION: absolute; TOP: 0px; HEIGHT: 100%"></DIV>
<DIV id=3Dloading style=3D"Z-INDEX: 20001; POSITION: absolute">
<DIV class=3Dloading-indicator><IMG=20
style=3D"VERTICAL-ALIGN: middle; WIDTH: 16px; HEIGHT: 16px"=20
alt=3D"Loading indicator"=20
src=3D"http://max-bazhenov.com/dev/ExtJS/resources/images/default/grid/lo=
ading.gif">=20
&nbsp;Loading </DIV></DIV><!-- =
#########################################################################=
################# -->
<DIV id=3Ddemo-panel>
<H3>Demo panel</H3>
<DIV id=3Dfile-list></DIV>
<DIV id=3Dshow-dialog-btn></DIV></DIV>
<DIV id=3Dhelp-panel>
<H1>Ext.ux.UploadDialog (for ExtJS 2.0) demo page.</H1>
<H2>Usage example.</H2>
<P>This is the code taken from upload-dialog.js. </P><PRE>dialog =3D new =
Ext.ux.UploadDialog.Dialog({
  url: 'upload-dialog-request.php',
  reset_on_hide: false,
  allow_close_on_upload: true,
  upload_autostart: true
});
...
dialog.show('show-button');</PRE>
<H2>Configuration.</H2>
<P>Most configuration options are inherited from Ext.Window (see ExtJs =
docs).=20
The added ones are: </P>
<UL>
  <LI><B>url</B> - the url where to post uploaded files.=20
  <LI><B>base_params</B> - additional post params (default to {}).=20
  <LI><B>permitted_extensions</B> - array of file extensions which are =
permitted=20
  to upload (default to []).=20
  <LI><B>reset_on_hide</B> - whether to reset upload queue on dialog =
hide or not=20
  (default true).=20
  <LI><B>allow_close_on_upload</B> - whether to allow hide/close dialog =
during=20
  upload process (default false).=20
  <LI><B>upload_autostart</B> - whether to start upload automaticaly =
when file=20
  added or not (default false).=20
  <LI><B>post_var_name</B> - uploaded data POST variable name (defaults =
to=20
  'file'). </LI></UL>
<H2>Events.</H2>
<UL>
  <LI><B>filetest</B> - fires before file is added into the queue,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> =
- file=20
  name<BR>If handler returns false then file will not be queued.=20
  <LI><B>fileadd</B> - fires when file is added into the queue,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> =
- file=20
  name=20
  <LI><B>fileremove</B> - fires when file is removed from the queue,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> =
- file=20
  name=20
  <LI><B>resetqueue</B> - fires when upload queue is resetted,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR>
  <LI><B>fileuploadstart</B> - fires when file as about to start=20
  uploading:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> - =

  uploaded file name<BR>
  <LI><B>uploadsuccess</B> - fires when file is successfuly uploaded,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> =
-=20
  uploaded file name<BR><I>data</I> - js-object builded from json-data =
returned=20
  from upload handler response.=20
  <LI><B>uploaderror</B> - fires when file upload error occured,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> =
-=20
  uploaded file name<BR><I>data</I> - js-object builded from json-data =
returned=20
  from upload handler response.=20
  <LI><B>uploadfailed</B> - fires when file upload failed,=20
  parameters:<BR><I>dialog</I> - reference to dialog<BR><I>filename</I> =
- failed=20
  file name=20
  <LI><B>uploadstart</B> - fires when upload process starts,=20
  parameters:<BR><I>dialog</I> - reference to dialog=20
  <LI><B>uploadstop</B> - fires when upload process stops,=20
  parameters:<BR><I>dialog</I> - reference to dialog=20
  <LI><B>uploadcomplete</B> - fires when upload process complete (no =
files to=20
  upload left), parameters:<BR><I>dialog</I> - reference to dialog =
</LI></UL>
<H2>Public methods</H2>
<P>Better go see the source. </P>
<H2>I18n.</H2>
<P>The class is ready for i18n, override the=20
Ext.ux.UploadDialog.Dialog.prototype.i18n object with your language =
strings, or=20
just pass i18n object in config. </P>
<H2>Server side handler.</H2>
<P>The files in the queue are posted one at a time, the file field name =
is=20
<I>'file'</I>. The handler should return json encoded object with =
following=20
properties: </P><PRE>{
  success: true|false, // required
  error: 'Error or success message' // optional, also can be named =
'message'
}</PRE>
<H2>Internals.</H2>
<P>The dialog is builded as finite state automata. <A=20
title=3D"Ext.ux.UploadDialog automata protocol (full size)"=20
href=3D"http://max-bazhenov.com/dev/upload-dialog-2.0/ExtJS.ux/UploadDial=
og/dox/automata-protocol.jpeg">The=20
state diagram can be found in the <I>dox</I> folder. </A></P>
<H2>Download.</H2>
<P><A title=3D"Download the Ext.ux.UploadDialog extension."=20
href=3D"http://max-bazhenov.com/dev/upload-dialog-2.0/ExtJS.ux/Ext.ux.Upl=
oadDialog.zip">Ext.ux.UploadDialog.zip=20
</A></P>
<H2>Licence.</H2>
<P>No warranties, use it on your own risk, respectoware :D (if you like =
it and=20
feels it's useful for you go to <A title=3D"Go to ExtJS forum."=20
href=3D"http://extjs.com/forum/showthread.php?t=3D21558">ExtJS forum =
</A>find any of=20
my posts (username MaximGB) and add to my reputation :))))) </P>
<H2>Author.</H2>
<P>Maxim Bazhenov (aka MaximGB) </P>
<HR>

<H2>Change history</H2>
<UL>
  <LI><B>24.12.2007</B><BR>- initial release.=20
  <LI><B>28.12.2007</B><BR>- Fixed bug occurring during file type check, =
wrong=20
  method was called in 'file-selected' event handler =
(isPermittedFileType was=20
  called instead of isPermittedFile).=20
  <LI><B>08.02.2008</B><BR>- Added option <B>post_var_name</B>, =
specifying the=20
  uploaded data POST variable name.=20
  <LI><B>15.02.2008</B><BR>- Server response is now filtered against =
browser=20
  added &lt;pre&gt; tag.=20
  <LI><B>12.04.2008</B><BR>- Ajax response now filtered against any =
wrapper tag=20
  and not only "pre" tag. Patch suggested by user <I>wout</I> from ExtJS =
forums=20
  for Safary 3.1 compatibility.=20
  <LI><B>25.05.2008</B><BR>- Fixed bug in=20
  Ext.ux.UploadDialog.Dialog::setAllowCloseOnUpload() method. Reported =
by user=20
  <I>rhymes</I> from ExtJS forums.=20
  <LI><B>29.05.2008</B><BR>- Fixed bug when the same file is selected =
twice in a=20
  row, the second selection was not handled at all. Reported by user=20
  <I>erymski</I> from ExtJS forums. </LI></UL></DIV><!-- =
#########################################################################=
################# -->
<SCRIPT =
src=3D"http://max-bazhenov.com/dev/ExtJS/adapter/ext/ext-base.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT src=3D"http://max-bazhenov.com/dev/ExtJS/ext-all-debug.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT=20
src=3D"http://max-bazhenov.com/dev/upload-dialog-2.0/ExtJS.ux/UploadDialo=
g/Ext.ux.UploadDialog.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT =
src=3D"http://max-bazhenov.com/dev/upload-dialog-2.0/upload-dialog.js"=20
type=3Dtext/javascript></SCRIPT>
</BODY></HTML>

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://max-bazhenov.com/dev/ExtJS/resources/images/default/grid/loading.gif

R0lGODlhEAAQALMMAKqooJGOhp2bk7e1rZ2bkre1rJCPhqqon8PBudDOxXd1bISCef///wAAAAAA
AAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQFAAAMACwAAAAAEAAQAAAET5DJyYyhmAZ7sxQEs1nM
smACGJKmSaVEOLXnK1PuBADepCiMg/DQ+/2GRI8RKOxJfpTCIJNIYArS6aRajWYZCASDa41Ow+Fx
2YMWOyfpTAQAIfkEBQAADAAsAAAAABAAEAAABE6QyckEoZgKe7MEQMUxhoEd6FFdQWlOqTq15SlT
9VQM3rQsjMKO5/n9hANixgjc9SQ/CgKRUSgw0ynFapVmGYkEg3v1gsPibg8tfk7CnggAIfkEBQAA
DAAsAAAAABAAEAAABE2QycnOoZjaA/IsRWV1goCBoMiUJTW8A0XMBPZmM4Ug3hQEjN2uZygahDyP
0RBMEpmTRCKzWGCkUkq1SsFOFQrG1tr9gsPc3jnco4A9EQAh+QQFAAAMACwAAAAAEAAQAAAETpDJ
yUqhmFqbJ0LMIA7McWDfF5LmAVApOLUvLFMmlSTdJAiM3a73+wl5HYKSEET2lBSFIhMIYKRSimFr
iGIZiwWD2/WCw+Jt7xxeU9qZCAAh+QQFAAAMACwAAAAAEAAQAAAETZDJyRCimFqbZ0rVxgwF9n3h
SJbeSQ2rCWIkpSjddBzMfee7nQ/XCfJ+OQYAQFksMgQBxumkEKLSCfVpMDCugqyW2w18xZmuwZyc
dDsRACH5BAUAAAwALAAAAAAQABAAAARNkMnJUqKYWpunUtXGIAj2feFIlt5JrWybkdSydNNQMLaN
D7pC79YBFnY+HENHMRgyhwPGaQhQotGm00oQMLBSLYPQ9QIASrLAq5x0OxEAIfkEBQAADAAsAAAA
ABAAEAAABE2QycmUopham+da1cYkCfZ94UiW3kmtbJuRlGF0E4Iwto3rut6tA9wFAjiJjkIgZAYD
TLNJgUIpgqyAcTgwCuACJssAdL3gpLmbpLAzEQA7

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/ExtJS/resources/css/ext-all.css

HTML {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
BODY {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
DIV {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
DL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
DT {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
DD {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
OL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
LI {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
H1 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
H2 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
H3 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
H4 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
H5 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
H6 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
PRE {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
FORM {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
FIELDSET {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
INPUT {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
P {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
BLOCKQUOTE {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
TH {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
TD {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
IMG {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
BODY {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
HTML {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
ADDRESS {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
CAPTION {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
CITE {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
CODE {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
DFN {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
EM {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
STRONG {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
TH {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
VAR {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
OL {
	LIST-STYLE-TYPE: none
}
UL {
	LIST-STYLE-TYPE: none
}
CAPTION {
	TEXT-ALIGN: left
}
TH {
	TEXT-ALIGN: left
}
H1 {
	FONT-SIZE: 100%
}
H2 {
	FONT-SIZE: 100%
}
H3 {
	FONT-SIZE: 100%
}
H4 {
	FONT-SIZE: 100%
}
H5 {
	FONT-SIZE: 100%
}
H6 {
	FONT-SIZE: 100%
}
Q:unknown {
	content: ''
}
Q:unknown {
	content: ''
}
.ext-el-mask {
	Z-INDEX: 20000; FILTER: alpha(opacity=3D50); LEFT: 0px; WIDTH: 100%; =
ZOOM: 1; POSITION: absolute; TOP: 0px; HEIGHT: 100%; BACKGROUND-COLOR: =
#ccc; -moz-opacity: 0.5; opacity: .50
}
.ext-el-mask-msg {
	BORDER-RIGHT: #6593cf 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#6593cf 1px solid; PADDING-LEFT: 2px; Z-INDEX: 20001; BACKGROUND: =
url(../images/default/box/tb-blue.gif) #c3daf9 repeat-x 0px -16px; LEFT: =
0px; PADDING-BOTTOM: 2px; BORDER-LEFT: #6593cf 1px solid; PADDING-TOP: =
2px; BORDER-BOTTOM: #6593cf 1px solid; POSITION: absolute; TOP: 0px
}
.ext-el-mask-msg DIV {
	BORDER-RIGHT: #a3bad9 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#a3bad9 1px solid; PADDING-LEFT: 10px; BACKGROUND: #eee; PADDING-BOTTOM: =
5px; FONT: 11px tahoma,arial,helvetica,sans-serif; BORDER-LEFT: #a3bad9 =
1px solid; CURSOR: wait; COLOR: #222; PADDING-TOP: 5px; BORDER-BOTTOM: =
#a3bad9 1px solid
}
.ext-shim {
	LEFT: 0px; VISIBILITY: hidden; OVERFLOW: hidden; POSITION: absolute; =
TOP: 0px
}
.ext-ie .ext-shim {
	FILTER: alpha(opacity=3D0)
}
.ext-ie6 .ext-shim {
	MARGIN-TOP: 3px; MARGIN-LEFT: 5px
}
.x-mask-loading DIV {
	PADDING-RIGHT: 10px; PADDING-LEFT: 25px; BACKGROUND: =
url(../images/default/grid/loading.gif) #fbfbfb no-repeat 5px 5px; =
PADDING-BOTTOM: 5px; LINE-HEIGHT: 16px; PADDING-TOP: 5px
}
.x-hidden {
	LEFT: -10000px; VISIBILITY: hidden; POSITION: absolute; TOP: -10000px
}
.x-hide-offsets {
	LEFT: -10000px; VISIBILITY: hidden; POSITION: absolute; TOP: -10000px
}
.x-hide-display {
	DISPLAY: none! important
}
.x-hide-visibility {
	VISIBILITY: hidden! important
}
.x-masked {
	OVERFLOW: hidden! important
}
.x-masked SELECT {
	VISIBILITY: hidden
}
.x-masked OBJECT {
	VISIBILITY: hidden
}
.x-masked EMBED {
	VISIBILITY: hidden
}
.x-layer {
	VISIBILITY: hidden
}
.x-unselectable {
	-moz-user-select: none; -khtml-user-select: none
}
.x-unselectable * {
	-moz-user-select: none; -khtml-user-select: none
}
.x-repaint {
	ZOOM: 1; BACKGROUND-COLOR: transparent; -moz-outline: none
}
.x-item-disabled {
	FILTER: alpha(opacity=3D60); CURSOR: default; COLOR: gray; =
-moz-opacity: .6; opacity: .6
}
.x-item-disabled * {
	CURSOR: default! important; COLOR: gray! important
}
.x-splitbar-proxy {
	FONT-SIZE: 1px; Z-INDEX: 20001; BACKGROUND: #aaa; VISIBILITY: hidden; =
OVERFLOW: hidden; LINE-HEIGHT: 1px; ZOOM: 1; POSITION: absolute
}
.x-splitbar-h {
	CURSOR: col-resize
}
.x-splitbar-proxy-h {
	CURSOR: col-resize
}
.x-splitbar-v {
	CURSOR: row-resize
}
.x-splitbar-proxy-v {
	CURSOR: row-resize
}
.x-color-palette {
	WIDTH: 150px; CURSOR: pointer; HEIGHT: 92px
}
.x-color-palette A {
	BORDER-RIGHT: #fff 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: #fff 1px =
solid; PADDING-LEFT: 2px; FLOAT: left; PADDING-BOTTOM: 2px; BORDER-LEFT: =
#fff 1px solid; CURSOR: pointer; PADDING-TOP: 2px; BORDER-BOTTOM: #fff =
1px solid; TEXT-DECORATION: none; -moz-outline: 0 none; outline: 0 none
}
.x-color-palette A:hover {
	BORDER-RIGHT: #8bb8f3 1px solid; BORDER-TOP: #8bb8f3 1px solid; =
BACKGROUND: #deecfd; BORDER-LEFT: #8bb8f3 1px solid; BORDER-BOTTOM: =
#8bb8f3 1px solid
}
.x-color-palette A.x-color-palette-sel {
	BORDER-RIGHT: #8bb8f3 1px solid; BORDER-TOP: #8bb8f3 1px solid; =
BACKGROUND: #deecfd; BORDER-LEFT: #8bb8f3 1px solid; BORDER-BOTTOM: =
#8bb8f3 1px solid
}
.x-color-palette EM {
	BORDER-RIGHT: #aca899 1px solid; BORDER-TOP: #aca899 1px solid; =
DISPLAY: block; BORDER-LEFT: #aca899 1px solid; BORDER-BOTTOM: #aca899 =
1px solid
}
.x-color-palette EM SPAN {
	DISPLAY: block; WIDTH: 10px; CURSOR: pointer; LINE-HEIGHT: 10px; =
HEIGHT: 10px
}
.x-ie-shadow {
	DISPLAY: none; BACKGROUND: #777; LEFT: 0px; OVERFLOW: hidden; ZOOM: 1; =
POSITION: absolute; TOP: 0px
}
.x-shadow {
	DISPLAY: none; LEFT: 0px; OVERFLOW: hidden; POSITION: absolute; TOP: =
0px
}
.x-shadow * {
	OVERFLOW: hidden
}
.x-shadow * {
	BORDER-TOP-WIDTH: 0px; CLEAR: none; PADDING-RIGHT: 0px; PADDING-LEFT: =
0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: =
0px; MARGIN: 0px; PADDING-TOP: 0px; ZOOM: 1; BORDER-RIGHT-WIDTH: 0px
}
.x-shadow .xstc {
	FLOAT: left; HEIGHT: 6px
}
.x-shadow .xsbc {
	FLOAT: left; HEIGHT: 6px
}
.x-shadow .xstl {
	FLOAT: left; WIDTH: 6px; HEIGHT: 6px
}
.x-shadow .xstr {
	FLOAT: left; WIDTH: 6px; HEIGHT: 6px
}
.x-shadow .xsbl {
	FLOAT: left; WIDTH: 6px; HEIGHT: 6px
}
.x-shadow .xsbr {
	FLOAT: left; WIDTH: 6px; HEIGHT: 6px
}
.x-shadow .xsc {
	WIDTH: 100%
}
.x-shadow .xsml {
	FLOAT: left; WIDTH: 6px; HEIGHT: 100%
}
.x-shadow .xsmr {
	FLOAT: left; WIDTH: 6px; HEIGHT: 100%
}
.x-shadow .xsmc {
	BACKGROUND: url(../images/default/shadow-c.png); FLOAT: left; HEIGHT: =
100%
}
.x-shadow .xst {
	OVERFLOW: hidden; WIDTH: 100%; HEIGHT: 6px
}
.x-shadow .xsb {
	OVERFLOW: hidden; WIDTH: 100%; HEIGHT: 6px
}
.x-shadow .xsml {
	BACKGROUND: url(../images/default/shadow-lr.png) repeat-y 0px 0px
}
.x-shadow .xsmr {
	BACKGROUND: url(../images/default/shadow-lr.png) repeat-y -6px 0px
}
.x-shadow .xstl {
	BACKGROUND: url(../images/default/shadow.png) no-repeat 0px 0px
}
.x-shadow .xstc {
	BACKGROUND: url(../images/default/shadow.png) repeat-x 0px -30px
}
.x-shadow .xstr {
	BACKGROUND: url(../images/default/shadow.png) repeat-x 0px -18px
}
.x-shadow .xsbl {
	BACKGROUND: url(../images/default/shadow.png) no-repeat 0px -12px
}
.x-shadow .xsbc {
	BACKGROUND: url(../images/default/shadow.png) repeat-x 0px -36px
}
.x-shadow .xsbr {
	BACKGROUND: url(../images/default/shadow.png) repeat-x 0px -6px
}
.loading-indicator {
	BACKGROUND-POSITION: left 50%; PADDING-LEFT: 20px; FONT-SIZE: 11px; =
BACKGROUND-IMAGE: url(../images/default/grid/loading.gif); MARGIN: 3px; =
LINE-HEIGHT: 16px; BACKGROUND-REPEAT: no-repeat
}
.x-text-resize {
	LEFT: -1000px; VISIBILITY: hidden; ZOOM: 1; POSITION: absolute; TOP: =
-1000px
}
.x-drag-overlay {
	DISPLAY: none; Z-INDEX: 20000; LEFT: 0px; BACKGROUND-IMAGE: =
url(../images/default/s.gif); WIDTH: 100%; POSITION: absolute; TOP: 0px; =
HEIGHT: 100%
}
.x-clear {
	CLEAR: both; FONT-SIZE: 0px; OVERFLOW: hidden; LINE-HEIGHT: 0; HEIGHT: =
0px
}
.x-spotlight {
	Z-INDEX: 8999; FILTER: alpha(opacity=3D50); LEFT: 0px; WIDTH: 0px; =
ZOOM: 1; POSITION: absolute; TOP: 0px; HEIGHT: 0px; BACKGROUND-COLOR: =
#ccc; -moz-opacity: 0.5; opacity: .50
}
.x-tab-panel {
	OVERFLOW: hidden
}
.x-tab-panel-header {
	BORDER-RIGHT: #8db2e3 1px solid; BORDER-TOP: #8db2e3 1px solid; =
BACKGROUND: #deecfd; OVERFLOW: hidden; BORDER-LEFT: #8db2e3 1px solid; =
BORDER-BOTTOM: #8db2e3 1px solid; ZOOM: 1
}
.x-tab-panel-footer {
	BORDER-RIGHT: #8db2e3 1px solid; BORDER-TOP: #8db2e3 1px solid; =
BACKGROUND: #deecfd; OVERFLOW: hidden; BORDER-LEFT: #8db2e3 1px solid; =
BORDER-BOTTOM: #8db2e3 1px solid; ZOOM: 1
}
.x-tab-panel-header {
	BORDER-RIGHT: #8db2e3 1px solid; BORDER-TOP: #8db2e3 1px solid; =
PADDING-BOTTOM: 2px; BORDER-LEFT: #8db2e3 1px solid; BORDER-BOTTOM: =
#8db2e3 1px solid
}
.x-tab-panel-footer {
	BORDER-RIGHT: #8db2e3 1px solid; BORDER-TOP: #8db2e3 1px solid; =
BORDER-LEFT: #8db2e3 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #8db2e3 =
1px solid
}
.x-tab-strip-wrap {
	OVERFLOW: hidden; WIDTH: 100%; ZOOM: 1; POSITION: relative
}
UL.x-tab-strip {
	DISPLAY: block; WIDTH: 5000px; ZOOM: 1
}
UL.x-tab-strip-top {
	BACKGROUND: url(../images/default/tabs/tab-strip-bg.gif) #cedff5 =
repeat-x 50% bottom; PADDING-TOP: 1px; BORDER-BOTTOM: #8db2e3 1px solid
}
UL.x-tab-strip-bottom {
	BORDER-TOP: #8db2e3 1px solid; BACKGROUND: =
url(../images/default/tabs/tab-strip-btm-bg.gif) #cedff5 repeat-x 50% =
top; PADDING-BOTTOM: 1px; BORDER-BOTTOM: 0px
}
.x-tab-panel-header-plain .x-tab-strip-top {
	BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px! =
important
}
.x-tab-panel-header-plain {
	BORDER-TOP-WIDTH: 0px! important; BORDER-LEFT-WIDTH: 0px! important; =
BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM-WIDTH: =
0px! important; PADDING-BOTTOM: 0px! important; BORDER-RIGHT-WIDTH: 0px! =
important
}
.x-tab-panel-header-plain .x-tab-strip-spacer {
	BORDER-RIGHT: #8db2e3 1px solid; BORDER-TOP: #8db2e3 0px; FONT-SIZE: =
1px; BACKGROUND: #deecfd; BORDER-LEFT: #8db2e3 1px solid; LINE-HEIGHT: =
1px; BORDER-BOTTOM: #8db2e3 1px solid; HEIGHT: 2px
}
.ext-border-box .x-tab-panel-header-plain .x-tab-strip-spacer {
	HEIGHT: 3px
}
UL.x-tab-strip LI {
	FLOAT: left; MARGIN-LEFT: 2px
}
UL.x-tab-strip LI.x-tab-edge {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px! important; BORDER-TOP: 0px; =
PADDING-LEFT: 0px! important; FONT-SIZE: 1px! important; BACKGROUND: =
none transparent scroll repeat 0% 0%; FLOAT: left; PADDING-BOTTOM: 0px! =
important; MARGIN: 0px; OVERFLOW: hidden; BORDER-LEFT: 0px; WIDTH: 1px; =
LINE-HEIGHT: 1px! important; PADDING-TOP: 0px! important; BORDER-BOTTOM: =
0px; ZOOM: 1
}
.x-tab-strip A {
	DISPLAY: block
}
.x-tab-strip SPAN {
	DISPLAY: block
}
.x-tab-strip EM {
	DISPLAY: block
}
.x-tab-strip A {
	CURSOR: pointer; TEXT-DECORATION: none! important; -moz-outline: none; =
outline: none
}
.x-tab-strip-inner {
	OVERFLOW: hidden; TEXT-OVERFLOW: ellipsis
}
.x-tab-strip SPAN.x-tab-strip-text {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 4px; FONT: 11px =
tahoma,arial,helvetica; CURSOR: pointer; COLOR: #416aa3; PADDING-TOP: =
4px; WHITE-SPACE: nowrap
}
.x-tab-strip .x-tab-with-icon .x-tab-right {
	PADDING-LEFT: 6px
}
.x-tab-strip .x-tab-with-icon SPAN.x-tab-strip-text {
	BACKGROUND-POSITION: 0px 3px; PADDING-LEFT: 20px; BACKGROUND-REPEAT: =
no-repeat
}
.x-tab-strip-over SPAN.x-tab-strip-text {
	COLOR: #15428b
}
.x-tab-strip-active {
	CURSOR: default
}
.x-tab-strip-active SPAN.x-tab-strip-text {
	FONT-WEIGHT: bold; CURSOR: default; COLOR: #15428b
}
.x-tab-strip-disabled .x-tabs-text {
	CURSOR: default; COLOR: #aaa
}
.x-tab-panel-body {
	OVERFLOW: hidden
}
.x-tab-panel-bwrap {
	OVERFLOW: hidden
}
.ext-ie .x-tab-strip .x-tab-right {
	POSITION: relative
}
.x-tab-strip-top .x-tab-strip-active .x-tab-right {
	MARGIN-BOTTOM: -1px
}
.x-tab-strip-top .x-tab-strip-active .x-tab-right SPAN.x-tab-strip-text =
{
	PADDING-BOTTOM: 5px
}
.x-tab-strip-bottom .x-tab-strip-active .x-tab-right {
	MARGIN-TOP: -1px
}
.x-tab-strip-bottom .x-tab-strip-active .x-tab-right =
SPAN.x-tab-strip-text {
	PADDING-TOP: 5px
}
.x-tab-strip-top .x-tab-right {
	PADDING-LEFT: 10px; BACKGROUND: =
url(../images/default/tabs/tabs-sprite.gif) no-repeat 0px -51px
}
.x-tab-strip-top .x-tab-left {
	PADDING-RIGHT: 10px; BACKGROUND: =
url(../images/default/tabs/tabs-sprite.gif) no-repeat right -351px
}
.x-tab-strip-top .x-tab-strip-inner {
	BACKGROUND: url(../images/default/tabs/tabs-sprite.gif) repeat-x 0px =
-201px
}
.x-tab-strip-top .x-tab-strip-over .x-tab-right {
	BACKGROUND-POSITION: 0px -101px
}
.x-tab-strip-top .x-tab-strip-over .x-tab-left {
	BACKGROUND-POSITION: right -401px
}
.x-tab-strip-top .x-tab-strip-over .x-tab-strip-inner {
	BACKGROUND-POSITION: 0px -251px
}
.x-tab-strip-top .x-tab-strip-active .x-tab-right {
	BACKGROUND-POSITION: 0px 0px
}
.x-tab-strip-top .x-tab-strip-active .x-tab-left {
	BACKGROUND-POSITION: right -301px
}
.x-tab-strip-top .x-tab-strip-active .x-tab-strip-inner {
	BACKGROUND-POSITION: 0px -151px
}
.x-tab-strip-bottom .x-tab-right {
	BACKGROUND: url(../images/default/tabs/tab-btm-inactive-right-bg.gif) =
no-repeat right bottom
}
.x-tab-strip-bottom .x-tab-left {
	BACKGROUND: url(../images/default/tabs/tab-btm-inactive-left-bg.gif) =
no-repeat left bottom
}
.x-tab-strip-bottom .x-tab-strip-active .x-tab-right {
	BACKGROUND: url(../images/default/tabs/tab-btm-right-bg.gif) no-repeat =
left bottom
}
.x-tab-strip-bottom .x-tab-strip-active .x-tab-left {
	BACKGROUND: url(../images/default/tabs/tab-btm-left-bg.gif) no-repeat =
right bottom
}
.x-tab-strip-bottom .x-tab-left {
	PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-tab-strip-bottom .x-tab-right {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-tab-strip .x-tab-strip-close {
	DISPLAY: none
}
.x-tab-strip-closable {
	POSITION: relative
}
.x-tab-strip-closable .x-tab-left {
	PADDING-RIGHT: 19px
}
.x-tab-strip .x-tab-strip-closable A.x-tab-strip-close {
	DISPLAY: block; Z-INDEX: 2; RIGHT: 3px; BACKGROUND-IMAGE: =
url(../images/default/tabs/tab-close.gif); WIDTH: 11px; CURSOR: pointer; =
BACKGROUND-REPEAT: no-repeat; POSITION: absolute; TOP: 3px; HEIGHT: =
11px; -moz-opacity: .6; opacity: .6
}
.x-tab-strip .x-tab-strip-active A.x-tab-strip-close {
	-moz-opacity: .8; opacity: .8
}
.x-tab-strip .x-tab-strip-closable A.x-tab-strip-close:hover {
	BACKGROUND-IMAGE: url(../images/default/tabs/tab-close.gif); =
-moz-opacity: 1; opacity: 1
}
.x-tab-panel-body {
	BORDER-RIGHT: #8db2e3 1px solid; BORDER-TOP: #8db2e3 1px solid; =
BACKGROUND: #fff; BORDER-LEFT: #8db2e3 1px solid; BORDER-BOTTOM: #8db2e3 =
1px solid
}
.x-tab-panel-body-top {
	BORDER-TOP: 0px
}
.x-tab-panel-body-bottom {
	BORDER-BOTTOM: 0px
}
.x-tab-scroller-left {
	Z-INDEX: 10; BACKGROUND: url(../images/default/tabs/scroll-left.gif) =
no-repeat -18px 0px; LEFT: 0px; WIDTH: 18px; CURSOR: pointer; =
BORDER-BOTTOM: #8db2e3 1px solid; POSITION: absolute; TOP: 0px
}
.x-tab-scroller-left-over {
	BACKGROUND-POSITION: 0px 0px
}
.x-tab-scroller-left-disabled {
	BACKGROUND-POSITION: -18px 0px; FILTER: alpha(opacity=3D50); CURSOR: =
default; -moz-opacity: .5; opacity: .5
}
.x-tab-scroller-right {
	Z-INDEX: 10; RIGHT: 0px; BACKGROUND: =
url(../images/default/tabs/scroll-right.gif) no-repeat 0px 0px; WIDTH: =
18px; CURSOR: pointer; BORDER-BOTTOM: #8db2e3 1px solid; POSITION: =
absolute; TOP: 0px
}
.x-tab-scroller-right-over {
	BACKGROUND-POSITION: -18px 0px
}
.x-tab-scroller-right-disabled {
	BACKGROUND-POSITION: 0px 0px; FILTER: alpha(opacity=3D50); CURSOR: =
default; -moz-opacity: .5; opacity: .5
}
.x-tab-scrolling .x-tab-strip-wrap {
	MARGIN-LEFT: 18px; MARGIN-RIGHT: 18px
}
.x-tab-scrolling {
	POSITION: relative
}
.x-tab-panel-bbar .x-toolbar {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#99bbe8 0px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; OVERFLOW: hidden; =
BORDER-LEFT: #99bbe8 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #99bbe8 =
1px solid
}
.x-tab-panel-tbar .x-toolbar {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#99bbe8 0px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; OVERFLOW: hidden; =
BORDER-LEFT: #99bbe8 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #99bbe8 =
1px solid
}
.x-form-field {
	MARGIN: 0px; FONT: 12px tahoma,arial,helvetica,sans-serif
}
.x-form-text {
	BORDER-RIGHT: #b5b8c8 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: =
#b5b8c8 1px solid; PADDING-LEFT: 3px; BACKGROUND: =
url(../images/default/form/text-bg.gif) #fff repeat-x 0px 0px; =
PADDING-BOTTOM: 1px; BORDER-LEFT: #b5b8c8 1px solid; PADDING-TOP: 1px; =
BORDER-BOTTOM: #b5b8c8 1px solid
}
TEXTAREA.x-form-field {
	BORDER-RIGHT: #b5b8c8 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: =
#b5b8c8 1px solid; PADDING-LEFT: 3px; BACKGROUND: =
url(../images/default/form/text-bg.gif) #fff repeat-x 0px 0px; =
PADDING-BOTTOM: 1px; BORDER-LEFT: #b5b8c8 1px solid; PADDING-TOP: 1px; =
BORDER-BOTTOM: #b5b8c8 1px solid
}
TEXTAREA.x-form-field {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 2px; =
PADDING-TOP: 2px
}
.x-form-text {
	VERTICAL-ALIGN: middle; LINE-HEIGHT: 18px; HEIGHT: 22px
}
.ext-ie .x-form-text {
	MARGIN: -1px 0px; LINE-HEIGHT: 18px; HEIGHT: 22px
}
.ext-ie TEXTAREA.x-form-field {
	MARGIN: -1px 0px
}
.ext-strict .x-form-text {
	HEIGHT: 18px
}
.ext-safari .x-form-text {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; HEIGHT: 20px
}
.ext-mac.ext-safari TEXTAREA.x-form-field {
	MARGIN-BOTTOM: -2px
}
.ext-gecko .x-form-text {
	PADDING-BOTTOM: 0px; PADDING-TOP: 2px
}
TEXTAREA {
	resize: none
}
.x-form-select-one {
	BORDER-RIGHT: #b5b8c8 1px solid; BORDER-TOP: #b5b8c8 1px solid; =
VERTICAL-ALIGN: middle; BORDER-LEFT: #b5b8c8 1px solid; LINE-HEIGHT: =
18px; BORDER-BOTTOM: #b5b8c8 1px solid; HEIGHT: 20px; BACKGROUND-COLOR: =
#fff
}
.x-form-field-wrap {
	ZOOM: 1; WHITE-SPACE: nowrap; POSITION: relative
}
.x-editor .x-form-check-wrap {
	BACKGROUND: #fff
}
.x-form-field-wrap .x-form-trigger {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BACKGROUND: =
url(../images/default/form/trigger.gif) no-repeat 0px 0px; WIDTH: 17px; =
CURSOR: pointer; BORDER-BOTTOM: #b5b8c8 1px solid; POSITION: absolute; =
TOP: 0px; HEIGHT: 21px; BORDER-RIGHT-WIDTH: 0px
}
.ext-safari .x-form-field-wrap .x-form-trigger {
	HEIGHT: 21px
}
.x-form-field-wrap .x-form-date-trigger {
	BACKGROUND-IMAGE: url(../images/default/form/date-trigger.gif); CURSOR: =
pointer
}
.x-form-field-wrap .x-form-clear-trigger {
	BACKGROUND-IMAGE: url(../images/default/form/clear-trigger.gif); =
CURSOR: pointer
}
.x-form-field-wrap .x-form-search-trigger {
	BACKGROUND-IMAGE: url(../images/default/form/search-trigger.gif); =
CURSOR: pointer
}
.ext-safari .x-form-field-wrap .x-form-trigger {
	RIGHT: 0px
}
.x-form-field-wrap .x-form-twin-triggers .x-form-trigger {
	VERTICAL-ALIGN: top; POSITION: static; TOP: auto
}
.x-form-field-wrap .x-form-trigger-over {
	BACKGROUND-POSITION: -17px 0px
}
.x-form-field-wrap .x-form-trigger-click {
	BACKGROUND-POSITION: -34px 0px
}
.x-trigger-wrap-focus .x-form-trigger {
	BACKGROUND-POSITION: -51px 0px
}
.x-trigger-wrap-focus .x-form-trigger-over {
	BACKGROUND-POSITION: -68px 0px
}
.x-trigger-wrap-focus .x-form-trigger-click {
	BACKGROUND-POSITION: -85px 0px
}
.x-trigger-wrap-focus .x-form-trigger {
	BORDER-BOTTOM: #7eadd9 1px solid
}
.x-item-disabled .x-form-trigger-over {
	BACKGROUND-POSITION: 0px 0px; BORDER-BOTTOM: #b5b8c8 1px solid
}
.x-item-disabled .x-form-trigger-click {
	BACKGROUND-POSITION: 0px 0px; BORDER-BOTTOM: #b5b8c8 1px solid
}
.x-form-focus {
	BORDER-RIGHT: #7eadd9 1px solid; BORDER-TOP: #7eadd9 1px solid; =
BORDER-LEFT: #7eadd9 1px solid; BORDER-BOTTOM: #7eadd9 1px solid
}
TEXTAREA.x-form-focus {
	BORDER-RIGHT: #7eadd9 1px solid; BORDER-TOP: #7eadd9 1px solid; =
BORDER-LEFT: #7eadd9 1px solid; BORDER-BOTTOM: #7eadd9 1px solid
}
.x-form-invalid {
	BORDER-RIGHT: #dd7870 1px solid; BORDER-TOP: #dd7870 1px solid; =
BACKGROUND: url(../images/default/grid/invalid_line.gif) #fff repeat-x =
50% bottom; BORDER-LEFT: #dd7870 1px solid; BORDER-BOTTOM: #dd7870 1px =
solid
}
TEXTAREA.x-form-invalid {
	BORDER-RIGHT: #dd7870 1px solid; BORDER-TOP: #dd7870 1px solid; =
BACKGROUND: url(../images/default/grid/invalid_line.gif) #fff repeat-x =
50% bottom; BORDER-LEFT: #dd7870 1px solid; BORDER-BOTTOM: #dd7870 1px =
solid
}
.ext-safari .x-form-invalid {
	BORDER-RIGHT: #ff7870 1px solid; BORDER-TOP: #ff7870 1px solid; =
BORDER-LEFT: #ff7870 1px solid; BORDER-BOTTOM: #ff7870 1px solid; =
BACKGROUND-COLOR: #fee
}
.x-editor {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; VISIBILITY: hidden; =
PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px
}
.x-form-check-wrap {
	LINE-HEIGHT: 18px
}
.ext-ie .x-form-check-wrap INPUT {
	WIDTH: 15px; HEIGHT: 15px
}
.x-editor .x-form-check-wrap {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 3px
}
.x-editor .x-form-checkbox {
	HEIGHT: 13px
}
.x-form-grow-sizer {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; LEFT: -10000px; VISIBILITY: =
hidden; PADDING-BOTTOM: 8px; FONT: 12px =
tahoma,arial,helvetica,sans-serif; PADDING-TOP: 8px; ZOOM: 1; POSITION: =
absolute; TOP: -10000px; WORD-WRAP: break-word
}
.x-form-grow-sizer P {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px! important; BORDER-TOP: 0px; =
PADDING-LEFT: 0px! important; PADDING-BOTTOM: 0px! important; MARGIN: =
0px; BORDER-LEFT: 0px; PADDING-TOP: 0px! important; BORDER-BOTTOM: 0px
}
.x-form-item {
	DISPLAY: block; MARGIN-BOTTOM: 4px; FONT: 12px =
tahoma,arial,helvetica,sans-serif; ZOOM: 1
}
.x-form-item LABEL {
	CLEAR: left; PADDING-RIGHT: 3px; DISPLAY: block; PADDING-LEFT: 0px; =
Z-INDEX: 2; FLOAT: left; PADDING-BOTTOM: 3px; WIDTH: 100px; PADDING-TOP: =
3px; POSITION: relative
}
.x-form-element {
	PADDING-LEFT: 105px; POSITION: relative
}
.x-form-invalid-msg {
	PADDING-RIGHT: 2px; PADDING-LEFT: 18px; BACKGROUND: =
url(../images/default/shared/warning.gif) no-repeat 0px 2px; =
PADDING-BOTTOM: 2px; FONT: 11px/16px tahoma,arial,helvetica,sans-serif; =
WIDTH: 200px; COLOR: #e00; PADDING-TOP: 2px
}
.x-form-label-right LABEL {
	TEXT-ALIGN: right
}
.x-form-label-top .x-form-item LABEL {
	CLEAR: none; DISPLAY: inline; FLOAT: none; MARGIN-BOTTOM: 4px; WIDTH: =
auto; POSITION: static
}
.x-form-label-top .x-form-element {
	PADDING-LEFT: 0px; PADDING-TOP: 4px
}
.x-form-label-top .x-form-item {
	PADDING-BOTTOM: 4px
}
.x-form-empty-field {
	COLOR: gray
}
.x-small-editor .x-form-field {
	FONT: 11px arial,tahoma,helvetica,sans-serif
}
.x-small-editor .x-form-text {
	VERTICAL-ALIGN: middle; LINE-HEIGHT: 16px; HEIGHT: 20px
}
.ext-ie .x-small-editor .x-form-text {
	MARGIN-TOP: -1px! important; MARGIN-BOTTOM: -1px! important; =
LINE-HEIGHT: 16px! important; HEIGHT: 20px! important
}
.ext-strict .x-small-editor .x-form-text {
	HEIGHT: 16px! important
}
.ext-safari .x-small-editor .x-form-field {
	FONT: 12px arial,tahoma,helvetica,sans-serif
}
.ext-ie .x-small-editor .x-form-text {
	LINE-HEIGHT: 16px; HEIGHT: 20px
}
.ext-border-box .x-small-editor .x-form-text {
	HEIGHT: 20px
}
.x-small-editor .x-form-select-one {
	VERTICAL-ALIGN: middle; LINE-HEIGHT: 16px; HEIGHT: 20px
}
.x-small-editor .x-form-num-field {
	TEXT-ALIGN: right
}
.x-small-editor .x-form-field-wrap .x-form-trigger {
	HEIGHT: 19px
}
.x-form-clear {
	CLEAR: both; FONT-SIZE: 0px; OVERFLOW: hidden; LINE-HEIGHT: 0; HEIGHT: =
0px
}
.x-form-clear-left {
	CLEAR: left; FONT-SIZE: 0px; OVERFLOW: hidden; LINE-HEIGHT: 0; HEIGHT: =
0px
}
.x-form-cb-label {
	CLEAR: none! important; DISPLAY: inline! important; FLOAT: none! =
important; MARGIN-LEFT: 4px
}
.x-form-column {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FLOAT: left; PADDING-BOTTOM: =
0px; MARGIN: 0px; OVERFLOW: hidden; WIDTH: 48%; PADDING-TOP: 0px; ZOOM: =
1
}
.x-form .x-form-btns-ct .x-btn {
	CLEAR: none; FLOAT: right
}
.x-form .x-form-btns-ct .x-form-btns TD {
	BORDER-TOP-WIDTH: 0px; PADDING-RIGHT: 0px; PADDING-LEFT: 0px; =
BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; BORDER-RIGHT-WIDTH: 0px
}
.x-form .x-form-btns-ct .x-form-btns-right TABLE {
	CLEAR: none; FLOAT: right
}
.x-form .x-form-btns-ct .x-form-btns-left TABLE {
	CLEAR: none; FLOAT: left
}
.x-form .x-form-btns-ct .x-form-btns-center {
	TEXT-ALIGN: center
}
.x-form .x-form-btns-ct .x-form-btns-center TABLE {
	MARGIN: 0px auto
}
.x-form .x-form-btns-ct TABLE TD.x-form-btn-td {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 3px
}
.x-form .x-form-btns-ct .x-btn-focus .x-btn-left {
	BACKGROUND-POSITION: 0px -147px
}
.x-form .x-form-btns-ct .x-btn-focus .x-btn-right {
	BACKGROUND-POSITION: 0px -168px
}
.x-form .x-form-btns-ct .x-btn-focus .x-btn-center {
	BACKGROUND-POSITION: 0px -189px
}
.x-form .x-form-btns-ct .x-btn-click .x-btn-center {
	BACKGROUND-POSITION: 0px -126px
}
.x-form .x-form-btns-ct .x-btn-click .x-btn-right {
	BACKGROUND-POSITION: 0px -84px
}
.x-form .x-form-btns-ct .x-btn-click .x-btn-left {
	BACKGROUND-POSITION: 0px -63px
}
.x-form-invalid-icon {
	DISPLAY: block; BACKGROUND: url(../images/default/form/exclamation.gif) =
no-repeat 0px 2px; LEFT: 0px; VISIBILITY: hidden; WIDTH: 16px; POSITION: =
absolute; TOP: 0px; HEIGHT: 18px
}
.x-fieldset {
	BORDER-RIGHT: #b5b8c8 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#b5b8c8 1px solid; DISPLAY: block; PADDING-LEFT: 10px; MARGIN-BOTTOM: =
10px; PADDING-BOTTOM: 10px; BORDER-LEFT: #b5b8c8 1px solid; PADDING-TOP: =
10px; BORDER-BOTTOM: #b5b8c8 1px solid
}
.x-fieldset LEGEND {
	FONT: bold 11px tahoma,arial,helvetica,sans-serif; COLOR: #15428b
}
.ext-ie .x-fieldset LEGEND {
	MARGIN-BOTTOM: 10px
}
.ext-ie .x-fieldset {
	PADDING-BOTTOM: 10px; PADDING-TOP: 0px
}
.x-fieldset LEGEND .x-tool-toggle {
	FLOAT: left! important; MARGIN-LEFT: 0px; MARGIN-RIGHT: 3px
}
.x-fieldset LEGEND INPUT {
	FLOAT: left! important; WIDTH: 13px; MARGIN-RIGHT: 3px; HEIGHT: 13px
}
FIELDSET.x-panel-collapsed {
	BORDER-TOP-WIDTH: 1px! important; BORDER-LEFT-WIDTH: 0px! important; =
BORDER-BOTTOM-WIDTH: 0px! important; PADDING-BOTTOM: 0px! important; =
BORDER-RIGHT-WIDTH: 0px! important
}
FIELDSET.x-panel-collapsed .x-fieldset-bwrap {
	LEFT: -1000px; VISIBILITY: hidden; POSITION: absolute; TOP: -1000px
}
.ext-ie .x-fieldset-bwrap {
	ZOOM: 1
}
.ext-ie TD .x-form-text {
	POSITION: relative; TOP: -1px
}
.x-fieldset-noborder {
	BORDER-RIGHT: transparent 0px; BORDER-TOP: transparent 0px; =
BORDER-LEFT: transparent 0px; BORDER-BOTTOM: transparent 0px
}
.x-fieldset-noborder LEGEND {
	MARGIN-LEFT: -3px
}
.ext-ie .x-fieldset-noborder LEGEND {
	MARGIN-BOTTOM: 23px; POSITION: relative
}
.ext-ie .x-fieldset-noborder LEGEND SPAN {
	LEFT: -5px; POSITION: absolute
}
.ext-gecko .x-window-body .x-form-item {
	OVERFLOW: auto; -moz-outline: none
}
.ext-gecko .x-form-item {
	-moz-outline: none
}
.x-hide-label LABEL.x-form-item-label {
	DISPLAY: none
}
.x-hide-label .x-form-element {
	PADDING-LEFT: 0px! important
}
.x-fieldset {
	OVERFLOW: hidden
}
.x-fieldset-bwrap {
	OVERFLOW: hidden; ZOOM: 1
}
.x-fieldset-body {
	OVERFLOW: hidden
}
.x-btn {
	FONT: 11px tahoma,verdana,helvetica; CURSOR: pointer; WHITE-SPACE: =
nowrap
}
.x-btn BUTTON {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 3px; BORDER-TOP: 0px; PADDING-LEFT: =
3px; BACKGROUND: none transparent scroll repeat 0% 0%; MARGIN: 0px; =
FONT: 11px tahoma,verdana,helvetica; OVERFLOW: visible; BORDER-LEFT: =
0px; WIDTH: auto; CURSOR: pointer; BORDER-BOTTOM: 0px; -moz-outline: 0 =
none; outline: 0 none
}
* HTML .ext-ie .x-btn BUTTON {
	WIDTH: 1px
}
.ext-gecko .x-btn BUTTON {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px
}
.ext-ie .x-btn BUTTON {
	PADDING-TOP: 2px
}
.x-btn-icon .x-btn-center .x-btn-text {
	PADDING-RIGHT: 0px; BACKGROUND-POSITION: center 50%; PADDING-LEFT: 0px; =
PADDING-BOTTOM: 0px; WIDTH: 16px; CURSOR: pointer; PADDING-TOP: 0px; =
BACKGROUND-REPEAT: no-repeat; WHITE-SPACE: nowrap; HEIGHT: 16px
}
.x-btn-icon .x-btn-center {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; PADDING-BOTTOM: 1px; =
PADDING-TOP: 1px
}
.x-btn EM {
	FONT-WEIGHT: normal; FONT-STYLE: normal
}
.x-btn-text-icon .x-btn-center .x-btn-text {
	PADDING-RIGHT: 0px; BACKGROUND-POSITION: 0px 2px; PADDING-LEFT: 18px; =
PADDING-BOTTOM: 2px; PADDING-TOP: 3px; BACKGROUND-REPEAT: no-repeat
}
.x-btn-left {
	FONT-SIZE: 1px; LINE-HEIGHT: 1px
}
.x-btn-right {
	FONT-SIZE: 1px; LINE-HEIGHT: 1px
}
.x-btn-left {
	BACKGROUND: url(../images/default/button/btn-sprite.gif) no-repeat 0px =
0px; WIDTH: 3px; HEIGHT: 21px
}
.x-btn-right {
	BACKGROUND: url(../images/default/button/btn-sprite.gif) no-repeat 0px =
-21px; WIDTH: 3px; HEIGHT: 21px
}
.x-btn-left I {
	DISPLAY: block; FONT-SIZE: 1px; OVERFLOW: hidden; WIDTH: 3px; =
LINE-HEIGHT: 1px
}
.x-btn-right I {
	DISPLAY: block; FONT-SIZE: 1px; OVERFLOW: hidden; WIDTH: 3px; =
LINE-HEIGHT: 1px
}
.x-btn-center {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; BACKGROUND: =
url(../images/default/button/btn-sprite.gif) repeat-x 0px -42px; =
PADDING-BOTTOM: 0px; VERTICAL-ALIGN: middle; CURSOR: pointer; =
PADDING-TOP: 0px; WHITE-SPACE: nowrap; TEXT-ALIGN: center
}
.x-btn-over .x-btn-left {
	BACKGROUND-POSITION: 0px -63px
}
.x-btn-over .x-btn-right {
	BACKGROUND-POSITION: 0px -84px
}
.x-btn-over .x-btn-center {
	BACKGROUND-POSITION: 0px -105px
}
.x-btn-click .x-btn-center {
	BACKGROUND-POSITION: 0px -126px
}
.x-btn-menu-active .x-btn-center {
	BACKGROUND-POSITION: 0px -126px
}
.x-btn-disabled * {
	CURSOR: default! important; COLOR: gray! important
}
.x-btn-menu-text-wrap .x-btn-center {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.ext-gecko .x-btn-menu-text-wrap .x-btn-center {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-btn-menu-arrow-wrap .x-btn-center {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-btn-menu-arrow-wrap .x-btn-center BUTTON {
	PADDING-RIGHT: 0px! important; DISPLAY: block; PADDING-LEFT: 0px! =
important; BACKGROUND: url(../images/default/button/btn-arrow.gif) =
no-repeat left 3px; PADDING-BOTTOM: 0px! important; WIDTH: 12px! =
important; PADDING-TOP: 0px! important; HEIGHT: 21px
}
.x-btn-with-menu .x-btn-center {
	PADDING-RIGHT: 2px! important
}
.x-btn-with-menu .x-btn-center EM {
	PADDING-RIGHT: 10px; DISPLAY: block; BACKGROUND: =
url(../images/default/toolbar/btn-arrow.gif) no-repeat right 0px
}
.x-btn-text-icon .x-btn-with-menu .x-btn-center EM {
	PADDING-RIGHT: 10px; DISPLAY: block; BACKGROUND: =
url(../images/default/toolbar/btn-arrow.gif) no-repeat right 3px
}
.x-btn-pressed .x-btn-left {
	BACKGROUND: url(../images/default/button/btn-sprite.gif) no-repeat 0px =
-63px
}
.x-btn-pressed .x-btn-right {
	BACKGROUND: url(../images/default/button/btn-sprite.gif) no-repeat 0px =
-84px
}
.x-btn-pressed .x-btn-center {
	BACKGROUND: url(../images/default/button/btn-sprite.gif) repeat-x 0px =
-126px
}
.x-toolbar {
	BORDER-RIGHT: #a9bfd3 0px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#a9bfd3 0px solid; DISPLAY: block; PADDING-LEFT: 2px; BACKGROUND: =
url(../images/default/toolbar/bg.gif) #d0def0 repeat-x left top; =
PADDING-BOTTOM: 2px; BORDER-LEFT: #a9bfd3 0px solid; PADDING-TOP: 2px; =
BORDER-BOTTOM: #a9bfd3 1px solid; ZOOM: 1; POSITION: relative
}
.x-toolbar .x-item-disabled .x-btn-icon {
	FILTER: alpha(opacity=3D35); -moz-opacity: .35; opacity: .35
}
.x-toolbar TD {
	VERTICAL-ALIGN: middle
}
.mso .x-toolbar {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; BACKGROUND: =
url(../images/default/grid/mso-hd.gif); BORDER-LEFT: 0px; BORDER-BOTTOM: =
0px
}
.x-grid-mso .x-toolbar {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; BACKGROUND: =
url(../images/default/grid/mso-hd.gif); BORDER-LEFT: 0px; BORDER-BOTTOM: =
0px
}
.x-toolbar TD {
	FONT: 11px tahoma,arial,helvetica,sans-serif; WHITE-SPACE: nowrap
}
.x-toolbar SPAN {
	FONT: 11px tahoma,arial,helvetica,sans-serif; WHITE-SPACE: nowrap
}
.x-toolbar INPUT {
	FONT: 11px tahoma,arial,helvetica,sans-serif; WHITE-SPACE: nowrap
}
.x-toolbar DIV {
	FONT: 11px tahoma,arial,helvetica,sans-serif; WHITE-SPACE: nowrap
}
.x-toolbar SELECT {
	FONT: 11px tahoma,arial,helvetica,sans-serif; WHITE-SPACE: nowrap
}
.x-toolbar LABEL {
	FONT: 11px tahoma,arial,helvetica,sans-serif; WHITE-SPACE: nowrap
}
.x-toolbar .x-item-disabled {
	FILTER: alpha(opacity=3D60); CURSOR: default; COLOR: gray; =
-moz-opacity: .6; opacity: .6
}
.x-toolbar .x-item-disabled * {
	CURSOR: default; COLOR: gray
}
.x-toolbar .x-btn-left {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-toolbar .x-btn-right {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-toolbar .x-btn-center {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; BACKGROUND: none transparent =
scroll repeat 0% 0%; PADDING-BOTTOM: 0px; PADDING-TOP: 0px
}
.x-toolbar .x-btn-menu-text-wrap .x-btn-center BUTTON {
	PADDING-RIGHT: 2px
}
.ext-gecko .x-toolbar .x-btn-menu-text-wrap .x-btn-center BUTTON {
	PADDING-RIGHT: 0px
}
.x-toolbar .x-btn-menu-arrow-wrap .x-btn-center BUTTON {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-toolbar .x-btn-menu-arrow-wrap .x-btn-center BUTTON {
	BACKGROUND: url(../images/default/toolbar/btn-arrow.gif) no-repeat 0px =
3px; WIDTH: 12px
}
.x-toolbar .x-btn-text-icon .x-btn-menu-arrow-wrap .x-btn-center BUTTON =
{
	BACKGROUND: url(../images/default/toolbar/btn-arrow.gif) no-repeat 0px =
3px; WIDTH: 12px
}
.x-toolbar .x-btn-over .x-btn-menu-arrow-wrap .x-btn-center BUTTON {
	BACKGROUND-POSITION: 0px -47px
}
.x-toolbar .x-btn-over .x-btn-left {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px 0px
}
.x-toolbar .x-btn-over .x-btn-right {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -21px
}
.x-toolbar .x-btn-over .x-btn-center {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) repeat-x =
0px -42px
}
.x-toolbar .x-btn-click .x-btn-left {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -63px
}
.x-toolbar .x-btn-pressed .x-btn-left {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -63px
}
.x-toolbar .x-btn-menu-active .x-btn-left {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -63px
}
.x-toolbar .x-btn-click .x-btn-right {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -84px
}
.x-toolbar .x-btn-pressed .x-btn-right {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -84px
}
.x-toolbar .x-btn-menu-active .x-btn-right {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) no-repeat =
0px -84px
}
.x-toolbar .x-btn-click .x-btn-center {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) repeat-x =
0px -105px
}
.x-toolbar .x-btn-pressed .x-btn-center {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) repeat-x =
0px -105px
}
.x-toolbar .x-btn-menu-active .x-btn-center {
	BACKGROUND: url(../images/default/toolbar/tb-btn-sprite.gif) repeat-x =
0px -105px
}
.x-toolbar .x-btn-with-menu .x-btn-center EM {
	PADDING-RIGHT: 8px
}
.x-toolbar .ytb-text {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; =
PADDING-TOP: 2px
}
.x-toolbar .ytb-sep {
	BORDER-TOP-WIDTH: 0px; BACKGROUND-POSITION: center 50%; DISPLAY: block; =
BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 1px; BACKGROUND-IMAGE: =
url(../images/default/grid/grid-blue-split.gif); BORDER-BOTTOM-WIDTH: =
0px; MARGIN: 0px 2px; OVERFLOW: hidden; WIDTH: 4px; CURSOR: default; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 16px; BORDER-RIGHT-WIDTH: 0px
}
.x-toolbar .ytb-spacer {
	WIDTH: 2px
}
.x-tbar-page-number {
	WIDTH: 24px; HEIGHT: 14px
}
.x-tbar-page-first {
	BACKGROUND-IMAGE: url(../images/default/grid/page-first.gif)! important
}
.x-tbar-loading {
	BACKGROUND-IMAGE: url(../images/default/grid/done.gif)! important
}
.x-tbar-page-last {
	BACKGROUND-IMAGE: url(../images/default/grid/page-last.gif)! important
}
.x-tbar-page-next {
	BACKGROUND-IMAGE: url(../images/default/grid/page-next.gif)! important
}
.x-tbar-page-prev {
	BACKGROUND-IMAGE: url(../images/default/grid/page-prev.gif)! important
}
.x-item-disabled .x-tbar-loading {
	BACKGROUND-IMAGE: url(../images/default/grid/loading.gif)! important
}
.x-item-disabled .x-tbar-page-first {
	BACKGROUND-IMAGE: url(../images/default/grid/page-first-disabled.gif)! =
important
}
.x-item-disabled .x-tbar-page-last {
	BACKGROUND-IMAGE: url(../images/default/grid/page-last-disabled.gif)! =
important
}
.x-item-disabled .x-tbar-page-next {
	BACKGROUND-IMAGE: url(../images/default/grid/page-next-disabled.gif)! =
important
}
.x-item-disabled .x-tbar-page-prev {
	BACKGROUND-IMAGE: url(../images/default/grid/page-prev-disabled.gif)! =
important
}
.x-paging-info {
	RIGHT: 8px; COLOR: #444; POSITION: absolute; TOP: 5px
}
.x-statusbar .x-status-text {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; PADDING-BOTTOM: 0px; CURSOR: =
default; LINE-HEIGHT: 21px; PADDING-TOP: 0px; HEIGHT: 21px
}
.x-statusbar .x-status-busy {
	PADDING-LEFT: 25px; BACKGROUND: url(../images/default/grid/loading.gif) =
no-repeat 3px 3px
}
.x-statusbar .x-status-text-panel {
	BORDER-RIGHT: #fff 1px solid; PADDING-RIGHT: 8px; BORDER-TOP: #99bbe8 =
1px solid; PADDING-LEFT: 5px; PADDING-BOTTOM: 2px; BORDER-LEFT: #99bbe8 =
1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #fff 1px solid
}
.x-resizable-handle {
	FONT-SIZE: 1px; Z-INDEX: 100; BACKGROUND: white; FILTER: =
alpha(opacity=3D0); OVERFLOW: hidden; LINE-HEIGHT: 6px; ZOOM: 1; =
POSITION: absolute; opacity: 0
}
.x-resizable-handle-east {
	RIGHT: 0px; WIDTH: 6px; CURSOR: e-resize; TOP: 0px; HEIGHT: 100%
}
.ext-ie .x-resizable-handle-east {
	MARGIN-RIGHT: -1px
}
.x-resizable-handle-south {
	LEFT: 0px; WIDTH: 100%; CURSOR: s-resize; BOTTOM: 0px; HEIGHT: 6px
}
.ext-ie .x-resizable-handle-south {
	MARGIN-BOTTOM: -1px
}
.x-resizable-handle-west {
	LEFT: 0px; WIDTH: 6px; CURSOR: w-resize; TOP: 0px; HEIGHT: 100%
}
.x-resizable-handle-north {
	LEFT: 0px; WIDTH: 100%; CURSOR: n-resize; TOP: 0px; HEIGHT: 6px
}
.x-resizable-handle-southeast {
	Z-INDEX: 101; RIGHT: 0px; WIDTH: 6px; CURSOR: se-resize; BOTTOM: 0px; =
HEIGHT: 6px
}
.x-resizable-handle-northwest {
	Z-INDEX: 101; LEFT: 0px; WIDTH: 6px; CURSOR: nw-resize; TOP: 0px; =
HEIGHT: 6px
}
.x-resizable-handle-northeast {
	Z-INDEX: 101; RIGHT: 0px; WIDTH: 6px; CURSOR: ne-resize; TOP: 0px; =
HEIGHT: 6px
}
.x-resizable-handle-southwest {
	Z-INDEX: 101; LEFT: 0px; WIDTH: 6px; CURSOR: sw-resize; BOTTOM: 0px; =
HEIGHT: 6px
}
.x-resizable-over .x-resizable-handle {
	FILTER: alpha(opacity=3D100); opacity: 1
}
.x-resizable-pinned .x-resizable-handle {
	FILTER: alpha(opacity=3D100); opacity: 1
}
.x-resizable-over .x-resizable-handle-east {
	BACKGROUND: url(../images/default/sizer/e-handle.gif) left 50%
}
.x-resizable-pinned .x-resizable-handle-east {
	BACKGROUND: url(../images/default/sizer/e-handle.gif) left 50%
}
.x-resizable-over .x-resizable-handle-west {
	BACKGROUND: url(../images/default/sizer/e-handle.gif) left 50%
}
.x-resizable-pinned .x-resizable-handle-west {
	BACKGROUND: url(../images/default/sizer/e-handle.gif) left 50%
}
.x-resizable-over .x-resizable-handle-south {
	BACKGROUND: url(../images/default/sizer/s-handle.gif) 50% top
}
.x-resizable-pinned .x-resizable-handle-south {
	BACKGROUND: url(../images/default/sizer/s-handle.gif) 50% top
}
.x-resizable-over .x-resizable-handle-north {
	BACKGROUND: url(../images/default/sizer/s-handle.gif) 50% top
}
.x-resizable-pinned .x-resizable-handle-north {
	BACKGROUND: url(../images/default/sizer/s-handle.gif) 50% top
}
.x-resizable-over .x-resizable-handle-southeast {
	BACKGROUND: url(../images/default/sizer/se-handle.gif) left top
}
.x-resizable-pinned .x-resizable-handle-southeast {
	BACKGROUND: url(../images/default/sizer/se-handle.gif) left top
}
.x-resizable-over .x-resizable-handle-northwest {
	BACKGROUND: url(../images/default/sizer/nw-handle.gif) right bottom
}
.x-resizable-pinned .x-resizable-handle-northwest {
	BACKGROUND: url(../images/default/sizer/nw-handle.gif) right bottom
}
.x-resizable-over .x-resizable-handle-northeast {
	BACKGROUND: url(../images/default/sizer/ne-handle.gif) left bottom
}
.x-resizable-pinned .x-resizable-handle-northeast {
	BACKGROUND: url(../images/default/sizer/ne-handle.gif) left bottom
}
.x-resizable-over .x-resizable-handle-southwest {
	BACKGROUND: url(../images/default/sizer/sw-handle.gif) right top
}
.x-resizable-pinned .x-resizable-handle-southwest {
	BACKGROUND: url(../images/default/sizer/sw-handle.gif) right top
}
.x-resizable-proxy {
	BORDER-RIGHT: #3b5a82 1px dashed; BORDER-TOP: #3b5a82 1px dashed; =
DISPLAY: none; Z-INDEX: 50000; LEFT: 0px; OVERFLOW: hidden; BORDER-LEFT: =
#3b5a82 1px dashed; BORDER-BOTTOM: #3b5a82 1px dashed; POSITION: =
absolute; TOP: 0px
}
.x-resizable-overlay {
	DISPLAY: none; Z-INDEX: 200000; BACKGROUND: white; FILTER: =
alpha(opacity=3D0); LEFT: 0px; WIDTH: 100%; POSITION: absolute; TOP: =
0px; HEIGHT: 100%; -moz-opacity: 0; opacity: 0
}
.x-grid3 {
	OVERFLOW: hidden; POSITION: relative; BACKGROUND-COLOR: #fff
}
.x-grid-panel .x-panel-body {
	OVERFLOW: hidden! important
}
.x-grid-panel .x-panel-mc .x-panel-body {
	BORDER-RIGHT: #99bbe8 1px solid; BORDER-TOP: #99bbe8 1px solid; =
BORDER-LEFT: #99bbe8 1px solid; BORDER-BOTTOM: #99bbe8 1px solid
}
.x-grid3 TABLE {
	TABLE-LAYOUT: fixed
}
.x-grid3-viewport {
	OVERFLOW: hidden
}
.x-grid3-hd-row TD {
	FONT: 11px arial,tahoma,helvetica,sans-serif; -moz-outline: none; =
-moz-user-focus: normal
}
.x-grid3-row TD {
	FONT: 11px arial,tahoma,helvetica,sans-serif; -moz-outline: none; =
-moz-user-focus: normal
}
.x-grid3-summary-row TD {
	FONT: 11px arial,tahoma,helvetica,sans-serif; -moz-outline: none; =
-moz-user-focus: normal
}
.x-grid3-row TD {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; VERTICAL-ALIGN: top; =
LINE-HEIGHT: 13px; -moz-user-select: none
}
.x-grid3-summary-row TD {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; VERTICAL-ALIGN: top; =
LINE-HEIGHT: 13px; -moz-user-select: none
}
.x-grid3-hd-row TD {
	BORDER-RIGHT: #d0d0d0 1px solid; VERTICAL-ALIGN: middle; BORDER-LEFT: =
#eee 1px solid; LINE-HEIGHT: 15px
}
.x-grid3-hd-row .x-grid3-marker-hd {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 3px
}
.x-grid3-row .x-grid3-marker {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 3px
}
.x-grid3-cell-inner {
	PADDING-RIGHT: 3px; PADDING-LEFT: 5px; PADDING-BOTTOM: 3px; OVERFLOW: =
hidden; PADDING-TOP: 3px; WHITE-SPACE: nowrap; TEXT-OVERFLOW: ellipsis; =
-o-text-overflow: ellipsis
}
.x-grid3-hd-inner {
	PADDING-RIGHT: 3px; PADDING-LEFT: 5px; PADDING-BOTTOM: 3px; OVERFLOW: =
hidden; PADDING-TOP: 3px; WHITE-SPACE: nowrap; TEXT-OVERFLOW: ellipsis; =
-o-text-overflow: ellipsis
}
.x-grid3-hd-inner {
	PADDING-RIGHT: 3px; PADDING-LEFT: 5px; PADDING-BOTTOM: 4px; =
PADDING-TOP: 4px; POSITION: relative
}
.x-grid3-row-body {
	WHITE-SPACE: normal
}
.x-grid3-body-cell {
	-moz-outline: 0 none; outline: 0 none
}
.ext-ie .x-grid3-cell-inner {
	WIDTH: 100%
}
.ext-ie .x-grid3-hd-inner {
	WIDTH: 100%
}
.ext-strict .x-grid3-cell-inner {
	WIDTH: auto
}
.ext-strict .x-grid3-hd-inner {
	WIDTH: auto
}
.x-grid-row-loading {
	BACKGROUND: url(../images/default/shared/loading-balls.gif) #fff =
no-repeat center center
}
.x-grid-page {
	OVERFLOW: hidden
}
.x-grid3-row {
	BORDER-RIGHT: #ededed 1px solid; BORDER-TOP: #fff 1px solid; =
BORDER-LEFT: #ededed 1px solid; WIDTH: 100%; CURSOR: default; =
BORDER-BOTTOM: #ededed 1px solid
}
.x-grid3-row-alt {
	BACKGROUND-COLOR: #fafafa
}
.x-grid3-row-over {
	BORDER-RIGHT: #ddd 1px solid; BORDER-TOP: #ddd 1px solid; BACKGROUND: =
url(../images/default/grid/row-over.gif) #efefef repeat-x left top; =
BORDER-LEFT: #ddd 1px solid; BORDER-BOTTOM: #ddd 1px solid
}
.x-grid3-resize-proxy {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; Z-INDEX: 7; LEFT: 0px; VISIBILITY: =
hidden; OVERFLOW: hidden; BORDER-LEFT: 0px; WIDTH: 1px; CURSOR: =
col-resize; BORDER-BOTTOM: 0px; POSITION: absolute; TOP: 0px; HEIGHT: =
100px; BACKGROUND-COLOR: #777
}
.x-grid3-resize-marker {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; Z-INDEX: 7; LEFT: 0px; VISIBILITY: =
hidden; OVERFLOW: hidden; BORDER-LEFT: 0px; WIDTH: 1px; BORDER-BOTTOM: =
0px; POSITION: absolute; TOP: 0px; HEIGHT: 100px; BACKGROUND-COLOR: #777
}
.x-grid3-focus {
	FONT-SIZE: 1px; LEFT: 0px; WIDTH: 1px; LINE-HEIGHT: 1px; POSITION: =
absolute; TOP: 0px; HEIGHT: 1px; -moz-user-select: normal; =
-khtml-user-select: normal; -moz-outline: 0 none; outline: 0 none
}
.x-grid3-header {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; BACKGROUND: =
url(../images/default/grid/grid3-hrow.gif) #f9f9f9 repeat-x 0px bottom; =
PADDING-BOTTOM: 0px; CURSOR: default; PADDING-TOP: 1px; ZOOM: 1
}
.x-grid3-header-pop {
	CLEAR: none; FLOAT: right; BORDER-LEFT: #d0d0d0 1px solid
}
.x-grid3-header-pop-inner {
	BACKGROUND: url(../images/default/grid/hd-pop.gif) no-repeat center =
center; BORDER-LEFT: #eee 1px solid; WIDTH: 14px; HEIGHT: 19px
}
.ext-ie .x-grid3-header-pop-inner {
	WIDTH: 15px
}
.ext-strict .x-grid3-header-pop-inner {
	WIDTH: 14px
}
.x-grid3-header-inner {
	FLOAT: left; OVERFLOW: hidden; ZOOM: 1
}
.x-grid3-header-offset {
	PADDING-LEFT: 1px; WIDTH: 10000px
}
TD.x-grid3-hd-over {
	BORDER-RIGHT: #aaccf6 1px solid; BORDER-LEFT: #aaccf6 1px solid
}
TD.sort-desc {
	BORDER-RIGHT: #aaccf6 1px solid; BORDER-LEFT: #aaccf6 1px solid
}
TD.sort-asc {
	BORDER-RIGHT: #aaccf6 1px solid; BORDER-LEFT: #aaccf6 1px solid
}
TD.x-grid3-hd-menu-open {
	BORDER-RIGHT: #aaccf6 1px solid; BORDER-LEFT: #aaccf6 1px solid
}
TD.x-grid3-hd-over .x-grid3-hd-inner {
	BACKGROUND: url(../images/default/grid/grid3-hrow-over.gif) #ebf3fd =
repeat-x left bottom
}
TD.sort-desc .x-grid3-hd-inner {
	BACKGROUND: url(../images/default/grid/grid3-hrow-over.gif) #ebf3fd =
repeat-x left bottom
}
TD.sort-asc .x-grid3-hd-inner {
	BACKGROUND: url(../images/default/grid/grid3-hrow-over.gif) #ebf3fd =
repeat-x left bottom
}
TD.x-grid3-hd-menu-open .x-grid3-hd-inner {
	BACKGROUND: url(../images/default/grid/grid3-hrow-over.gif) #ebf3fd =
repeat-x left bottom
}
.x-grid3-sort-icon {
	DISPLAY: none; MARGIN-LEFT: 3px; VERTICAL-ALIGN: middle; WIDTH: 13px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 4px
}
.sort-asc .x-grid3-sort-icon {
	DISPLAY: inline; BACKGROUND-IMAGE: =
url(../images/default/grid/sort_asc.gif)
}
.sort-desc .x-grid3-sort-icon {
	DISPLAY: inline; BACKGROUND-IMAGE: =
url(../images/default/grid/sort_desc.gif)
}
.ext-strict .ext-ie .x-grid3-header-inner {
	POSITION: relative
}
.ext-strict .ext-ie6 .x-grid3-hd {
	POSITION: relative
}
.ext-strict .ext-ie6 .x-grid3-hd-inner {
	POSITION: static
}
.x-grid3-body {
	ZOOM: 1
}
.x-grid3-scroller {
	OVERFLOW: auto; ZOOM: 1; POSITION: relative
}
.x-grid3-cell-text {
	PADDING-RIGHT: 5px; DISPLAY: block; PADDING-LEFT: 5px; PADDING-BOTTOM: =
3px; COLOR: black; PADDING-TOP: 3px; -moz-user-select: none; =
-khtml-user-select: none
}
.x-grid3-hd-text {
	PADDING-RIGHT: 5px; DISPLAY: block; PADDING-LEFT: 5px; PADDING-BOTTOM: =
3px; COLOR: black; PADDING-TOP: 3px; -moz-user-select: none; =
-khtml-user-select: none
}
.x-grid3-split {
	BACKGROUND-POSITION: center 50%; DISPLAY: block; FONT-SIZE: 1px; =
Z-INDEX: 3; BACKGROUND-IMAGE: =
url(../images/default/grid/grid-split.gif); OVERFLOW: hidden; WIDTH: =
6px; CURSOR: col-resize; BACKGROUND-REPEAT: no-repeat; POSITION: =
absolute; TOP: 2px; HEIGHT: 16px
}
.x-grid3-hd-text {
	COLOR: #15428b
}
.x-dd-drag-proxy .x-grid3-hd-inner {
	BORDER-RIGHT: #aaccf6 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: =
#aaccf6 1px solid; PADDING-LEFT: 3px; BACKGROUND: =
url(../images/default/grid/grid3-hrow-over.gif) #ebf3fd repeat-x left =
bottom; PADDING-BOTTOM: 3px; OVERFLOW: hidden; BORDER-LEFT: #aaccf6 1px =
solid; WIDTH: 120px; PADDING-TOP: 3px; BORDER-BOTTOM: #aaccf6 1px solid
}
.col-move-top {
	FONT-SIZE: 1px; Z-INDEX: 20000; VISIBILITY: hidden; OVERFLOW: hidden; =
WIDTH: 9px; LINE-HEIGHT: 1px; POSITION: absolute; TOP: 0px; HEIGHT: 9px
}
.col-move-bottom {
	FONT-SIZE: 1px; Z-INDEX: 20000; VISIBILITY: hidden; OVERFLOW: hidden; =
WIDTH: 9px; LINE-HEIGHT: 1px; POSITION: absolute; TOP: 0px; HEIGHT: 9px
}
.col-move-top {
	BACKGROUND: url(../images/default/grid/col-move-top.gif) no-repeat left =
top
}
.col-move-bottom {
	BACKGROUND: url(../images/default/grid/col-move-bottom.gif) no-repeat =
left top
}
.x-grid3-row-selected {
	BORDER-RIGHT: #a3bae9 1px dotted; BORDER-TOP: #a3bae9 1px dotted; =
BACKGROUND: #dfe8f6; BORDER-LEFT: #a3bae9 1px dotted; BORDER-BOTTOM: =
#a3bae9 1px dotted
}
.x-grid3-cell-selected {
	COLOR: black; BACKGROUND-COLOR: #b8cfee! important
}
.x-grid3-cell-selected SPAN {
	COLOR: black! important
}
.x-grid3-cell-selected .x-grid3-cell-text {
	COLOR: black
}
.x-grid3-locked TD.x-grid3-row-marker {
	BORDER-RIGHT: #6fa0df 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: white =
1px solid; PADDING-LEFT: 0px; BACKGROUND: =
url(../images/default/grid/grid-hrow.gif) #ebeadb repeat-x 0px bottom; =
PADDING-BOTTOM: 0px; VERTICAL-ALIGN: middle! important; COLOR: black; =
PADDING-TOP: 0px; TEXT-ALIGN: center; BORDER-BOTTOM-STYLE: none! =
important
}
.x-grid3-locked .x-grid3-row-selected TD.x-grid3-row-marker {
	BORDER-RIGHT: #6fa0df 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: white =
1px solid; PADDING-LEFT: 0px; BACKGROUND: =
url(../images/default/grid/grid-hrow.gif) #ebeadb repeat-x 0px bottom; =
PADDING-BOTTOM: 0px; VERTICAL-ALIGN: middle! important; COLOR: black; =
PADDING-TOP: 0px; TEXT-ALIGN: center; BORDER-BOTTOM-STYLE: none! =
important
}
.x-grid3-locked TD.x-grid3-row-marker DIV {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; PADDING-BOTTOM: 0px; COLOR: =
#15428b! important; PADDING-TOP: 0px; TEXT-ALIGN: center
}
.x-grid3-locked .x-grid3-row-selected TD.x-grid3-row-marker DIV {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; PADDING-BOTTOM: 0px; COLOR: =
#15428b! important; PADDING-TOP: 0px; TEXT-ALIGN: center
}
.x-grid3-dirty-cell {
	BACKGROUND: url(../images/default/grid/dirty.gif) no-repeat 0px 0px
}
.x-grid3-topbar {
	DISPLAY: none; FONT: 11px arial,tahoma,helvetica,sans-serif; OVERFLOW: =
hidden; ZOOM: 1; POSITION: relative
}
.x-grid3-bottombar {
	DISPLAY: none; FONT: 11px arial,tahoma,helvetica,sans-serif; OVERFLOW: =
hidden; ZOOM: 1; POSITION: relative
}
.x-grid3-topbar .x-toolbar {
	BORDER-RIGHT: 0px
}
.x-grid3-bottombar .x-toolbar {
	BORDER-RIGHT: 0px; BORDER-TOP: #a9bfd3 1px solid; BORDER-BOTTOM: 0px
}
.x-props-grid .x-grid3-cell {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; PADDING-BOTTOM: 1px; =
PADDING-TOP: 1px
}
.x-props-grid .x-grid3-td-name .x-grid3-cell-inner {
	PADDING-LEFT: 12px; BACKGROUND: =
url(../images/default/grid/grid3-special-col-bg.gif) repeat-y -16px 50%; =
COLOR: black! important
}
.x-props-grid .x-grid3-body .x-grid3-td-name {
	BORDER-RIGHT: #eee 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: 0px; =
PADDING-LEFT: 1px; BACKGROUND: white; PADDING-BOTTOM: 1px; BORDER-LEFT: =
0px; PADDING-TOP: 1px; BORDER-BOTTOM: 0px
}
.xg-hmenu-sort-asc .x-menu-item-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/hmenu-asc.gif)
}
.xg-hmenu-sort-desc .x-menu-item-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/hmenu-desc.gif)
}
.xg-hmenu-lock .x-menu-item-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/hmenu-lock.gif)
}
.xg-hmenu-unlock .x-menu-item-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/hmenu-unlock.gif)
}
.x-grid3-col-dd {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
0px; BORDER-LEFT: 0px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px
}
.x-dd-drag-ghost .x-grid3-dd-wrap {
	PADDING-RIGHT: 3px; PADDING-LEFT: 1px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 1px
}
.x-grid3-hd {
	-moz-user-select: none
}
.x-grid3-hd-btn {
	DISPLAY: none; Z-INDEX: 2; RIGHT: 0px; BACKGROUND: =
url(../images/default/grid/grid3-hd-btn.gif) #c3daf9 no-repeat left =
center; WIDTH: 14px; CURSOR: pointer; POSITION: absolute; TOP: 0px
}
.x-grid3-hd-over .x-grid3-hd-btn {
	DISPLAY: block
}
.x-grid3-hd-menu-open .x-grid3-hd-btn {
	DISPLAY: block
}
A.x-grid3-hd-btn:hover {
	BACKGROUND-POSITION: -14px center
}
.x-grid3-body .x-grid3-td-expander {
	BACKGROUND: url(../images/default/grid/grid3-special-col-bg.gif) =
repeat-y right 50%
}
.x-grid3-body .x-grid3-td-expander .x-grid3-cell-inner {
	PADDING-RIGHT: 0px! important; PADDING-LEFT: 0px! important; =
PADDING-BOTTOM: 0px! important; PADDING-TOP: 0px! important; HEIGHT: =
100%
}
.x-grid3-row-expander {
	BACKGROUND-POSITION: 4px 2px; BACKGROUND-IMAGE: =
url(../images/default/grid/row-expand-sprite.gif); WIDTH: 100%; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px; BACKGROUND-COLOR: =
transparent
}
.x-grid3-row-collapsed .x-grid3-row-expander {
	BACKGROUND-POSITION: 4px 2px
}
.x-grid3-row-expanded .x-grid3-row-expander {
	BACKGROUND-POSITION: -21px 2px
}
.x-grid3-row-collapsed .x-grid3-row-body {
	DISPLAY: none! important
}
.x-grid3-row-expanded .x-grid3-row-body {
	DISPLAY: block! important
}
.x-grid3-body .x-grid3-td-checker {
	BACKGROUND: url(../images/default/grid/grid3-special-col-bg.gif) =
repeat-y right 50%
}
.x-grid3-body .x-grid3-td-checker .x-grid3-cell-inner {
	PADDING-RIGHT: 0px! important; PADDING-LEFT: 0px! important; =
PADDING-BOTTOM: 0px! important; PADDING-TOP: 0px! important; HEIGHT: =
100%
}
.x-grid3-header .x-grid3-td-checker .x-grid3-hd-inner {
	PADDING-RIGHT: 0px! important; PADDING-LEFT: 0px! important; =
PADDING-BOTTOM: 0px! important; PADDING-TOP: 0px! important; HEIGHT: =
100%
}
.x-grid3-row-checker {
	BACKGROUND-POSITION: 2px 2px; BACKGROUND-IMAGE: =
url(../images/default/grid/row-check-sprite.gif); WIDTH: 100%; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px; BACKGROUND-COLOR: =
transparent
}
.x-grid3-hd-checker {
	BACKGROUND-POSITION: 2px 2px; BACKGROUND-IMAGE: =
url(../images/default/grid/row-check-sprite.gif); WIDTH: 100%; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px; BACKGROUND-COLOR: =
transparent
}
.x-grid3-row .x-grid3-row-checker {
	BACKGROUND-POSITION: 2px 2px
}
.x-grid3-row-selected .x-grid3-row-checker {
	BACKGROUND-POSITION: -23px 2px
}
.x-grid3-hd-checker-on .x-grid3-hd-checker {
	BACKGROUND-POSITION: -23px 2px
}
.x-grid3-hd-checker {
	BACKGROUND-POSITION: 2px 3px
}
.x-grid3-hd-checker-on .x-grid3-hd-checker {
	BACKGROUND-POSITION: -23px 3px
}
.x-grid3-body .x-grid3-td-numberer {
	BACKGROUND: url(../images/default/grid/grid3-special-col-bg.gif) =
repeat-y right 50%
}
.x-grid3-body .x-grid3-td-numberer .x-grid3-cell-inner {
	PADDING-RIGHT: 5px! important; PADDING-LEFT: 0px! important; =
PADDING-BOTTOM: 0px! important; COLOR: #444; PADDING-TOP: 3px! =
important; TEXT-ALIGN: right
}
.x-grid3-body .x-grid3-row-selected .x-grid3-td-numberer {
	BACKGROUND: url(../images/default/grid/grid3-special-col-sel-bg.gif) =
repeat-y right 50%
}
.x-grid3-body .x-grid3-row-selected .x-grid3-td-checker {
	BACKGROUND: url(../images/default/grid/grid3-special-col-sel-bg.gif) =
repeat-y right 50%
}
.x-grid3-body .x-grid3-row-selected .x-grid3-td-expander {
	BACKGROUND: url(../images/default/grid/grid3-special-col-sel-bg.gif) =
repeat-y right 50%
}
.x-grid3-body .x-grid3-check-col-td .x-grid3-cell-inner {
	PADDING-RIGHT: 0px! important; PADDING-LEFT: 0px! important; =
PADDING-BOTTOM: 0px! important; PADDING-TOP: 1px! important
}
.x-grid3-check-col {
	BACKGROUND-POSITION: center center; BACKGROUND-IMAGE: =
url(../images/default/menu/unchecked.gif); WIDTH: 100%; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 16px; BACKGROUND-COLOR: =
transparent
}
.x-grid3-check-col-on {
	BACKGROUND-POSITION: center center; BACKGROUND-IMAGE: =
url(../images/default/menu/checked.gif); WIDTH: 100%; BACKGROUND-REPEAT: =
no-repeat; HEIGHT: 16px; BACKGROUND-COLOR: transparent
}
.x-grid-group {
	ZOOM: 1
}
.x-grid-group-body {
	ZOOM: 1
}
.x-grid-group-hd {
	ZOOM: 1
}
.x-grid-group-hd {
	CURSOR: pointer; PADDING-TOP: 6px; BORDER-BOTTOM: #99bbe8 2px solid
}
.x-grid-group-hd DIV {
	PADDING-RIGHT: 4px; PADDING-LEFT: 17px; BACKGROUND: =
url(../images/default/grid/group-expand-sprite.gif) no-repeat 3px -47px; =
PADDING-BOTTOM: 4px; FONT: bold 11px tahoma,arial,helvetica,sans-serif; =
COLOR: #3764a0; PADDING-TOP: 4px
}
.x-grid-group-collapsed .x-grid-group-hd DIV {
	BACKGROUND-POSITION: 3px 3px
}
.x-grid-group-collapsed .x-grid-group-body {
	DISPLAY: none
}
.x-group-by-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/group-by.gif)
}
.x-cols-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/columns.gif)
}
.x-show-groups-icon {
	BACKGROUND-IMAGE: url(../images/default/grid/group-by.gif)
}
.ext-ie .x-grid3 .x-editor .x-form-text {
	POSITION: relative; TOP: -1px
}
.ext-ie .x-props-grid .x-editor .x-form-text {
	POSITION: static; TOP: 0px
}
.x-grid-empty {
	PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 10px; FONT: =
11px tahoma,arial,helvetica,sans-serif; COLOR: gray; PADDING-TOP: 10px
}
.ext-ie7 .x-grid-panel .x-panel-bbar {
	POSITION: relative
}
.x-dd-drag-proxy {
	Z-INDEX: 15000; LEFT: 0px; VISIBILITY: hidden; POSITION: absolute; TOP: =
0px
}
.x-dd-drag-ghost {
	BORDER-RIGHT: #bbb 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: #ddd 1px =
solid; PADDING-LEFT: 20px; FILTER: alpha(opacity=3D85); PADDING-BOTTOM: =
3px; FONT: 11px arial,helvetica,sans-serif; BORDER-LEFT: #ddd 1px solid; =
COLOR: black; PADDING-TOP: 3px; BORDER-BOTTOM: #bbb 1px solid; =
WHITE-SPACE: nowrap; BACKGROUND-COLOR: white; -moz-opacity: 0.85; =
opacity: .85
}
.x-dd-drag-repair .x-dd-drag-ghost {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; FILTER: alpha(opacity=3D40); PADDING-BOTTOM: 0px; BORDER-LEFT: 0px; =
PADDING-TOP: 0px; BORDER-BOTTOM: 0px; BACKGROUND-COLOR: transparent; =
-moz-opacity: 0.4; opacity: .4
}
.x-dd-drag-repair .x-dd-drop-icon {
	VISIBILITY: hidden
}
.x-dd-drop-icon {
	BACKGROUND-POSITION: center 50%; DISPLAY: block; Z-INDEX: 1; LEFT: 3px; =
WIDTH: 16px; BACKGROUND-REPEAT: no-repeat; POSITION: absolute; TOP: 3px; =
HEIGHT: 16px; BACKGROUND-COLOR: transparent
}
.x-dd-drop-nodrop .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/dd/drop-no.gif)
}
.x-dd-drop-ok .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/dd/drop-yes.gif)
}
.x-dd-drop-ok-add .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/dd/drop-add.gif)
}
.x-view-selector {
	BORDER-RIGHT: #39b 1px dotted; BORDER-TOP: #39b 1px dotted; BACKGROUND: =
#c3daf9; FILTER: alpha(opacity=3D50); LEFT: 0px; BORDER-LEFT: #39b 1px =
dotted; WIDTH: 0px; BORDER-BOTTOM: #39b 1px dotted; ZOOM: 1; POSITION: =
absolute; TOP: 0px; -moz-opacity: .5; opacity: .5
}
.x-tree .x-panel-body {
	BACKGROUND-COLOR: #fff
}
.ext-strict .ext-ie .x-tree .x-panel-bwrap {
	OVERFLOW: hidden; POSITION: relative
}
.x-tree-icon {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-ec-icon {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow-line {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow-end {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow-plus {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow-minus {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow-end-plus {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-elbow-end-minus {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; VERTICAL-ALIGN: top; BORDER-LEFT: =
0px; WIDTH: 16px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-node-collapsed .x-tree-node-icon {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BACKGROUND-POSITION: center 50%; =
BORDER-TOP: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; =
VERTICAL-ALIGN: top; BORDER-LEFT: 0px; WIDTH: 16px; PADDING-TOP: 0px; =
BORDER-BOTTOM: 0px; BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-node-expanded .x-tree-node-icon {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BACKGROUND-POSITION: center 50%; =
BORDER-TOP: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; =
VERTICAL-ALIGN: top; BORDER-LEFT: 0px; WIDTH: 16px; PADDING-TOP: 0px; =
BORDER-BOTTOM: 0px; BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.x-tree-node-leaf .x-tree-node-icon {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BACKGROUND-POSITION: center 50%; =
BORDER-TOP: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; =
VERTICAL-ALIGN: top; BORDER-LEFT: 0px; WIDTH: 16px; PADDING-TOP: 0px; =
BORDER-BOTTOM: 0px; BACKGROUND-REPEAT: no-repeat; HEIGHT: 18px
}
.ext-ie .x-tree-node-indent IMG {
	VERTICAL-ALIGN: middle! important
}
.ext-ie .x-tree-node-icon {
	VERTICAL-ALIGN: middle! important
}
.ext-ie .x-tree-ec-icon {
	VERTICAL-ALIGN: middle! important
}
.x-tree-node-expanded .x-tree-node-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/folder-open.gif)
}
.x-tree-node-leaf .x-tree-node-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/leaf.gif)
}
.x-tree-node-collapsed .x-tree-node-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/folder.gif)
}
.ext-ie INPUT.x-tree-node-cb {
	WIDTH: 15px; HEIGHT: 15px
}
INPUT.x-tree-node-cb {
	MARGIN-LEFT: 1px
}
.ext-ie INPUT.x-tree-node-cb {
	MARGIN-LEFT: 0px
}
.x-tree-noicon .x-tree-node-icon {
	WIDTH: 0px; HEIGHT: 0px
}
.x-tree-node-loading .x-tree-node-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/loading.gif)! important
}
.x-tree-node-loading A SPAN {
	COLOR: #444; FONT-STYLE: italic
}
.ext-ie .x-tree-node-el INPUT {
	WIDTH: 15px; HEIGHT: 15px
}
.x-tree-lines .x-tree-elbow {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow.gif)
}
.x-tree-lines .x-tree-elbow-plus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-plus.gif)
}
.x-tree-lines .x-tree-elbow-minus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-minus.gif)
}
.x-tree-lines .x-tree-elbow-end {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-end.gif)
}
.x-tree-lines .x-tree-elbow-end-plus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-end-plus.gif)
}
.x-tree-lines .x-tree-elbow-end-minus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-end-minus.gif)
}
.x-tree-lines .x-tree-elbow-line {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-line.gif)
}
.x-tree-no-lines .x-tree-elbow {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-no-lines .x-tree-elbow-plus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-plus-nl.gif)
}
.x-tree-no-lines .x-tree-elbow-minus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-minus-nl.gif)
}
.x-tree-no-lines .x-tree-elbow-end {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-no-lines .x-tree-elbow-end-plus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-end-plus-nl.gif)
}
.x-tree-no-lines .x-tree-elbow-end-minus {
	BACKGROUND-IMAGE: url(../images/default/tree/elbow-end-minus-nl.gif)
}
.x-tree-no-lines .x-tree-elbow-line {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-arrows .x-tree-elbow {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-arrows .x-tree-elbow-plus {
	BACKGROUND: url(../images/default/tree/arrows.gif) no-repeat 0px 0px
}
.x-tree-arrows .x-tree-elbow-minus {
	BACKGROUND: url(../images/default/tree/arrows.gif) no-repeat -16px 0px
}
.x-tree-arrows .x-tree-elbow-end {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-arrows .x-tree-elbow-end-plus {
	BACKGROUND: url(../images/default/tree/arrows.gif) no-repeat 0px 0px
}
.x-tree-arrows .x-tree-elbow-end-minus {
	BACKGROUND: url(../images/default/tree/arrows.gif) no-repeat -16px 0px
}
.x-tree-arrows .x-tree-elbow-line {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-arrows .x-tree-ec-over .x-tree-elbow-plus {
	BACKGROUND-POSITION: -32px 0px
}
.x-tree-arrows .x-tree-ec-over .x-tree-elbow-minus {
	BACKGROUND-POSITION: -48px 0px
}
.x-tree-arrows .x-tree-ec-over .x-tree-elbow-end-plus {
	BACKGROUND-POSITION: -32px 0px
}
.x-tree-arrows .x-tree-ec-over .x-tree-elbow-end-minus {
	BACKGROUND-POSITION: -48px 0px
}
.x-tree-elbow-plus {
	CURSOR: pointer
}
.x-tree-elbow-minus {
	CURSOR: pointer
}
.x-tree-elbow-end-plus {
	CURSOR: pointer
}
.x-tree-elbow-end-minus {
	CURSOR: pointer
}
.ext-ie UL.x-tree-node-ct {
	FONT-SIZE: 0px; LINE-HEIGHT: 0; ZOOM: 1
}
.x-tree-node {
	FONT: 11px arial,tahoma,helvetica,sans-serif; COLOR: black; =
WHITE-SPACE: nowrap
}
.x-tree-node-el {
	CURSOR: pointer; LINE-HEIGHT: 18px
}
.x-tree-node A {
	COLOR: black; TEXT-DECORATION: none; -moz-user-select: none; =
-khtml-user-select: none; -moz-outline: 0 none; outline: 0 none; =
-moz-user-focus: normal; -kthml-user-focus: normal
}
.x-dd-drag-ghost A {
	COLOR: black; TEXT-DECORATION: none; -moz-user-select: none; =
-khtml-user-select: none; -moz-outline: 0 none; outline: 0 none; =
-moz-user-focus: normal; -kthml-user-focus: normal
}
.x-tree-node A SPAN {
	PADDING-RIGHT: 3px; PADDING-LEFT: 2px; PADDING-BOTTOM: 1px; COLOR: =
black; PADDING-TOP: 1px; TEXT-DECORATION: none
}
.x-dd-drag-ghost A SPAN {
	PADDING-RIGHT: 3px; PADDING-LEFT: 2px; PADDING-BOTTOM: 1px; COLOR: =
black; PADDING-TOP: 1px; TEXT-DECORATION: none
}
.x-tree-node .x-tree-node-disabled A SPAN {
	COLOR: gray! important
}
.x-tree-node .x-tree-node-disabled .x-tree-node-icon {
	FILTER: alpha(opacity=3D50); -moz-opacity: 0.5; opacity: .5
}
.x-tree-node .x-tree-node-inline-icon {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-tree-node A:hover {
	TEXT-DECORATION: none
}
.x-dd-drag-ghost A:hover {
	TEXT-DECORATION: none
}
.x-tree-node DIV.x-tree-drag-insert-below {
	BORDER-BOTTOM: #36c 1px dotted
}
.x-tree-node DIV.x-tree-drag-insert-above {
	BORDER-TOP: #36c 1px dotted
}
.x-tree-dd-underline .x-tree-node DIV.x-tree-drag-insert-below {
	BORDER-BOTTOM: 0px
}
.x-tree-dd-underline .x-tree-node DIV.x-tree-drag-insert-above {
	BORDER-TOP: 0px
}
.x-tree-dd-underline .x-tree-node DIV.x-tree-drag-insert-below A {
	BORDER-BOTTOM: #36c 2px solid
}
.x-tree-dd-underline .x-tree-node DIV.x-tree-drag-insert-above A {
	BORDER-TOP: #36c 2px solid
}
.x-tree-node .x-tree-drag-append A SPAN {
	BORDER-RIGHT: gray 1px dotted; BORDER-TOP: gray 1px dotted; BACKGROUND: =
#ddd; BORDER-LEFT: gray 1px dotted; BORDER-BOTTOM: gray 1px dotted
}
.x-tree-node .x-tree-node-over {
	BACKGROUND-COLOR: #eee
}
.x-tree-node .x-tree-selected {
	BACKGROUND-COLOR: #d9e8fb
}
.x-dd-drag-ghost .x-tree-node-indent {
	DISPLAY: none! important
}
.x-dd-drag-ghost .x-tree-ec-icon {
	DISPLAY: none! important
}
.x-tree-drop-ok-append .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/drop-add.gif)
}
.x-tree-drop-ok-above .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/drop-over.gif)
}
.x-tree-drop-ok-below .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/drop-under.gif)
}
.x-tree-drop-ok-between .x-dd-drop-icon {
	BACKGROUND-IMAGE: url(../images/default/tree/drop-between.gif)
}
.x-tree-root-ct {
	ZOOM: 1
}
.x-date-picker {
	BORDER-RIGHT: #1b376c 1px solid; BORDER-TOP: #1b376c 0px; BACKGROUND: =
#fff; BORDER-LEFT: #1b376c 1px solid; BORDER-BOTTOM: #1b376c 1px solid; =
POSITION: relative
}
.x-date-picker A {
	-moz-outline: 0 none; outline: 0 none
}
.x-date-inner {
	BORDER-COLLAPSE: separate
}
.x-date-inner TD {
	BORDER-COLLAPSE: separate
}
.x-date-inner TH {
	BORDER-COLLAPSE: separate
}
.x-date-middle {
	BACKGROUND: url(../images/default/shared/hd-sprite.gif) repeat-x 0px =
-83px; FONT: bold 11px "sans serif",tahoma,verdana,helvetica; OVERFLOW: =
hidden; COLOR: #fff
}
.x-date-left {
	BACKGROUND: url(../images/default/shared/hd-sprite.gif) repeat-x 0px =
-83px; FONT: bold 11px "sans serif",tahoma,verdana,helvetica; OVERFLOW: =
hidden; COLOR: #fff
}
.x-date-right {
	BACKGROUND: url(../images/default/shared/hd-sprite.gif) repeat-x 0px =
-83px; FONT: bold 11px "sans serif",tahoma,verdana,helvetica; OVERFLOW: =
hidden; COLOR: #fff
}
.x-date-middle .x-btn-left {
	BACKGROUND: none transparent scroll repeat 0% 0%; VERTICAL-ALIGN: =
middle
}
.x-date-middle .x-btn-center {
	BACKGROUND: none transparent scroll repeat 0% 0%; VERTICAL-ALIGN: =
middle
}
.x-date-middle .x-btn-right {
	BACKGROUND: none transparent scroll repeat 0% 0%; VERTICAL-ALIGN: =
middle
}
.x-date-middle .x-btn .x-btn-text {
	COLOR: #fff
}
.x-date-middle .x-btn-with-menu .x-btn-center EM {
	BACKGROUND: url(../images/default/toolbar/btn-arrow-light.gif) =
no-repeat right 0px
}
.x-date-right {
	WIDTH: 18px
}
.x-date-left {
	WIDTH: 18px
}
.x-date-right {
	TEXT-ALIGN: right
}
.x-date-middle {
	PADDING-BOTTOM: 2px; WIDTH: 130px; PADDING-TOP: 2px
}
.x-date-right A {
	BACKGROUND-POSITION: center 50%; DISPLAY: block; FILTER: =
alpha(opacity=3D60); WIDTH: 16px; CURSOR: pointer; BACKGROUND-REPEAT: =
no-repeat; HEIGHT: 16px; -moz-opacity: 0.6; opacity: .6
}
.x-date-left A {
	BACKGROUND-POSITION: center 50%; DISPLAY: block; FILTER: =
alpha(opacity=3D60); WIDTH: 16px; CURSOR: pointer; BACKGROUND-REPEAT: =
no-repeat; HEIGHT: 16px; -moz-opacity: 0.6; opacity: .6
}
.x-date-right A:hover {
	FILTER: alpha(opacity=3D100); -moz-opacity: 1; opacity: 1
}
.x-date-left A:hover {
	FILTER: alpha(opacity=3D100); -moz-opacity: 1; opacity: 1
}
.x-date-right A {
	BACKGROUND-IMAGE: url(../images/default/shared/right-btn.gif); =
MARGIN-RIGHT: 2px; TEXT-DECORATION: none! important
}
.x-date-left A {
	BACKGROUND-IMAGE: url(../images/default/shared/left-btn.gif); =
MARGIN-LEFT: 2px; TEXT-DECORATION: none! important
}
TABLE.x-date-inner {
	TABLE-LAYOUT: fixed; WIDTH: 100%
}
.x-date-inner TH {
	WIDTH: 25px
}
.x-date-inner TH {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; BACKGROUND: =
url(../images/default/shared/glass-bg.gif) #dfecfb repeat-x left top; =
PADDING-BOTTOM: 0px; FONT: 10px arial,helvetica,tahoma,sans-serif; =
CURSOR: default; COLOR: #233d6d; PADDING-TOP: 0px; BORDER-BOTTOM: =
#a3bad9 1px solid; BORDER-COLLAPSE: separate; TEXT-ALIGN: right! =
important
}
.x-date-inner TH SPAN {
	PADDING-RIGHT: 7px; DISPLAY: block; PADDING-LEFT: 2px; PADDING-BOTTOM: =
2px; PADDING-TOP: 2px
}
.x-date-inner TD {
	BORDER-RIGHT: #fff 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: #fff 1px =
solid; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; BORDER-LEFT: #fff 1px =
solid; PADDING-TOP: 0px; BORDER-BOTTOM: #fff 1px solid; TEXT-ALIGN: =
right
}
.x-date-inner A {
	PADDING-RIGHT: 5px; DISPLAY: block; PADDING-LEFT: 5px; PADDING-BOTTOM: =
2px; FONT: 11px arial,helvetica,tahoma,sans-serif; COLOR: black; =
PADDING-TOP: 2px; ZOOM: 1; TEXT-ALIGN: right; TEXT-DECORATION: none
}
.x-date-inner .x-date-active {
	CURSOR: pointer; COLOR: black
}
.x-date-inner .x-date-selected A {
	BORDER-RIGHT: #8db2e3 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#8db2e3 1px solid; PADDING-LEFT: 4px; BACKGROUND: =
url(../images/default/shared/glass-bg.gif) #dfecfb repeat-x left top; =
PADDING-BOTTOM: 1px; BORDER-LEFT: #8db2e3 1px solid; PADDING-TOP: 1px; =
BORDER-BOTTOM: #8db2e3 1px solid
}
.x-date-inner .x-date-today A {
	BORDER-RIGHT: darkred 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
darkred 1px solid; PADDING-LEFT: 4px; PADDING-BOTTOM: 1px; BORDER-LEFT: =
darkred 1px solid; PADDING-TOP: 1px; BORDER-BOTTOM: darkred 1px solid
}
.x-date-inner .x-date-selected SPAN {
	FONT-WEIGHT: bold
}
.x-date-inner .x-date-prevday A {
	COLOR: #aaa; TEXT-DECORATION: none! important
}
.x-date-inner .x-date-nextday A {
	COLOR: #aaa; TEXT-DECORATION: none! important
}
.x-date-bottom {
	PADDING-RIGHT: 4px; BORDER-TOP: #a3bad9 1px solid; PADDING-LEFT: 4px; =
BACKGROUND: url(../images/default/shared/glass-bg.gif) #dfecfb repeat-x =
left top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px
}
.x-date-inner A:hover {
	BACKGROUND: #ddecfe; COLOR: black; TEXT-DECORATION: none! important
}
.x-date-inner .x-date-disabled A:hover {
	BACKGROUND: #ddecfe; COLOR: black; TEXT-DECORATION: none! important
}
.x-date-inner .x-date-disabled A {
	BACKGROUND: #eee; CURSOR: default; COLOR: #bbb
}
.x-date-mmenu {
	BACKGROUND: #eee
}
.x-date-mmenu .x-menu-item {
	PADDING-RIGHT: 24px; PADDING-LEFT: 4px; FONT-SIZE: 10px; =
PADDING-BOTTOM: 1px; COLOR: #000; PADDING-TOP: 1px; WHITE-SPACE: nowrap
}
.x-date-mmenu .x-menu-item .x-menu-item-icon {
	BACKGROUND-POSITION: center -4px; WIDTH: 10px; MARGIN-RIGHT: 5px; =
HEIGHT: 10px
}
.x-date-mp {
	DISPLAY: none; BACKGROUND: white; LEFT: 0px; POSITION: absolute; TOP: =
0px
}
.x-date-mp TD {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; FONT: 11px =
arial,helvetica,tahoma,sans-serif; PADDING-TOP: 2px
}
TD.x-date-mp-month {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; VERTICAL-ALIGN: middle; =
BORDER-LEFT: 0px; WIDTH: 25%; BORDER-BOTTOM: 0px; TEXT-ALIGN: center
}
TD.x-date-mp-year {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; VERTICAL-ALIGN: middle; =
BORDER-LEFT: 0px; WIDTH: 25%; BORDER-BOTTOM: 0px; TEXT-ALIGN: center
}
TD.x-date-mp-ybtn {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; VERTICAL-ALIGN: middle; =
BORDER-LEFT: 0px; WIDTH: 25%; BORDER-BOTTOM: 0px; TEXT-ALIGN: center
}
.x-date-mp-ok {
	MARGIN-RIGHT: 3px
}
.x-date-mp-btns BUTTON {
	BORDER-RIGHT: #005 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: #36c 1px =
solid; PADDING-LEFT: 3px; BACKGROUND: #083772; PADDING-BOTTOM: 1px; =
FONT: 11px arial,helvetica,tahoma,sans-serif; BORDER-LEFT: #36c 1px =
solid; CURSOR: pointer; COLOR: white; PADDING-TOP: 1px; BORDER-BOTTOM: =
#005 1px solid; TEXT-ALIGN: center; TEXT-DECORATION: none! important
}
.x-date-mp-btns {
	BACKGROUND: url(../images/default/shared/glass-bg.gif) #dfecfb repeat-x =
left top
}
.x-date-mp-btns TD {
	BORDER-TOP: #c5d2df 1px solid; TEXT-ALIGN: center
}
TD.x-date-mp-month A {
	PADDING-RIGHT: 4px; DISPLAY: block; PADDING-LEFT: 4px; PADDING-BOTTOM: =
2px; COLOR: #15428b; PADDING-TOP: 2px; TEXT-ALIGN: center; =
TEXT-DECORATION: none
}
TD.x-date-mp-year A {
	PADDING-RIGHT: 4px; DISPLAY: block; PADDING-LEFT: 4px; PADDING-BOTTOM: =
2px; COLOR: #15428b; PADDING-TOP: 2px; TEXT-ALIGN: center; =
TEXT-DECORATION: none
}
TD.x-date-mp-month A:hover {
	BACKGROUND: #ddecfe; CURSOR: pointer; COLOR: #15428b; TEXT-DECORATION: =
none
}
TD.x-date-mp-year A:hover {
	BACKGROUND: #ddecfe; CURSOR: pointer; COLOR: #15428b; TEXT-DECORATION: =
none
}
TD.x-date-mp-sel A {
	BORDER-RIGHT: #8db2e3 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: =
#8db2e3 1px solid; PADDING-LEFT: 3px; BACKGROUND: =
url(../images/default/shared/glass-bg.gif) #dfecfb repeat-x left top; =
PADDING-BOTTOM: 1px; BORDER-LEFT: #8db2e3 1px solid; PADDING-TOP: 1px; =
BORDER-BOTTOM: #8db2e3 1px solid
}
.x-date-mp-ybtn A {
	DISPLAY: block; BACKGROUND: =
url(../images/default/panel/tool-sprites.gif) no-repeat; MARGIN: 0px =
auto; OVERFLOW: hidden; WIDTH: 15px; CURSOR: pointer; HEIGHT: 15px
}
.x-date-mp-ybtn A.x-date-mp-next {
	BACKGROUND-POSITION: 0px -120px
}
.x-date-mp-ybtn A.x-date-mp-next:hover {
	BACKGROUND-POSITION: -15px -120px
}
.x-date-mp-ybtn A.x-date-mp-prev {
	BACKGROUND-POSITION: 0px -105px
}
.x-date-mp-ybtn A.x-date-mp-prev:hover {
	BACKGROUND-POSITION: -15px -105px
}
.x-date-mp-ybtn {
	TEXT-ALIGN: center
}
TD.x-date-mp-sep {
	BORDER-RIGHT: #c5d2df 1px solid
}
.x-tip {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; Z-INDEX: 20000; LEFT: 0px; =
VISIBILITY: hidden; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px; POSITION: =
absolute; TOP: 0px
}
.x-tip .x-tip-close {
	DISPLAY: none; FLOAT: right; BACKGROUND-IMAGE: =
url(../images/default/qtip/close.gif); MARGIN: 0px 0px 2px 2px; WIDTH: =
15px; CURSOR: pointer; HEIGHT: 15px
}
.x-tip .x-tip-tc {
	BACKGROUND: url(../images/default/qtip/tip-sprite.gif) no-repeat 0px =
-62px; OVERFLOW: hidden; PADDING-TOP: 3px; ZOOM: 1
}
.x-tip .x-tip-tl {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/qtip/tip-sprite.gif) no-repeat 0px 0px; OVERFLOW: =
hidden; ZOOM: 1
}
.x-tip .x-tip-tr {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/qtip/tip-sprite.gif) no-repeat right 0px; =
OVERFLOW: hidden; ZOOM: 1
}
.x-tip .x-tip-bc {
	BACKGROUND: url(../images/default/qtip/tip-sprite.gif) no-repeat 0px =
-121px; OVERFLOW: hidden; HEIGHT: 3px
}
.x-tip .x-tip-bl {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/qtip/tip-sprite.gif) no-repeat 0px -59px; ZOOM: 1
}
.x-tip .x-tip-br {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/qtip/tip-sprite.gif) no-repeat right -59px; ZOOM: =
1
}
.x-tip .x-tip-mc {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; FONT: 11px =
tahoma,arial,helvetica,sans-serif; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px
}
.x-tip .x-tip-ml {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/qtip/tip-sprite.gif) #fff no-repeat 0px -124px; =
ZOOM: 1
}
.x-tip .x-tip-mr {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/qtip/tip-sprite.gif) no-repeat right -124px; ZOOM: =
1
}
.ext-ie .x-tip .x-tip-header {
	FONT-SIZE: 0px; LINE-HEIGHT: 0
}
.ext-ie .x-tip .x-tip-tc {
	FONT-SIZE: 0px; LINE-HEIGHT: 0
}
.x-tip .x-tip-header-text {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px =
0px 2px; FONT: bold 11px tahoma,arial,helvetica,sans-serif; COLOR: #444; =
PADDING-TOP: 0px
}
.x-tip .x-tip-body {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; FONT: 11px/14px tahoma,arial,helvetica,sans-serif; COLOR: #444; =
PADDING-TOP: 0px
}
.x-tip .x-tip-body .loading-indicator {
	MARGIN: 0px
}
.x-tip-draggable .x-tip-header {
	CURSOR: move
}
.x-tip-draggable .x-tip-header-text {
	CURSOR: move
}
.x-form-invalid-tip .x-tip-tc {
	BACKGROUND: url(../images/default/form/error-tip-corners.gif) repeat-x =
0px -12px; PADDING-TOP: 6px
}
.x-form-invalid-tip .x-tip-tl {
	BACKGROUND-IMAGE: url(../images/default/form/error-tip-corners.gif)
}
.x-form-invalid-tip .x-tip-tr {
	BACKGROUND-IMAGE: url(../images/default/form/error-tip-corners.gif)
}
.x-form-invalid-tip .x-tip-bc {
	BACKGROUND: url(../images/default/form/error-tip-corners.gif) repeat-x =
0px -18px; HEIGHT: 6px
}
.x-form-invalid-tip .x-tip-bl {
	BACKGROUND: url(../images/default/form/error-tip-corners.gif) no-repeat =
0px -6px
}
.x-form-invalid-tip .x-tip-br {
	BACKGROUND: url(../images/default/form/error-tip-corners.gif) no-repeat =
right -6px
}
.x-form-invalid-tip .x-tip-ml {
	BACKGROUND-IMAGE: url(../images/default/form/error-tip-corners.gif)
}
.x-form-invalid-tip .x-tip-mr {
	BACKGROUND-IMAGE: url(../images/default/form/error-tip-corners.gif)
}
.x-form-invalid-tip .x-tip-body {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; =
PADDING-TOP: 2px
}
.x-form-invalid-tip .x-tip-body {
	PADDING-LEFT: 24px; BACKGROUND: =
url(../images/default/form/exclamation.gif) no-repeat 2px 2px
}
.x-menu {
	BORDER-RIGHT: #718bb7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#718bb7 1px solid; PADDING-LEFT: 2px; Z-INDEX: 15000; BACKGROUND: =
url(../images/default/menu/menu.gif) #f0f0f0 repeat-y; PADDING-BOTTOM: =
2px; BORDER-LEFT: #718bb7 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: =
#718bb7 1px solid; ZOOM: 1
}
.x-menu A {
	TEXT-DECORATION: none! important
}
.ext-ie .x-menu {
	OVERFLOW: hidden; ZOOM: 1
}
.x-menu-list {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; BACKGROUND: none transparent scroll =
repeat 0% 0%; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px
}
.x-menu LI {
	LINE-HEIGHT: 100%
}
.x-menu LI.x-menu-sep-li {
	FONT-SIZE: 1px; LINE-HEIGHT: 1px
}
.x-menu-list-item {
	PADDING-RIGHT: 1px; DISPLAY: block; PADDING-LEFT: 1px; PADDING-BOTTOM: =
1px; FONT: 11px tahoma,arial,sans-serif; PADDING-TOP: 1px; WHITE-SPACE: =
nowrap; -moz-user-select: none; -khtml-user-select: none
}
.x-menu-item-arrow {
	BACKGROUND: url(../images/default/menu/menu-parent.gif) no-repeat right =
50%
}
.x-menu-sep {
	DISPLAY: block; FONT-SIZE: 1px; MARGIN: 2px 3px; OVERFLOW: hidden; =
LINE-HEIGHT: 1px; BORDER-BOTTOM: #fff 1px solid; BACKGROUND-COLOR: =
#e0e0e0
}
.x-menu-focus {
	LEFT: 0px; WIDTH: 0px; LINE-HEIGHT: 1px; POSITION: absolute; TOP: -5px; =
HEIGHT: 0px
}
.x-menu A.x-menu-item {
	PADDING-RIGHT: 21px; DISPLAY: block; PADDING-LEFT: 3px; PADDING-BOTTOM: =
3px; CURSOR: pointer; COLOR: #222; LINE-HEIGHT: 16px; PADDING-TOP: 3px; =
WHITE-SPACE: nowrap; TEXT-DECORATION: none; -moz-outline: 0 none; =
outline: 0 none
}
.x-menu-item-active {
	BORDER-RIGHT: #aaccf6 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: =
#aaccf6 1px solid; PADDING-LEFT: 0px; BACKGROUND: =
url(../images/default/menu/item-over.gif) #ebf3fd repeat-x left bottom; =
PADDING-BOTTOM: 0px; BORDER-LEFT: #aaccf6 1px solid; PADDING-TOP: 0px; =
BORDER-BOTTOM: #aaccf6 1px solid
}
.x-menu-item-active A.x-menu-item {
	COLOR: #233d6d
}
.x-menu-item-icon {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BACKGROUND-POSITION: center 50%; =
BORDER-TOP: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px 8px =
0px 0px; VERTICAL-ALIGN: top; BORDER-LEFT: 0px; WIDTH: 16px; =
PADDING-TOP: 0px; BORDER-BOTTOM: 0px; HEIGHT: 16px
}
.x-menu-check-item .x-menu-item-icon {
	BACKGROUND: url(../images/default/menu/unchecked.gif) no-repeat center =
50%
}
.x-menu-item-checked .x-menu-item-icon {
	BACKGROUND-IMAGE: url(../images/default/menu/checked.gif)
}
.x-menu-group-item .x-menu-item-icon {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-menu-item-checked .x-menu-group-item .x-menu-item-icon {
	BACKGROUND: url(../images/default/menu/group-checked.gif) no-repeat =
center 50%
}
.x-menu-plain {
	BACKGROUND: #fff
}
.x-menu-date-item {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-menu .x-color-palette {
	MARGIN-LEFT: 26px; MARGIN-RIGHT: 4px
}
.x-menu .x-date-picker {
	MARGIN-LEFT: 26px; MARGIN-RIGHT: 4px
}
.x-menu .x-date-picker {
	BORDER-RIGHT: #a3bad9 1px solid; BORDER-TOP: #a3bad9 1px solid; =
MARGIN-TOP: 2px; MARGIN-BOTTOM: 2px; BORDER-LEFT: #a3bad9 1px solid; =
BORDER-BOTTOM: #a3bad9 1px solid
}
.x-menu-plain .x-color-palette {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; MARGIN: 0px; BORDER-LEFT: 0px; =
BORDER-BOTTOM: 0px
}
.x-menu-plain .x-date-picker {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; MARGIN: 0px; BORDER-LEFT: 0px; =
BORDER-BOTTOM: 0px
}
.x-date-menu {
	PADDING-RIGHT: 0px! important; PADDING-LEFT: 0px! important; =
PADDING-BOTTOM: 0px! important; PADDING-TOP: 0px! important
}
.x-cycle-menu .x-menu-item-checked {
	BORDER-RIGHT: #a3bae9 1px dotted; PADDING-RIGHT: 0px; BORDER-TOP: =
#a3bae9 1px dotted; PADDING-LEFT: 0px; BACKGROUND: #dfe8f6; =
PADDING-BOTTOM: 0px; BORDER-LEFT: #a3bae9 1px dotted; PADDING-TOP: 0px; =
BORDER-BOTTOM: #a3bae9 1px dotted
}
.x-box-tl {
	BACKGROUND: url(../images/default/box/corners.gif) no-repeat 0px 0px; =
ZOOM: 1
}
.x-box-tc {
	BACKGROUND: url(../images/default/box/tb.gif) repeat-x 0px 0px; =
OVERFLOW: hidden; HEIGHT: 8px
}
.x-box-tr {
	BACKGROUND: url(../images/default/box/corners.gif) no-repeat right -8px
}
.x-box-ml {
	PADDING-LEFT: 4px; BACKGROUND: url(../images/default/box/l.gif) =
repeat-y 0px 50%; OVERFLOW: hidden; ZOOM: 1
}
.x-box-mc {
	PADDING-RIGHT: 10px; PADDING-LEFT: 10px; FONT-SIZE: 12px; BACKGROUND: =
url(../images/default/box/tb.gif) #eee repeat-x 0px -16px; =
PADDING-BOTTOM: 4px; COLOR: #393939; PADDING-TOP: 4px; FONT-FAMILY: =
"Myriad Pro","Myriad Web","Tahoma","Helvetica","Arial",sans-serif
}
.x-box-mc H3 {
	FONT-WEIGHT: bold; FONT-SIZE: 14px; MARGIN: 0px 0px 4px; ZOOM: 1
}
.x-box-mr {
	PADDING-RIGHT: 4px; BACKGROUND: url(../images/default/box/r.gif) =
repeat-y right 50%; OVERFLOW: hidden
}
.x-box-bl {
	BACKGROUND: url(../images/default/box/corners.gif) no-repeat 0px -16px; =
ZOOM: 1
}
.x-box-bc {
	BACKGROUND: url(../images/default/box/tb.gif) repeat-x 0px -8px; =
OVERFLOW: hidden; HEIGHT: 8px
}
.x-box-br {
	BACKGROUND: url(../images/default/box/corners.gif) no-repeat right =
-24px
}
.x-box-tl {
	PADDING-LEFT: 8px; OVERFLOW: hidden
}
.x-box-bl {
	PADDING-LEFT: 8px; OVERFLOW: hidden
}
.x-box-tr {
	PADDING-RIGHT: 8px; OVERFLOW: hidden
}
.x-box-br {
	PADDING-RIGHT: 8px; OVERFLOW: hidden
}
.x-box-blue .x-box-bl {
	BACKGROUND-IMAGE: url(../images/default/box/corners-blue.gif)
}
.x-box-blue .x-box-br {
	BACKGROUND-IMAGE: url(../images/default/box/corners-blue.gif)
}
.x-box-blue .x-box-tl {
	BACKGROUND-IMAGE: url(../images/default/box/corners-blue.gif)
}
.x-box-blue .x-box-tr {
	BACKGROUND-IMAGE: url(../images/default/box/corners-blue.gif)
}
.x-box-blue .x-box-bc {
	BACKGROUND-IMAGE: url(../images/default/box/tb-blue.gif)
}
.x-box-blue .x-box-mc {
	BACKGROUND-IMAGE: url(../images/default/box/tb-blue.gif)
}
.x-box-blue .x-box-tc {
	BACKGROUND-IMAGE: url(../images/default/box/tb-blue.gif)
}
.x-box-blue .x-box-mc {
	BACKGROUND-COLOR: #c3daf9
}
.x-box-blue .x-box-mc H3 {
	COLOR: #17385b
}
.x-box-blue .x-box-ml {
	BACKGROUND-IMAGE: url(../images/default/box/l-blue.gif)
}
.x-box-blue .x-box-mr {
	BACKGROUND-IMAGE: url(../images/default/box/r-blue.gif)
}
#x-debug-browser .x-tree .x-tree-node A SPAN {
	FONT-SIZE: 11px; COLOR: #222297; LINE-HEIGHT: 18px; PADDING-TOP: 2px; =
FONT-FAMILY: "monotype","courier new",sans-serif
}
#x-debug-browser .x-tree A I {
	COLOR: #ff4545; FONT-STYLE: normal
}
#x-debug-browser .x-tree A EM {
	COLOR: #999
}
#x-debug-browser .x-tree .x-tree-node .x-tree-selected A SPAN {
	BACKGROUND: #c3daf9
}
#x-debug-browser .x-tool-toggle {
	BACKGROUND-POSITION: 0px -75px
}
#x-debug-browser .x-tool-toggle-over {
	BACKGROUND-POSITION: -15px -75px
}
.x-panel-collapsed#x-debug-browser .x-tool-toggle {
	BACKGROUND-POSITION: 0px -60px
}
.x-panel-collapsed#x-debug-browser .x-tool-toggle-over {
	BACKGROUND-POSITION: -15px -60px
}
.x-combo-list {
	BORDER-RIGHT: #98c0f4 1px solid; BORDER-TOP: #98c0f4 1px solid; =
BACKGROUND: #ddecfe; OVERFLOW: hidden; BORDER-LEFT: #98c0f4 1px solid; =
BORDER-BOTTOM: #98c0f4 1px solid; ZOOM: 1
}
.x-combo-list-inner {
	BACKGROUND: white; OVERFLOW-X: hidden; OVERFLOW: auto; ZOOM: 1; =
POSITION: relative
}
.x-combo-list-hd {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; BACKGROUND-IMAGE: =
url(../images/default/layout/panel-title-light-bg.gif); PADDING-BOTTOM: =
3px; FONT: bold 11px tahoma,arial,helvetica,sans-serif; COLOR: #15428b; =
PADDING-TOP: 3px; BORDER-BOTTOM: #98c0f4 1px solid
}
.x-resizable-pinned .x-combo-list-inner {
	BORDER-BOTTOM: #98c0f4 1px solid
}
.x-combo-list-item {
	BORDER-RIGHT: #fff 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: #fff 1px =
solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; FONT: 12px =
tahoma,arial,helvetica,sans-serif; OVERFLOW: hidden; BORDER-LEFT: #fff =
1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #fff 1px solid; WHITE-SPACE: =
nowrap; TEXT-OVERFLOW: ellipsis
}
.x-combo-list .x-combo-selected {
	BORDER-RIGHT: #a3bae9 1px dotted; BORDER-TOP: #a3bae9 1px dotted; =
BACKGROUND: #dfe8f6; BORDER-LEFT: #a3bae9 1px dotted; CURSOR: pointer; =
BORDER-BOTTOM: #a3bae9 1px dotted
}
.x-combo-noedit {
	CURSOR: pointer
}
.x-combo-list .x-toolbar {
	BORDER-TOP: #98c0f4 1px solid; BORDER-BOTTOM: 0px
}
.x-combo-list-small .x-combo-list-item {
	FONT: 11px tahoma,arial,helvetica,sans-serif
}
.x-panel {
	BORDER-RIGHT: #99bbe8 0px solid; BORDER-TOP: #99bbe8 0px solid; =
BORDER-LEFT: #99bbe8 0px solid; BORDER-BOTTOM: #99bbe8 0px solid
}
.x-panel-header {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 3px; BORDER-TOP: =
#99bbe8 1px solid; PADDING-LEFT: 5px; BACKGROUND: =
url(../images/default/panel/white-top-bottom.gif) repeat-x 0px -1px; =
PADDING-BOTTOM: 4px; FONT: bold 11px/15px =
tahoma,arial,verdana,sans-serif; OVERFLOW: hidden; BORDER-LEFT: #99bbe8 =
1px solid; COLOR: #15428b; PADDING-TOP: 5px; BORDER-BOTTOM: #99bbe8 1px =
solid; ZOOM: 1
}
.x-panel-body {
	BORDER-RIGHT: #99bbe8 1px solid; BORDER-TOP: #99bbe8 0px; BACKGROUND: =
white; OVERFLOW: hidden; BORDER-LEFT: #99bbe8 1px solid; BORDER-BOTTOM: =
#99bbe8 1px solid; POSITION: relative
}
.x-panel-bbar .x-toolbar {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#99bbe8 0px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; OVERFLOW: hidden; =
BORDER-LEFT: #99bbe8 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #99bbe8 =
1px solid
}
.x-panel-tbar .x-toolbar {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#99bbe8 0px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; OVERFLOW: hidden; =
BORDER-LEFT: #99bbe8 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #99bbe8 =
1px solid
}
.x-panel-tbar-noheader .x-toolbar {
	BORDER-TOP: #99bbe8 1px solid; BORDER-BOTTOM: 0px
}
.x-panel-mc .x-panel-tbar .x-toolbar {
	BORDER-TOP: #99bbe8 1px solid; BORDER-BOTTOM: 0px
}
.x-panel-body-noheader {
	BORDER-TOP: #99bbe8 1px solid
}
.x-panel-mc .x-panel-body {
	BORDER-TOP: #99bbe8 1px solid
}
.x-panel-header {
	OVERFLOW: hidden; ZOOM: 1
}
.x-panel-tl .x-panel-header {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
4px; FONT: bold 11px tahoma,arial,verdana,sans-serif; BORDER-LEFT: 0px; =
COLOR: #15428b; PADDING-TOP: 5px; BORDER-BOTTOM: 0px
}
.x-panel-tl .x-panel-icon {
	BACKGROUND-POSITION: 0px 4px; PADDING-LEFT: 20px! important; =
BACKGROUND-REPEAT: no-repeat; ZOOM: 1
}
.x-window-tl .x-panel-icon {
	BACKGROUND-POSITION: 0px 4px; PADDING-LEFT: 20px! important; =
BACKGROUND-REPEAT: no-repeat; ZOOM: 1
}
.x-panel-inline-icon {
	BACKGROUND-POSITION: 0px 0px; MARGIN-TOP: -1px; MARGIN-BOTTOM: -1px; =
VERTICAL-ALIGN: middle; WIDTH: 16px; MARGIN-RIGHT: 4px; =
BACKGROUND-REPEAT: no-repeat; HEIGHT: 16px
}
.x-panel-tc {
	BACKGROUND: url(../images/default/panel/top-bottom.gif) repeat-x 0px =
0px; OVERFLOW: hidden
}
.ext-strict .ext-ie7 .x-panel-tc {
	OVERFLOW: visible
}
.x-panel-tl {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/panel/corners-sprite.gif) no-repeat 0px 0px; =
BORDER-BOTTOM: #99bbe8 1px solid; ZOOM: 1
}
.x-panel-tr {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/panel/corners-sprite.gif) no-repeat right 0px; =
ZOOM: 1
}
.x-panel-bc {
	BACKGROUND: url(../images/default/panel/top-bottom.gif) repeat-x 0px =
bottom; ZOOM: 1
}
.x-panel-bc .x-panel-footer {
	ZOOM: 1
}
.x-panel-bl {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/panel/corners-sprite.gif) no-repeat 0px bottom; =
ZOOM: 1
}
.x-panel-br {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/panel/corners-sprite.gif) no-repeat right bottom; =
ZOOM: 1
}
.x-panel-mc {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: #dfe8f6; PADDING-BOTTOM: 0px; MARGIN: 0px; FONT: 11px =
tahoma,arial,helvetica,sans-serif; BORDER-LEFT: 0px; PADDING-TOP: 6px; =
BORDER-BOTTOM: 0px
}
.x-panel-mc .x-panel-body {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; BACKGROUND: none transparent scroll =
repeat 0% 0%; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px
}
.x-panel-ml {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/panel/left-right.gif) #fff repeat-y 0px 0px; ZOOM: =
1
}
.x-panel-mr {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/panel/left-right.gif) repeat-y right 0px; ZOOM: 1
}
.x-panel-bc .x-panel-footer {
	PADDING-BOTTOM: 6px
}
.x-panel-nofooter .x-panel-bc {
	FONT-SIZE: 0px; LINE-HEIGHT: 0; HEIGHT: 6px
}
.x-panel-nofooter .x-window-bc {
	FONT-SIZE: 0px; LINE-HEIGHT: 0; HEIGHT: 6px
}
.x-panel-bwrap {
	OVERFLOW: hidden; ZOOM: 1
}
.x-panel-body {
	OVERFLOW: hidden; ZOOM: 1
}
.x-panel-collapsed .x-resizable-handle {
	DISPLAY: none
}
.ext-gecko .x-panel-animated DIV {
	OVERFLOW: hidden! important
}
.x-plain-body {
	OVERFLOW: hidden
}
.x-plain-bbar .x-toolbar {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; OVERFLOW: =
hidden; PADDING-TOP: 2px
}
.x-plain-tbar .x-toolbar {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; OVERFLOW: =
hidden; PADDING-TOP: 2px
}
.x-plain-bwrap {
	OVERFLOW: hidden; ZOOM: 1
}
.x-plain {
	OVERFLOW: hidden
}
.x-tool {
	BACKGROUND: url(../images/default/panel/tool-sprites.gif) no-repeat; =
FLOAT: right; MARGIN-LEFT: 2px; OVERFLOW: hidden; WIDTH: 15px; CURSOR: =
pointer; HEIGHT: 15px
}
.x-tool-toggle {
	BACKGROUND-POSITION: 0px -60px
}
.x-tool-toggle-over {
	BACKGROUND-POSITION: -15px -60px
}
.x-panel-collapsed .x-tool-toggle {
	BACKGROUND-POSITION: 0px -75px
}
.x-panel-collapsed .x-tool-toggle-over {
	BACKGROUND-POSITION: -15px -75px
}
.x-tool-close {
	BACKGROUND-POSITION: 0px 0px
}
.x-tool-close-over {
	BACKGROUND-POSITION: -15px 0px
}
.x-tool-minimize {
	BACKGROUND-POSITION: 0px -15px
}
.x-tool-minimize-over {
	BACKGROUND-POSITION: -15px -15px
}
.x-tool-maximize {
	BACKGROUND-POSITION: 0px -30px
}
.x-tool-maximize-over {
	BACKGROUND-POSITION: -15px -30px
}
.x-tool-restore {
	BACKGROUND-POSITION: 0px -45px
}
.x-tool-restore-over {
	BACKGROUND-POSITION: -15px -45px
}
.x-tool-gear {
	BACKGROUND-POSITION: 0px -90px
}
.x-tool-gear-over {
	BACKGROUND-POSITION: -15px -90px
}
.x-tool-pin {
	BACKGROUND-POSITION: 0px -135px
}
.x-tool-pin-over {
	BACKGROUND-POSITION: -15px -135px
}
.x-tool-unpin {
	BACKGROUND-POSITION: 0px -150px
}
.x-tool-unpin-over {
	BACKGROUND-POSITION: -15px -150px
}
.x-tool-right {
	BACKGROUND-POSITION: 0px -165px
}
.x-tool-right-over {
	BACKGROUND-POSITION: -15px -165px
}
.x-tool-left {
	BACKGROUND-POSITION: 0px -180px
}
.x-tool-left-over {
	BACKGROUND-POSITION: -15px -180px
}
.x-tool-up {
	BACKGROUND-POSITION: 0px -210px
}
.x-tool-up-over {
	BACKGROUND-POSITION: -15px -210px
}
.x-tool-down {
	BACKGROUND-POSITION: 0px -195px
}
.x-tool-down-over {
	BACKGROUND-POSITION: -15px -195px
}
.x-tool-refresh {
	BACKGROUND-POSITION: 0px -225px
}
.x-tool-refresh-over {
	BACKGROUND-POSITION: -15px -225px
}
.x-tool-minus {
	BACKGROUND-POSITION: 0px -255px
}
.x-tool-minus-over {
	BACKGROUND-POSITION: -15px -255px
}
.x-tool-plus {
	BACKGROUND-POSITION: 0px -240px
}
.x-tool-plus-over {
	BACKGROUND-POSITION: -15px -240px
}
.x-tool-search {
	BACKGROUND-POSITION: 0px -270px
}
.x-tool-search-over {
	BACKGROUND-POSITION: -15px -270px
}
.x-tool-save {
	BACKGROUND-POSITION: 0px -285px
}
.x-tool-save-over {
	BACKGROUND-POSITION: -15px -285px
}
.x-tool-help {
	BACKGROUND-POSITION: 0px -300px
}
.x-tool-help-over {
	BACKGROUND-POSITION: -15px -300px
}
.x-tool-print {
	BACKGROUND-POSITION: 0px -315px
}
.x-tool-print-over {
	BACKGROUND-POSITION: -15px -315px
}
.x-panel-ghost {
	Z-INDEX: 12000; BACKGROUND: #cbddf3; FILTER: alpha(opacity=3D65); LEFT: =
0px; OVERFLOW: hidden; POSITION: absolute; TOP: 0px; -moz-opacity: .65; =
opacity: .65
}
.x-panel-ghost UL {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: =
#99bbe8 0px; DISPLAY: block; PADDING-LEFT: 0px; FONT-SIZE: 0px; =
PADDING-BOTTOM: 0px; MARGIN: 0px; OVERFLOW: hidden; BORDER-LEFT: #99bbe8 =
1px solid; LINE-HEIGHT: 0; PADDING-TOP: 0px; BORDER-BOTTOM: #99bbe8 1px =
solid
}
.x-panel-ghost * {
	CURSOR: move! important
}
.x-panel-dd-spacer {
	BORDER-RIGHT: #99bbe8 2px dashed; BORDER-TOP: #99bbe8 2px dashed; =
BORDER-LEFT: #99bbe8 2px dashed; BORDER-BOTTOM: #99bbe8 2px dashed
}
.x-panel-btns-ct {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px
}
.x-panel-btns-ct .x-btn {
	CLEAR: none; FLOAT: right
}
.x-panel-btns-ct .x-panel-btns TD {
	BORDER-TOP-WIDTH: 0px; PADDING-RIGHT: 0px; PADDING-LEFT: 0px; =
BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; BORDER-RIGHT-WIDTH: 0px
}
.x-panel-btns-ct .x-panel-btns-right TABLE {
	CLEAR: none; FLOAT: right
}
.x-panel-btns-ct .x-panel-btns-left TABLE {
	CLEAR: none; FLOAT: left
}
.x-panel-btns-ct .x-panel-btns-center {
	TEXT-ALIGN: center
}
.x-panel-btns-ct .x-panel-btns-center TABLE {
	MARGIN: 0px auto
}
.x-panel-btns-ct TABLE TD.x-panel-btn-td {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 3px
}
.x-panel-btns-ct .x-btn-focus .x-btn-left {
	BACKGROUND-POSITION: 0px -147px
}
.x-panel-btns-ct .x-btn-focus .x-btn-right {
	BACKGROUND-POSITION: 0px -168px
}
.x-panel-btns-ct .x-btn-focus .x-btn-center {
	BACKGROUND-POSITION: 0px -189px
}
.x-panel-btns-ct .x-btn-over .x-btn-left {
	BACKGROUND-POSITION: 0px -63px
}
.x-panel-btns-ct .x-btn-over .x-btn-right {
	BACKGROUND-POSITION: 0px -84px
}
.x-panel-btns-ct .x-btn-over .x-btn-center {
	BACKGROUND-POSITION: 0px -105px
}
.x-panel-btns-ct .x-btn-click .x-btn-center {
	BACKGROUND-POSITION: 0px -126px
}
.x-panel-btns-ct .x-btn-click .x-btn-right {
	BACKGROUND-POSITION: 0px -84px
}
.x-panel-btns-ct .x-btn-click .x-btn-left {
	BACKGROUND-POSITION: 0px -63px
}
.x-window {
	ZOOM: 1
}
.x-window .x-resizable-handle {
	FILTER: alpha(opacity=3D0); -moz-opacity: 0; opacity: 0
}
.x-window-proxy {
	BORDER-RIGHT: #99bbe8 1px solid; BORDER-TOP: #99bbe8 1px solid; =
DISPLAY: none; Z-INDEX: 12000; BACKGROUND: #c7dffc; FILTER: =
alpha(opacity=3D50); LEFT: 0px; OVERFLOW: hidden; BORDER-LEFT: #99bbe8 =
1px solid; BORDER-BOTTOM: #99bbe8 1px solid; POSITION: absolute; TOP: =
0px; -moz-opacity: .5; opacity: .5
}
.x-window-header {
	OVERFLOW: hidden; ZOOM: 1
}
.x-window-bwrap {
	Z-INDEX: 1; ZOOM: 1; POSITION: relative
}
.x-window-tl .x-window-header {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 4px; FONT: bold =
11px tahoma,arial,verdana,sans-serif; COLOR: #15428b; PADDING-TOP: 5px
}
.x-window-header-text {
	CURSOR: pointer
}
.x-window-tc {
	BACKGROUND: url(../images/default/window/top-bottom.png) repeat-x 0px =
0px; OVERFLOW: hidden; ZOOM: 1
}
.x-window-tl {
	PADDING-LEFT: 6px; Z-INDEX: 1; BACKGROUND: =
url(../images/default/window/left-corners.png) no-repeat 0px 0px; ZOOM: =
1; POSITION: relative
}
.x-window-tr {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/window/right-corners.png) no-repeat right 0px
}
.x-window-bc {
	BACKGROUND: url(../images/default/window/top-bottom.png) repeat-x 0px =
bottom; ZOOM: 1
}
.x-window-bc .x-window-footer {
	FONT-SIZE: 0px; PADDING-BOTTOM: 6px; LINE-HEIGHT: 0; ZOOM: 1
}
.x-window-bl {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/window/left-corners.png) no-repeat 0px bottom; =
ZOOM: 1
}
.x-window-br {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/window/right-corners.png) no-repeat right bottom; =
ZOOM: 1
}
.x-window-mc {
	BORDER-RIGHT: #99bbe8 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: =
#99bbe8 1px solid; PADDING-LEFT: 0px; BACKGROUND: #dfe8f6; =
PADDING-BOTTOM: 0px; MARGIN: 0px; FONT: 11px =
tahoma,arial,helvetica,sans-serif; BORDER-LEFT: #99bbe8 1px solid; =
PADDING-TOP: 0px; BORDER-BOTTOM: #99bbe8 1px solid
}
.x-window-ml {
	PADDING-LEFT: 6px; BACKGROUND: =
url(../images/default/window/left-right.png) repeat-y 0px 0px; ZOOM: 1
}
.x-window-mr {
	PADDING-RIGHT: 6px; BACKGROUND: =
url(../images/default/window/left-right.png) repeat-y right 0px; ZOOM: 1
}
.x-window-body {
	OVERFLOW: hidden
}
.x-window-bwrap {
	OVERFLOW: hidden
}
.x-window-maximized .x-window-bl {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-window-maximized .x-window-br {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-window-maximized .x-window-ml {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-window-maximized .x-window-mr {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-window-maximized .x-window-tl {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-window-maximized .x-window-tr {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.x-window-maximized .x-window-footer {
	PADDING-BOTTOM: 0px
}
.x-window-maximized .x-window-tc {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; BACKGROUND-COLOR: white
}
.x-window-maximized .x-window-mc {
	BORDER-RIGHT: 0px; BORDER-LEFT: 0px
}
.x-window-tbar .x-toolbar {
	BORDER-RIGHT: 0px; BORDER-LEFT: 0px
}
.x-window-bbar .x-toolbar {
	BORDER-RIGHT: 0px; BORDER-LEFT: 0px
}
.x-window-bbar .x-toolbar {
	BORDER-TOP: #99bbe8 1px solid; BORDER-BOTTOM: 0px
}
.x-window-draggable {
	CURSOR: move
}
.x-window-draggable .x-window-header-text {
	CURSOR: move
}
.x-window-maximized .x-window-draggable {
	CURSOR: default
}
.x-window-maximized .x-window-draggable .x-window-header-text {
	CURSOR: default
}
.x-window-body {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
.x-panel-ghost .x-window-tl {
	BORDER-BOTTOM: #99bbe8 1px solid
}
.x-panel-collapsed .x-window-tl {
	BORDER-BOTTOM: #84a0c4 1px solid
}
.x-window-maximized-ct {
	OVERFLOW: hidden
}
.x-window-maximized .x-resizable-handle {
	DISPLAY: none
}
.x-window-sizing-ghost UL {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: =
0px
}
.x-dlg-focus {
	LEFT: 0px; OVERFLOW: hidden; WIDTH: 0px; POSITION: absolute; TOP: 0px; =
HEIGHT: 0px; -moz-outline: 0 none; outline: 0 none
}
.x-dlg-mask {
	DISPLAY: none; Z-INDEX: 10000; FILTER: alpha(opacity=3D50); LEFT: 0px; =
POSITION: absolute; TOP: 0px; BACKGROUND-COLOR: #ccc; -moz-opacity: 0.5; =
opacity: .50
}
BODY.x-body-masked.ext-ie6 SELECT {
	VISIBILITY: hidden
}
BODY.x-body-masked.ext-ie6 .x-window SELECT {
	VISIBILITY: visible
}
.x-window-plain .x-window-mc {
	BORDER-RIGHT: #dfe8f6 1px solid; BORDER-TOP: #a3bae9 1px solid; =
BACKGROUND: #cad9ec; BORDER-LEFT: #a3bae9 1px solid; BORDER-BOTTOM: =
#dfe8f6 1px solid
}
.x-window-plain .x-window-body {
	BORDER-RIGHT: #a3bae9 1px solid; BORDER-TOP: #dfe8f6 1px solid; =
BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-LEFT: #dfe8f6 =
1px solid; BORDER-BOTTOM: #a3bae9 1px solid
}
BODY.x-body-masked .x-window-plain .x-window-mc {
	BACKGROUND: #c7d6e9
}
.x-html-editor-wrap {
	BORDER-RIGHT: #a9bfd3 1px solid; BORDER-TOP: #a9bfd3 1px solid; =
BACKGROUND: white; BORDER-LEFT: #a9bfd3 1px solid; BORDER-BOTTOM: =
#a9bfd3 1px solid
}
.x-html-editor-tb .x-btn-text {
	BACKGROUND: url(../images/default/editor/tb-sprite.gif) no-repeat
}
.x-html-editor-tb .x-edit-bold .x-btn-text {
	BACKGROUND-POSITION: 0px 0px
}
.x-html-editor-tb .x-edit-italic .x-btn-text {
	BACKGROUND-POSITION: -16px 0px
}
.x-html-editor-tb .x-edit-underline .x-btn-text {
	BACKGROUND-POSITION: -32px 0px
}
.x-html-editor-tb .x-edit-forecolor .x-btn-text {
	BACKGROUND-POSITION: -160px 0px
}
.x-html-editor-tb .x-edit-backcolor .x-btn-text {
	BACKGROUND-POSITION: -176px 0px
}
.x-html-editor-tb .x-edit-justifyleft .x-btn-text {
	BACKGROUND-POSITION: -112px 0px
}
.x-html-editor-tb .x-edit-justifycenter .x-btn-text {
	BACKGROUND-POSITION: -128px 0px
}
.x-html-editor-tb .x-edit-justifyright .x-btn-text {
	BACKGROUND-POSITION: -144px 0px
}
.x-html-editor-tb .x-edit-insertorderedlist .x-btn-text {
	BACKGROUND-POSITION: -80px 0px
}
.x-html-editor-tb .x-edit-insertunorderedlist .x-btn-text {
	BACKGROUND-POSITION: -96px 0px
}
.x-html-editor-tb .x-edit-increasefontsize .x-btn-text {
	BACKGROUND-POSITION: -48px 0px
}
.x-html-editor-tb .x-edit-decreasefontsize .x-btn-text {
	BACKGROUND-POSITION: -64px 0px
}
.x-html-editor-tb .x-edit-sourceedit .x-btn-text {
	BACKGROUND-POSITION: -192px 0px
}
.x-html-editor-tb .x-edit-createlink .x-btn-text {
	BACKGROUND-POSITION: -208px 0px
}
.x-html-editor-tip .x-tip-bd .x-tip-bd-inner {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 1px; =
PADDING-TOP: 5px
}
.x-html-editor-tb .x-toolbar {
	POSITION: static! important
}
.x-panel-noborder .x-panel-body-noborder {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
.x-panel-noborder .x-panel-header-noborder {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM: #99bbe8 =
1px solid; BORDER-RIGHT-WIDTH: 0px
}
.x-panel-noborder .x-panel-tbar-noborder .x-toolbar {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM: #99bbe8 =
1px solid; BORDER-RIGHT-WIDTH: 0px
}
.x-panel-noborder .x-panel-bbar-noborder .x-toolbar {
	BORDER-TOP: #99bbe8 1px solid; BORDER-LEFT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px
}
.x-window-noborder .x-window-mc {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
.x-window-plain .x-window-body-noborder {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
.x-tab-panel-noborder .x-tab-panel-body-noborder {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
.x-tab-panel-noborder .x-tab-panel-header-noborder {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px
}
.x-tab-panel-noborder .x-tab-panel-footer-noborder {
	BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: =
0px
}
.x-tab-panel-bbar-noborder .x-toolbar {
	BORDER-TOP: #99bbe8 1px solid; BORDER-LEFT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px
}
.x-tab-panel-tbar-noborder .x-toolbar {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM: #99bbe8 =
1px solid; BORDER-RIGHT-WIDTH: 0px
}
.x-border-layout-ct {
	BACKGROUND: #dfe8f6
}
.x-border-panel {
	LEFT: 0px; POSITION: absolute; TOP: 0px
}
.x-tool-collapse-south {
	BACKGROUND-POSITION: 0px -195px
}
.x-tool-collapse-south-over {
	BACKGROUND-POSITION: -15px -195px
}
.x-tool-collapse-north {
	BACKGROUND-POSITION: 0px -210px
}
.x-tool-collapse-north-over {
	BACKGROUND-POSITION: -15px -210px
}
.x-tool-collapse-west {
	BACKGROUND-POSITION: 0px -180px
}
.x-tool-collapse-west-over {
	BACKGROUND-POSITION: -15px -180px
}
.x-tool-collapse-east {
	BACKGROUND-POSITION: 0px -165px
}
.x-tool-collapse-east-over {
	BACKGROUND-POSITION: -15px -165px
}
.x-tool-expand-south {
	BACKGROUND-POSITION: 0px -210px
}
.x-tool-expand-south-over {
	BACKGROUND-POSITION: -15px -210px
}
.x-tool-expand-north {
	BACKGROUND-POSITION: 0px -195px
}
.x-tool-expand-north-over {
	BACKGROUND-POSITION: -15px -195px
}
.x-tool-expand-west {
	BACKGROUND-POSITION: 0px -165px
}
.x-tool-expand-west-over {
	BACKGROUND-POSITION: -15px -165px
}
.x-tool-expand-east {
	BACKGROUND-POSITION: 0px -180px
}
.x-tool-expand-east-over {
	BACKGROUND-POSITION: -15px -180px
}
.x-tool-expand-north {
	FLOAT: right; MARGIN: 3px
}
.x-tool-expand-south {
	FLOAT: right; MARGIN: 3px
}
.x-tool-expand-east {
	FLOAT: none; MARGIN: 3px auto
}
.x-tool-expand-west {
	FLOAT: none; MARGIN: 3px auto
}
.x-accordion-hd .x-tool-toggle {
	BACKGROUND-POSITION: 0px -255px
}
.x-accordion-hd .x-tool-toggle-over {
	BACKGROUND-POSITION: -15px -255px
}
.x-panel-collapsed .x-accordion-hd .x-tool-toggle {
	BACKGROUND-POSITION: 0px -240px
}
.x-panel-collapsed .x-accordion-hd .x-tool-toggle-over {
	BACKGROUND-POSITION: -15px -240px
}
.x-accordion-hd {
	BORDER-TOP: 0px; FONT-WEIGHT: normal; BACKGROUND: =
url(../images/default/panel/light-hd.gif) repeat-x 0px -9px; =
PADDING-BOTTOM: 3px; COLOR: #222; PADDING-TOP: 4px
}
.x-layout-collapsed {
	BORDER-RIGHT: #98c0f4 1px solid; BORDER-TOP: #98c0f4 1px solid; =
Z-INDEX: 20; LEFT: -10000px; VISIBILITY: hidden; OVERFLOW: hidden; =
BORDER-LEFT: #98c0f4 1px solid; WIDTH: 20px; BORDER-BOTTOM: #98c0f4 1px =
solid; POSITION: absolute; TOP: -10000px; HEIGHT: 20px; =
BACKGROUND-COLOR: #d2e0f2
}
.ext-border-box .x-layout-collapsed {
	WIDTH: 22px; HEIGHT: 22px
}
.x-layout-collapsed-over {
	CURSOR: pointer; BACKGROUND-COLOR: #d9e8fb
}
.x-layout-collapsed-west .x-layout-collapsed-tools {
	LEFT: 0px; WIDTH: 20px; POSITION: absolute; TOP: 0px; HEIGHT: 20px
}
.x-layout-collapsed-east .x-layout-collapsed-tools {
	LEFT: 0px; WIDTH: 20px; POSITION: absolute; TOP: 0px; HEIGHT: 20px
}
.x-layout-split {
	FONT-SIZE: 1px; Z-INDEX: 3; WIDTH: 5px; LINE-HEIGHT: 1px; POSITION: =
absolute; HEIGHT: 5px; BACKGROUND-COLOR: transparent
}
.x-layout-split-h {
	BACKGROUND-POSITION: left 50%; BACKGROUND-IMAGE: =
url(../images/default/s.gif)
}
.x-layout-split-v {
	BACKGROUND-POSITION: 50% top; BACKGROUND-IMAGE: =
url(../images/default/s.gif)
}
.x-column-layout-ct {
	OVERFLOW: hidden; ZOOM: 1
}
.x-column {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FLOAT: left; PADDING-BOTTOM: =
0px; MARGIN: 0px; OVERFLOW: hidden; PADDING-TOP: 0px; ZOOM: 1
}
.x-layout-mini {
	DISPLAY: block; FILTER: alpha(opacity=3D50); LEFT: 0px; WIDTH: 5px; =
CURSOR: pointer; POSITION: absolute; TOP: 0px; HEIGHT: 35px; =
-moz-opacity: .5; opacity: .5
}
.x-layout-mini-over {
	FILTER: none; -moz-opacity: 1; opacity: 1
}
.x-layout-collapsed-over .x-layout-mini {
	FILTER: none; -moz-opacity: 1; opacity: 1
}
.x-layout-split-west .x-layout-mini {
	BACKGROUND-IMAGE: url(../images/default/layout/mini-left.gif); TOP: 48%
}
.x-layout-split-east .x-layout-mini {
	BACKGROUND-IMAGE: url(../images/default/layout/mini-right.gif); TOP: =
48%
}
.x-layout-split-north .x-layout-mini {
	LEFT: 48%; BACKGROUND-IMAGE: =
url(../images/default/layout/mini-top.gif); WIDTH: 35px; HEIGHT: 5px
}
.x-layout-split-south .x-layout-mini {
	LEFT: 48%; BACKGROUND-IMAGE: =
url(../images/default/layout/mini-bottom.gif); WIDTH: 35px; HEIGHT: 5px
}
.x-layout-cmini-west .x-layout-mini {
	BACKGROUND-IMAGE: url(../images/default/layout/mini-right.gif); TOP: =
48%
}
.x-layout-cmini-east .x-layout-mini {
	BACKGROUND-IMAGE: url(../images/default/layout/mini-left.gif); TOP: 48%
}
.x-layout-cmini-north .x-layout-mini {
	LEFT: 48%; BACKGROUND-IMAGE: =
url(../images/default/layout/mini-bottom.gif); WIDTH: 35px; HEIGHT: 5px
}
.x-layout-cmini-south .x-layout-mini {
	LEFT: 48%; BACKGROUND-IMAGE: =
url(../images/default/layout/mini-top.gif); WIDTH: 35px; HEIGHT: 5px
}
.x-layout-cmini-west {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
0px; BORDER-LEFT: 0px; WIDTH: 5px! important; PADDING-TOP: 0px; =
BORDER-BOTTOM: 0px
}
.x-layout-cmini-east {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
0px; BORDER-LEFT: 0px; WIDTH: 5px! important; PADDING-TOP: 0px; =
BORDER-BOTTOM: 0px
}
.x-layout-cmini-north {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
0px; BORDER-LEFT: 0px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; HEIGHT: =
5px! important
}
.x-layout-cmini-south {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
0px; BORDER-LEFT: 0px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; HEIGHT: =
5px! important
}
.x-viewport {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; OVERFLOW: hidden; BORDER-LEFT: =
0px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; HEIGHT: 100%
}
.x-viewport BODY {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: 0px; PADDING-LEFT: =
0px; PADDING-BOTTOM: 0px; MARGIN: 0px; OVERFLOW: hidden; BORDER-LEFT: =
0px; PADDING-TOP: 0px; BORDER-BOTTOM: 0px; HEIGHT: 100%
}
.x-abs-layout-item {
	LEFT: 0px; POSITION: absolute; TOP: 0px
}
.ext-ie INPUT.x-abs-layout-item {
	MARGIN: 0px
}
.ext-ie TEXTAREA.x-abs-layout-item {
	MARGIN: 0px
}
.x-progress-wrap {
	BORDER-RIGHT: #6593cf 1px solid; BORDER-TOP: #6593cf 1px solid; =
OVERFLOW: hidden; BORDER-LEFT: #6593cf 1px solid; BORDER-BOTTOM: #6593cf =
1px solid
}
.x-progress-inner {
	BACKGROUND: url(../images/default/qtip/bg.gif) #e0e8f3 repeat-x; =
POSITION: relative; HEIGHT: 18px
}
.x-progress-bar {
	BORDER-RIGHT: #7fa9e4 1px solid; BORDER-TOP: #d1e4fd 1px solid; =
BACKGROUND: url(../images/default/progress/progress-bg.gif) #9cbfee =
repeat-x left center; FLOAT: left; WIDTH: 0px; BORDER-BOTTOM: #7fa9e4 =
1px solid; HEIGHT: 18px
}
.x-progress-text {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: =
11px; LEFT: 0px; PADDING-BOTTOM: 1px; OVERFLOW: hidden; COLOR: #fff; =
PADDING-TOP: 1px; POSITION: absolute; TEXT-ALIGN: center
}
.x-progress-text-back {
	COLOR: #396095; LINE-HEIGHT: 16px
}
.ext-ie .x-progress-text-back {
	LINE-HEIGHT: 15px
}
.x-window-dlg .x-window-body {
	BORDER-RIGHT: 0px; PADDING-RIGHT: 10px; BORDER-TOP: 0px; PADDING-LEFT: =
10px; PADDING-BOTTOM: 5px; OVERFLOW: hidden! important; BORDER-LEFT: =
0px; PADDING-TOP: 5px; BORDER-BOTTOM: 0px
}
.x-window-dlg .x-window-mc {
	BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: =
0px
}
.x-window-dlg .ext-mb-text {
	FONT-SIZE: 12px
}
.x-window-dlg .x-window-header-text {
	FONT-SIZE: 12px
}
.x-window-dlg .ext-mb-input {
	MARGIN-TOP: 4px; WIDTH: 95%
}
.x-window-dlg .ext-mb-textarea {
	MARGIN-TOP: 4px; FONT: 12px tahoma,arial,helvetica,sans-serif
}
.x-window-dlg .x-progress-wrap {
	MARGIN-TOP: 4px
}
.ext-ie .x-window-dlg .x-progress-wrap {
	MARGIN-TOP: 6px
}
.x-window-dlg .x-msg-box-wait {
	DISPLAY: block; PADDING-LEFT: 18px; BACKGROUND: =
url(../images/default/grid/loading.gif) no-repeat left 50%; WIDTH: =
300px; LINE-HEIGHT: 18px
}
.x-window-dlg .ext-mb-icon {
	FLOAT: left; WIDTH: 47px; HEIGHT: 32px
}
.x-window-dlg .ext-mb-icon {
	FLOAT: left; WIDTH: 47px; HEIGHT: 32px
}
.ext-ie .x-window-dlg .ext-mb-icon {
	WIDTH: 44px
}
.x-window-dlg .ext-mb-info {
	BACKGROUND: url(../images/default/window/icon-info.gif) no-repeat left =
top
}
.x-window-dlg .ext-mb-warning {
	BACKGROUND: url(../images/default/window/icon-warning.gif) no-repeat =
left top
}
.x-window-dlg .ext-mb-question {
	BACKGROUND: url(../images/default/window/icon-question.gif) no-repeat =
left top
}
.x-window-dlg .ext-mb-error {
	BACKGROUND: url(../images/default/window/icon-error.gif) no-repeat left =
top
}
.ext-gecko .ext-mb-fix-cursor {
	OVERFLOW: auto
}
.x-slider {
	ZOOM: 1
}
.x-slider-inner {
	LEFT: 0px; OVERFLOW: visible; ZOOM: 1; POSITION: relative; TOP: 0px
}
.x-slider-focus {
	FONT-SIZE: 1px; LEFT: 0px; WIDTH: 1px; LINE-HEIGHT: 1px; POSITION: =
absolute; TOP: 0px; HEIGHT: 1px; -moz-user-select: normal; =
-khtml-user-select: normal; -moz-outline: 0 none; outline: 0 none
}
.x-slider-horz {
	PADDING-LEFT: 7px; BACKGROUND: =
url(../images/default/slider/slider-bg.png) no-repeat 0px -22px
}
.x-slider-horz .x-slider-end {
	PADDING-RIGHT: 7px; BACKGROUND: =
url(../images/default/slider/slider-bg.png) no-repeat right -44px; ZOOM: =
1
}
.x-slider-horz .x-slider-inner {
	BACKGROUND: url(../images/default/slider/slider-bg.png) repeat-x 0px =
0px; HEIGHT: 22px
}
.x-slider-horz .x-slider-thumb {
	BACKGROUND: url(../images/default/slider/slider-thumb.png) no-repeat =
0px 0px; LEFT: 0px; WIDTH: 14px; POSITION: absolute; TOP: 3px; HEIGHT: =
15px
}
.x-slider-horz .x-slider-thumb-over {
	BACKGROUND-POSITION: -14px -15px
}
.x-slider-horz .x-slider-thumb-drag {
	BACKGROUND-POSITION: -28px -30px
}
.x-slider-vert {
	BACKGROUND: url(../images/default/slider/slider-v-bg.png) no-repeat =
-44px 0px; WIDTH: 22px; PADDING-TOP: 7px
}
.x-slider-vert .x-slider-end {
	BACKGROUND: url(../images/default/slider/slider-v-bg.png) no-repeat =
-22px bottom; PADDING-BOTTOM: 7px; ZOOM: 1
}
.x-slider-vert .x-slider-inner {
	BACKGROUND: url(../images/default/slider/slider-v-bg.png) repeat-y 0px =
0px
}
.x-slider-vert .x-slider-thumb {
	BACKGROUND: url(../images/default/slider/slider-v-thumb.png) no-repeat =
0px 0px; LEFT: 3px; WIDTH: 15px; BOTTOM: 0px; POSITION: absolute; =
HEIGHT: 14px
}
.x-slider-vert .x-slider-thumb-over {
	BACKGROUND-POSITION: -15px -14px
}
.x-slider-vert .x-slider-thumb-drag {
	BACKGROUND-POSITION: -30px -28px
}

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/upload-dialog-2.0/ExtJS.ux/UploadDialog/css/Ext.ux.UploadDialog.css

.ext-ux-uploaddialog-addbtn {
	BACKGROUND: url(../images/file-add.gif) no-repeat left center
}
.ext-ux-uploaddialog-removebtn {
	BACKGROUND: url(../images/file-remove.gif) no-repeat left center
}
.ext-ux-uploaddialog-resetbtn {
	BACKGROUND: url(../images/reset.gif) no-repeat left center
}
.ext-ux-uploaddialog-uploadstartbtn {
	BACKGROUND: url(../images/upload-start.gif) no-repeat left center
}
.ext-ux-uploaddialog-uploadstopbtn {
	BACKGROUND: url(../images/upload-stop.gif) no-repeat left center
}
.ext-ux-uploaddialog-indicator-stoped {
	BACKGROUND: url(../images/done.gif) no-repeat center center; WIDTH: =
16px; HEIGHT: 16px
}
.ext-ux-uploaddialog-indicator-processing {
	BACKGROUND: url(../images/loading.gif) no-repeat center center; WIDTH: =
16px; HEIGHT: 16px
}
.ext-ux-uploaddialog-state {
	BACKGROUND-POSITION: center center; BACKGROUND-REPEAT: no-repeat; =
TEXT-ALIGN: center
}
.ext-ux-uploaddialog-state-0 {
	BACKGROUND-IMAGE: url(../images/uncheck.gif)
}
.ext-ux-uploaddialog-state-1 {
	BACKGROUND-IMAGE: url(../images/check.gif)
}
.ext-ux-uploaddialog-state-2 {
	BACKGROUND-IMAGE: url(../images/failed.gif)
}
.ext-ux-uploaddialog-state-3 {
	BACKGROUND-IMAGE: url(../images/file-uploading.gif)
}
.ext-ie7 .ext-ux-uploaddialog-dialog .x-progress-bar .x-progress-text =
DIV {
	DISPLAY: none
}
.ext-ie7 .ext-ux-uploaddialog-dialog .x-progress-text-back {
	RIGHT: 0px; LEFT: 0px; POSITION: absolute
}
.ext-ie7 .ext-ux-uploaddialog-dialog .x-progress-text-back DIV {
	WIDTH: auto! important; WHITE-SPACE: nowrap
}

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/upload-dialog-2.0/upload-dialog.css

#demo-panel {
	BORDER-RIGHT: #bbbbbb 1px solid; BORDER-TOP: #bbbbbb 1px solid; FLOAT: =
right; MARGIN: 1em; BORDER-LEFT: #bbbbbb 1px solid; WIDTH: 250px; =
PADDING-TOP: 0px; BORDER-BOTTOM: #bbbbbb 1px solid; HEIGHT: 400px; =
BACKGROUND-COLOR: #f1f1f1
}
#demo-panel H3 {
	PADDING-RIGHT: 0.2em; PADDING-LEFT: 0.2em; PADDING-BOTTOM: 0.2em; =
MARGIN: 0px; COLOR: white; PADDING-TOP: 0.2em; BORDER-BOTTOM: #bbbbbb =
1px solid; BACKGROUND-COLOR: #1e4e8f
}
#file-list {
	BORDER-RIGHT: #bbbbbb 1px solid; PADDING-RIGHT: 0.2em; BORDER-TOP: =
#bbbbbb 1px solid; PADDING-LEFT: 0.2em; FONT-SIZE: 8pt; PADDING-BOTTOM: =
0.2em; MARGIN: 1em; OVERFLOW: auto; BORDER-LEFT: #bbbbbb 1px solid; =
WIDTH: 222px; PADDING-TOP: 0.2em; BORDER-BOTTOM: #bbbbbb 1px solid; =
FONT-FAMILY: Arial, sans-serif; HEIGHT: 305px
}
#show-dialog-btn {
	TEXT-ALIGN: center
}
#show-dialog-btn TABLE {
	MARGIN-LEFT: auto; MARGIN-RIGHT: auto
}
#help-panel {
	MARGIN: 1em 300px 1em 1em
}
#help-panel H1 {
	FONT-WEIGHT: bold; FONT-SIZE: 14pt; MARGIN-BOTTOM: 1em
}
#help-panel H2 {
	FONT-WEIGHT: bold; FONT-SIZE: 12pt; MARGIN-BOTTOM: 1em
}
#help-panel PRE {
	BORDER-RIGHT: #e8e8e8 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: =
#e8e8e8 1px solid; PADDING-LEFT: 5px; FONT-SIZE: 12px; BACKGROUND: =
#f8f8f8 0% 50%; PADDING-BOTTOM: 5px; MARGIN: 1em 0px 1em 1em; =
BORDER-LEFT: #e8e8e8 8px solid; LINE-HEIGHT: 14px; PADDING-TOP: 5px; =
BORDER-BOTTOM: #e8e8e8 1px solid
}
#help-panel P {
	MARGIN-BOTTOM: 1em
}
#help-panel UL {
	MARGIN-BOTTOM: 1em
}
#help-panel A {
	COLOR: #183365; text-decration: none
}
#help-panel A:hover {
	COLOR: red; text-decration: underline
}

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/ExtJS/adapter/ext/ext-base.js

/*
 * Ext JS Library 2.1
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 *=20
 * http://extjs.com/license
 */

Ext=3D{version:"2.1"};window["undefined"]=3Dwindow["undefined"];Ext.apply=
=3Dfunction(C,D,B){if(B){Ext.apply(C,B)}if(C&&D&&typeof =
D=3D=3D"object"){for(var A in D){C[A]=3DD[A]}}return C};(function(){var =
idSeed=3D0;var ua=3Dnavigator.userAgent.toLowerCase();var =
isStrict=3Ddocument.compatMode=3D=3D"CSS1Compat",isOpera=3Dua.indexOf("op=
era")>-1,isSafari=3D(/webkit|khtml/).test(ua),isSafari3=3DisSafari&&ua.in=
dexOf("webkit/5")!=3D-1,isIE=3D!isOpera&&ua.indexOf("msie")>-1,isIE7=3D!i=
sOpera&&ua.indexOf("msie =
7")>-1,isGecko=3D!isSafari&&ua.indexOf("gecko")>-1,isBorderBox=3DisIE&&!i=
sStrict,isWindows=3D(ua.indexOf("windows")!=3D-1||ua.indexOf("win32")!=3D=
-1),isMac=3D(ua.indexOf("macintosh")!=3D-1||ua.indexOf("mac os =
x")!=3D-1),isAir=3D(ua.indexOf("adobeair")!=3D-1),isLinux=3D(ua.indexOf("=
linux")!=3D-1),isSecure=3Dwindow.location.href.toLowerCase().indexOf("htt=
ps")=3D=3D=3D0;if(isIE&&!isIE7){try{document.execCommand("BackgroundImage=
Cache",false,true)}catch(e){}}Ext.apply(Ext,{isStrict:isStrict,isSecure:i=
sSecure,isReady:false,enableGarbageCollector:true,enableListenerCollectio=
n:false,SSL_SECURE_URL:"javascript:false",BLANK_IMAGE_URL:"http:/"+"/extj=
s.com/s.gif",emptyFn:function(){},applyIf:function(o,c){if(o&&c){for(var =
p in c){if(typeof o[p]=3D=3D"undefined"){o[p]=3Dc[p]}}}return =
o},addBehaviors:function(o){if(!Ext.isReady){Ext.onReady(function(){Ext.a=
ddBehaviors(o)});return }var cache=3D{};for(var b in o){var =
parts=3Db.split("@");if(parts[1]){var =
s=3Dparts[0];if(!cache[s]){cache[s]=3DExt.select(s)}cache[s].on(parts[1],=
o[b])}}cache=3Dnull},id:function(el,prefix){prefix=3Dprefix||"ext-gen";el=
=3DExt.getDom(el);var id=3Dprefix+(++idSeed);return =
el?(el.id?el.id:(el.id=3Did)):id},extend:function(){var =
io=3Dfunction(o){for(var m in o){this[m]=3Do[m]}};var =
oc=3DObject.prototype.constructor;return =
function(sb,sp,overrides){if(typeof =
sp=3D=3D"object"){overrides=3Dsp;sp=3Dsb;sb=3Doverrides.constructor!=3Doc=
?overrides.constructor:function(){sp.apply(this,arguments)}}var =
F=3Dfunction(){},sbp,spp=3Dsp.prototype;F.prototype=3Dspp;sbp=3Dsb.protot=
ype=3Dnew =
F();sbp.constructor=3Dsb;sb.superclass=3Dspp;if(spp.constructor=3D=3Doc){=
spp.constructor=3Dsp}sb.override=3Dfunction(o){Ext.override(sb,o)};sbp.ov=
erride=3Dio;Ext.override(sb,overrides);sb.extend=3Dfunction(o){Ext.extend=
(sb,o)};return =
sb}}(),override:function(origclass,overrides){if(overrides){var =
p=3Dorigclass.prototype;for(var method in =
overrides){p[method]=3Doverrides[method]}}},namespace:function(){var =
a=3Darguments,o=3Dnull,i,j,d,rt;for(i=3D0;i<a.length;++i){d=3Da[i].split(=
".");rt=3Dd[0];eval("if (typeof "+rt+" =3D=3D \"undefined\"){"+rt+" =3D =
{};} o =3D =
"+rt+";");for(j=3D1;j<d.length;++j){o[d[j]]=3Do[d[j]]||{};o=3Do[d[j]]}}},=
urlEncode:function(o){if(!o){return""}var buf=3D[];for(var key in o){var =
ov=3Do[key],k=3DencodeURIComponent(key);var type=3Dtypeof =
ov;if(type=3D=3D"undefined"){buf.push(k,"=3D&")}else{if(type!=3D"function=
"&&type!=3D"object"){buf.push(k,"=3D",encodeURIComponent(ov),"&")}else{if=
(Ext.isArray(ov)){if(ov.length){for(var =
i=3D0,len=3Dov.length;i<len;i++){buf.push(k,"=3D",encodeURIComponent(ov[i=
]=3D=3D=3Dundefined?"":ov[i]),"&")}}else{buf.push(k,"=3D&")}}}}}buf.pop()=
;return =
buf.join("")},urlDecode:function(string,overwrite){if(!string||!string.le=
ngth){return{}}var obj=3D{};var pairs=3Dstring.split("&");var =
pair,name,value;for(var =
i=3D0,len=3Dpairs.length;i<len;i++){pair=3Dpairs[i].split("=3D");name=3Dd=
ecodeURIComponent(pair[0]);value=3DdecodeURIComponent(pair[1]);if(overwri=
te!=3D=3Dtrue){if(typeof =
obj[name]=3D=3D"undefined"){obj[name]=3Dvalue}else{if(typeof =
obj[name]=3D=3D"string"){obj[name]=3D[obj[name]];obj[name].push(value)}el=
se{obj[name].push(value)}}}else{obj[name]=3Dvalue}}return =
obj},each:function(array,fn,scope){if(!Ext.isArray(array)){array=3D[array=
]}for(var =
i=3D0,len=3Darray.length;i<len;i++){if(fn.call(scope||array[i],array[i],i=
,array)=3D=3D=3Dfalse){return i}}},combine:function(){var =
as=3Darguments,l=3Das.length,r=3D[];for(var i=3D0;i<l;i++){var =
a=3Das[i];if(Ext.isArray(a)){r=3Dr.concat(a)}else{if(a.length!=3D=3Dundef=
ined&&!a.substr){r=3Dr.concat(Array.prototype.slice.call(a,0))}else{r.pus=
h(a)}}}return r},escapeRe:function(s){return =
s.replace(/([.*+?^${}()|[\]\/\\])/g,"\\$1")},callback:function(cb,scope,a=
rgs,delay){if(typeof =
cb=3D=3D"function"){if(delay){cb.defer(delay,scope,args||[])}else{cb.appl=
y(scope,args||[])}}},getDom:function(el){if(!el||!document){return =
null}return el.dom?el.dom:(typeof =
el=3D=3D"string"?document.getElementById(el):el)},getDoc:function(){retur=
n Ext.get(document)},getBody:function(){return =
Ext.get(document.body||document.documentElement)},getCmp:function(id){ret=
urn Ext.ComponentMgr.get(id)},num:function(v,defaultValue){if(typeof =
v!=3D"number"){return defaultValue}return v},destroy:function(){for(var =
i=3D0,a=3Darguments,len=3Da.length;i<len;i++){var =
as=3Da[i];if(as){if(typeof =
as.destroy=3D=3D"function"){as.destroy()}else{if(as.dom){as.removeAllList=
eners();as.remove()}}}}},removeNode:isIE?function(){var d;return =
function(n){if(n&&n.tagName!=3D"BODY"){d=3Dd||document.createElement("div=
");d.appendChild(n);d.innerHTML=3D""}}}():function(n){if(n&&n.parentNode&=
&n.tagName!=3D"BODY"){n.parentNode.removeChild(n)}},type:function(o){if(o=
=3D=3D=3Dundefined||o=3D=3D=3Dnull){return =
false}if(o.htmlElement){return"element"}var t=3Dtypeof =
o;if(t=3D=3D"object"&&o.nodeName){switch(o.nodeType){case =
1:return"element";case =
3:return(/\S/).test(o.nodeValue)?"textnode":"whitespace"}}if(t=3D=3D"obje=
ct"||t=3D=3D"function"){switch(o.constructor){case =
Array:return"array";case RegExp:return"regexp"}if(typeof =
o.length=3D=3D"number"&&typeof =
o.item=3D=3D"function"){return"nodelist"}}return =
t},isEmpty:function(v,allowBlank){return =
v=3D=3D=3Dnull||v=3D=3D=3Dundefined||(!allowBlank?v=3D=3D=3D"":false)},va=
lue:function(v,defaultValue,allowBlank){return =
Ext.isEmpty(v,allowBlank)?defaultValue:v},isArray:function(v){return =
v&&typeof v.pop=3D=3D"function"},isDate:function(v){return v&&typeof =
v.getFullYear=3D=3D"function"},isOpera:isOpera,isSafari:isSafari,isSafari=
3:isSafari3,isSafari2:isSafari&&!isSafari3,isIE:isIE,isIE6:isIE&&!isIE7,i=
sIE7:isIE7,isGecko:isGecko,isBorderBox:isBorderBox,isLinux:isLinux,isWind=
ows:isWindows,isMac:isMac,isAir:isAir,useShims:((isIE&&!isIE7)||(isGecko&=
&isMac))});Ext.ns=3DExt.namespace})();Ext.ns("Ext","Ext.util","Ext.grid",=
"Ext.dd","Ext.tree","Ext.data","Ext.form","Ext.menu","Ext.state","Ext.lib=
","Ext.layout","Ext.app","Ext.ux");Ext.apply(Function.prototype,{createCa=
llback:function(){var A=3Darguments;var B=3Dthis;return =
function(){return B.apply(window,A)}},createDelegate:function(C,B,A){var =
D=3Dthis;return function(){var =
F=3DB||arguments;if(A=3D=3D=3Dtrue){F=3DArray.prototype.slice.call(argume=
nts,0);F=3DF.concat(B)}else{if(typeof =
A=3D=3D"number"){F=3DArray.prototype.slice.call(arguments,0);var =
E=3D[A,0].concat(B);Array.prototype.splice.apply(F,E)}}return =
D.apply(C||window,F)}},defer:function(C,E,B,A){var =
D=3Dthis.createDelegate(E,B,A);if(C){return setTimeout(D,C)}D();return =
0},createSequence:function(B,A){if(typeof B!=3D"function"){return =
this}var C=3Dthis;return function(){var =
D=3DC.apply(this||window,arguments);B.apply(A||this||window,arguments);re=
turn D}},createInterceptor:function(B,A){if(typeof =
B!=3D"function"){return this}var C=3Dthis;return =
function(){B.target=3Dthis;B.method=3DC;if(B.apply(A||this||window,argume=
nts)=3D=3D=3Dfalse){return }return =
C.apply(this||window,arguments)}}});Ext.applyIf(String,{escape:function(A=
){return A.replace(/('|\\)/g,"\\$1")},leftPad:function(D,B,C){var =
A=3Dnew String(D);if(!C){C=3D" "}while(A.length<B){A=3DC+A}return =
A.toString()},format:function(B){var =
A=3DArray.prototype.slice.call(arguments,1);return =
B.replace(/\{(\d+)\}/g,function(C,D){return =
A[D]})}});String.prototype.toggle=3Dfunction(B,A){return =
this=3D=3DB?A:B};String.prototype.trim=3Dfunction(){var =
A=3D/^\s+|\s+$/g;return function(){return =
this.replace(A,"")}}();Ext.applyIf(Number.prototype,{constrain:function(B=
,A){return =
Math.min(Math.max(this,B),A)}});Ext.applyIf(Array.prototype,{indexOf:func=
tion(C){for(var B=3D0,A=3Dthis.length;B<A;B++){if(this[B]=3D=3DC){return =
B}}return -1},remove:function(B){var =
A=3Dthis.indexOf(B);if(A!=3D-1){this.splice(A,1)}return =
this}});Date.prototype.getElapsed=3Dfunction(A){return Math.abs((A||new =
Date()).getTime()-this.getTime())};=0A=
(function(){var B;Ext.lib.Dom=3D{getViewWidth:function(E){return =
E?this.getDocumentWidth():this.getViewportWidth()},getViewHeight:function=
(E){return =
E?this.getDocumentHeight():this.getViewportHeight()},getDocumentHeight:fu=
nction(){var =
E=3D(document.compatMode!=3D"CSS1Compat")?document.body.scrollHeight:docu=
ment.documentElement.scrollHeight;return =
Math.max(E,this.getViewportHeight())},getDocumentWidth:function(){var =
E=3D(document.compatMode!=3D"CSS1Compat")?document.body.scrollWidth:docum=
ent.documentElement.scrollWidth;return =
Math.max(E,this.getViewportWidth())},getViewportHeight:function(){if(Ext.=
isIE){return =
Ext.isStrict?document.documentElement.clientHeight:document.body.clientHe=
ight}else{return =
self.innerHeight}},getViewportWidth:function(){if(Ext.isIE){return =
Ext.isStrict?document.documentElement.clientWidth:document.body.clientWid=
th}else{return =
self.innerWidth}},isAncestor:function(F,G){F=3DExt.getDom(F);G=3DExt.getD=
om(G);if(!F||!G){return false}if(F.contains&&!Ext.isSafari){return =
F.contains(G)}else{if(F.compareDocumentPosition){return =
!!(F.compareDocumentPosition(G)&16)}else{var =
E=3DG.parentNode;while(E){if(E=3D=3DF){return =
true}else{if(!E.tagName||E.tagName.toUpperCase()=3D=3D"HTML"){return =
false}}E=3DE.parentNode}return false}}},getRegion:function(E){return =
Ext.lib.Region.getRegion(E)},getY:function(E){return =
this.getXY(E)[1]},getX:function(E){return =
this.getXY(E)[0]},getXY:function(G){var =
F,K,M,N,J=3D(document.body||document.documentElement);G=3DExt.getDom(G);i=
f(G=3D=3DJ){return[0,0]}if(G.getBoundingClientRect){M=3DG.getBoundingClie=
ntRect();N=3DC(document).getScroll();return[M.left+N.left,M.top+N.top]}va=
r O=3D0,L=3D0;F=3DG;var =
E=3DC(G).getStyle("position")=3D=3D"absolute";while(F){O+=3DF.offsetLeft;=
L+=3DF.offsetTop;if(!E&&C(F).getStyle("position")=3D=3D"absolute"){E=3Dtr=
ue}if(Ext.isGecko){K=3DC(F);var =
P=3DparseInt(K.getStyle("borderTopWidth"),10)||0;var =
H=3DparseInt(K.getStyle("borderLeftWidth"),10)||0;O+=3DH;L+=3DP;if(F!=3DG=
&&K.getStyle("overflow")!=3D"visible"){O+=3DH;L+=3DP}}F=3DF.offsetParent}=
if(Ext.isSafari&&E){O-=3DJ.offsetLeft;L-=3DJ.offsetTop}if(Ext.isGecko&&!E=
){var =
I=3DC(J);O+=3DparseInt(I.getStyle("borderLeftWidth"),10)||0;L+=3DparseInt=
(I.getStyle("borderTopWidth"),10)||0}F=3DG.parentNode;while(F&&F!=3DJ){if=
(!Ext.isOpera||(F.tagName!=3D"TR"&&C(F).getStyle("display")!=3D"inline"))=
{O-=3DF.scrollLeft;L-=3DF.scrollTop}F=3DF.parentNode}return[O,L]},setXY:f=
unction(E,F){E=3DExt.fly(E,"_setXY");E.position();var =
G=3DE.translatePoints(F);if(F[0]!=3D=3Dfalse){E.dom.style.left=3DG.left+"=
px"}if(F[1]!=3D=3Dfalse){E.dom.style.top=3DG.top+"px"}},setX:function(F,E=
){this.setXY(F,[E,false])},setY:function(E,F){this.setXY(E,[false,F])}};E=
xt.lib.Event=3Dfunction(){var F=3Dfalse;var G=3D[];var K=3D[];var =
I=3D0;var H=3D[];var E=3D0;var =
J=3Dnull;return{POLL_RETRYS:200,POLL_INTERVAL:20,EL:0,TYPE:1,FN:2,WFN:3,O=
BJ:3,ADJ_SCOPE:4,_interval:null,startInterval:function(){if(!this._interv=
al){var L=3Dthis;var =
M=3Dfunction(){L._tryPreloadAttach()};this._interval=3DsetInterval(M,this=
.POLL_INTERVAL)}},onAvailable:function(N,L,O,M){H.push({id:N,fn:L,obj:O,o=
verride:M,checkReady:false});I=3Dthis.POLL_RETRYS;this.startInterval()},a=
ddListener:function(Q,M,P){Q=3DExt.getDom(Q);if(!Q||!P){return =
false}if("unload"=3D=3DM){K[K.length]=3D[Q,M,P];return true}var =
O=3Dfunction(R){return typeof =
Ext!=3D"undefined"?P(Ext.lib.Event.getEvent(R)):false};var =
L=3D[Q,M,P,O];var N=3DG.length;G[N]=3DL;this.doAdd(Q,M,O,false);return =
true},removeListener:function(S,O,R){var =
Q,N;S=3DExt.getDom(S);if(!R){return =
this.purgeElement(S,false,O)}if("unload"=3D=3DO){for(Q=3D0,N=3DK.length;Q=
<N;Q++){var =
M=3DK[Q];if(M&&M[0]=3D=3DS&&M[1]=3D=3DO&&M[2]=3D=3DR){K.splice(Q,1);retur=
n true}}return false}var L=3Dnull;var =
P=3Darguments[3];if("undefined"=3D=3Dtypeof =
P){P=3Dthis._getCacheIndex(S,O,R)}if(P>=3D0){L=3DG[P]}if(!S||!L){return =
false}this.doRemove(S,O,L[this.WFN],false);delete G[P][this.WFN];delete =
G[P][this.FN];G.splice(P,1);return =
true},getTarget:function(N,M){N=3DN.browserEvent||N;var =
L=3DN.target||N.srcElement;return =
this.resolveTextNode(L)},resolveTextNode:function(L){if(Ext.isSafari&&L&&=
3=3D=3DL.nodeType){return L.parentNode}else{return =
L}},getPageX:function(M){M=3DM.browserEvent||M;var =
L=3DM.pageX;if(!L&&0!=3D=3DL){L=3DM.clientX||0;if(Ext.isIE){L+=3Dthis.get=
Scroll()[1]}}return L},getPageY:function(L){L=3DL.browserEvent||L;var =
M=3DL.pageY;if(!M&&0!=3D=3DM){M=3DL.clientY||0;if(Ext.isIE){M+=3Dthis.get=
Scroll()[0]}}return =
M},getXY:function(L){L=3DL.browserEvent||L;return[this.getPageX(L),this.g=
etPageY(L)]},getRelatedTarget:function(M){M=3DM.browserEvent||M;var =
L=3DM.relatedTarget;if(!L){if(M.type=3D=3D"mouseout"){L=3DM.toElement}els=
e{if(M.type=3D=3D"mouseover"){L=3DM.fromElement}}}return =
this.resolveTextNode(L)},getTime:function(N){N=3DN.browserEvent||N;if(!N.=
time){var M=3Dnew =
Date().getTime();try{N.time=3DM}catch(L){this.lastError=3DL;return =
M}}return =
N.time},stopEvent:function(L){this.stopPropagation(L);this.preventDefault=
(L)},stopPropagation:function(L){L=3DL.browserEvent||L;if(L.stopPropagati=
on){L.stopPropagation()}else{L.cancelBubble=3Dtrue}},preventDefault:funct=
ion(L){L=3DL.browserEvent||L;if(L.preventDefault){L.preventDefault()}else=
{L.returnValue=3Dfalse}},getEvent:function(M){var =
L=3DM||window.event;if(!L){var =
N=3Dthis.getEvent.caller;while(N){L=3DN.arguments[0];if(L&&Event=3D=3DL.c=
onstructor){break}N=3DN.caller}}return =
L},getCharCode:function(L){L=3DL.browserEvent||L;return =
L.charCode||L.keyCode||0},_getCacheIndex:function(Q,N,P){for(var =
O=3D0,M=3DG.length;O<M;++O){var =
L=3DG[O];if(L&&L[this.FN]=3D=3DP&&L[this.EL]=3D=3DQ&&L[this.TYPE]=3D=3DN)=
{return O}}return -1},elCache:{},getEl:function(L){return =
document.getElementById(L)},clearCache:function(){},_load:function(M){F=3D=
true;var =
L=3DExt.lib.Event;if(Ext.isIE){L.doRemove(window,"load",L._load)}},_tryPr=
eloadAttach:function(){if(this.locked){return =
false}this.locked=3Dtrue;var R=3D!F;if(!R){R=3D(I>0)}var Q=3D[];for(var =
M=3D0,L=3DH.length;M<L;++M){var P=3DH[M];if(P){var =
O=3Dthis.getEl(P.id);if(O){if(!P.checkReady||F||O.nextSibling||(document&=
&document.body)){var =
N=3DO;if(P.override){if(P.override=3D=3D=3Dtrue){N=3DP.obj}else{N=3DP.ove=
rride}}P.fn.call(N,P.obj);H[M]=3Dnull}}else{Q.push(P)}}}I=3D(Q.length=3D=3D=
=3D0)?0:I-1;if(R){this.startInterval()}else{clearInterval(this._interval)=
;this._interval=3Dnull}this.locked=3Dfalse;return =
true},purgeElement:function(P,Q,N){var =
R=3Dthis.getListeners(P,N);if(R){for(var O=3D0,L=3DR.length;O<L;++O){var =
M=3DR[O];this.removeListener(P,M.type,M.fn)}}if(Q&&P&&P.childNodes){for(O=
=3D0,L=3DP.childNodes.length;O<L;++O){this.purgeElement(P.childNodes[O],Q=
,N)}}},getListeners:function(M,R){var =
P=3D[],L;if(!R){L=3D[G,K]}else{if(R=3D=3D"unload"){L=3D[K]}else{L=3D[G]}}=
for(var O=3D0;O<L.length;++O){var T=3DL[O];if(T&&T.length>0){for(var =
Q=3D0,S=3DT.length;Q<S;++Q){var =
N=3DT[Q];if(N&&N[this.EL]=3D=3D=3DM&&(!R||R=3D=3D=3DN[this.TYPE])){P.push=
({type:N[this.TYPE],fn:N[this.FN],obj:N[this.OBJ],adjust:N[this.ADJ_SCOPE=
],index:Q})}}}}return(P.length)?P:null},_unload:function(S){var =
R=3DExt.lib.Event,P,O,M,L,N;for(P=3D0,L=3DK.length;P<L;++P){M=3DK[P];if(M=
){var =
Q=3Dwindow;if(M[R.ADJ_SCOPE]){if(M[R.ADJ_SCOPE]=3D=3D=3Dtrue){Q=3DM[R.OBJ=
]}else{Q=3DM[R.ADJ_SCOPE]}}M[R.FN].call(Q,R.getEvent(S),M[R.OBJ]);K[P]=3D=
null;M=3Dnull;Q=3Dnull}}K=3Dnull;if(G&&G.length>0){O=3DG.length;while(O){=
N=3DO-1;M=3DG[N];if(M){R.removeListener(M[R.EL],M[R.TYPE],M[R.FN],N)}O=3D=
O-1}M=3Dnull;R.clearCache()}R.doRemove(window,"unload",R._unload)},getScr=
oll:function(){var =
L=3Ddocument.documentElement,M=3Ddocument.body;if(L&&(L.scrollTop||L.scro=
llLeft)){return[L.scrollTop,L.scrollLeft]}else{if(M){return[M.scrollTop,M=
.scrollLeft]}else{return[0,0]}}},doAdd:function(){if(window.addEventListe=
ner){return =
function(O,M,N,L){O.addEventListener(M,N,(L))}}else{if(window.attachEvent=
){return function(O,M,N,L){O.attachEvent("on"+M,N)}}else{return =
function(){}}}}(),doRemove:function(){if(window.removeEventListener){retu=
rn =
function(O,M,N,L){O.removeEventListener(M,N,(L))}}else{if(window.detachEv=
ent){return function(N,L,M){N.detachEvent("on"+L,M)}}else{return =
function(){}}}}()}}();var =
D=3DExt.lib.Event;D.on=3DD.addListener;D.un=3DD.removeListener;if(documen=
t&&document.body){D._load()}else{D.doAdd(window,"load",D._load)}D.doAdd(w=
indow,"unload",D._unload);D._tryPreloadAttach();Ext.lib.Ajax=3D{request:f=
unction(K,I,E,J,F){if(F){var G=3DF.headers;if(G){for(var H in =
G){if(G.hasOwnProperty(H)){this.initHeader(H,G[H],false)}}}if(F.xmlData){=
if(!G||!G["Content-Type"]){this.initHeader("Content-Type","text/xml",fals=
e)}K=3D(K?K:(F.method?F.method:"POST"));J=3DF.xmlData}else{if(F.jsonData)=
{if(!G||!G["Content-Type"]){this.initHeader("Content-Type","application/j=
son",false)}K=3D(K?K:(F.method?F.method:"POST"));J=3Dtypeof =
F.jsonData=3D=3D"object"?Ext.encode(F.jsonData):F.jsonData}}}return =
this.asyncRequest(K,I,E,J)},serializeForm:function(F){if(typeof =
F=3D=3D"string"){F=3D(document.getElementById(F)||document.forms[F])}var =
G,E,H,J,K=3D"",M=3Dfalse;for(var =
L=3D0;L<F.elements.length;L++){G=3DF.elements[L];J=3DF.elements[L].disabl=
ed;E=3DF.elements[L].name;H=3DF.elements[L].value;if(!J&&E){switch(G.type=
){case"select-one":case"select-multiple":for(var =
I=3D0;I<G.options.length;I++){if(G.options[I].selected){if(Ext.isIE){K+=3D=
encodeURIComponent(E)+"=3D"+encodeURIComponent(G.options[I].attributes["v=
alue"].specified?G.options[I].value:G.options[I].text)+"&"}else{K+=3Denco=
deURIComponent(E)+"=3D"+encodeURIComponent(G.options[I].hasAttribute("val=
ue")?G.options[I].value:G.options[I].text)+"&"}}}break;case"radio":case"c=
heckbox":if(G.checked){K+=3DencodeURIComponent(E)+"=3D"+encodeURIComponen=
t(H)+"&"}break;case"file":case =
undefined:case"reset":case"button":break;case"submit":if(M=3D=3Dfalse){K+=
=3DencodeURIComponent(E)+"=3D"+encodeURIComponent(H)+"&";M=3Dtrue}break;d=
efault:K+=3DencodeURIComponent(E)+"=3D"+encodeURIComponent(H)+"&";break}}=
}K=3DK.substr(0,K.length-1);return =
K},headers:{},hasHeaders:false,useDefaultHeader:true,defaultPostHeader:"a=
pplication/x-www-form-urlencoded",useDefaultXhrHeader:true,defaultXhrHead=
er:"XMLHttpRequest",hasDefaultHeaders:true,defaultHeaders:{},poll:{},time=
out:{},pollInterval:50,transactionId:0,setProgId:function(E){this.activeX=
.unshift(E)},setDefaultPostHeader:function(E){this.useDefaultHeader=3DE},=
setDefaultXhrHeader:function(E){this.useDefaultXhrHeader=3DE},setPollingI=
nterval:function(E){if(typeof =
E=3D=3D"number"&&isFinite(E)){this.pollInterval=3DE}},createXhrObject:fun=
ction(I){var H,E;try{E=3Dnew =
XMLHttpRequest();H=3D{conn:E,tId:I}}catch(G){for(var =
F=3D0;F<this.activeX.length;++F){try{E=3Dnew =
ActiveXObject(this.activeX[F]);H=3D{conn:E,tId:I};break}catch(G){}}}final=
ly{return H}},getConnectionObject:function(){var F;var =
G=3Dthis.transactionId;try{F=3Dthis.createXhrObject(G);if(F){this.transac=
tionId++}}catch(E){}finally{return =
F}},asyncRequest:function(I,F,H,E){var =
G=3Dthis.getConnectionObject();if(!G){return =
null}else{G.conn.open(I,F,true);if(this.useDefaultXhrHeader){if(!this.def=
aultHeaders["X-Requested-With"]){this.initHeader("X-Requested-With",this.=
defaultXhrHeader,true)}}if(E&&this.useDefaultHeader&&(!this.hasHeaders||!=
this.headers["Content-Type"])){this.initHeader("Content-Type",this.defaul=
tPostHeader)}if(this.hasDefaultHeaders||this.hasHeaders){this.setHeader(G=
)}this.handleReadyState(G,H);G.conn.send(E||null);return =
G}},handleReadyState:function(F,G){var =
E=3Dthis;if(G&&G.timeout){this.timeout[F.tId]=3Dwindow.setTimeout(functio=
n(){E.abort(F,G,true)},G.timeout)}this.poll[F.tId]=3Dwindow.setInterval(f=
unction(){if(F.conn&&F.conn.readyState=3D=3D4){window.clearInterval(E.pol=
l[F.tId]);delete =
E.poll[F.tId];if(G&&G.timeout){window.clearTimeout(E.timeout[F.tId]);dele=
te =
E.timeout[F.tId]}E.handleTransactionResponse(F,G)}},this.pollInterval)},h=
andleTransactionResponse:function(I,J,E){if(!J){this.releaseObject(I);ret=
urn }var =
G,F;try{if(I.conn.status!=3D=3Dundefined&&I.conn.status!=3D0){G=3DI.conn.=
status}else{G=3D13030}}catch(H){G=3D13030}if(G>=3D200&&G<300){F=3Dthis.cr=
eateResponseObject(I,J.argument);if(J.success){if(!J.scope){J.success(F)}=
else{J.success.apply(J.scope,[F])}}}else{switch(G){case 12002:case =
12029:case 12030:case 12031:case 12152:case =
13030:F=3Dthis.createExceptionObject(I.tId,J.argument,(E?E:false));if(J.f=
ailure){if(!J.scope){J.failure(F)}else{J.failure.apply(J.scope,[F])}}brea=
k;default:F=3Dthis.createResponseObject(I,J.argument);if(J.failure){if(!J=
.scope){J.failure(F)}else{J.failure.apply(J.scope,[F])}}}}this.releaseObj=
ect(I);F=3Dnull},createResponseObject:function(E,K){var H=3D{};var =
M=3D{};try{var G=3DE.conn.getAllResponseHeaders();var =
J=3DG.split("\n");for(var I=3D0;I<J.length;I++){var =
F=3DJ[I].indexOf(":");if(F!=3D-1){M[J[I].substring(0,F)]=3DJ[I].substring=
(F+2)}}}catch(L){}H.tId=3DE.tId;H.status=3DE.conn.status;H.statusText=3DE=
.conn.statusText;H.getResponseHeader=3DM;H.getAllResponseHeaders=3DG;H.re=
sponseText=3DE.conn.responseText;H.responseXML=3DE.conn.responseXML;if(ty=
peof K!=3D=3Dundefined){H.argument=3DK}return =
H},createExceptionObject:function(L,H,E){var J=3D0;var =
K=3D"communication failure";var G=3D-1;var F=3D"transaction aborted";var =
I=3D{};I.tId=3DL;if(E){I.status=3DG;I.statusText=3DF}else{I.status=3DJ;I.=
statusText=3DK}if(H){I.argument=3DH}return =
I},initHeader:function(E,H,G){var =
F=3D(G)?this.defaultHeaders:this.headers;if(F[E]=3D=3D=3Dundefined){F[E]=3D=
H}else{F[E]=3DH+","+F[E]}if(G){this.hasDefaultHeaders=3Dtrue}else{this.ha=
sHeaders=3Dtrue}},setHeader:function(E){if(this.hasDefaultHeaders){for(va=
r F in =
this.defaultHeaders){if(this.defaultHeaders.hasOwnProperty(F)){E.conn.set=
RequestHeader(F,this.defaultHeaders[F])}}}if(this.hasHeaders){for(var F =
in =
this.headers){if(this.headers.hasOwnProperty(F)){E.conn.setRequestHeader(=
F,this.headers[F])}}this.headers=3D{};this.hasHeaders=3Dfalse}},resetDefa=
ultHeaders:function(){delete =
this.defaultHeaders;this.defaultHeaders=3D{};this.hasDefaultHeaders=3Dfal=
se},abort:function(F,G,E){if(this.isCallInProgress(F)){F.conn.abort();win=
dow.clearInterval(this.poll[F.tId]);delete this.poll[F.tId];if(E){delete =
this.timeout[F.tId]}this.handleTransactionResponse(F,G,true);return =
true}else{return false}},isCallInProgress:function(E){if(E.conn){return =
E.conn.readyState!=3D4&&E.conn.readyState!=3D0}else{return =
false}},releaseObject:function(E){E.conn=3Dnull;E=3Dnull},activeX:["MSXML=
2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"]};Ext.lib.Region=3Dfu=
nction(G,H,E,F){this.top=3DG;this[1]=3DG;this.right=3DH;this.bottom=3DE;t=
his.left=3DF;this[0]=3DF};Ext.lib.Region.prototype=3D{contains:function(E=
){return(E.left>=3Dthis.left&&E.right<=3Dthis.right&&E.top>=3Dthis.top&&E=
.bottom<=3Dthis.bottom)},getArea:function(){return((this.bottom-this.top)=
*(this.right-this.left))},intersect:function(I){var =
G=3DMath.max(this.top,I.top);var H=3DMath.min(this.right,I.right);var =
E=3DMath.min(this.bottom,I.bottom);var =
F=3DMath.max(this.left,I.left);if(E>=3DG&&H>=3DF){return new =
Ext.lib.Region(G,H,E,F)}else{return null}},union:function(I){var =
G=3DMath.min(this.top,I.top);var H=3DMath.max(this.right,I.right);var =
E=3DMath.max(this.bottom,I.bottom);var =
F=3DMath.min(this.left,I.left);return new =
Ext.lib.Region(G,H,E,F)},constrainTo:function(E){this.top=3Dthis.top.cons=
train(E.top,E.bottom);this.bottom=3Dthis.bottom.constrain(E.top,E.bottom)=
;this.left=3Dthis.left.constrain(E.left,E.right);this.right=3Dthis.right.=
constrain(E.left,E.right);return =
this},adjust:function(G,F,E,H){this.top+=3DG;this.left+=3DF;this.right+=3D=
H;this.bottom+=3DE;return =
this}};Ext.lib.Region.getRegion=3Dfunction(H){var =
J=3DExt.lib.Dom.getXY(H);var G=3DJ[1];var I=3DJ[0]+H.offsetWidth;var =
E=3DJ[1]+H.offsetHeight;var F=3DJ[0];return new =
Ext.lib.Region(G,I,E,F)};Ext.lib.Point=3Dfunction(E,F){if(Ext.isArray(E))=
{F=3DE[1];E=3DE[0]}this.x=3Dthis.right=3Dthis.left=3Dthis[0]=3DE;this.y=3D=
this.top=3Dthis.bottom=3Dthis[1]=3DF};Ext.lib.Point.prototype=3Dnew =
Ext.lib.Region();Ext.lib.Anim=3D{scroll:function(H,F,I,J,E,G){return =
this.run(H,F,I,J,E,G,Ext.lib.Scroll)},motion:function(H,F,I,J,E,G){return=
 =
this.run(H,F,I,J,E,G,Ext.lib.Motion)},color:function(H,F,I,J,E,G){return =
this.run(H,F,I,J,E,G,Ext.lib.ColorAnim)},run:function(I,F,K,L,E,H,G){G=3D=
G||Ext.lib.AnimBase;if(typeof L=3D=3D"string"){L=3DExt.lib.Easing[L]}var =
J=3Dnew G(I,F,K,L);J.animateX(function(){Ext.callback(E,H)});return =
J}};function C(E){if(!B){B=3Dnew =
Ext.Element.Flyweight()}B.dom=3DE;return B}if(Ext.isIE){function A(){var =
E=3DFunction.prototype;delete E.createSequence;delete E.defer;delete =
E.createDelegate;delete E.createCallback;delete =
E.createInterceptor;window.detachEvent("onunload",A)}window.attachEvent("=
onunload",A)}Ext.lib.AnimBase=3Dfunction(F,E,G,H){if(F){this.init(F,E,G,H=
)}};Ext.lib.AnimBase.prototype=3D{toString:function(){var =
E=3Dthis.getEl();var F=3DE.id||E.tagName;return("Anim =
"+F)},patterns:{noNegatives:/width|height|opacity|padding/i,offsetAttribu=
te:/^((width|height)|(top|left))$/,defaultUnit:/width|height|top$|bottom$=
|left$|right$/i,offsetUnit:/\d+(em|%|en|ex|pt|in|cm|mm|pc)$/i},doMethod:f=
unction(E,G,F){return =
this.method(this.currentFrame,G,F-G,this.totalFrames)},setAttribute:funct=
ion(E,G,F){if(this.patterns.noNegatives.test(E)){G=3D(G>0)?G:0}Ext.fly(th=
is.getEl(),"_anim").setStyle(E,G+F)},getAttribute:function(E){var =
G=3Dthis.getEl();var =
I=3DC(G).getStyle(E);if(I!=3D=3D"auto"&&!this.patterns.offsetUnit.test(I)=
){return parseFloat(I)}var =
F=3Dthis.patterns.offsetAttribute.exec(E)||[];var J=3D!!(F[3]);var =
H=3D!!(F[2]);if(H||(C(G).getStyle("position")=3D=3D"absolute"&&J)){I=3DG[=
"offset"+F[0].charAt(0).toUpperCase()+F[0].substr(1)]}else{I=3D0}return =
I},getDefaultUnit:function(E){if(this.patterns.defaultUnit.test(E)){retur=
n"px"}return""},animateX:function(G,E){var =
F=3Dfunction(){this.onComplete.removeListener(F);if(typeof =
G=3D=3D"function"){G.call(E||this,this)}};this.onComplete.addListener(F,t=
his);this.animate()},setRuntimeAttribute:function(F){var K;var G;var =
H=3Dthis.attributes;this.runtimeAttributes[F]=3D{};var =
J=3Dfunction(L){return(typeof =
L!=3D=3D"undefined")};if(!J(H[F]["to"])&&!J(H[F]["by"])){return =
false}K=3D(J(H[F]["from"]))?H[F]["from"]:this.getAttribute(F);if(J(H[F]["=
to"])){G=3DH[F]["to"]}else{if(J(H[F]["by"])){if(K.constructor=3D=3DArray)=
{G=3D[];for(var =
I=3D0,E=3DK.length;I<E;++I){G[I]=3DK[I]+H[F]["by"][I]}}else{G=3DK+H[F]["b=
y"]}}}this.runtimeAttributes[F].start=3DK;this.runtimeAttributes[F].end=3D=
G;this.runtimeAttributes[F].unit=3D(J(H[F].unit))?H[F]["unit"]:this.getDe=
faultUnit(F)},init:function(G,L,K,E){var F=3Dfalse;var H=3Dnull;var =
J=3D0;G=3DExt.getDom(G);this.attributes=3DL||{};this.duration=3DK||1;this=
.method=3DE||Ext.lib.Easing.easeNone;this.useSeconds=3Dtrue;this.currentF=
rame=3D0;this.totalFrames=3DExt.lib.AnimMgr.fps;this.getEl=3Dfunction(){r=
eturn G};this.isAnimated=3Dfunction(){return =
F};this.getStartTime=3Dfunction(){return =
H};this.runtimeAttributes=3D{};this.animate=3Dfunction(){if(this.isAnimat=
ed()){return =
false}this.currentFrame=3D0;this.totalFrames=3D(this.useSeconds)?Math.cei=
l(Ext.lib.AnimMgr.fps*this.duration):this.duration;Ext.lib.AnimMgr.regist=
erElement(this)};this.stop=3Dfunction(O){if(O){this.currentFrame=3Dthis.t=
otalFrames;this._onTween.fire()}Ext.lib.AnimMgr.stop(this)};var =
N=3Dfunction(){this.onStart.fire();this.runtimeAttributes=3D{};for(var O =
in this.attributes){this.setRuntimeAttribute(O)}F=3Dtrue;J=3D0;H=3Dnew =
Date()};var M=3Dfunction(){var Q=3D{duration:new =
Date()-this.getStartTime(),currentFrame:this.currentFrame};Q.toString=3Df=
unction(){return("duration: "+Q.duration+", currentFrame: =
"+Q.currentFrame)};this.onTween.fire(Q);var =
P=3Dthis.runtimeAttributes;for(var O in =
P){this.setAttribute(O,this.doMethod(O,P[O].start,P[O].end),P[O].unit)}J+=
=3D1};var I=3Dfunction(){var O=3D(new Date()-H)/1000;var =
P=3D{duration:O,frames:J,fps:J/O};P.toString=3Dfunction(){return("duratio=
n: "+P.duration+", frames: "+P.frames+", fps: =
"+P.fps)};F=3Dfalse;J=3D0;this.onComplete.fire(P)};this._onStart=3Dnew =
Ext.util.Event(this);this.onStart=3Dnew =
Ext.util.Event(this);this.onTween=3Dnew =
Ext.util.Event(this);this._onTween=3Dnew =
Ext.util.Event(this);this.onComplete=3Dnew =
Ext.util.Event(this);this._onComplete=3Dnew =
Ext.util.Event(this);this._onStart.addListener(N);this._onTween.addListen=
er(M);this._onComplete.addListener(I)}};Ext.lib.AnimMgr=3Dnew =
function(){var G=3Dnull;var F=3D[];var =
E=3D0;this.fps=3D1000;this.delay=3D1;this.registerElement=3Dfunction(J){F=
[F.length]=3DJ;E+=3D1;J._onStart.fire();this.start()};this.unRegister=3Df=
unction(K,J){K._onComplete.fire();J=3DJ||I(K);if(J!=3D-1){F.splice(J,1)}E=
-=3D1;if(E<=3D0){this.stop()}};this.start=3Dfunction(){if(G=3D=3D=3Dnull)=
{G=3DsetInterval(this.run,this.delay)}};this.stop=3Dfunction(L){if(!L){cl=
earInterval(G);for(var =
K=3D0,J=3DF.length;K<J;++K){if(F[0].isAnimated()){this.unRegister(F[0],0)=
}}F=3D[];G=3Dnull;E=3D0}else{this.unRegister(L)}};this.run=3Dfunction(){f=
or(var L=3D0,J=3DF.length;L<J;++L){var =
K=3DF[L];if(!K||!K.isAnimated()){continue}if(K.currentFrame<K.totalFrames=
||K.totalFrames=3D=3D=3Dnull){K.currentFrame+=3D1;if(K.useSeconds){H(K)}K=
._onTween.fire()}else{Ext.lib.AnimMgr.stop(K,L)}}};var =
I=3Dfunction(L){for(var =
K=3D0,J=3DF.length;K<J;++K){if(F[K]=3D=3DL){return K}}return -1};var =
H=3Dfunction(K){var N=3DK.totalFrames;var M=3DK.currentFrame;var =
L=3D(K.currentFrame*K.duration*1000/K.totalFrames);var J=3D(new =
Date()-K.getStartTime());var =
O=3D0;if(J<K.duration*1000){O=3DMath.round((J/L-1)*K.currentFrame)}else{O=
=3DN-(M+1)}if(O>0&&isFinite(O)){if(K.currentFrame+O>=3DN){O=3DN-(M+1)}K.c=
urrentFrame+=3DO}}};Ext.lib.Bezier=3Dnew =
function(){this.getPosition=3Dfunction(I,H){var J=3DI.length;var =
G=3D[];for(var F=3D0;F<J;++F){G[F]=3D[I[F][0],I[F][1]]}for(var =
E=3D1;E<J;++E){for(F=3D0;F<J-E;++F){G[F][0]=3D(1-H)*G[F][0]+H*G[parseInt(=
F+1,10)][0];G[F][1]=3D(1-H)*G[F][1]+H*G[parseInt(F+1,10)][1]}}return[G[0]=
[0],G[0][1]]}};(function(){Ext.lib.ColorAnim=3Dfunction(I,H,J,K){Ext.lib.=
ColorAnim.superclass.constructor.call(this,I,H,J,K)};Ext.extend(Ext.lib.C=
olorAnim,Ext.lib.AnimBase);var F=3DExt.lib;var =
G=3DF.ColorAnim.superclass;var =
E=3DF.ColorAnim.prototype;E.toString=3Dfunction(){var =
H=3Dthis.getEl();var I=3DH.id||H.tagName;return("ColorAnim =
"+I)};E.patterns.color=3D/color$/i;E.patterns.rgb=3D/^rgb\(([0-9]+)\s*,\s=
*([0-9]+)\s*,\s*([0-9]+)\)$/i;E.patterns.hex=3D/^#?([0-9A-F]{2})([0-9A-F]=
{2})([0-9A-F]{2})$/i;E.patterns.hex3=3D/^#?([0-9A-F]{1})([0-9A-F]{1})([0-=
9A-F]{1})$/i;E.patterns.transparent=3D/^transparent|rgba\(0, 0, 0, =
0\)$/;E.parseColor=3Dfunction(H){if(H.length=3D=3D3){return H}var =
I=3Dthis.patterns.hex.exec(H);if(I&&I.length=3D=3D4){return[parseInt(I[1]=
,16),parseInt(I[2],16),parseInt(I[3],16)]}I=3Dthis.patterns.rgb.exec(H);i=
f(I&&I.length=3D=3D4){return[parseInt(I[1],10),parseInt(I[2],10),parseInt=
(I[3],10)]}I=3Dthis.patterns.hex3.exec(H);if(I&&I.length=3D=3D4){return[p=
arseInt(I[1]+I[1],16),parseInt(I[2]+I[2],16),parseInt(I[3]+I[3],16)]}retu=
rn null};E.getAttribute=3Dfunction(H){var =
J=3Dthis.getEl();if(this.patterns.color.test(H)){var =
K=3DC(J).getStyle(H);if(this.patterns.transparent.test(K)){var =
I=3DJ.parentNode;K=3DC(I).getStyle(H);while(I&&this.patterns.transparent.=
test(K)){I=3DI.parentNode;K=3DC(I).getStyle(H);if(I.tagName.toUpperCase()=
=3D=3D"HTML"){K=3D"#fff"}}}}else{K=3DG.getAttribute.call(this,H)}return =
K};E.doMethod=3Dfunction(I,M,J){var =
L;if(this.patterns.color.test(I)){L=3D[];for(var =
K=3D0,H=3DM.length;K<H;++K){L[K]=3DG.doMethod.call(this,I,M[K],J[K])}L=3D=
"rgb("+Math.floor(L[0])+","+Math.floor(L[1])+","+Math.floor(L[2])+")"}els=
e{L=3DG.doMethod.call(this,I,M,J)}return =
L};E.setRuntimeAttribute=3Dfunction(I){G.setRuntimeAttribute.call(this,I)=
;if(this.patterns.color.test(I)){var K=3Dthis.attributes;var =
M=3Dthis.parseColor(this.runtimeAttributes[I].start);var =
J=3Dthis.parseColor(this.runtimeAttributes[I].end);if(typeof =
K[I]["to"]=3D=3D=3D"undefined"&&typeof =
K[I]["by"]!=3D=3D"undefined"){J=3Dthis.parseColor(K[I].by);for(var =
L=3D0,H=3DM.length;L<H;++L){J[L]=3DM[L]+J[L]}}this.runtimeAttributes[I].s=
tart=3DM;this.runtimeAttributes[I].end=3DJ}}})();Ext.lib.Easing=3D{easeNo=
ne:function(F,E,H,G){return H*F/G+E},easeIn:function(F,E,H,G){return =
H*(F/=3DG)*F+E},easeOut:function(F,E,H,G){return =
-H*(F/=3DG)*(F-2)+E},easeBoth:function(F,E,H,G){if((F/=3DG/2)<1){return =
H/2*F*F+E}return =
-H/2*((--F)*(F-2)-1)+E},easeInStrong:function(F,E,H,G){return =
H*(F/=3DG)*F*F*F+E},easeOutStrong:function(F,E,H,G){return =
-H*((F=3DF/G-1)*F*F*F-1)+E},easeBothStrong:function(F,E,H,G){if((F/=3DG/2=
)<1){return H/2*F*F*F*F+E}return =
-H/2*((F-=3D2)*F*F*F-2)+E},elasticIn:function(G,E,K,J,F,I){if(G=3D=3D0){r=
eturn E}if((G/=3DJ)=3D=3D1){return =
E+K}if(!I){I=3DJ*0.3}if(!F||F<Math.abs(K)){F=3DK;var H=3DI/4}else{var =
H=3DI/(2*Math.PI)*Math.asin(K/F)}return =
-(F*Math.pow(2,10*(G-=3D1))*Math.sin((G*J-H)*(2*Math.PI)/I))+E},elasticOu=
t:function(G,E,K,J,F,I){if(G=3D=3D0){return E}if((G/=3DJ)=3D=3D1){return =
E+K}if(!I){I=3DJ*0.3}if(!F||F<Math.abs(K)){F=3DK;var H=3DI/4}else{var =
H=3DI/(2*Math.PI)*Math.asin(K/F)}return =
F*Math.pow(2,-10*G)*Math.sin((G*J-H)*(2*Math.PI)/I)+K+E},elasticBoth:func=
tion(G,E,K,J,F,I){if(G=3D=3D0){return E}if((G/=3DJ/2)=3D=3D2){return =
E+K}if(!I){I=3DJ*(0.3*1.5)}if(!F||F<Math.abs(K)){F=3DK;var =
H=3DI/4}else{var H=3DI/(2*Math.PI)*Math.asin(K/F)}if(G<1){return =
-0.5*(F*Math.pow(2,10*(G-=3D1))*Math.sin((G*J-H)*(2*Math.PI)/I))+E}return=
 =
F*Math.pow(2,-10*(G-=3D1))*Math.sin((G*J-H)*(2*Math.PI)/I)*0.5+K+E},backI=
n:function(F,E,I,H,G){if(typeof G=3D=3D"undefined"){G=3D1.70158}return =
I*(F/=3DH)*F*((G+1)*F-G)+E},backOut:function(F,E,I,H,G){if(typeof =
G=3D=3D"undefined"){G=3D1.70158}return =
I*((F=3DF/H-1)*F*((G+1)*F+G)+1)+E},backBoth:function(F,E,I,H,G){if(typeof=
 G=3D=3D"undefined"){G=3D1.70158}if((F/=3DH/2)<1){return =
I/2*(F*F*(((G*=3D(1.525))+1)*F-G))+E}return =
I/2*((F-=3D2)*F*(((G*=3D(1.525))+1)*F+G)+2)+E},bounceIn:function(F,E,H,G)=
{return =
H-Ext.lib.Easing.bounceOut(G-F,0,H,G)+E},bounceOut:function(F,E,H,G){if((=
F/=3DG)<(1/2.75)){return H*(7.5625*F*F)+E}else{if(F<(2/2.75)){return =
H*(7.5625*(F-=3D(1.5/2.75))*F+0.75)+E}else{if(F<(2.5/2.75)){return =
H*(7.5625*(F-=3D(2.25/2.75))*F+0.9375)+E}}}return =
H*(7.5625*(F-=3D(2.625/2.75))*F+0.984375)+E},bounceBoth:function(F,E,H,G)=
{if(F<G/2){return Ext.lib.Easing.bounceIn(F*2,0,H,G)*0.5+E}return =
Ext.lib.Easing.bounceOut(F*2-G,0,H,G)*0.5+H*0.5+E}};(function(){Ext.lib.M=
otion=3Dfunction(K,J,L,M){if(K){Ext.lib.Motion.superclass.constructor.cal=
l(this,K,J,L,M)}};Ext.extend(Ext.lib.Motion,Ext.lib.ColorAnim);var =
H=3DExt.lib;var I=3DH.Motion.superclass;var =
F=3DH.Motion.prototype;F.toString=3Dfunction(){var J=3Dthis.getEl();var =
K=3DJ.id||J.tagName;return("Motion =
"+K)};F.patterns.points=3D/^points$/i;F.setAttribute=3Dfunction(J,L,K){if=
(this.patterns.points.test(J)){K=3DK||"px";I.setAttribute.call(this,"left=
",L[0],K);I.setAttribute.call(this,"top",L[1],K)}else{I.setAttribute.call=
(this,J,L,K)}};F.getAttribute=3Dfunction(J){if(this.patterns.points.test(=
J)){var =
K=3D[I.getAttribute.call(this,"left"),I.getAttribute.call(this,"top")]}el=
se{K=3DI.getAttribute.call(this,J)}return =
K};F.doMethod=3Dfunction(J,N,K){var =
M=3Dnull;if(this.patterns.points.test(J)){var =
L=3Dthis.method(this.currentFrame,0,100,this.totalFrames)/100;M=3DH.Bezie=
r.getPosition(this.runtimeAttributes[J],L)}else{M=3DI.doMethod.call(this,=
J,N,K)}return =
M};F.setRuntimeAttribute=3Dfunction(S){if(this.patterns.points.test(S)){v=
ar K=3Dthis.getEl();var M=3Dthis.attributes;var J;var =
O=3DM["points"]["control"]||[];var L;var =
P,R;if(O.length>0&&!Ext.isArray(O[0])){O=3D[O]}else{var =
N=3D[];for(P=3D0,R=3DO.length;P<R;++P){N[P]=3DO[P]}O=3DN}Ext.fly(K,"_anim=
").position();if(G(M["points"]["from"])){Ext.lib.Dom.setXY(K,M["points"][=
"from"])}else{Ext.lib.Dom.setXY(K,Ext.lib.Dom.getXY(K))}J=3Dthis.getAttri=
bute("points");if(G(M["points"]["to"])){L=3DE.call(this,M["points"]["to"]=
,J);var =
Q=3DExt.lib.Dom.getXY(this.getEl());for(P=3D0,R=3DO.length;P<R;++P){O[P]=3D=
E.call(this,O[P],J)}}else{if(G(M["points"]["by"])){L=3D[J[0]+M["points"][=
"by"][0],J[1]+M["points"]["by"][1]];for(P=3D0,R=3DO.length;P<R;++P){O[P]=3D=
[J[0]+O[P][0],J[1]+O[P][1]]}}}this.runtimeAttributes[S]=3D[J];if(O.length=
>0){this.runtimeAttributes[S]=3Dthis.runtimeAttributes[S].concat(O)}this.=
runtimeAttributes[S][this.runtimeAttributes[S].length]=3DL}else{I.setRunt=
imeAttribute.call(this,S)}};var E=3Dfunction(J,L){var =
K=3DExt.lib.Dom.getXY(this.getEl());J=3D[J[0]-K[0]+L[0],J[1]-K[1]+L[1]];r=
eturn J};var G=3Dfunction(J){return(typeof =
J!=3D=3D"undefined")}})();(function(){Ext.lib.Scroll=3Dfunction(I,H,J,K){=
if(I){Ext.lib.Scroll.superclass.constructor.call(this,I,H,J,K)}};Ext.exte=
nd(Ext.lib.Scroll,Ext.lib.ColorAnim);var F=3DExt.lib;var =
G=3DF.Scroll.superclass;var =
E=3DF.Scroll.prototype;E.toString=3Dfunction(){var H=3Dthis.getEl();var =
I=3DH.id||H.tagName;return("Scroll =
"+I)};E.doMethod=3Dfunction(H,K,I){var =
J=3Dnull;if(H=3D=3D"scroll"){J=3D[this.method(this.currentFrame,K[0],I[0]=
-K[0],this.totalFrames),this.method(this.currentFrame,K[1],I[1]-K[1],this=
.totalFrames)]}else{J=3DG.doMethod.call(this,H,K,I)}return =
J};E.getAttribute=3Dfunction(H){var J=3Dnull;var =
I=3Dthis.getEl();if(H=3D=3D"scroll"){J=3D[I.scrollLeft,I.scrollTop]}else{=
J=3DG.getAttribute.call(this,H)}return =
J};E.setAttribute=3Dfunction(H,K,J){var =
I=3Dthis.getEl();if(H=3D=3D"scroll"){I.scrollLeft=3DK[0];I.scrollTop=3DK[=
1]}else{G.setAttribute.call(this,H,K,J)}}})()})();=0A=

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/ExtJS/ext-all-debug.js

/*
 * Ext JS Library 2.1
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 *=20
 * http://extjs.com/license
 */

=0A=
Ext.DomHelper =3D function(){=0A=
    var tempTableEl =3D null;=0A=
    var emptyTags =3D =
/^(?:br|frame|hr|img|input|link|meta|range|spacer|wbr|area|param|col)$/i;=0A=
    var tableRe =3D /^table|tbody|tr|td$/i;=0A=
=0A=
        var createHtml =3D function(o){=0A=
        if(typeof o =3D=3D 'string'){=0A=
            return o;=0A=
        }=0A=
        var b =3D "";=0A=
        if (Ext.isArray(o)) {=0A=
            for (var i =3D 0, l =3D o.length; i < l; i++) {=0A=
                b +=3D createHtml(o[i]);=0A=
            }=0A=
            return b;=0A=
        }=0A=
        if(!o.tag){=0A=
            o.tag =3D "div";=0A=
        }=0A=
        b +=3D "<" + o.tag;=0A=
        for(var attr in o){=0A=
            if(attr =3D=3D "tag" || attr =3D=3D "children" || attr =
=3D=3D "cn" || attr =3D=3D "html" || typeof o[attr] =3D=3D "function") =
continue;=0A=
            if(attr =3D=3D "style"){=0A=
                var s =3D o["style"];=0A=
                if(typeof s =3D=3D "function"){=0A=
                    s =3D s.call();=0A=
                }=0A=
                if(typeof s =3D=3D "string"){=0A=
                    b +=3D ' style=3D"' + s + '"';=0A=
                }else if(typeof s =3D=3D "object"){=0A=
                    b +=3D ' style=3D"';=0A=
                    for(var key in s){=0A=
                        if(typeof s[key] !=3D "function"){=0A=
                            b +=3D key + ":" + s[key] + ";";=0A=
                        }=0A=
                    }=0A=
                    b +=3D '"';=0A=
                }=0A=
            }else{=0A=
                if(attr =3D=3D "cls"){=0A=
                    b +=3D ' class=3D"' + o["cls"] + '"';=0A=
                }else if(attr =3D=3D "htmlFor"){=0A=
                    b +=3D ' for=3D"' + o["htmlFor"] + '"';=0A=
                }else{=0A=
                    b +=3D " " + attr + '=3D"' + o[attr] + '"';=0A=
                }=0A=
            }=0A=
        }=0A=
        if(emptyTags.test(o.tag)){=0A=
            b +=3D "/>";=0A=
        }else{=0A=
            b +=3D ">";=0A=
            var cn =3D o.children || o.cn;=0A=
            if(cn){=0A=
                b +=3D createHtml(cn);=0A=
            } else if(o.html){=0A=
                b +=3D o.html;=0A=
            }=0A=
            b +=3D "</" + o.tag + ">";=0A=
        }=0A=
        return b;=0A=
    };=0A=
=0A=
        =0A=
    var createDom =3D function(o, parentNode){=0A=
        var el;=0A=
        if (Ext.isArray(o)) {                                   el =3D =
document.createDocumentFragment();             for(var i =3D 0, l =3D =
o.length; i < l; i++) {=0A=
                createDom(o[i], el);=0A=
            }=0A=
        } else if (typeof o =3D=3D "string") {                     el =
=3D document.createTextNode(o);=0A=
        } else {=0A=
            el =3D document.createElement(o.tag||'div');=0A=
            var useSet =3D !!el.setAttribute;             for(var attr =
in o){=0A=
                if(attr =3D=3D "tag" || attr =3D=3D "children" || attr =
=3D=3D "cn" || attr =3D=3D "html" || attr =3D=3D "style" || typeof =
o[attr] =3D=3D "function") continue;=0A=
                if(attr=3D=3D"cls"){=0A=
                    el.className =3D o["cls"];=0A=
                }else{=0A=
                    if(useSet) el.setAttribute(attr, o[attr]);=0A=
                    else el[attr] =3D o[attr];=0A=
                }=0A=
            }=0A=
            Ext.DomHelper.applyStyles(el, o.style);=0A=
            var cn =3D o.children || o.cn;=0A=
            if(cn){=0A=
                createDom(cn, el);=0A=
            } else if(o.html){=0A=
                el.innerHTML =3D o.html;=0A=
            }=0A=
        }=0A=
        if(parentNode){=0A=
           parentNode.appendChild(el);=0A=
        }=0A=
        return el;=0A=
    };=0A=
=0A=
    var ieTable =3D function(depth, s, h, e){=0A=
        tempTableEl.innerHTML =3D [s, h, e].join('');=0A=
        var i =3D -1, el =3D tempTableEl;=0A=
        while(++i < depth){=0A=
            el =3D el.firstChild;=0A=
        }=0A=
        return el;=0A=
    };=0A=
=0A=
        var ts =3D '<table>',=0A=
        te =3D '</table>',=0A=
        tbs =3D ts+'<tbody>',=0A=
        tbe =3D '</tbody>'+te,=0A=
        trs =3D tbs + '<tr>',=0A=
        tre =3D '</tr>'+tbe;=0A=
=0A=
    =0A=
    var insertIntoTable =3D function(tag, where, el, html){=0A=
        if(!tempTableEl){=0A=
            tempTableEl =3D document.createElement('div');=0A=
        }=0A=
        var node;=0A=
        var before =3D null;=0A=
        if(tag =3D=3D 'td'){=0A=
            if(where =3D=3D 'afterbegin' || where =3D=3D 'beforeend'){   =
              return;=0A=
            }=0A=
            if(where =3D=3D 'beforebegin'){=0A=
                before =3D el;=0A=
                el =3D el.parentNode;=0A=
            } else{=0A=
                before =3D el.nextSibling;=0A=
                el =3D el.parentNode;=0A=
            }=0A=
            node =3D ieTable(4, trs, html, tre);=0A=
        }=0A=
        else if(tag =3D=3D 'tr'){=0A=
            if(where =3D=3D 'beforebegin'){=0A=
                before =3D el;=0A=
                el =3D el.parentNode;=0A=
                node =3D ieTable(3, tbs, html, tbe);=0A=
            } else if(where =3D=3D 'afterend'){=0A=
                before =3D el.nextSibling;=0A=
                el =3D el.parentNode;=0A=
                node =3D ieTable(3, tbs, html, tbe);=0A=
            } else{                 if(where =3D=3D 'afterbegin'){=0A=
                    before =3D el.firstChild;=0A=
                }=0A=
                node =3D ieTable(4, trs, html, tre);=0A=
            }=0A=
        } else if(tag =3D=3D 'tbody'){=0A=
            if(where =3D=3D 'beforebegin'){=0A=
                before =3D el;=0A=
                el =3D el.parentNode;=0A=
                node =3D ieTable(2, ts, html, te);=0A=
            } else if(where =3D=3D 'afterend'){=0A=
                before =3D el.nextSibling;=0A=
                el =3D el.parentNode;=0A=
                node =3D ieTable(2, ts, html, te);=0A=
            } else{=0A=
                if(where =3D=3D 'afterbegin'){=0A=
                    before =3D el.firstChild;=0A=
                }=0A=
                node =3D ieTable(3, tbs, html, tbe);=0A=
            }=0A=
        } else{             if(where =3D=3D 'beforebegin' || where =
=3D=3D 'afterend'){                 return;=0A=
            }=0A=
            if(where =3D=3D 'afterbegin'){=0A=
                before =3D el.firstChild;=0A=
            }=0A=
            node =3D ieTable(2, ts, html, te);=0A=
        }=0A=
        el.insertBefore(node, before);=0A=
        return node;=0A=
    };=0A=
=0A=
=0A=
    return {=0A=
    =0A=
    useDom : false,=0A=
=0A=
    =0A=
    markup : function(o){=0A=
        return createHtml(o);=0A=
    },=0A=
=0A=
    =0A=
    applyStyles : function(el, styles){=0A=
        if(styles){=0A=
           el =3D Ext.fly(el);=0A=
           if(typeof styles =3D=3D "string"){=0A=
               var re =3D /\s?([a-z\-]*)\:\s?([^;]*);?/gi;=0A=
               var matches;=0A=
               while ((matches =3D re.exec(styles)) !=3D null){=0A=
                   el.setStyle(matches[1], matches[2]);=0A=
               }=0A=
           }else if (typeof styles =3D=3D "object"){=0A=
               for (var style in styles){=0A=
                  el.setStyle(style, styles[style]);=0A=
               }=0A=
           }else if (typeof styles =3D=3D "function"){=0A=
                Ext.DomHelper.applyStyles(el, styles.call());=0A=
           }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    insertHtml : function(where, el, html){=0A=
        where =3D where.toLowerCase();=0A=
        if(el.insertAdjacentHTML){=0A=
            if(tableRe.test(el.tagName)){=0A=
                var rs;=0A=
                if(rs =3D insertIntoTable(el.tagName.toLowerCase(), =
where, el, html)){=0A=
                    return rs;=0A=
                }=0A=
            }=0A=
            switch(where){=0A=
                case "beforebegin":=0A=
                    el.insertAdjacentHTML('BeforeBegin', html);=0A=
                    return el.previousSibling;=0A=
                case "afterbegin":=0A=
                    el.insertAdjacentHTML('AfterBegin', html);=0A=
                    return el.firstChild;=0A=
                case "beforeend":=0A=
                    el.insertAdjacentHTML('BeforeEnd', html);=0A=
                    return el.lastChild;=0A=
                case "afterend":=0A=
                    el.insertAdjacentHTML('AfterEnd', html);=0A=
                    return el.nextSibling;=0A=
            }=0A=
            throw 'Illegal insertion point -> "' + where + '"';=0A=
        }=0A=
        var range =3D el.ownerDocument.createRange();=0A=
        var frag;=0A=
        switch(where){=0A=
             case "beforebegin":=0A=
                range.setStartBefore(el);=0A=
                frag =3D range.createContextualFragment(html);=0A=
                el.parentNode.insertBefore(frag, el);=0A=
                return el.previousSibling;=0A=
             case "afterbegin":=0A=
                if(el.firstChild){=0A=
                    range.setStartBefore(el.firstChild);=0A=
                    frag =3D range.createContextualFragment(html);=0A=
                    el.insertBefore(frag, el.firstChild);=0A=
                    return el.firstChild;=0A=
                }else{=0A=
                    el.innerHTML =3D html;=0A=
                    return el.firstChild;=0A=
                }=0A=
            case "beforeend":=0A=
                if(el.lastChild){=0A=
                    range.setStartAfter(el.lastChild);=0A=
                    frag =3D range.createContextualFragment(html);=0A=
                    el.appendChild(frag);=0A=
                    return el.lastChild;=0A=
                }else{=0A=
                    el.innerHTML =3D html;=0A=
                    return el.lastChild;=0A=
                }=0A=
            case "afterend":=0A=
                range.setStartAfter(el);=0A=
                frag =3D range.createContextualFragment(html);=0A=
                el.parentNode.insertBefore(frag, el.nextSibling);=0A=
                return el.nextSibling;=0A=
            }=0A=
            throw 'Illegal insertion point -> "' + where + '"';=0A=
    },=0A=
=0A=
    =0A=
    insertBefore : function(el, o, returnElement){=0A=
        return this.doInsert(el, o, returnElement, "beforeBegin");=0A=
    },=0A=
=0A=
    =0A=
    insertAfter : function(el, o, returnElement){=0A=
        return this.doInsert(el, o, returnElement, "afterEnd", =
"nextSibling");=0A=
    },=0A=
=0A=
    =0A=
    insertFirst : function(el, o, returnElement){=0A=
        return this.doInsert(el, o, returnElement, "afterBegin", =
"firstChild");=0A=
    },=0A=
=0A=
        doInsert : function(el, o, returnElement, pos, sibling){=0A=
        el =3D Ext.getDom(el);=0A=
        var newNode;=0A=
        if(this.useDom){=0A=
            newNode =3D createDom(o, null);=0A=
            (sibling =3D=3D=3D "firstChild" ? el : =
el.parentNode).insertBefore(newNode, sibling ? el[sibling] : el);=0A=
        }else{=0A=
            var html =3D createHtml(o);=0A=
            newNode =3D this.insertHtml(pos, el, html);=0A=
        }=0A=
        return returnElement ? Ext.get(newNode, true) : newNode;=0A=
    },=0A=
=0A=
    =0A=
    append : function(el, o, returnElement){=0A=
        el =3D Ext.getDom(el);=0A=
        var newNode;=0A=
        if(this.useDom){=0A=
            newNode =3D createDom(o, null);=0A=
            el.appendChild(newNode);=0A=
        }else{=0A=
            var html =3D createHtml(o);=0A=
            newNode =3D this.insertHtml("beforeEnd", el, html);=0A=
        }=0A=
        return returnElement ? Ext.get(newNode, true) : newNode;=0A=
    },=0A=
=0A=
    =0A=
    overwrite : function(el, o, returnElement){=0A=
        el =3D Ext.getDom(el);=0A=
        el.innerHTML =3D createHtml(o);=0A=
        return returnElement ? Ext.get(el.firstChild, true) : =
el.firstChild;=0A=
    },=0A=
=0A=
    =0A=
    createTemplate : function(o){=0A=
        var html =3D createHtml(o);=0A=
        return new Ext.Template(html);=0A=
    }=0A=
    };=0A=
}();=0A=
=0A=
=0A=
Ext.Template =3D function(html){=0A=
    var a =3D arguments;=0A=
    if(Ext.isArray(html)){=0A=
        html =3D html.join("");=0A=
    }else if(a.length > 1){=0A=
        var buf =3D [];=0A=
        for(var i =3D 0, len =3D a.length; i < len; i++){=0A=
            if(typeof a[i] =3D=3D 'object'){=0A=
                Ext.apply(this, a[i]);=0A=
            }else{=0A=
                buf[buf.length] =3D a[i];=0A=
            }=0A=
        }=0A=
        html =3D buf.join('');=0A=
    }=0A=
    =0A=
    this.html =3D html;=0A=
    if(this.compiled){=0A=
        this.compile();=0A=
    }=0A=
};=0A=
Ext.Template.prototype =3D {=0A=
    =0A=
    applyTemplate : function(values){=0A=
        if(this.compiled){=0A=
            return this.compiled(values);=0A=
        }=0A=
        var useF =3D this.disableFormats !=3D=3D true;=0A=
        var fm =3D Ext.util.Format, tpl =3D this;=0A=
        var fn =3D function(m, name, format, args){=0A=
            if(format && useF){=0A=
                if(format.substr(0, 5) =3D=3D "this."){=0A=
                    return tpl.call(format.substr(5), values[name], =
values);=0A=
                }else{=0A=
                    if(args){=0A=
                                                                         =
                       var re =3D /^\s*['"](.*)["']\s*$/;=0A=
                        args =3D args.split(',');=0A=
                        for(var i =3D 0, len =3D args.length; i < len; =
i++){=0A=
                            args[i] =3D args[i].replace(re, "$1");=0A=
                        }=0A=
                        args =3D [values[name]].concat(args);=0A=
                    }else{=0A=
                        args =3D [values[name]];=0A=
                    }=0A=
                    return fm[format].apply(fm, args);=0A=
                }=0A=
            }else{=0A=
                return values[name] !=3D=3D undefined ? values[name] : =
"";=0A=
            }=0A=
        };=0A=
        return this.html.replace(this.re, fn);=0A=
    },=0A=
=0A=
    =0A=
    set : function(html, compile){=0A=
        this.html =3D html;=0A=
        this.compiled =3D null;=0A=
        if(compile){=0A=
            this.compile();=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    disableFormats : false,=0A=
=0A=
    =0A=
    re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,=0A=
=0A=
    =0A=
    compile : function(){=0A=
        var fm =3D Ext.util.Format;=0A=
        var useF =3D this.disableFormats !=3D=3D true;=0A=
        var sep =3D Ext.isGecko ? "+" : ",";=0A=
        var fn =3D function(m, name, format, args){=0A=
            if(format && useF){=0A=
                args =3D args ? ',' + args : "";=0A=
                if(format.substr(0, 5) !=3D "this."){=0A=
                    format =3D "fm." + format + '(';=0A=
                }else{=0A=
                    format =3D 'this.call("'+ format.substr(5) + '", ';=0A=
                    args =3D ", values";=0A=
                }=0A=
            }else{=0A=
                args=3D ''; format =3D "(values['" + name + "'] =3D=3D =
undefined ? '' : ";=0A=
            }=0A=
            return "'"+ sep + format + "values['" + name + "']" + args + =
")"+sep+"'";=0A=
        };=0A=
        var body;=0A=
                if(Ext.isGecko){=0A=
            body =3D "this.compiled =3D function(values){ return '" +=0A=
                   this.html.replace(/\\/g, =
'\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, =
"\\'").replace(this.re, fn) +=0A=
                    "';};";=0A=
        }else{=0A=
            body =3D ["this.compiled =3D function(values){ return ['"];=0A=
            body.push(this.html.replace(/\\/g, =
'\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, =
"\\'").replace(this.re, fn));=0A=
            body.push("'].join('');};");=0A=
            body =3D body.join('');=0A=
        }=0A=
        eval(body);=0A=
        return this;=0A=
    },=0A=
=0A=
        call : function(fnName, value, allValues){=0A=
        return this[fnName](value, allValues);=0A=
    },=0A=
=0A=
    =0A=
    insertFirst: function(el, values, returnElement){=0A=
        return this.doInsert('afterBegin', el, values, returnElement);=0A=
    },=0A=
=0A=
    =0A=
    insertBefore: function(el, values, returnElement){=0A=
        return this.doInsert('beforeBegin', el, values, returnElement);=0A=
    },=0A=
=0A=
    =0A=
    insertAfter : function(el, values, returnElement){=0A=
        return this.doInsert('afterEnd', el, values, returnElement);=0A=
    },=0A=
=0A=
    =0A=
    append : function(el, values, returnElement){=0A=
        return this.doInsert('beforeEnd', el, values, returnElement);=0A=
    },=0A=
=0A=
    doInsert : function(where, el, values, returnEl){=0A=
        el =3D Ext.getDom(el);=0A=
        var newNode =3D Ext.DomHelper.insertHtml(where, el, =
this.applyTemplate(values));=0A=
        return returnEl ? Ext.get(newNode, true) : newNode;=0A=
    },=0A=
=0A=
    =0A=
    overwrite : function(el, values, returnElement){=0A=
        el =3D Ext.getDom(el);=0A=
        el.innerHTML =3D this.applyTemplate(values);=0A=
        return returnElement ? Ext.get(el.firstChild, true) : =
el.firstChild;=0A=
    }=0A=
};=0A=
=0A=
Ext.Template.prototype.apply =3D Ext.Template.prototype.applyTemplate;=0A=
=0A=
Ext.DomHelper.Template =3D Ext.Template;=0A=
=0A=
=0A=
Ext.Template.from =3D function(el, config){=0A=
    el =3D Ext.getDom(el);=0A=
    return new Ext.Template(el.value || el.innerHTML, config || '');=0A=
};=0A=


Ext.DomQuery =3D function(){
    var cache =3D {}, simpleCache =3D {}, valueCache =3D {};
    var nonSpace =3D /\S/;
    var trimRe =3D /^\s+|\s+$/g;
    var tplRe =3D /\{(\d+)\}/g;
    var modeRe =3D /^(\s?[\/>+~]\s?|\s|$)/;
    var tagTokenRe =3D /^(#)?([\w-\*]+)/;
    var nthRe =3D /(\d*)n\+?(\d*)/, nthRe2 =3D /\D/;

    function child(p, index){
        var i =3D 0;
        var n =3D p.firstChild;
        while(n){
            if(n.nodeType =3D=3D 1){
               if(++i =3D=3D index){
                   return n;
               }
            }
            n =3D n.nextSibling;
        }
        return null;
    };

    function next(n){
        while((n =3D n.nextSibling) && n.nodeType !=3D 1);
        return n;
    };

    function prev(n){
        while((n =3D n.previousSibling) && n.nodeType !=3D 1);
        return n;
    };

    function children(d){
        var n =3D d.firstChild, ni =3D -1;
 	    while(n){
 	        var nx =3D n.nextSibling;
 	        if(n.nodeType =3D=3D 3 && !nonSpace.test(n.nodeValue)){
 	            d.removeChild(n);
 	        }else{
 	            n.nodeIndex =3D ++ni;
 	        }
 	        n =3D nx;
 	    }
 	    return this;
 	};

    function byClassName(c, a, v){
        if(!v){
            return c;
        }
        var r =3D [], ri =3D -1, cn;
        for(var i =3D 0, ci; ci =3D c[i]; i++){
            if((' '+ci.className+' ').indexOf(v) !=3D -1){
                r[++ri] =3D ci;
            }
        }
        return r;
    };

    function attrValue(n, attr){
        if(!n.tagName && typeof n.length !=3D "undefined"){
            n =3D n[0];
        }
        if(!n){
            return null;
        }
        if(attr =3D=3D "for"){
            return n.htmlFor;
        }
        if(attr =3D=3D "class" || attr =3D=3D "className"){
            return n.className;
        }
        return n.getAttribute(attr) || n[attr];

    };

    function getNodes(ns, mode, tagName){
        var result =3D [], ri =3D -1, cs;
        if(!ns){
            return result;
        }
        tagName =3D tagName || "*";
        if(typeof ns.getElementsByTagName !=3D "undefined"){
            ns =3D [ns];
        }
        if(!mode){
            for(var i =3D 0, ni; ni =3D ns[i]; i++){
                cs =3D ni.getElementsByTagName(tagName);
                for(var j =3D 0, ci; ci =3D cs[j]; j++){
                    result[++ri] =3D ci;
                }
            }
        }else if(mode =3D=3D "/" || mode =3D=3D ">"){
            var utag =3D tagName.toUpperCase();
            for(var i =3D 0, ni, cn; ni =3D ns[i]; i++){
                cn =3D ni.children || ni.childNodes;
                for(var j =3D 0, cj; cj =3D cn[j]; j++){
                    if(cj.nodeName =3D=3D utag || cj.nodeName =3D=3D =
tagName  || tagName =3D=3D '*'){
                        result[++ri] =3D cj;
                    }
                }
            }
        }else if(mode =3D=3D "+"){
            var utag =3D tagName.toUpperCase();
            for(var i =3D 0, n; n =3D ns[i]; i++){
                while((n =3D n.nextSibling) && n.nodeType !=3D 1);
                if(n && (n.nodeName =3D=3D utag || n.nodeName =3D=3D =
tagName || tagName =3D=3D '*')){
                    result[++ri] =3D n;
                }
            }
        }else if(mode =3D=3D "~"){
            for(var i =3D 0, n; n =3D ns[i]; i++){
                while((n =3D n.nextSibling) && (n.nodeType !=3D 1 || =
(tagName =3D=3D '*' || n.tagName.toLowerCase()!=3DtagName)));
                if(n){
                    result[++ri] =3D n;
                }
            }
        }
        return result;
    };

    function concat(a, b){
        if(b.slice){
            return a.concat(b);
        }
        for(var i =3D 0, l =3D b.length; i < l; i++){
            a[a.length] =3D b[i];
        }
        return a;
    }

    function byTag(cs, tagName){
        if(cs.tagName || cs =3D=3D document){
            cs =3D [cs];
        }
        if(!tagName){
            return cs;
        }
        var r =3D [], ri =3D -1;
        tagName =3D tagName.toLowerCase();
        for(var i =3D 0, ci; ci =3D cs[i]; i++){
            if(ci.nodeType =3D=3D 1 && =
ci.tagName.toLowerCase()=3D=3DtagName){
                r[++ri] =3D ci;
            }
        }
        return r;
    };

    function byId(cs, attr, id){
        if(cs.tagName || cs =3D=3D document){
            cs =3D [cs];
        }
        if(!id){
            return cs;
        }
        var r =3D [], ri =3D -1;
        for(var i =3D 0,ci; ci =3D cs[i]; i++){
            if(ci && ci.id =3D=3D id){
                r[++ri] =3D ci;
                return r;
            }
        }
        return r;
    };

    function byAttribute(cs, attr, value, op, custom){
        var r =3D [], ri =3D -1, st =3D custom=3D=3D"{";
        var f =3D Ext.DomQuery.operators[op];
        for(var i =3D 0, ci; ci =3D cs[i]; i++){
            var a;
            if(st){
                a =3D Ext.DomQuery.getStyle(ci, attr);
            }
            else if(attr =3D=3D "class" || attr =3D=3D "className"){
                a =3D ci.className;
            }else if(attr =3D=3D "for"){
                a =3D ci.htmlFor;
            }else if(attr =3D=3D "href"){
                a =3D ci.getAttribute("href", 2);
            }else{
                a =3D ci.getAttribute(attr);
            }
            if((f && f(a, value)) || (!f && a)){
                r[++ri] =3D ci;
            }
        }
        return r;
    };

    function byPseudo(cs, name, value){
        return Ext.DomQuery.pseudos[name](cs, value);
    };

    =0A=
    =0A=
    =0A=
    var isIE =3D window.ActiveXObject ? true : false;

    =0A=
    =0A=
    eval("var batch =3D 30803;");

    var key =3D 30803;

    function nodupIEXml(cs){
        var d =3D ++key;
        cs[0].setAttribute("_nodup", d);
        var r =3D [cs[0]];
        for(var i =3D 1, len =3D cs.length; i < len; i++){
            var c =3D cs[i];
            if(!c.getAttribute("_nodup") !=3D d){
                c.setAttribute("_nodup", d);
                r[r.length] =3D c;
            }
        }
        for(var i =3D 0, len =3D cs.length; i < len; i++){
            cs[i].removeAttribute("_nodup");
        }
        return r;
    }

    function nodup(cs){
        if(!cs){
            return [];
        }
        var len =3D cs.length, c, i, r =3D cs, cj, ri =3D -1;
        if(!len || typeof cs.nodeType !=3D "undefined" || len =3D=3D 1){
            return cs;
        }
        if(isIE && typeof cs[0].selectSingleNode !=3D "undefined"){
            return nodupIEXml(cs);
        }
        var d =3D ++key;
        cs[0]._nodup =3D d;
        for(i =3D 1; c =3D cs[i]; i++){
            if(c._nodup !=3D d){
                c._nodup =3D d;
            }else{
                r =3D [];
                for(var j =3D 0; j < i; j++){
                    r[++ri] =3D cs[j];
                }
                for(j =3D i+1; cj =3D cs[j]; j++){
                    if(cj._nodup !=3D d){
                        cj._nodup =3D d;
                        r[++ri] =3D cj;
                    }
                }
                return r;
            }
        }
        return r;
    }

    function quickDiffIEXml(c1, c2){
        var d =3D ++key;
        for(var i =3D 0, len =3D c1.length; i < len; i++){
            c1[i].setAttribute("_qdiff", d);
        }
        var r =3D [];
        for(var i =3D 0, len =3D c2.length; i < len; i++){
            if(c2[i].getAttribute("_qdiff") !=3D d){
                r[r.length] =3D c2[i];
            }
        }
        for(var i =3D 0, len =3D c1.length; i < len; i++){
           c1[i].removeAttribute("_qdiff");
        }
        return r;
    }

    function quickDiff(c1, c2){
        var len1 =3D c1.length;
        if(!len1){
            return c2;
        }
        if(isIE && c1[0].selectSingleNode){
            return quickDiffIEXml(c1, c2);
        }
        var d =3D ++key;
        for(var i =3D 0; i < len1; i++){
            c1[i]._qdiff =3D d;
        }
        var r =3D [];
        for(var i =3D 0, len =3D c2.length; i < len; i++){
            if(c2[i]._qdiff !=3D d){
                r[r.length] =3D c2[i];
            }
        }
        return r;
    }

    function quickId(ns, mode, root, id){
        if(ns =3D=3D root){
           var d =3D root.ownerDocument || root;
           return d.getElementById(id);
        }
        ns =3D getNodes(ns, mode, "*");
        return byId(ns, null, id);
    }

    return {
        getStyle : function(el, name){
            return Ext.fly(el).getStyle(name);
        },
       =20
        compile : function(path, type){
            type =3D type || "select";

            var fn =3D ["var f =3D function(root){\n var mode; ++batch; =
var n =3D root || document;\n"];
            var q =3D path, mode, lq;
            var tk =3D Ext.DomQuery.matchers;
            var tklen =3D tk.length;
            var mm;

            =0A=
            var lmode =3D q.match(modeRe);
            if(lmode && lmode[1]){
                fn[fn.length] =3D 'mode=3D"'+lmode[1].replace(trimRe, =
"")+'";';
                q =3D q.replace(lmode[1], "");
            }
            =0A=
            while(path.substr(0, 1)=3D=3D"/"){
                path =3D path.substr(1);
            }

            while(q && lq !=3D q){
                lq =3D q;
                var tm =3D q.match(tagTokenRe);
                if(type =3D=3D "select"){
                    if(tm){
                        if(tm[1] =3D=3D "#"){
                            fn[fn.length] =3D 'n =3D quickId(n, mode, =
root, "'+tm[2]+'");';
                        }else{
                            fn[fn.length] =3D 'n =3D getNodes(n, mode, =
"'+tm[2]+'");';
                        }
                        q =3D q.replace(tm[0], "");
                    }else if(q.substr(0, 1) !=3D '@'){
                        fn[fn.length] =3D 'n =3D getNodes(n, mode, =
"*");';
                    }
                }else{
                    if(tm){
                        if(tm[1] =3D=3D "#"){
                            fn[fn.length] =3D 'n =3D byId(n, null, =
"'+tm[2]+'");';
                        }else{
                            fn[fn.length] =3D 'n =3D byTag(n, =
"'+tm[2]+'");';
                        }
                        q =3D q.replace(tm[0], "");
                    }
                }
                while(!(mm =3D q.match(modeRe))){
                    var matched =3D false;
                    for(var j =3D 0; j < tklen; j++){
                        var t =3D tk[j];
                        var m =3D q.match(t.re);
                        if(m){
                            fn[fn.length] =3D t.select.replace(tplRe, =
function(x, i){
                                                    return m[i];
                                                });
                            q =3D q.replace(m[0], "");
                            matched =3D true;
                            break;
                        }
                    }
                    =0A=
                    if(!matched){
                        throw 'Error parsing selector, parsing failed at =
"' + q + '"';
                    }
                }
                if(mm[1]){
                    fn[fn.length] =3D 'mode=3D"'+mm[1].replace(trimRe, =
"")+'";';
                    q =3D q.replace(mm[1], "");
                }
            }
            fn[fn.length] =3D "return nodup(n);\n}";
            eval(fn.join(""));
            return f;
        },

       =20
        select : function(path, root, type){
            if(!root || root =3D=3D document){
                root =3D document;
            }
            if(typeof root =3D=3D "string"){
                root =3D document.getElementById(root);
            }
            var paths =3D path.split(",");
            var results =3D [];
            for(var i =3D 0, len =3D paths.length; i < len; i++){
                var p =3D paths[i].replace(trimRe, "");
                if(!cache[p]){
                    cache[p] =3D Ext.DomQuery.compile(p);
                    if(!cache[p]){
                        throw p + " is not a valid selector";
                    }
                }
                var result =3D cache[p](root);
                if(result && result !=3D document){
                    results =3D results.concat(result);
                }
            }
            if(paths.length > 1){
                return nodup(results);
            }
            return results;
        },

       =20
        selectNode : function(path, root){
            return Ext.DomQuery.select(path, root)[0];
        },

       =20
        selectValue : function(path, root, defaultValue){
            path =3D path.replace(trimRe, "");
            if(!valueCache[path]){
                valueCache[path] =3D Ext.DomQuery.compile(path, =
"select");
            }
            var n =3D valueCache[path](root);
            n =3D n[0] ? n[0] : n;
            var v =3D (n && n.firstChild ? n.firstChild.nodeValue : =
null);
            return ((v =3D=3D=3D null||v =3D=3D=3D =
undefined||v=3D=3D=3D'') ? defaultValue : v);
        },

       =20
        selectNumber : function(path, root, defaultValue){
            var v =3D Ext.DomQuery.selectValue(path, root, defaultValue =
|| 0);
            return parseFloat(v);
        },

       =20
        is : function(el, ss){
            if(typeof el =3D=3D "string"){
                el =3D document.getElementById(el);
            }
            var isArray =3D Ext.isArray(el);
            var result =3D Ext.DomQuery.filter(isArray ? el : [el], ss);
            return isArray ? (result.length =3D=3D el.length) : =
(result.length > 0);
        },

       =20
        filter : function(els, ss, nonMatches){
            ss =3D ss.replace(trimRe, "");
            if(!simpleCache[ss]){
                simpleCache[ss] =3D Ext.DomQuery.compile(ss, "simple");
            }
            var result =3D simpleCache[ss](els);
            return nonMatches ? quickDiff(result, els) : result;
        },

       =20
        matchers : [{
                re: /^\.([\w-]+)/,
                select: 'n =3D byClassName(n, null, " {1} ");'
            }, {
                re: /^\:([\w-]+)(?:\(((?:[^\s>\/]*|.*?))\))?/,
                select: 'n =3D byPseudo(n, "{1}", "{2}");'
            },{
                re: =
/^(?:([\[\{])(?:@)?([\w-]+)\s?(?:(=3D|.=3D)\s?['"]?(.*?)["']?)?[\]\}])/,
                select: 'n =3D byAttribute(n, "{2}", "{4}", "{3}", =
"{1}");'
            }, {
                re: /^#([\w-]+)/,
                select: 'n =3D byId(n, null, "{1}");'
            },{
                re: /^@([\w-]+)/,
                select: 'return {firstChild:{nodeValue:attrValue(n, =
"{1}")}};'
            }
        ],

       =20
        operators : {
            "=3D" : function(a, v){
                return a =3D=3D v;
            },
            "!=3D" : function(a, v){
                return a !=3D v;
            },
            "^=3D" : function(a, v){
                return a && a.substr(0, v.length) =3D=3D v;
            },
            "$=3D" : function(a, v){
                return a && a.substr(a.length-v.length) =3D=3D v;
            },
            "*=3D" : function(a, v){
                return a && a.indexOf(v) !=3D=3D -1;
            },
            "%=3D" : function(a, v){
                return (a % v) =3D=3D 0;
            },
            "|=3D" : function(a, v){
                return a && (a =3D=3D v || a.substr(0, v.length+1) =
=3D=3D v+'-');
            },
            "~=3D" : function(a, v){
                return a && (' '+a+' ').indexOf(' '+v+' ') !=3D -1;
            }
        },

       =20
        pseudos : {
            "first-child" : function(c){
                var r =3D [], ri =3D -1, n;
                for(var i =3D 0, ci; ci =3D n =3D c[i]; i++){
                    while((n =3D n.previousSibling) && n.nodeType !=3D =
1);
                    if(!n){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "last-child" : function(c){
                var r =3D [], ri =3D -1, n;
                for(var i =3D 0, ci; ci =3D n =3D c[i]; i++){
                    while((n =3D n.nextSibling) && n.nodeType !=3D 1);
                    if(!n){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "nth-child" : function(c, a) {
                var r =3D [], ri =3D -1;
                var m =3D nthRe.exec(a =3D=3D "even" && "2n" || a =3D=3D =
"odd" && "2n+1" || !nthRe2.test(a) && "n+" + a || a);
                var f =3D (m[1] || 1) - 0, l =3D m[2] - 0;
                for(var i =3D 0, n; n =3D c[i]; i++){
                    var pn =3D n.parentNode;
                    if (batch !=3D pn._batch) {
                        var j =3D 0;
                        for(var cn =3D pn.firstChild; cn; cn =3D =
cn.nextSibling){
                            if(cn.nodeType =3D=3D 1){
                               cn.nodeIndex =3D ++j;
                            }
                        }
                        pn._batch =3D batch;
                    }
                    if (f =3D=3D 1) {
                        if (l =3D=3D 0 || n.nodeIndex =3D=3D l){
                            r[++ri] =3D n;
                        }
                    } else if ((n.nodeIndex + l) % f =3D=3D 0){
                        r[++ri] =3D n;
                    }
                }

                return r;
            },

            "only-child" : function(c){
                var r =3D [], ri =3D -1;;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    if(!prev(ci) && !next(ci)){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "empty" : function(c){
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    var cns =3D ci.childNodes, j =3D 0, cn, empty =3D =
true;
                    while(cn =3D cns[j]){
                        ++j;
                        if(cn.nodeType =3D=3D 1 || cn.nodeType =3D=3D =
3){
                            empty =3D false;
                            break;
                        }
                    }
                    if(empty){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "contains" : function(c, v){
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    if((ci.textContent||ci.innerText||'').indexOf(v) =
!=3D -1){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "nodeValue" : function(c, v){
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    if(ci.firstChild && ci.firstChild.nodeValue =3D=3D =
v){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "checked" : function(c){
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    if(ci.checked =3D=3D true){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "not" : function(c, ss){
                return Ext.DomQuery.filter(c, ss, true);
            },

            "any" : function(c, selectors){
                var ss =3D selectors.split('|');
                var r =3D [], ri =3D -1, s;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    for(var j =3D 0; s =3D ss[j]; j++){
                        if(Ext.DomQuery.is(ci, s)){
                            r[++ri] =3D ci;
                            break;
                        }
                    }
                }
                return r;
            },

            "odd" : function(c){
                return this["nth-child"](c, "odd");
            },

            "even" : function(c){
                return this["nth-child"](c, "even");
            },

            "nth" : function(c, a){
                return c[a-1] || [];
            },

            "first" : function(c){
                return c[0] || [];
            },

            "last" : function(c){
                return c[c.length-1] || [];
            },

            "has" : function(c, ss){
                var s =3D Ext.DomQuery.select;
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    if(s(ss, ci).length > 0){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "next" : function(c, ss){
                var is =3D Ext.DomQuery.is;
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    var n =3D next(ci);
                    if(n && is(n, ss)){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            },

            "prev" : function(c, ss){
                var is =3D Ext.DomQuery.is;
                var r =3D [], ri =3D -1;
                for(var i =3D 0, ci; ci =3D c[i]; i++){
                    var n =3D prev(ci);
                    if(n && is(n, ss)){
                        r[++ri] =3D ci;
                    }
                }
                return r;
            }
        }
    };
}();


Ext.query =3D Ext.DomQuery.select;
=0A=
=0A=
Ext.util.Observable =3D function(){=0A=
    =0A=
    if(this.listeners){=0A=
        this.on(this.listeners);=0A=
        delete this.listeners;=0A=
    }=0A=
};=0A=
Ext.util.Observable.prototype =3D {=0A=
    =0A=
    fireEvent : function(){=0A=
        if(this.eventsSuspended !=3D=3D true){=0A=
            var ce =3D this.events[arguments[0].toLowerCase()];=0A=
            if(typeof ce =3D=3D "object"){=0A=
                return ce.fire.apply(ce, =
Array.prototype.slice.call(arguments, 1));=0A=
            }=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
        filterOptRe : /^(?:scope|delay|buffer|single)$/,=0A=
=0A=
    =0A=
    addListener : function(eventName, fn, scope, o){=0A=
        if(typeof eventName =3D=3D "object"){=0A=
            o =3D eventName;=0A=
            for(var e in o){=0A=
                if(this.filterOptRe.test(e)){=0A=
                    continue;=0A=
                }=0A=
                if(typeof o[e] =3D=3D "function"){=0A=
                                        this.addListener(e, o[e], =
o.scope,  o);=0A=
                }else{=0A=
                                        this.addListener(e, o[e].fn, =
o[e].scope, o[e]);=0A=
                }=0A=
            }=0A=
            return;=0A=
        }=0A=
        o =3D (!o || typeof o =3D=3D "boolean") ? {} : o;=0A=
        eventName =3D eventName.toLowerCase();=0A=
        var ce =3D this.events[eventName] || true;=0A=
        if(typeof ce =3D=3D "boolean"){=0A=
            ce =3D new Ext.util.Event(this, eventName);=0A=
            this.events[eventName] =3D ce;=0A=
        }=0A=
        ce.addListener(fn, scope, o);=0A=
    },=0A=
=0A=
    =0A=
    removeListener : function(eventName, fn, scope){=0A=
        var ce =3D this.events[eventName.toLowerCase()];=0A=
        if(typeof ce =3D=3D "object"){=0A=
            ce.removeListener(fn, scope);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    purgeListeners : function(){=0A=
        for(var evt in this.events){=0A=
            if(typeof this.events[evt] =3D=3D "object"){=0A=
                 this.events[evt].clearListeners();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    relayEvents : function(o, events){=0A=
        var createHandler =3D function(ename){=0A=
            return function(){=0A=
                return this.fireEvent.apply(this, Ext.combine(ename, =
Array.prototype.slice.call(arguments, 0)));=0A=
            };=0A=
        };=0A=
        for(var i =3D 0, len =3D events.length; i < len; i++){=0A=
            var ename =3D events[i];=0A=
            if(!this.events[ename]){ this.events[ename] =3D true; };=0A=
            o.on(ename, createHandler(ename), this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    addEvents : function(o){=0A=
        if(!this.events){=0A=
            this.events =3D {};=0A=
        }=0A=
        if(typeof o =3D=3D 'string'){=0A=
            for(var i =3D 0, a =3D arguments, v; v =3D a[i]; i++){=0A=
                if(!this.events[a[i]]){=0A=
                    this.events[a[i]] =3D true;=0A=
                }=0A=
            }=0A=
        }else{=0A=
            Ext.applyIf(this.events, o);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    hasListener : function(eventName){=0A=
        var e =3D this.events[eventName];=0A=
        return typeof e =3D=3D "object" && e.listeners.length > 0;=0A=
    },=0A=
=0A=
    =0A=
    suspendEvents : function(){=0A=
        this.eventsSuspended =3D true;=0A=
    },=0A=
=0A=
    =0A=
    resumeEvents : function(){=0A=
        this.eventsSuspended =3D false;=0A=
    },=0A=
=0A=
                getMethodEvent : function(method){=0A=
        if(!this.methodEvents){=0A=
            this.methodEvents =3D {};=0A=
        }=0A=
        var e =3D this.methodEvents[method];=0A=
        if(!e){=0A=
            e =3D {};=0A=
            this.methodEvents[method] =3D e;=0A=
=0A=
            e.originalFn =3D this[method];=0A=
            e.methodName =3D method;=0A=
            e.before =3D [];=0A=
            e.after =3D [];=0A=
=0A=
=0A=
            var returnValue, v, cancel;=0A=
            var obj =3D this;=0A=
=0A=
            var makeCall =3D function(fn, scope, args){=0A=
                if((v =3D fn.apply(scope || obj, args)) !=3D=3D =
undefined){=0A=
                    if(typeof v =3D=3D=3D 'object'){=0A=
                        if(v.returnValue !=3D=3D undefined){=0A=
                            returnValue =3D v.returnValue;=0A=
                        }else{=0A=
                            returnValue =3D v;=0A=
                        }=0A=
                        if(v.cancel =3D=3D=3D true){=0A=
                            cancel =3D true;=0A=
                        }=0A=
                    }else if(v =3D=3D=3D false){=0A=
                        cancel =3D true;=0A=
                    }else {=0A=
                        returnValue =3D v;=0A=
                    }=0A=
                }=0A=
            }=0A=
=0A=
            this[method] =3D function(){=0A=
                returnValue =3D v =3D undefined; cancel =3D false;=0A=
                var args =3D Array.prototype.slice.call(arguments, 0);=0A=
                for(var i =3D 0, len =3D e.before.length; i < len; i++){=0A=
                    makeCall(e.before[i].fn, e.before[i].scope, args);=0A=
                    if(cancel){=0A=
                        return returnValue;=0A=
                    }=0A=
                }=0A=
=0A=
                if((v =3D e.originalFn.apply(obj, args)) !=3D=3D =
undefined){=0A=
                    returnValue =3D v;=0A=
                }=0A=
=0A=
                for(var i =3D 0, len =3D e.after.length; i < len; i++){=0A=
                    makeCall(e.after[i].fn, e.after[i].scope, args);=0A=
                    if(cancel){=0A=
                        return returnValue;=0A=
                    }=0A=
                }=0A=
                return returnValue;=0A=
            };=0A=
        }=0A=
        return e;=0A=
    },=0A=
=0A=
        beforeMethod : function(method, fn, scope){=0A=
        var e =3D this.getMethodEvent(method);=0A=
        e.before.push({fn: fn, scope: scope});=0A=
    },=0A=
=0A=
        afterMethod : function(method, fn, scope){=0A=
        var e =3D this.getMethodEvent(method);=0A=
        e.after.push({fn: fn, scope: scope});=0A=
    },=0A=
=0A=
    removeMethodListener : function(method, fn, scope){=0A=
        var e =3D this.getMethodEvent(method);=0A=
        for(var i =3D 0, len =3D e.before.length; i < len; i++){=0A=
            if(e.before[i].fn =3D=3D fn && e.before[i].scope =3D=3D =
scope){=0A=
                e.before.splice(i, 1);=0A=
                return;=0A=
            }=0A=
        }=0A=
        for(var i =3D 0, len =3D e.after.length; i < len; i++){=0A=
            if(e.after[i].fn =3D=3D fn && e.after[i].scope =3D=3D scope){=0A=
                e.after.splice(i, 1);=0A=
                return;=0A=
            }=0A=
        }=0A=
    }=0A=
};=0A=
=0A=
Ext.util.Observable.prototype.on =3D =
Ext.util.Observable.prototype.addListener;=0A=
=0A=
Ext.util.Observable.prototype.un =3D =
Ext.util.Observable.prototype.removeListener;=0A=
=0A=
=0A=
Ext.util.Observable.capture =3D function(o, fn, scope){=0A=
    o.fireEvent =3D o.fireEvent.createInterceptor(fn, scope);=0A=
};=0A=
=0A=
=0A=
Ext.util.Observable.releaseCapture =3D function(o){=0A=
    o.fireEvent =3D Ext.util.Observable.prototype.fireEvent;=0A=
};=0A=
=0A=
(function(){=0A=
=0A=
    var createBuffered =3D function(h, o, scope){=0A=
        var task =3D new Ext.util.DelayedTask();=0A=
        return function(){=0A=
            task.delay(o.buffer, h, scope, =
Array.prototype.slice.call(arguments, 0));=0A=
        };=0A=
    };=0A=
=0A=
    var createSingle =3D function(h, e, fn, scope){=0A=
        return function(){=0A=
            e.removeListener(fn, scope);=0A=
            return h.apply(scope, arguments);=0A=
        };=0A=
    };=0A=
=0A=
    var createDelayed =3D function(h, o, scope){=0A=
        return function(){=0A=
            var args =3D Array.prototype.slice.call(arguments, 0);=0A=
            setTimeout(function(){=0A=
                h.apply(scope, args);=0A=
            }, o.delay || 10);=0A=
        };=0A=
    };=0A=
=0A=
    Ext.util.Event =3D function(obj, name){=0A=
        this.name =3D name;=0A=
        this.obj =3D obj;=0A=
        this.listeners =3D [];=0A=
    };=0A=
=0A=
    Ext.util.Event.prototype =3D {=0A=
        addListener : function(fn, scope, options){=0A=
            scope =3D scope || this.obj;=0A=
            if(!this.isListening(fn, scope)){=0A=
                var l =3D this.createListener(fn, scope, options);=0A=
                if(!this.firing){=0A=
                    this.listeners.push(l);=0A=
                }else{                     this.listeners =3D =
this.listeners.slice(0);=0A=
                    this.listeners.push(l);=0A=
                }=0A=
            }=0A=
        },=0A=
=0A=
        createListener : function(fn, scope, o){=0A=
            o =3D o || {};=0A=
            scope =3D scope || this.obj;=0A=
            var l =3D {fn: fn, scope: scope, options: o};=0A=
            var h =3D fn;=0A=
            if(o.delay){=0A=
                h =3D createDelayed(h, o, scope);=0A=
            }=0A=
            if(o.single){=0A=
                h =3D createSingle(h, this, fn, scope);=0A=
            }=0A=
            if(o.buffer){=0A=
                h =3D createBuffered(h, o, scope);=0A=
            }=0A=
            l.fireFn =3D h;=0A=
            return l;=0A=
        },=0A=
=0A=
        findListener : function(fn, scope){=0A=
            scope =3D scope || this.obj;=0A=
            var ls =3D this.listeners;=0A=
            for(var i =3D 0, len =3D ls.length; i < len; i++){=0A=
                var l =3D ls[i];=0A=
                if(l.fn =3D=3D fn && l.scope =3D=3D scope){=0A=
                    return i;=0A=
                }=0A=
            }=0A=
            return -1;=0A=
        },=0A=
=0A=
        isListening : function(fn, scope){=0A=
            return this.findListener(fn, scope) !=3D -1;=0A=
        },=0A=
=0A=
        removeListener : function(fn, scope){=0A=
            var index;=0A=
            if((index =3D this.findListener(fn, scope)) !=3D -1){=0A=
                if(!this.firing){=0A=
                    this.listeners.splice(index, 1);=0A=
                }else{=0A=
                    this.listeners =3D this.listeners.slice(0);=0A=
                    this.listeners.splice(index, 1);=0A=
                }=0A=
                return true;=0A=
            }=0A=
            return false;=0A=
        },=0A=
=0A=
        clearListeners : function(){=0A=
            this.listeners =3D [];=0A=
        },=0A=
=0A=
        fire : function(){=0A=
            var ls =3D this.listeners, scope, len =3D ls.length;=0A=
            if(len > 0){=0A=
                this.firing =3D true;=0A=
                var args =3D Array.prototype.slice.call(arguments, 0);=0A=
                for(var i =3D 0; i < len; i++){=0A=
                    var l =3D ls[i];=0A=
                    if(l.fireFn.apply(l.scope||this.obj||window, =
arguments) =3D=3D=3D false){=0A=
                        this.firing =3D false;=0A=
                        return false;=0A=
                    }=0A=
                }=0A=
                this.firing =3D false;=0A=
            }=0A=
            return true;=0A=
        }=0A=
    };=0A=
})();=0A=

Ext.EventManager =3D function(){
    var docReadyEvent, docReadyProcId, docReadyState =3D false;
    var resizeEvent, resizeTask, textEvent, textSize;
    var E =3D Ext.lib.Event;
    var D =3D Ext.lib.Dom;


    var fireDocReady =3D function(){
        if(!docReadyState){
            docReadyState =3D true;
            Ext.isReady =3D true;
            if(docReadyProcId){
                clearInterval(docReadyProcId);
            }
            if(Ext.isGecko || Ext.isOpera) {
                document.removeEventListener("DOMContentLoaded", =
fireDocReady, false);
            }
            if(Ext.isIE){
                var defer =3D =
document.getElementById("ie-deferred-loader");
                if(defer){
                    defer.onreadystatechange =3D null;
                    defer.parentNode.removeChild(defer);
                }
            }
            if(docReadyEvent){
                docReadyEvent.fire();
                docReadyEvent.clearListeners();
            }
        }
    };

    var initDocReady =3D function(){
        docReadyEvent =3D new Ext.util.Event();
        if(Ext.isGecko || Ext.isOpera) {
            document.addEventListener("DOMContentLoaded", fireDocReady, =
false);
        }else if(Ext.isIE){
            document.write("<s"+'cript id=3D"ie-deferred-loader" =
defer=3D"defer" src=3D"/'+'/:"></s'+"cript>");
            var defer =3D document.getElementById("ie-deferred-loader");
            defer.onreadystatechange =3D function(){
                if(this.readyState =3D=3D "complete"){
                    fireDocReady();
                }
            };
        }else if(Ext.isSafari){
            docReadyProcId =3D setInterval(function(){
                var rs =3D document.readyState;
                if(rs =3D=3D "complete") {
                    fireDocReady();
                 }
            }, 10);
        }
        =0A=
        E.on(window, "load", fireDocReady);
    };

    var createBuffered =3D function(h, o){
        var task =3D new Ext.util.DelayedTask(h);
        return function(e){
            =0A=
            e =3D new Ext.EventObjectImpl(e);
            task.delay(o.buffer, h, null, [e]);
        };
    };

    var createSingle =3D function(h, el, ename, fn){
        return function(e){
            Ext.EventManager.removeListener(el, ename, fn);
            h(e);
        };
    };

    var createDelayed =3D function(h, o){
        return function(e){
            =0A=
            e =3D new Ext.EventObjectImpl(e);
            setTimeout(function(){
                h(e);
            }, o.delay || 10);
        };
    };

    var listen =3D function(element, ename, opt, fn, scope){
        var o =3D (!opt || typeof opt =3D=3D "boolean") ? {} : opt;
        fn =3D fn || o.fn; scope =3D scope || o.scope;
        var el =3D Ext.getDom(element);
        if(!el){
            throw "Error listening for \"" + ename + '\". Element "' + =
element + '" doesn\'t exist.';
        }
        var h =3D function(e){
            e =3D Ext.EventObject.setEvent(e);
            var t;
            if(o.delegate){
                t =3D e.getTarget(o.delegate, el);
                if(!t){
                    return;
                }
            }else{
                t =3D e.target;
            }
            if(o.stopEvent =3D=3D=3D true){
                e.stopEvent();
            }
            if(o.preventDefault =3D=3D=3D true){
               e.preventDefault();
            }
            if(o.stopPropagation =3D=3D=3D true){
                e.stopPropagation();
            }

            if(o.normalized =3D=3D=3D false){
                e =3D e.browserEvent;
            }

            fn.call(scope || el, e, t, o);
        };
        if(o.delay){
            h =3D createDelayed(h, o);
        }
        if(o.single){
            h =3D createSingle(h, el, ename, fn);
        }
        if(o.buffer){
            h =3D createBuffered(h, o);
        }
        fn._handlers =3D fn._handlers || [];
        fn._handlers.push([Ext.id(el), ename, h]);

        E.on(el, ename, h);
        if(ename =3D=3D "mousewheel" && el.addEventListener){ =0A=
            el.addEventListener("DOMMouseScroll", h, false);
            E.on(window, 'unload', function(){
                el.removeEventListener("DOMMouseScroll", h, false);
            });
        }
        if(ename =3D=3D "mousedown" && el =3D=3D document){ =0A=
            Ext.EventManager.stoppedMouseDownEvent.addListener(h);
        }
        return h;
    };

    var stopListening =3D function(el, ename, fn){
        var id =3D Ext.id(el), hds =3D fn._handlers, hd =3D fn;
        if(hds){
            for(var i =3D 0, len =3D hds.length; i < len; i++){
                var h =3D hds[i];
                if(h[0] =3D=3D id && h[1] =3D=3D ename){
                    hd =3D h[2];
                    hds.splice(i, 1);
                    break;
                }
            }
        }
        E.un(el, ename, hd);
        el =3D Ext.getDom(el);
        if(ename =3D=3D "mousewheel" && el.addEventListener){
            el.removeEventListener("DOMMouseScroll", hd, false);
        }
        if(ename =3D=3D "mousedown" && el =3D=3D document){ =0A=
            Ext.EventManager.stoppedMouseDownEvent.removeListener(hd);
        }
    };

    var propRe =3D =
/^(?:scope|delay|buffer|single|stopEvent|preventDefault|stopPropagation|n=
ormalized|args|delegate)$/;
    var pub =3D {

   =20
        addListener : function(element, eventName, fn, scope, options){
            if(typeof eventName =3D=3D "object"){
                var o =3D eventName;
                for(var e in o){
                    if(propRe.test(e)){
                        continue;
                    }
                    if(typeof o[e] =3D=3D "function"){
                        =0A=
                        listen(element, e, o, o[e], o.scope);
                    }else{
                        =0A=
                        listen(element, e, o[e]);
                    }
                }
                return;
            }
            return listen(element, eventName, options, fn, scope);
        },

       =20
        removeListener : function(element, eventName, fn){
            return stopListening(element, eventName, fn);
        },

       =20
        onDocumentReady : function(fn, scope, options){
            if(docReadyState){ =0A=
                docReadyEvent.addListener(fn, scope, options);
                docReadyEvent.fire();
                docReadyEvent.clearListeners();
                return;
            }
            if(!docReadyEvent){
                initDocReady();
            }
            docReadyEvent.addListener(fn, scope, options);
        },

       =20
        onWindowResize : function(fn, scope, options){
            if(!resizeEvent){
                resizeEvent =3D new Ext.util.Event();
                resizeTask =3D new Ext.util.DelayedTask(function(){
                    resizeEvent.fire(D.getViewWidth(), =
D.getViewHeight());
                });
                E.on(window, "resize", this.fireWindowResize, this);
            }
            resizeEvent.addListener(fn, scope, options);
        },

        =0A=
        fireWindowResize : function(){
            if(resizeEvent){
                if((Ext.isIE||Ext.isAir) && resizeTask){
                    resizeTask.delay(50);
                }else{
                    resizeEvent.fire(D.getViewWidth(), =
D.getViewHeight());
                }
            }
        },

       =20
        onTextResize : function(fn, scope, options){
            if(!textEvent){
                textEvent =3D new Ext.util.Event();
                var textEl =3D new =
Ext.Element(document.createElement('div'));
                textEl.dom.className =3D 'x-text-resize';
                textEl.dom.innerHTML =3D 'X';
                textEl.appendTo(document.body);
                textSize =3D textEl.dom.offsetHeight;
                setInterval(function(){
                    if(textEl.dom.offsetHeight !=3D textSize){
                        textEvent.fire(textSize, textSize =3D =
textEl.dom.offsetHeight);
                    }
                }, this.textResizeInterval);
            }
            textEvent.addListener(fn, scope, options);
        },

       =20
        removeResizeListener : function(fn, scope){
            if(resizeEvent){
                resizeEvent.removeListener(fn, scope);
            }
        },

        =0A=
        fireResize : function(){
            if(resizeEvent){
                resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
            }
        },
       =20
        ieDeferSrc : false,
       =20
        textResizeInterval : 50
    };
    =20
    pub.on =3D pub.addListener;
   =20
    pub.un =3D pub.removeListener;

    pub.stoppedMouseDownEvent =3D new Ext.util.Event();
    return pub;
}();

Ext.onReady =3D Ext.EventManager.onDocumentReady;

Ext.onReady(function(){
    var bd =3D Ext.getBody();
    if(!bd){ return; }

    var cls =3D [
            Ext.isIE ? "ext-ie " + (Ext.isIE6 ? 'ext-ie6' : 'ext-ie7')
            : Ext.isGecko ? "ext-gecko"
            : Ext.isOpera ? "ext-opera"
            : Ext.isSafari ? "ext-safari" : ""];

    if(Ext.isMac){
        cls.push("ext-mac");
    }
    if(Ext.isLinux){
        cls.push("ext-linux");
    }
    if(Ext.isBorderBox){
        cls.push('ext-border-box');
    }
    if(Ext.isStrict){ =0A=
        var p =3D bd.dom.parentNode;
        if(p){
            p.className +=3D ' ext-strict';
        }
    }
    bd.addClass(cls.join(' '));
});


Ext.EventObject =3D function(){

    var E =3D Ext.lib.Event;

    =0A=
    var safariKeys =3D {
        63234 : 37, =0A=
        63235 : 39, =0A=
        63232 : 38, =0A=
        63233 : 40, =0A=
        63276 : 33, =0A=
        63277 : 34, =0A=
        63272 : 46, =0A=
        63273 : 36, =0A=
        63275 : 35  =0A=
    };

    =0A=
    var btnMap =3D Ext.isIE ? {1:0,4:1,2:2} :
                (Ext.isSafari ? {1:0,2:1,3:2} : {0:0,1:1,2:2});

    Ext.EventObjectImpl =3D function(e){
        if(e){
            this.setEvent(e.browserEvent || e);
        }
    };
    Ext.EventObjectImpl.prototype =3D {
       =20
        browserEvent : null,
       =20
        button : -1,
       =20
        shiftKey : false,
       =20
        ctrlKey : false,
       =20
        altKey : false,

       =20
        BACKSPACE : 8,
       =20
        TAB : 9,
       =20
        RETURN : 13,
       =20
        ENTER : 13,
       =20
        SHIFT : 16,
       =20
        CONTROL : 17,
       =20
        ESC : 27,
       =20
        SPACE : 32,
       =20
        PAGEUP : 33,
       =20
        PAGEDOWN : 34,
       =20
        END : 35,
       =20
        HOME : 36,
       =20
        LEFT : 37,
       =20
        UP : 38,
       =20
        RIGHT : 39,
       =20
        DOWN : 40,
       =20
        DELETE : 46,
       =20
        F5 : 116,

          =20
        setEvent : function(e){
            if(e =3D=3D this || (e && e.browserEvent)){ =0A=
                return e;
            }
            this.browserEvent =3D e;
            if(e){
                =0A=
                this.button =3D e.button ? btnMap[e.button] : (e.which ? =
e.which-1 : -1);
                if(e.type =3D=3D 'click' && this.button =3D=3D -1){
                    this.button =3D 0;
                }
                this.type =3D e.type;
                this.shiftKey =3D e.shiftKey;
                =0A=
                this.ctrlKey =3D e.ctrlKey || e.metaKey;
                this.altKey =3D e.altKey;
                =0A=
                this.keyCode =3D e.keyCode;
                this.charCode =3D e.charCode;
                =0A=
                this.target =3D E.getTarget(e);
                =0A=
                this.xy =3D E.getXY(e);
            }else{
                this.button =3D -1;
                this.shiftKey =3D false;
                this.ctrlKey =3D false;
                this.altKey =3D false;
                this.keyCode =3D 0;
                this.charCode =3D0;
                this.target =3D null;
                this.xy =3D [0, 0];
            }
            return this;
        },

       =20
        stopEvent : function(){
            if(this.browserEvent){
                if(this.browserEvent.type =3D=3D 'mousedown'){
                    Ext.EventManager.stoppedMouseDownEvent.fire(this);
                }
                E.stopEvent(this.browserEvent);
            }
        },

       =20
        preventDefault : function(){
            if(this.browserEvent){
                E.preventDefault(this.browserEvent);
            }
        },

       =20
        isNavKeyPress : function(){
            var k =3D this.keyCode;
            k =3D Ext.isSafari ? (safariKeys[k] || k) : k;
            return (k >=3D 33 && k <=3D 40) || k =3D=3D this.RETURN || k =
=3D=3D this.TAB || k =3D=3D this.ESC;
        },

        isSpecialKey : function(){
            var k =3D this.keyCode;
            return (this.type =3D=3D 'keypress' && this.ctrlKey) || k =
=3D=3D 9 || k =3D=3D 13  || k =3D=3D 40 || k =3D=3D 27 ||
            (k =3D=3D 16) || (k =3D=3D 17) ||
            (k >=3D 18 && k <=3D 20) ||
            (k >=3D 33 && k <=3D 35) ||
            (k >=3D 36 && k <=3D 39) ||
            (k >=3D 44 && k <=3D 45);
        },
       =20
        stopPropagation : function(){
            if(this.browserEvent){
                if(this.browserEvent.type =3D=3D 'mousedown'){
                    Ext.EventManager.stoppedMouseDownEvent.fire(this);
                }
                E.stopPropagation(this.browserEvent);
            }
        },

       =20
        getCharCode : function(){
            return this.charCode || this.keyCode;
        },

       =20
        getKey : function(){
            var k =3D this.keyCode || this.charCode;
            return Ext.isSafari ? (safariKeys[k] || k) : k;
        },

       =20
        getPageX : function(){
            return this.xy[0];
        },

       =20
        getPageY : function(){
            return this.xy[1];
        },

       =20
        getTime : function(){
            if(this.browserEvent){
                return E.getTime(this.browserEvent);
            }
            return null;
        },

       =20
        getXY : function(){
            return this.xy;
        },

       =20
        getTarget : function(selector, maxDepth, returnEl){
            return selector ? Ext.fly(this.target).findParent(selector, =
maxDepth, returnEl) : (returnEl ? Ext.get(this.target) : this.target);
        },
       =20
       =20
        getRelatedTarget : function(){
            if(this.browserEvent){
                return E.getRelatedTarget(this.browserEvent);
            }
            return null;
        },

       =20
        getWheelDelta : function(){
            var e =3D this.browserEvent;
            var delta =3D 0;
            if(e.wheelDelta){=20
                delta =3D e.wheelDelta/120;
            }else if(e.detail){=20
                delta =3D -e.detail/3;
            }
            return delta;
        },

       =20
        hasModifier : function(){
            return ((this.ctrlKey || this.altKey) || this.shiftKey) ? =
true : false;
        },

       =20
        within : function(el, related){
            var t =3D this[related ? "getRelatedTarget" : =
"getTarget"]();
            return t && Ext.fly(el).contains(t);
        },

        getPoint : function(){
            return new Ext.lib.Point(this.xy[0], this.xy[1]);
        }
    };

    return new Ext.EventObjectImpl();
}();=0A=
=0A=
(function(){=0A=
var D =3D Ext.lib.Dom;=0A=
var E =3D Ext.lib.Event;=0A=
var A =3D Ext.lib.Anim;=0A=
=0A=
var propCache =3D {};=0A=
var camelRe =3D /(-[a-z])/gi;=0A=
var camelFn =3D function(m, a){ return a.charAt(1).toUpperCase(); };=0A=
var view =3D document.defaultView;=0A=
=0A=
Ext.Element =3D function(element, forceNew){=0A=
    var dom =3D typeof element =3D=3D "string" ?=0A=
            document.getElementById(element) : element;=0A=
    if(!dom){         return null;=0A=
    }=0A=
    var id =3D dom.id;=0A=
    if(forceNew !=3D=3D true && id && Ext.Element.cache[id]){         =
return Ext.Element.cache[id];=0A=
    }=0A=
=0A=
    =0A=
    this.dom =3D dom;=0A=
=0A=
    =0A=
    this.id =3D id || Ext.id(dom);=0A=
};=0A=
=0A=
var El =3D Ext.Element;=0A=
=0A=
El.prototype =3D {=0A=
    =0A=
    originalDisplay : "",=0A=
=0A=
    visibilityMode : 1,=0A=
    =0A=
    defaultUnit : "px",=0A=
    =0A=
    setVisibilityMode : function(visMode){=0A=
        this.visibilityMode =3D visMode;=0A=
        return this;=0A=
    },=0A=
    =0A=
    enableDisplayMode : function(display){=0A=
        this.setVisibilityMode(El.DISPLAY);=0A=
        if(typeof display !=3D "undefined") this.originalDisplay =3D =
display;=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    findParent : function(simpleSelector, maxDepth, returnEl){=0A=
        var p =3D this.dom, b =3D document.body, depth =3D 0, dq =3D =
Ext.DomQuery, stopEl;=0A=
        maxDepth =3D maxDepth || 50;=0A=
        if(typeof maxDepth !=3D "number"){=0A=
            stopEl =3D Ext.getDom(maxDepth);=0A=
            maxDepth =3D 10;=0A=
        }=0A=
        while(p && p.nodeType =3D=3D 1 && depth < maxDepth && p !=3D b =
&& p !=3D stopEl){=0A=
            if(dq.is(p, simpleSelector)){=0A=
                return returnEl ? Ext.get(p) : p;=0A=
            }=0A=
            depth++;=0A=
            p =3D p.parentNode;=0A=
        }=0A=
        return null;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    findParentNode : function(simpleSelector, maxDepth, returnEl){=0A=
        var p =3D Ext.fly(this.dom.parentNode, '_internal');=0A=
        return p ? p.findParent(simpleSelector, maxDepth, returnEl) : =
null;=0A=
    },=0A=
=0A=
    =0A=
    up : function(simpleSelector, maxDepth){=0A=
        return this.findParentNode(simpleSelector, maxDepth, true);=0A=
    },=0A=
=0A=
=0A=
=0A=
    =0A=
    is : function(simpleSelector){=0A=
        return Ext.DomQuery.is(this.dom, simpleSelector);=0A=
    },=0A=
=0A=
    =0A=
    animate : function(args, duration, onComplete, easing, animType){=0A=
        this.anim(args, {duration: duration, callback: onComplete, =
easing: easing}, animType);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    anim : function(args, opt, animType, defaultDur, defaultEase, cb){=0A=
        animType =3D animType || 'run';=0A=
        opt =3D opt || {};=0A=
        var anim =3D Ext.lib.Anim[animType](=0A=
            this.dom, args,=0A=
            (opt.duration || defaultDur) || .35,=0A=
            (opt.easing || defaultEase) || 'easeOut',=0A=
            function(){=0A=
                Ext.callback(cb, this);=0A=
                Ext.callback(opt.callback, opt.scope || this, [this, =
opt]);=0A=
            },=0A=
            this=0A=
        );=0A=
        opt.anim =3D anim;=0A=
        return anim;=0A=
    },=0A=
=0A=
        preanim : function(a, i){=0A=
        return !a[i] ? false : (typeof a[i] =3D=3D "object" ? a[i]: =
{duration: a[i+1], callback: a[i+2], easing: a[i+3]});=0A=
    },=0A=
=0A=
    =0A=
    clean : function(forceReclean){=0A=
        if(this.isCleaned && forceReclean !=3D=3D true){=0A=
            return this;=0A=
        }=0A=
        var ns =3D /\S/;=0A=
        var d =3D this.dom, n =3D d.firstChild, ni =3D -1;=0A=
 	    while(n){=0A=
 	        var nx =3D n.nextSibling;=0A=
 	        if(n.nodeType =3D=3D 3 && !ns.test(n.nodeValue)){=0A=
 	            d.removeChild(n);=0A=
 	        }else{=0A=
 	            n.nodeIndex =3D ++ni;=0A=
 	        }=0A=
 	        n =3D nx;=0A=
 	    }=0A=
 	    this.isCleaned =3D true;=0A=
 	    return this;=0A=
 	},=0A=
=0A=
    =0A=
    scrollIntoView : function(container, hscroll){=0A=
        var c =3D Ext.getDom(container) || Ext.getBody().dom;=0A=
        var el =3D this.dom;=0A=
=0A=
        var o =3D this.getOffsetsTo(c),=0A=
            l =3D o[0] + c.scrollLeft,=0A=
            t =3D o[1] + c.scrollTop,=0A=
            b =3D t+el.offsetHeight,=0A=
            r =3D l+el.offsetWidth;=0A=
=0A=
        var ch =3D c.clientHeight;=0A=
        var ct =3D parseInt(c.scrollTop, 10);=0A=
        var cl =3D parseInt(c.scrollLeft, 10);=0A=
        var cb =3D ct + ch;=0A=
        var cr =3D cl + c.clientWidth;=0A=
=0A=
        if(el.offsetHeight > ch || t < ct){=0A=
        	c.scrollTop =3D t;=0A=
        }else if(b > cb){=0A=
            c.scrollTop =3D b-ch;=0A=
        }=0A=
        c.scrollTop =3D c.scrollTop; =0A=
        if(hscroll !=3D=3D false){=0A=
			if(el.offsetWidth > c.clientWidth || l < cl){=0A=
                c.scrollLeft =3D l;=0A=
            }else if(r > cr){=0A=
                c.scrollLeft =3D r-c.clientWidth;=0A=
            }=0A=
            c.scrollLeft =3D c.scrollLeft;=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        scrollChildIntoView : function(child, hscroll){=0A=
        Ext.fly(child, '_scrollChildIntoView').scrollIntoView(this, =
hscroll);=0A=
    },=0A=
=0A=
    =0A=
    autoHeight : function(animate, duration, onComplete, easing){=0A=
        var oldHeight =3D this.getHeight();=0A=
        this.clip();=0A=
        this.setHeight(1);         setTimeout(function(){=0A=
            var height =3D parseInt(this.dom.scrollHeight, 10);          =
   if(!animate){=0A=
                this.setHeight(height);=0A=
                this.unclip();=0A=
                if(typeof onComplete =3D=3D "function"){=0A=
                    onComplete();=0A=
                }=0A=
            }else{=0A=
                this.setHeight(oldHeight);                 =
this.setHeight(height, animate, duration, function(){=0A=
                    this.unclip();=0A=
                    if(typeof onComplete =3D=3D "function") onComplete();=0A=
                }.createDelegate(this), easing);=0A=
            }=0A=
        }.createDelegate(this), 0);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    contains : function(el){=0A=
        if(!el){return false;}=0A=
        return D.isAncestor(this.dom, el.dom ? el.dom : el);=0A=
    },=0A=
=0A=
    =0A=
    isVisible : function(deep) {=0A=
        var vis =3D !(this.getStyle("visibility") =3D=3D "hidden" || =
this.getStyle("display") =3D=3D "none");=0A=
        if(deep !=3D=3D true || !vis){=0A=
            return vis;=0A=
        }=0A=
        var p =3D this.dom.parentNode;=0A=
        while(p && p.tagName.toLowerCase() !=3D "body"){=0A=
            if(!Ext.fly(p, '_isVisible').isVisible()){=0A=
                return false;=0A=
            }=0A=
            p =3D p.parentNode;=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
    =0A=
    select : function(selector, unique){=0A=
        return El.select(selector, unique, this.dom);=0A=
    },=0A=
=0A=
    =0A=
    query : function(selector, unique){=0A=
        return Ext.DomQuery.select(selector, this.dom);=0A=
    },=0A=
=0A=
    =0A=
    child : function(selector, returnDom){=0A=
        var n =3D Ext.DomQuery.selectNode(selector, this.dom);=0A=
        return returnDom ? n : Ext.get(n);=0A=
    },=0A=
=0A=
    =0A=
    down : function(selector, returnDom){=0A=
        var n =3D Ext.DomQuery.selectNode(" > " + selector, this.dom);=0A=
        return returnDom ? n : Ext.get(n);=0A=
    },=0A=
=0A=
    =0A=
    initDD : function(group, config, overrides){=0A=
        var dd =3D new Ext.dd.DD(Ext.id(this.dom), group, config);=0A=
        return Ext.apply(dd, overrides);=0A=
    },=0A=
=0A=
    =0A=
    initDDProxy : function(group, config, overrides){=0A=
        var dd =3D new Ext.dd.DDProxy(Ext.id(this.dom), group, config);=0A=
        return Ext.apply(dd, overrides);=0A=
    },=0A=
=0A=
    =0A=
    initDDTarget : function(group, config, overrides){=0A=
        var dd =3D new Ext.dd.DDTarget(Ext.id(this.dom), group, config);=0A=
        return Ext.apply(dd, overrides);=0A=
    },=0A=
=0A=
    =0A=
     setVisible : function(visible, animate){=0A=
        if(!animate || !A){=0A=
            if(this.visibilityMode =3D=3D El.DISPLAY){=0A=
                this.setDisplayed(visible);=0A=
            }else{=0A=
                this.fixDisplay();=0A=
                this.dom.style.visibility =3D visible ? "visible" : =
"hidden";=0A=
            }=0A=
        }else{=0A=
                        var dom =3D this.dom;=0A=
            var visMode =3D this.visibilityMode;=0A=
            if(visible){=0A=
                this.setOpacity(.01);=0A=
                this.setVisible(true);=0A=
            }=0A=
            this.anim({opacity: { to: (visible?1:0) }},=0A=
                  this.preanim(arguments, 1),=0A=
                  null, .35, 'easeIn', function(){=0A=
                     if(!visible){=0A=
                         if(visMode =3D=3D El.DISPLAY){=0A=
                             dom.style.display =3D "none";=0A=
                         }else{=0A=
                             dom.style.visibility =3D "hidden";=0A=
                         }=0A=
                         Ext.get(dom).setOpacity(1);=0A=
                     }=0A=
                 });=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    isDisplayed : function() {=0A=
        return this.getStyle("display") !=3D "none";=0A=
    },=0A=
=0A=
    =0A=
    toggle : function(animate){=0A=
        this.setVisible(!this.isVisible(), this.preanim(arguments, 0));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setDisplayed : function(value) {=0A=
        if(typeof value =3D=3D "boolean"){=0A=
           value =3D value ? this.originalDisplay : "none";=0A=
        }=0A=
        this.setStyle("display", value);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    focus : function() {=0A=
        try{=0A=
            this.dom.focus();=0A=
        }catch(e){}=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    blur : function() {=0A=
        try{=0A=
            this.dom.blur();=0A=
        }catch(e){}=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    addClass : function(className){=0A=
        if(Ext.isArray(className)){=0A=
            for(var i =3D 0, len =3D className.length; i < len; i++) {=0A=
            	this.addClass(className[i]);=0A=
            }=0A=
        }else{=0A=
            if(className && !this.hasClass(className)){=0A=
                this.dom.className =3D this.dom.className + " " + =
className;=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    radioClass : function(className){=0A=
        var siblings =3D this.dom.parentNode.childNodes;=0A=
        for(var i =3D 0; i < siblings.length; i++) {=0A=
        	var s =3D siblings[i];=0A=
        	if(s.nodeType =3D=3D 1){=0A=
        	    Ext.get(s).removeClass(className);=0A=
        	}=0A=
        }=0A=
        this.addClass(className);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    removeClass : function(className){=0A=
        if(!className || !this.dom.className){=0A=
            return this;=0A=
        }=0A=
        if(Ext.isArray(className)){=0A=
            for(var i =3D 0, len =3D className.length; i < len; i++) {=0A=
            	this.removeClass(className[i]);=0A=
            }=0A=
        }else{=0A=
            if(this.hasClass(className)){=0A=
                var re =3D this.classReCache[className];=0A=
                if (!re) {=0A=
                   re =3D new RegExp('(?:^|\\s+)' + className + =
'(?:\\s+|$)', "g");=0A=
                   this.classReCache[className] =3D re;=0A=
                }=0A=
                this.dom.className =3D=0A=
                    this.dom.className.replace(re, " ");=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        classReCache: {},=0A=
=0A=
    =0A=
    toggleClass : function(className){=0A=
        if(this.hasClass(className)){=0A=
            this.removeClass(className);=0A=
        }else{=0A=
            this.addClass(className);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    hasClass : function(className){=0A=
        return className && (' '+this.dom.className+' ').indexOf(' =
'+className+' ') !=3D -1;=0A=
    },=0A=
=0A=
    =0A=
    replaceClass : function(oldClassName, newClassName){=0A=
        this.removeClass(oldClassName);=0A=
        this.addClass(newClassName);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getStyles : function(){=0A=
        var a =3D arguments, len =3D a.length, r =3D {};=0A=
        for(var i =3D 0; i < len; i++){=0A=
            r[a[i]] =3D this.getStyle(a[i]);=0A=
        }=0A=
        return r;=0A=
    },=0A=
=0A=
    =0A=
    getStyle : function(){=0A=
        return view && view.getComputedStyle ?=0A=
            function(prop){=0A=
                var el =3D this.dom, v, cs, camel;=0A=
                if(prop =3D=3D 'float'){=0A=
                    prop =3D "cssFloat";=0A=
                }=0A=
                if(v =3D el.style[prop]){=0A=
                    return v;=0A=
                }=0A=
                if(cs =3D view.getComputedStyle(el, "")){=0A=
                    if(!(camel =3D propCache[prop])){=0A=
                        camel =3D propCache[prop] =3D =
prop.replace(camelRe, camelFn);=0A=
                    }=0A=
                    return cs[camel];=0A=
                }=0A=
                return null;=0A=
            } :=0A=
            function(prop){=0A=
                var el =3D this.dom, v, cs, camel;=0A=
                if(prop =3D=3D 'opacity'){=0A=
                    if(typeof el.style.filter =3D=3D 'string'){=0A=
                        var m =3D =
el.style.filter.match(/alpha\(opacity=3D(.*)\)/i);=0A=
                        if(m){=0A=
                            var fv =3D parseFloat(m[1]);=0A=
                            if(!isNaN(fv)){=0A=
                                return fv ? fv / 100 : 0;=0A=
                            }=0A=
                        }=0A=
                    }=0A=
                    return 1;=0A=
                }else if(prop =3D=3D 'float'){=0A=
                    prop =3D "styleFloat";=0A=
                }=0A=
                if(!(camel =3D propCache[prop])){=0A=
                    camel =3D propCache[prop] =3D prop.replace(camelRe, =
camelFn);=0A=
                }=0A=
                if(v =3D el.style[camel]){=0A=
                    return v;=0A=
                }=0A=
                if(cs =3D el.currentStyle){=0A=
                    return cs[camel];=0A=
                }=0A=
                return null;=0A=
            };=0A=
    }(),=0A=
=0A=
    =0A=
    setStyle : function(prop, value){=0A=
        if(typeof prop =3D=3D "string"){=0A=
            var camel;=0A=
            if(!(camel =3D propCache[prop])){=0A=
                camel =3D propCache[prop] =3D prop.replace(camelRe, =
camelFn);=0A=
            }=0A=
            if(camel =3D=3D 'opacity') {=0A=
                this.setOpacity(value);=0A=
            }else{=0A=
                this.dom.style[camel] =3D value;=0A=
            }=0A=
        }else{=0A=
            for(var style in prop){=0A=
                if(typeof prop[style] !=3D "function"){=0A=
                   this.setStyle(style, prop[style]);=0A=
                }=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    applyStyles : function(style){=0A=
        Ext.DomHelper.applyStyles(this.dom, style);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getX : function(){=0A=
        return D.getX(this.dom);=0A=
    },=0A=
=0A=
    =0A=
    getY : function(){=0A=
        return D.getY(this.dom);=0A=
    },=0A=
=0A=
    =0A=
    getXY : function(){=0A=
        return D.getXY(this.dom);=0A=
    },=0A=
=0A=
    =0A=
    getOffsetsTo : function(el){=0A=
        var o =3D this.getXY();=0A=
        var e =3D Ext.fly(el, '_internal').getXY();=0A=
        return [o[0]-e[0],o[1]-e[1]];=0A=
    },=0A=
=0A=
    =0A=
    setX : function(x, animate){=0A=
        if(!animate || !A){=0A=
            D.setX(this.dom, x);=0A=
        }else{=0A=
            this.setXY([x, this.getY()], this.preanim(arguments, 1));=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setY : function(y, animate){=0A=
        if(!animate || !A){=0A=
            D.setY(this.dom, y);=0A=
        }else{=0A=
            this.setXY([this.getX(), y], this.preanim(arguments, 1));=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setLeft : function(left){=0A=
        this.setStyle("left", this.addUnits(left));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setTop : function(top){=0A=
        this.setStyle("top", this.addUnits(top));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setRight : function(right){=0A=
        this.setStyle("right", this.addUnits(right));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setBottom : function(bottom){=0A=
        this.setStyle("bottom", this.addUnits(bottom));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setXY : function(pos, animate){=0A=
        if(!animate || !A){=0A=
            D.setXY(this.dom, pos);=0A=
        }else{=0A=
            this.anim({points: {to: pos}}, this.preanim(arguments, 1), =
'motion');=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setLocation : function(x, y, animate){=0A=
        this.setXY([x, y], this.preanim(arguments, 2));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    moveTo : function(x, y, animate){=0A=
        this.setXY([x, y], this.preanim(arguments, 2));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getRegion : function(){=0A=
        return D.getRegion(this.dom);=0A=
    },=0A=
=0A=
    =0A=
    getHeight : function(contentHeight){=0A=
        var h =3D this.dom.offsetHeight || 0;=0A=
        h =3D contentHeight !=3D=3D true ? h : =
h-this.getBorderWidth("tb")-this.getPadding("tb");=0A=
        return h < 0 ? 0 : h;=0A=
    },=0A=
=0A=
    =0A=
    getWidth : function(contentWidth){=0A=
        var w =3D this.dom.offsetWidth || 0;=0A=
        w =3D contentWidth !=3D=3D true ? w : =
w-this.getBorderWidth("lr")-this.getPadding("lr");=0A=
        return w < 0 ? 0 : w;=0A=
    },=0A=
=0A=
    =0A=
    getComputedHeight : function(){=0A=
        var h =3D Math.max(this.dom.offsetHeight, this.dom.clientHeight);=0A=
        if(!h){=0A=
            h =3D parseInt(this.getStyle('height'), 10) || 0;=0A=
            if(!this.isBorderBox()){=0A=
                h +=3D this.getFrameWidth('tb');=0A=
            }=0A=
        }=0A=
        return h;=0A=
    },=0A=
=0A=
    =0A=
    getComputedWidth : function(){=0A=
        var w =3D Math.max(this.dom.offsetWidth, this.dom.clientWidth);=0A=
        if(!w){=0A=
            w =3D parseInt(this.getStyle('width'), 10) || 0;=0A=
            if(!this.isBorderBox()){=0A=
                w +=3D this.getFrameWidth('lr');=0A=
            }=0A=
        }=0A=
        return w;=0A=
    },=0A=
=0A=
    =0A=
    getSize : function(contentSize){=0A=
        return {width: this.getWidth(contentSize), height: =
this.getHeight(contentSize)};=0A=
    },=0A=
=0A=
    getStyleSize : function(){=0A=
        var w, h, d =3D this.dom, s =3D d.style;=0A=
        if(s.width && s.width !=3D 'auto'){=0A=
            w =3D parseInt(s.width, 10);=0A=
            if(Ext.isBorderBox){=0A=
               w -=3D this.getFrameWidth('lr');=0A=
            }=0A=
        }=0A=
        if(s.height && s.height !=3D 'auto'){=0A=
            h =3D parseInt(s.height, 10);=0A=
            if(Ext.isBorderBox){=0A=
               h -=3D this.getFrameWidth('tb');=0A=
            }=0A=
        }=0A=
        return {width: w || this.getWidth(true), height: h || =
this.getHeight(true)};=0A=
=0A=
    },=0A=
=0A=
    =0A=
    getViewSize : function(){=0A=
        var d =3D this.dom, doc =3D document, aw =3D 0, ah =3D 0;=0A=
        if(d =3D=3D doc || d =3D=3D doc.body){=0A=
            return {width : D.getViewWidth(), height: D.getViewHeight()};=0A=
        }else{=0A=
            return {=0A=
                width : d.clientWidth,=0A=
                height: d.clientHeight=0A=
            };=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getValue : function(asNumber){=0A=
        return asNumber ? parseInt(this.dom.value, 10) : this.dom.value;=0A=
    },=0A=
=0A=
        adjustWidth : function(width){=0A=
        if(typeof width =3D=3D "number"){=0A=
            if(this.autoBoxAdjust && !this.isBorderBox()){=0A=
               width -=3D (this.getBorderWidth("lr") + =
this.getPadding("lr"));=0A=
            }=0A=
            if(width < 0){=0A=
                width =3D 0;=0A=
            }=0A=
        }=0A=
        return width;=0A=
    },=0A=
=0A=
        adjustHeight : function(height){=0A=
        if(typeof height =3D=3D "number"){=0A=
           if(this.autoBoxAdjust && !this.isBorderBox()){=0A=
               height -=3D (this.getBorderWidth("tb") + =
this.getPadding("tb"));=0A=
           }=0A=
           if(height < 0){=0A=
               height =3D 0;=0A=
           }=0A=
        }=0A=
        return height;=0A=
    },=0A=
=0A=
    =0A=
    setWidth : function(width, animate){=0A=
        width =3D this.adjustWidth(width);=0A=
        if(!animate || !A){=0A=
            this.dom.style.width =3D this.addUnits(width);=0A=
        }else{=0A=
            this.anim({width: {to: width}}, this.preanim(arguments, 1));=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
     setHeight : function(height, animate){=0A=
        height =3D this.adjustHeight(height);=0A=
        if(!animate || !A){=0A=
            this.dom.style.height =3D this.addUnits(height);=0A=
        }else{=0A=
            this.anim({height: {to: height}}, this.preanim(arguments, =
1));=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
     setSize : function(width, height, animate){=0A=
        if(typeof width =3D=3D "object"){             height =3D =
width.height; width =3D width.width;=0A=
        }=0A=
        width =3D this.adjustWidth(width); height =3D =
this.adjustHeight(height);=0A=
        if(!animate || !A){=0A=
            this.dom.style.width =3D this.addUnits(width);=0A=
            this.dom.style.height =3D this.addUnits(height);=0A=
        }else{=0A=
            this.anim({width: {to: width}, height: {to: height}}, =
this.preanim(arguments, 2));=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setBounds : function(x, y, width, height, animate){=0A=
        if(!animate || !A){=0A=
            this.setSize(width, height);=0A=
            this.setLocation(x, y);=0A=
        }else{=0A=
            width =3D this.adjustWidth(width); height =3D =
this.adjustHeight(height);=0A=
            this.anim({points: {to: [x, y]}, width: {to: width}, height: =
{to: height}},=0A=
                          this.preanim(arguments, 4), 'motion');=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setRegion : function(region, animate){=0A=
        this.setBounds(region.left, region.top, =
region.right-region.left, region.bottom-region.top, =
this.preanim(arguments, 1));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    addListener : function(eventName, fn, scope, options){=0A=
        Ext.EventManager.on(this.dom,  eventName, fn, scope || this, =
options);=0A=
    },=0A=
=0A=
    =0A=
    removeListener : function(eventName, fn){=0A=
        Ext.EventManager.removeListener(this.dom,  eventName, fn);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    removeAllListeners : function(){=0A=
        E.purgeElement(this.dom);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    relayEvent : function(eventName, observable){=0A=
        this.on(eventName, function(e){=0A=
            observable.fireEvent(eventName, e);=0A=
        });=0A=
    },=0A=
=0A=
    =0A=
     setOpacity : function(opacity, animate){=0A=
        if(!animate || !A){=0A=
            var s =3D this.dom.style;=0A=
            if(Ext.isIE){=0A=
                s.zoom =3D 1;=0A=
                s.filter =3D (s.filter || =
'').replace(/alpha\([^\)]*\)/gi,"") +=0A=
                           (opacity =3D=3D 1 ? "" : " alpha(opacity=3D" =
+ opacity * 100 + ")");=0A=
            }else{=0A=
                s.opacity =3D opacity;=0A=
            }=0A=
        }else{=0A=
            this.anim({opacity: {to: opacity}}, this.preanim(arguments, =
1), null, .35, 'easeIn');=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getLeft : function(local){=0A=
        if(!local){=0A=
            return this.getX();=0A=
        }else{=0A=
            return parseInt(this.getStyle("left"), 10) || 0;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getRight : function(local){=0A=
        if(!local){=0A=
            return this.getX() + this.getWidth();=0A=
        }else{=0A=
            return (this.getLeft(true) + this.getWidth()) || 0;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getTop : function(local) {=0A=
        if(!local){=0A=
            return this.getY();=0A=
        }else{=0A=
            return parseInt(this.getStyle("top"), 10) || 0;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getBottom : function(local){=0A=
        if(!local){=0A=
            return this.getY() + this.getHeight();=0A=
        }else{=0A=
            return (this.getTop(true) + this.getHeight()) || 0;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    position : function(pos, zIndex, x, y){=0A=
        if(!pos){=0A=
           if(this.getStyle('position') =3D=3D 'static'){=0A=
               this.setStyle('position', 'relative');=0A=
           }=0A=
        }else{=0A=
            this.setStyle("position", pos);=0A=
        }=0A=
        if(zIndex){=0A=
            this.setStyle("z-index", zIndex);=0A=
        }=0A=
        if(x !=3D=3D undefined && y !=3D=3D undefined){=0A=
            this.setXY([x, y]);=0A=
        }else if(x !=3D=3D undefined){=0A=
            this.setX(x);=0A=
        }else if(y !=3D=3D undefined){=0A=
            this.setY(y);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    clearPositioning : function(value){=0A=
        value =3D value ||'';=0A=
        this.setStyle({=0A=
            "left": value,=0A=
            "right": value,=0A=
            "top": value,=0A=
            "bottom": value,=0A=
            "z-index": "",=0A=
            "position" : "static"=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getPositioning : function(){=0A=
        var l =3D this.getStyle("left");=0A=
        var t =3D this.getStyle("top");=0A=
        return {=0A=
            "position" : this.getStyle("position"),=0A=
            "left" : l,=0A=
            "right" : l ? "" : this.getStyle("right"),=0A=
            "top" : t,=0A=
            "bottom" : t ? "" : this.getStyle("bottom"),=0A=
            "z-index" : this.getStyle("z-index")=0A=
        };=0A=
    },=0A=
=0A=
    =0A=
    getBorderWidth : function(side){=0A=
        return this.addStyles(side, El.borders);=0A=
    },=0A=
=0A=
    =0A=
    getPadding : function(side){=0A=
        return this.addStyles(side, El.paddings);=0A=
    },=0A=
=0A=
    =0A=
    setPositioning : function(pc){=0A=
        this.applyStyles(pc);=0A=
        if(pc.right =3D=3D "auto"){=0A=
            this.dom.style.right =3D "";=0A=
        }=0A=
        if(pc.bottom =3D=3D "auto"){=0A=
            this.dom.style.bottom =3D "";=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        fixDisplay : function(){=0A=
        if(this.getStyle("display") =3D=3D "none"){=0A=
            this.setStyle("visibility", "hidden");=0A=
            this.setStyle("display", this.originalDisplay);             =
if(this.getStyle("display") =3D=3D "none"){                 =
this.setStyle("display", "block");=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    	setOverflow : function(v){=0A=
    	if(v=3D=3D'auto' && Ext.isMac && Ext.isGecko){     		=
this.dom.style.overflow =3D 'hidden';=0A=
        	(function(){this.dom.style.overflow =3D 'auto';}).defer(1, =
this);=0A=
    	}else{=0A=
    		this.dom.style.overflow =3D v;=0A=
    	}=0A=
	},=0A=
	=0A=
    =0A=
     setLeftTop : function(left, top){=0A=
        this.dom.style.left =3D this.addUnits(left);=0A=
        this.dom.style.top =3D this.addUnits(top);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
     move : function(direction, distance, animate){=0A=
        var xy =3D this.getXY();=0A=
        direction =3D direction.toLowerCase();=0A=
        switch(direction){=0A=
            case "l":=0A=
            case "left":=0A=
                this.moveTo(xy[0]-distance, xy[1], =
this.preanim(arguments, 2));=0A=
                break;=0A=
           case "r":=0A=
           case "right":=0A=
                this.moveTo(xy[0]+distance, xy[1], =
this.preanim(arguments, 2));=0A=
                break;=0A=
           case "t":=0A=
           case "top":=0A=
           case "up":=0A=
                this.moveTo(xy[0], xy[1]-distance, =
this.preanim(arguments, 2));=0A=
                break;=0A=
           case "b":=0A=
           case "bottom":=0A=
           case "down":=0A=
                this.moveTo(xy[0], xy[1]+distance, =
this.preanim(arguments, 2));=0A=
                break;=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    clip : function(){=0A=
        if(!this.isClipped){=0A=
           this.isClipped =3D true;=0A=
           this.originalClip =3D {=0A=
               "o": this.getStyle("overflow"),=0A=
               "x": this.getStyle("overflow-x"),=0A=
               "y": this.getStyle("overflow-y")=0A=
           };=0A=
           this.setStyle("overflow", "hidden");=0A=
           this.setStyle("overflow-x", "hidden");=0A=
           this.setStyle("overflow-y", "hidden");=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    unclip : function(){=0A=
        if(this.isClipped){=0A=
            this.isClipped =3D false;=0A=
            var o =3D this.originalClip;=0A=
            if(o.o){this.setStyle("overflow", o.o);}=0A=
            if(o.x){this.setStyle("overflow-x", o.x);}=0A=
            if(o.y){this.setStyle("overflow-y", o.y);}=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    getAnchorXY : function(anchor, local, s){=0A=
                =0A=
        var w, h, vp =3D false;=0A=
        if(!s){=0A=
            var d =3D this.dom;=0A=
            if(d =3D=3D document.body || d =3D=3D document){=0A=
                vp =3D true;=0A=
                w =3D D.getViewWidth(); h =3D D.getViewHeight();=0A=
            }else{=0A=
                w =3D this.getWidth(); h =3D this.getHeight();=0A=
            }=0A=
        }else{=0A=
            w =3D s.width;  h =3D s.height;=0A=
        }=0A=
        var x =3D 0, y =3D 0, r =3D Math.round;=0A=
        switch((anchor || "tl").toLowerCase()){=0A=
            case "c":=0A=
                x =3D r(w*.5);=0A=
                y =3D r(h*.5);=0A=
            break;=0A=
            case "t":=0A=
                x =3D r(w*.5);=0A=
                y =3D 0;=0A=
            break;=0A=
            case "l":=0A=
                x =3D 0;=0A=
                y =3D r(h*.5);=0A=
            break;=0A=
            case "r":=0A=
                x =3D w;=0A=
                y =3D r(h*.5);=0A=
            break;=0A=
            case "b":=0A=
                x =3D r(w*.5);=0A=
                y =3D h;=0A=
            break;=0A=
            case "tl":=0A=
                x =3D 0;=0A=
                y =3D 0;=0A=
            break;=0A=
            case "bl":=0A=
                x =3D 0;=0A=
                y =3D h;=0A=
            break;=0A=
            case "br":=0A=
                x =3D w;=0A=
                y =3D h;=0A=
            break;=0A=
            case "tr":=0A=
                x =3D w;=0A=
                y =3D 0;=0A=
            break;=0A=
        }=0A=
        if(local =3D=3D=3D true){=0A=
            return [x, y];=0A=
        }=0A=
        if(vp){=0A=
            var sc =3D this.getScroll();=0A=
            return [x + sc.left, y + sc.top];=0A=
        }=0A=
                var o =3D this.getXY();=0A=
        return [x+o[0], y+o[1]];=0A=
    },=0A=
=0A=
    =0A=
    getAlignToXY : function(el, p, o){=0A=
        el =3D Ext.get(el);=0A=
        if(!el || !el.dom){=0A=
            throw "Element.alignToXY with an element that doesn't exist";=0A=
        }=0A=
        var d =3D this.dom;=0A=
        var c =3D false;         var p1 =3D "", p2 =3D "";=0A=
        o =3D o || [0,0];=0A=
=0A=
        if(!p){=0A=
            p =3D "tl-bl";=0A=
        }else if(p =3D=3D "?"){=0A=
            p =3D "tl-bl?";=0A=
        }else if(p.indexOf("-") =3D=3D -1){=0A=
            p =3D "tl-" + p;=0A=
        }=0A=
        p =3D p.toLowerCase();=0A=
        var m =3D p.match(/^([a-z]+)-([a-z]+)(\?)?$/);=0A=
        if(!m){=0A=
           throw "Element.alignTo with an invalid alignment " + p;=0A=
        }=0A=
        p1 =3D m[1]; p2 =3D m[2]; c =3D !!m[3];=0A=
=0A=
                        var a1 =3D this.getAnchorXY(p1, true);=0A=
        var a2 =3D el.getAnchorXY(p2, false);=0A=
=0A=
        var x =3D a2[0] - a1[0] + o[0];=0A=
        var y =3D a2[1] - a1[1] + o[1];=0A=
=0A=
        if(c){=0A=
                        var w =3D this.getWidth(), h =3D =
this.getHeight(), r =3D el.getRegion();=0A=
                        var dw =3D D.getViewWidth()-5, dh =3D =
D.getViewHeight()-5;=0A=
=0A=
                                                var p1y =3D =
p1.charAt(0), p1x =3D p1.charAt(p1.length-1);=0A=
           var p2y =3D p2.charAt(0), p2x =3D p2.charAt(p2.length-1);=0A=
           var swapY =3D ((p1y=3D=3D"t" && p2y=3D=3D"b") || =
(p1y=3D=3D"b" && p2y=3D=3D"t"));=0A=
           var swapX =3D ((p1x=3D=3D"r" && p2x=3D=3D"l") || =
(p1x=3D=3D"l" && p2x=3D=3D"r"));=0A=
=0A=
           var doc =3D document;=0A=
           var scrollX =3D (doc.documentElement.scrollLeft || =
doc.body.scrollLeft || 0)+5;=0A=
           var scrollY =3D (doc.documentElement.scrollTop || =
doc.body.scrollTop || 0)+5;=0A=
=0A=
           if((x+w) > dw + scrollX){=0A=
                x =3D swapX ? r.left-w : dw+scrollX-w;=0A=
            }=0A=
           if(x < scrollX){=0A=
               x =3D swapX ? r.right : scrollX;=0A=
           }=0A=
           if((y+h) > dh + scrollY){=0A=
                y =3D swapY ? r.top-h : dh+scrollY-h;=0A=
            }=0A=
           if (y < scrollY){=0A=
               y =3D swapY ? r.bottom : scrollY;=0A=
           }=0A=
        }=0A=
        return [x,y];=0A=
    },=0A=
=0A=
        getConstrainToXY : function(){=0A=
        var os =3D {top:0, left:0, bottom:0, right: 0};=0A=
=0A=
        return function(el, local, offsets, proposedXY){=0A=
            el =3D Ext.get(el);=0A=
            offsets =3D offsets ? Ext.applyIf(offsets, os) : os;=0A=
=0A=
            var vw, vh, vx =3D 0, vy =3D 0;=0A=
            if(el.dom =3D=3D document.body || el.dom =3D=3D document){=0A=
                vw =3D Ext.lib.Dom.getViewWidth();=0A=
                vh =3D Ext.lib.Dom.getViewHeight();=0A=
            }else{=0A=
                vw =3D el.dom.clientWidth;=0A=
                vh =3D el.dom.clientHeight;=0A=
                if(!local){=0A=
                    var vxy =3D el.getXY();=0A=
                    vx =3D vxy[0];=0A=
                    vy =3D vxy[1];=0A=
                }=0A=
            }=0A=
=0A=
            var s =3D el.getScroll();=0A=
=0A=
            vx +=3D offsets.left + s.left;=0A=
            vy +=3D offsets.top + s.top;=0A=
=0A=
            vw -=3D offsets.right;=0A=
            vh -=3D offsets.bottom;=0A=
=0A=
            var vr =3D vx+vw;=0A=
            var vb =3D vy+vh;=0A=
=0A=
            var xy =3D proposedXY || (!local ? this.getXY() : =
[this.getLeft(true), this.getTop(true)]);=0A=
            var x =3D xy[0], y =3D xy[1];=0A=
            var w =3D this.dom.offsetWidth, h =3D this.dom.offsetHeight;=0A=
=0A=
                        var moved =3D false;=0A=
=0A=
                        if((x + w) > vr){=0A=
                x =3D vr - w;=0A=
                moved =3D true;=0A=
            }=0A=
            if((y + h) > vb){=0A=
                y =3D vb - h;=0A=
                moved =3D true;=0A=
            }=0A=
                        if(x < vx){=0A=
                x =3D vx;=0A=
                moved =3D true;=0A=
            }=0A=
            if(y < vy){=0A=
                y =3D vy;=0A=
                moved =3D true;=0A=
            }=0A=
            return moved ? [x, y] : false;=0A=
        };=0A=
    }(),=0A=
=0A=
        adjustForConstraints : function(xy, parent, offsets){=0A=
        return this.getConstrainToXY(parent || document, false, offsets, =
xy) ||  xy;=0A=
    },=0A=
=0A=
    =0A=
    alignTo : function(element, position, offsets, animate){=0A=
        var xy =3D this.getAlignToXY(element, position, offsets);=0A=
        this.setXY(xy, this.preanim(arguments, 3));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    anchorTo : function(el, alignment, offsets, animate, monitorScroll, =
callback){=0A=
        var action =3D function(){=0A=
            this.alignTo(el, alignment, offsets, animate);=0A=
            Ext.callback(callback, this);=0A=
        };=0A=
        Ext.EventManager.onWindowResize(action, this);=0A=
        var tm =3D typeof monitorScroll;=0A=
        if(tm !=3D 'undefined'){=0A=
            Ext.EventManager.on(window, 'scroll', action, this,=0A=
                {buffer: tm =3D=3D 'number' ? monitorScroll : 50});=0A=
        }=0A=
        action.call(this);         return this;=0A=
    },=0A=
    =0A=
    clearOpacity : function(){=0A=
        if (window.ActiveXObject) {=0A=
            if(typeof this.dom.style.filter =3D=3D 'string' && =
(/alpha/i).test(this.dom.style.filter)){=0A=
                this.dom.style.filter =3D "";=0A=
            }=0A=
        } else {=0A=
            this.dom.style.opacity =3D "";=0A=
            this.dom.style["-moz-opacity"] =3D "";=0A=
            this.dom.style["-khtml-opacity"] =3D "";=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    hide : function(animate){=0A=
        this.setVisible(false, this.preanim(arguments, 0));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    show : function(animate){=0A=
        this.setVisible(true, this.preanim(arguments, 0));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    addUnits : function(size){=0A=
        return Ext.Element.addUnits(size, this.defaultUnit);=0A=
    },=0A=
=0A=
    =0A=
    update : function(html, loadScripts, callback){=0A=
        if(typeof html =3D=3D "undefined"){=0A=
            html =3D "";=0A=
        }=0A=
        if(loadScripts !=3D=3D true){=0A=
            this.dom.innerHTML =3D html;=0A=
            if(typeof callback =3D=3D "function"){=0A=
                callback();=0A=
            }=0A=
            return this;=0A=
        }=0A=
        var id =3D Ext.id();=0A=
        var dom =3D this.dom;=0A=
=0A=
        html +=3D '<span id=3D"' + id + '"></span>';=0A=
=0A=
        E.onAvailable(id, function(){=0A=
            var hd =3D document.getElementsByTagName("head")[0];=0A=
            var re =3D =
/(?:<script([^>]*)?>)((\n|\r|.)*?)(?:<\/script>)/ig;=0A=
            var srcRe =3D /\ssrc=3D([\'\"])(.*?)\1/i;=0A=
            var typeRe =3D /\stype=3D([\'\"])(.*?)\1/i;=0A=
=0A=
            var match;=0A=
            while(match =3D re.exec(html)){=0A=
                var attrs =3D match[1];=0A=
                var srcMatch =3D attrs ? attrs.match(srcRe) : false;=0A=
                if(srcMatch && srcMatch[2]){=0A=
                   var s =3D document.createElement("script");=0A=
                   s.src =3D srcMatch[2];=0A=
                   var typeMatch =3D attrs.match(typeRe);=0A=
                   if(typeMatch && typeMatch[2]){=0A=
                       s.type =3D typeMatch[2];=0A=
                   }=0A=
                   hd.appendChild(s);=0A=
                }else if(match[2] && match[2].length > 0){=0A=
                    if(window.execScript) {=0A=
                       window.execScript(match[2]);=0A=
                    } else {=0A=
                       window.eval(match[2]);=0A=
                    }=0A=
                }=0A=
            }=0A=
            var el =3D document.getElementById(id);=0A=
            if(el){Ext.removeNode(el);}=0A=
            if(typeof callback =3D=3D "function"){=0A=
                callback();=0A=
            }=0A=
        });=0A=
        dom.innerHTML =3D =
html.replace(/(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig, "");=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    load : function(){=0A=
        var um =3D this.getUpdater();=0A=
        um.update.apply(um, arguments);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getUpdater : function(){=0A=
        if(!this.updateManager){=0A=
            this.updateManager =3D new Ext.Updater(this);=0A=
        }=0A=
        return this.updateManager;=0A=
    },=0A=
=0A=
    =0A=
    unselectable : function(){=0A=
        this.dom.unselectable =3D "on";=0A=
        this.swallowEvent("selectstart", true);=0A=
        =
this.applyStyles("-moz-user-select:none;-khtml-user-select:none;");=0A=
        this.addClass("x-unselectable");=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getCenterXY : function(){=0A=
        return this.getAlignToXY(document, 'c-c');=0A=
    },=0A=
=0A=
    =0A=
    center : function(centerIn){=0A=
        this.alignTo(centerIn || document, 'c-c');=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    isBorderBox : function(){=0A=
        return noBoxAdjust[this.dom.tagName.toLowerCase()] || =
Ext.isBorderBox;=0A=
    },=0A=
=0A=
    =0A=
    getBox : function(contentBox, local){=0A=
        var xy;=0A=
        if(!local){=0A=
            xy =3D this.getXY();=0A=
        }else{=0A=
            var left =3D parseInt(this.getStyle("left"), 10) || 0;=0A=
            var top =3D parseInt(this.getStyle("top"), 10) || 0;=0A=
            xy =3D [left, top];=0A=
        }=0A=
        var el =3D this.dom, w =3D el.offsetWidth, h =3D =
el.offsetHeight, bx;=0A=
        if(!contentBox){=0A=
            bx =3D {x: xy[0], y: xy[1], 0: xy[0], 1: xy[1], width: w, =
height: h};=0A=
        }else{=0A=
            var l =3D this.getBorderWidth("l")+this.getPadding("l");=0A=
            var r =3D this.getBorderWidth("r")+this.getPadding("r");=0A=
            var t =3D this.getBorderWidth("t")+this.getPadding("t");=0A=
            var b =3D this.getBorderWidth("b")+this.getPadding("b");=0A=
            bx =3D {x: xy[0]+l, y: xy[1]+t, 0: xy[0]+l, 1: xy[1]+t, =
width: w-(l+r), height: h-(t+b)};=0A=
        }=0A=
        bx.right =3D bx.x + bx.width;=0A=
        bx.bottom =3D bx.y + bx.height;=0A=
        return bx;=0A=
    },=0A=
=0A=
    =0A=
    getFrameWidth : function(sides, onlyContentBox){=0A=
        return onlyContentBox && Ext.isBorderBox ? 0 : =
(this.getPadding(sides) + this.getBorderWidth(sides));=0A=
    },=0A=
=0A=
    =0A=
    setBox : function(box, adjust, animate){=0A=
        var w =3D box.width, h =3D box.height;=0A=
        if((adjust && !this.autoBoxAdjust) && !this.isBorderBox()){=0A=
           w -=3D (this.getBorderWidth("lr") + this.getPadding("lr"));=0A=
           h -=3D (this.getBorderWidth("tb") + this.getPadding("tb"));=0A=
        }=0A=
        this.setBounds(box.x, box.y, w, h, this.preanim(arguments, 2));=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
     repaint : function(){=0A=
        var dom =3D this.dom;=0A=
        this.addClass("x-repaint");=0A=
        setTimeout(function(){=0A=
            Ext.get(dom).removeClass("x-repaint");=0A=
        }, 1);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getMargins : function(side){=0A=
        if(!side){=0A=
            return {=0A=
                top: parseInt(this.getStyle("margin-top"), 10) || 0,=0A=
                left: parseInt(this.getStyle("margin-left"), 10) || 0,=0A=
                bottom: parseInt(this.getStyle("margin-bottom"), 10) || =
0,=0A=
                right: parseInt(this.getStyle("margin-right"), 10) || 0=0A=
            };=0A=
        }else{=0A=
            return this.addStyles(side, El.margins);=0A=
         }=0A=
    },=0A=
=0A=
        addStyles : function(sides, styles){=0A=
        var val =3D 0, v, w;=0A=
        for(var i =3D 0, len =3D sides.length; i < len; i++){=0A=
            v =3D this.getStyle(styles[sides.charAt(i)]);=0A=
            if(v){=0A=
                 w =3D parseInt(v, 10);=0A=
                 if(w){ val +=3D (w >=3D 0 ? w : -1 * w); }=0A=
            }=0A=
        }=0A=
        return val;=0A=
    },=0A=
=0A=
    =0A=
    createProxy : function(config, renderTo, matchBox){=0A=
        config =3D typeof config =3D=3D "object" ?=0A=
            config : {tag : "div", cls: config};=0A=
=0A=
        var proxy;=0A=
        if(renderTo){=0A=
            proxy =3D Ext.DomHelper.append(renderTo, config, true);=0A=
        }else {=0A=
            proxy =3D Ext.DomHelper.insertBefore(this.dom, config, true);=0A=
        }=0A=
        if(matchBox){=0A=
           proxy.setBox(this.getBox());=0A=
        }=0A=
        return proxy;=0A=
    },=0A=
=0A=
    =0A=
    mask : function(msg, msgCls){=0A=
        if(this.getStyle("position") =3D=3D "static"){=0A=
            this.setStyle("position", "relative");=0A=
        }=0A=
        if(this._maskMsg){=0A=
            this._maskMsg.remove();=0A=
        }=0A=
        if(this._mask){=0A=
            this._mask.remove();=0A=
        }=0A=
=0A=
        this._mask =3D Ext.DomHelper.append(this.dom, =
{cls:"ext-el-mask"}, true);=0A=
=0A=
        this.addClass("x-masked");=0A=
        this._mask.setDisplayed(true);=0A=
        if(typeof msg =3D=3D 'string'){=0A=
            this._maskMsg =3D Ext.DomHelper.append(this.dom, =
{cls:"ext-el-mask-msg", cn:{tag:'div'}}, true);=0A=
            var mm =3D this._maskMsg;=0A=
            mm.dom.className =3D msgCls ? "ext-el-mask-msg " + msgCls : =
"ext-el-mask-msg";=0A=
            mm.dom.firstChild.innerHTML =3D msg;=0A=
            mm.setDisplayed(true);=0A=
            mm.center(this);=0A=
        }=0A=
        if(Ext.isIE && !(Ext.isIE7 && Ext.isStrict) && =
this.getStyle('height') =3D=3D 'auto'){             =
this._mask.setSize(this.dom.clientWidth, this.getHeight());=0A=
        }=0A=
        return this._mask;=0A=
    },=0A=
=0A=
    =0A=
    unmask : function(){=0A=
        if(this._mask){=0A=
            if(this._maskMsg){=0A=
                this._maskMsg.remove();=0A=
                delete this._maskMsg;=0A=
            }=0A=
            this._mask.remove();=0A=
            delete this._mask;=0A=
        }=0A=
        this.removeClass("x-masked");=0A=
    },=0A=
=0A=
    =0A=
    isMasked : function(){=0A=
        return this._mask && this._mask.isVisible();=0A=
    },=0A=
=0A=
    =0A=
    createShim : function(){=0A=
        var el =3D document.createElement('iframe');=0A=
        el.frameBorder =3D 'no';=0A=
        el.className =3D 'ext-shim';=0A=
        if(Ext.isIE && Ext.isSecure){=0A=
            el.src =3D Ext.SSL_SECURE_URL;=0A=
        }=0A=
        var shim =3D Ext.get(this.dom.parentNode.insertBefore(el, =
this.dom));=0A=
        shim.autoBoxAdjust =3D false;=0A=
        return shim;=0A=
    },=0A=
=0A=
    =0A=
    remove : function(){=0A=
        Ext.removeNode(this.dom);=0A=
        delete El.cache[this.dom.id];=0A=
    },=0A=
=0A=
    =0A=
    hover : function(overFn, outFn, scope){=0A=
        var preOverFn =3D function(e){=0A=
            if(!e.within(this, true)){=0A=
                overFn.apply(scope || this, arguments);=0A=
            }=0A=
        };=0A=
        var preOutFn =3D function(e){=0A=
            if(!e.within(this, true)){=0A=
                outFn.apply(scope || this, arguments);=0A=
            }=0A=
        };=0A=
        this.on("mouseover", preOverFn, this.dom);=0A=
        this.on("mouseout", preOutFn, this.dom);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    addClassOnOver : function(className){=0A=
        this.hover(=0A=
            function(){=0A=
                Ext.fly(this, '_internal').addClass(className);=0A=
            },=0A=
            function(){=0A=
                Ext.fly(this, '_internal').removeClass(className);=0A=
            }=0A=
        );=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    addClassOnFocus : function(className){=0A=
        this.on("focus", function(){=0A=
            Ext.fly(this, '_internal').addClass(className);=0A=
        }, this.dom);=0A=
        this.on("blur", function(){=0A=
            Ext.fly(this, '_internal').removeClass(className);=0A=
        }, this.dom);=0A=
        return this;=0A=
    },=0A=
    =0A=
    addClassOnClick : function(className){=0A=
        var dom =3D this.dom;=0A=
        this.on("mousedown", function(){=0A=
            Ext.fly(dom, '_internal').addClass(className);=0A=
            var d =3D Ext.getDoc();=0A=
            var fn =3D function(){=0A=
                Ext.fly(dom, '_internal').removeClass(className);=0A=
                d.removeListener("mouseup", fn);=0A=
            };=0A=
            d.on("mouseup", fn);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    swallowEvent : function(eventName, preventDefault){=0A=
        var fn =3D function(e){=0A=
            e.stopPropagation();=0A=
            if(preventDefault){=0A=
                e.preventDefault();=0A=
            }=0A=
        };=0A=
        if(Ext.isArray(eventName)){=0A=
            for(var i =3D 0, len =3D eventName.length; i < len; i++){=0A=
                 this.on(eventName[i], fn);=0A=
            }=0A=
            return this;=0A=
        }=0A=
        this.on(eventName, fn);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    parent : function(selector, returnDom){=0A=
        return this.matchNode('parentNode', 'parentNode', selector, =
returnDom);=0A=
    },=0A=
=0A=
     =0A=
    next : function(selector, returnDom){=0A=
        return this.matchNode('nextSibling', 'nextSibling', selector, =
returnDom);=0A=
    },=0A=
=0A=
    =0A=
    prev : function(selector, returnDom){=0A=
        return this.matchNode('previousSibling', 'previousSibling', =
selector, returnDom);=0A=
    },=0A=
=0A=
=0A=
    =0A=
    first : function(selector, returnDom){=0A=
        return this.matchNode('nextSibling', 'firstChild', selector, =
returnDom);=0A=
    },=0A=
=0A=
    =0A=
    last : function(selector, returnDom){=0A=
        return this.matchNode('previousSibling', 'lastChild', selector, =
returnDom);=0A=
    },=0A=
=0A=
    matchNode : function(dir, start, selector, returnDom){=0A=
        var n =3D this.dom[start];=0A=
        while(n){=0A=
            if(n.nodeType =3D=3D 1 && (!selector || Ext.DomQuery.is(n, =
selector))){=0A=
                return !returnDom ? Ext.get(n) : n;=0A=
            }=0A=
            n =3D n[dir];=0A=
        }=0A=
        return null;=0A=
    },=0A=
=0A=
    =0A=
    appendChild: function(el){=0A=
        el =3D Ext.get(el);=0A=
        el.appendTo(this);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    createChild: function(config, insertBefore, returnDom){=0A=
        config =3D config || {tag:'div'};=0A=
        if(insertBefore){=0A=
            return Ext.DomHelper.insertBefore(insertBefore, config, =
returnDom !=3D=3D true);=0A=
        }=0A=
        return Ext.DomHelper[!this.dom.firstChild ? 'overwrite' : =
'append'](this.dom, config,  returnDom !=3D=3D true);=0A=
    },=0A=
=0A=
    =0A=
    appendTo: function(el){=0A=
        el =3D Ext.getDom(el);=0A=
        el.appendChild(this.dom);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    insertBefore: function(el){=0A=
        el =3D Ext.getDom(el);=0A=
        el.parentNode.insertBefore(this.dom, el);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    insertAfter: function(el){=0A=
        el =3D Ext.getDom(el);=0A=
        el.parentNode.insertBefore(this.dom, el.nextSibling);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    insertFirst: function(el, returnDom){=0A=
        el =3D el || {};=0A=
        if(typeof el =3D=3D 'object' && !el.nodeType && !el.dom){        =
     return this.createChild(el, this.dom.firstChild, returnDom);=0A=
        }else{=0A=
            el =3D Ext.getDom(el);=0A=
            this.dom.insertBefore(el, this.dom.firstChild);=0A=
            return !returnDom ? Ext.get(el) : el;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    insertSibling: function(el, where, returnDom){=0A=
        var rt;=0A=
        if(Ext.isArray(el)){=0A=
            for(var i =3D 0, len =3D el.length; i < len; i++){=0A=
                rt =3D this.insertSibling(el[i], where, returnDom);=0A=
            }=0A=
            return rt;=0A=
        }=0A=
        where =3D where ? where.toLowerCase() : 'before';=0A=
        el =3D el || {};=0A=
        var refNode =3D where =3D=3D 'before' ? this.dom : =
this.dom.nextSibling;=0A=
=0A=
        if(typeof el =3D=3D 'object' && !el.nodeType && !el.dom){        =
     if(where =3D=3D 'after' && !this.dom.nextSibling){=0A=
                rt =3D Ext.DomHelper.append(this.dom.parentNode, el, =
!returnDom);=0A=
            }else{=0A=
                rt =3D Ext.DomHelper[where =3D=3D 'after' ? =
'insertAfter' : 'insertBefore'](this.dom, el, !returnDom);=0A=
            }=0A=
=0A=
        }else{=0A=
            rt =3D this.dom.parentNode.insertBefore(Ext.getDom(el), =
refNode);=0A=
            if(!returnDom){=0A=
                rt =3D Ext.get(rt);=0A=
            }=0A=
        }=0A=
        return rt;=0A=
    },=0A=
=0A=
    =0A=
    wrap: function(config, returnDom){=0A=
        if(!config){=0A=
            config =3D {tag: "div"};=0A=
        }=0A=
        var newEl =3D Ext.DomHelper.insertBefore(this.dom, config, =
!returnDom);=0A=
        newEl.dom ? newEl.dom.appendChild(this.dom) : =
newEl.appendChild(this.dom);=0A=
        return newEl;=0A=
    },=0A=
=0A=
    =0A=
    replace: function(el){=0A=
        el =3D Ext.get(el);=0A=
        this.insertBefore(el);=0A=
        el.remove();=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    replaceWith: function(el){=0A=
        if(typeof el =3D=3D 'object' && !el.nodeType && !el.dom){        =
     el =3D this.insertSibling(el, 'before');=0A=
        }else{=0A=
            el =3D Ext.getDom(el);=0A=
            this.dom.parentNode.insertBefore(el, this.dom);=0A=
        }=0A=
        El.uncache(this.id);=0A=
        this.dom.parentNode.removeChild(this.dom);=0A=
        this.dom =3D el;=0A=
        this.id =3D Ext.id(el);=0A=
        El.cache[this.id] =3D this;=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    insertHtml : function(where, html, returnEl){=0A=
        var el =3D Ext.DomHelper.insertHtml(where, this.dom, html);=0A=
        return returnEl ? Ext.get(el) : el;=0A=
    },=0A=
=0A=
    =0A=
    set : function(o, useSet){=0A=
        var el =3D this.dom;=0A=
        useSet =3D typeof useSet =3D=3D 'undefined' ? (el.setAttribute ? =
true : false) : useSet;=0A=
        for(var attr in o){=0A=
            if(attr =3D=3D "style" || typeof o[attr] =3D=3D "function") =
continue;=0A=
            if(attr=3D=3D"cls"){=0A=
                el.className =3D o["cls"];=0A=
            }else if(o.hasOwnProperty(attr)){=0A=
                if(useSet) el.setAttribute(attr, o[attr]);=0A=
                else el[attr] =3D o[attr];=0A=
            }=0A=
        }=0A=
        if(o.style){=0A=
            Ext.DomHelper.applyStyles(el, o.style);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    addKeyListener : function(key, fn, scope){=0A=
        var config;=0A=
        if(typeof key !=3D "object" || Ext.isArray(key)){=0A=
            config =3D {=0A=
                key: key,=0A=
                fn: fn,=0A=
                scope: scope=0A=
            };=0A=
        }else{=0A=
            config =3D {=0A=
                key : key.key,=0A=
                shift : key.shift,=0A=
                ctrl : key.ctrl,=0A=
                alt : key.alt,=0A=
                fn: fn,=0A=
                scope: scope=0A=
            };=0A=
        }=0A=
        return new Ext.KeyMap(this, config);=0A=
    },=0A=
=0A=
    =0A=
    addKeyMap : function(config){=0A=
        return new Ext.KeyMap(this, config);=0A=
    },=0A=
=0A=
    =0A=
     isScrollable : function(){=0A=
        var dom =3D this.dom;=0A=
        return dom.scrollHeight > dom.clientHeight || dom.scrollWidth > =
dom.clientWidth;=0A=
    },=0A=
=0A=
    =0A=
    scrollTo : function(side, value, animate){=0A=
        var prop =3D side.toLowerCase() =3D=3D "left" ? "scrollLeft" : =
"scrollTop";=0A=
        if(!animate || !A){=0A=
            this.dom[prop] =3D value;=0A=
        }else{=0A=
            var to =3D prop =3D=3D "scrollLeft" ? [value, =
this.dom.scrollTop] : [this.dom.scrollLeft, value];=0A=
            this.anim({scroll: {"to": to}}, this.preanim(arguments, 2), =
'scroll');=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
     scroll : function(direction, distance, animate){=0A=
         if(!this.isScrollable()){=0A=
             return;=0A=
         }=0A=
         var el =3D this.dom;=0A=
         var l =3D el.scrollLeft, t =3D el.scrollTop;=0A=
         var w =3D el.scrollWidth, h =3D el.scrollHeight;=0A=
         var cw =3D el.clientWidth, ch =3D el.clientHeight;=0A=
         direction =3D direction.toLowerCase();=0A=
         var scrolled =3D false;=0A=
         var a =3D this.preanim(arguments, 2);=0A=
         switch(direction){=0A=
             case "l":=0A=
             case "left":=0A=
                 if(w - l > cw){=0A=
                     var v =3D Math.min(l + distance, w-cw);=0A=
                     this.scrollTo("left", v, a);=0A=
                     scrolled =3D true;=0A=
                 }=0A=
                 break;=0A=
            case "r":=0A=
            case "right":=0A=
                 if(l > 0){=0A=
                     var v =3D Math.max(l - distance, 0);=0A=
                     this.scrollTo("left", v, a);=0A=
                     scrolled =3D true;=0A=
                 }=0A=
                 break;=0A=
            case "t":=0A=
            case "top":=0A=
            case "up":=0A=
                 if(t > 0){=0A=
                     var v =3D Math.max(t - distance, 0);=0A=
                     this.scrollTo("top", v, a);=0A=
                     scrolled =3D true;=0A=
                 }=0A=
                 break;=0A=
            case "b":=0A=
            case "bottom":=0A=
            case "down":=0A=
                 if(h - t > ch){=0A=
                     var v =3D Math.min(t + distance, h-ch);=0A=
                     this.scrollTo("top", v, a);=0A=
                     scrolled =3D true;=0A=
                 }=0A=
                 break;=0A=
         }=0A=
         return scrolled;=0A=
    },=0A=
=0A=
    =0A=
    translatePoints : function(x, y){=0A=
        if(typeof x =3D=3D 'object' || Ext.isArray(x)){=0A=
            y =3D x[1]; x =3D x[0];=0A=
        }=0A=
        var p =3D this.getStyle('position');=0A=
        var o =3D this.getXY();=0A=
=0A=
        var l =3D parseInt(this.getStyle('left'), 10);=0A=
        var t =3D parseInt(this.getStyle('top'), 10);=0A=
=0A=
        if(isNaN(l)){=0A=
            l =3D (p =3D=3D "relative") ? 0 : this.dom.offsetLeft;=0A=
        }=0A=
        if(isNaN(t)){=0A=
            t =3D (p =3D=3D "relative") ? 0 : this.dom.offsetTop;=0A=
        }=0A=
=0A=
        return {left: (x - o[0] + l), top: (y - o[1] + t)};=0A=
    },=0A=
=0A=
    =0A=
    getScroll : function(){=0A=
        var d =3D this.dom, doc =3D document;=0A=
        if(d =3D=3D doc || d =3D=3D doc.body){=0A=
            var l, t;=0A=
            if(Ext.isIE && Ext.isStrict){=0A=
                l =3D doc.documentElement.scrollLeft || =
(doc.body.scrollLeft || 0);=0A=
                t =3D doc.documentElement.scrollTop || =
(doc.body.scrollTop || 0);=0A=
            }else{=0A=
                l =3D window.pageXOffset || (doc.body.scrollLeft || 0);=0A=
                t =3D window.pageYOffset || (doc.body.scrollTop || 0);=0A=
            }=0A=
            return {left: l, top: t};=0A=
        }else{=0A=
            return {left: d.scrollLeft, top: d.scrollTop};=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getColor : function(attr, defaultValue, prefix){=0A=
        var v =3D this.getStyle(attr);=0A=
        if(!v || v =3D=3D "transparent" || v =3D=3D "inherit") {=0A=
            return defaultValue;=0A=
        }=0A=
        var color =3D typeof prefix =3D=3D "undefined" ? "#" : prefix;=0A=
        if(v.substr(0, 4) =3D=3D "rgb("){=0A=
            var rvs =3D v.slice(4, v.length -1).split(",");=0A=
            for(var i =3D 0; i < 3; i++){=0A=
                var h =3D parseInt(rvs[i]);=0A=
                var s =3D h.toString(16);=0A=
                if(h < 16){=0A=
                    s =3D "0" + s;=0A=
                }=0A=
                color +=3D s;=0A=
            }=0A=
        } else {=0A=
            if(v.substr(0, 1) =3D=3D "#"){=0A=
                if(v.length =3D=3D 4) {=0A=
                    for(var i =3D 1; i < 4; i++){=0A=
                        var c =3D v.charAt(i);=0A=
                        color +=3D  c + c;=0A=
                    }=0A=
                }else if(v.length =3D=3D 7){=0A=
                    color +=3D v.substr(1);=0A=
                }=0A=
            }=0A=
        }=0A=
        return(color.length > 5 ? color.toLowerCase() : defaultValue);=0A=
    },=0A=
=0A=
    =0A=
    boxWrap : function(cls){=0A=
        cls =3D cls || 'x-box';=0A=
        var el =3D Ext.get(this.insertHtml('beforeBegin', =
String.format('<div class=3D"{0}">'+El.boxMarkup+'</div>', cls)));=0A=
        el.child('.'+cls+'-mc').dom.appendChild(this.dom);=0A=
        return el;=0A=
    },=0A=
=0A=
    =0A=
    getAttributeNS : Ext.isIE ? function(ns, name){=0A=
        var d =3D this.dom;=0A=
        var type =3D typeof d[ns+":"+name];=0A=
        if(type !=3D 'undefined' && type !=3D 'unknown'){=0A=
            return d[ns+":"+name];=0A=
        }=0A=
        return d[name];=0A=
    } : function(ns, name){=0A=
        var d =3D this.dom;=0A=
        return d.getAttributeNS(ns, name) || d.getAttribute(ns+":"+name) =
|| d.getAttribute(name) || d[name];=0A=
    },=0A=
=0A=
    getTextWidth : function(text, min, max){=0A=
        return (Ext.util.TextMetrics.measure(this.dom, Ext.value(text, =
this.dom.innerHTML, true)).width).constrain(min || 0, max || 1000000);=0A=
    }=0A=
};=0A=
=0A=
var ep =3D El.prototype;=0A=
=0A=
=0A=
ep.on =3D ep.addListener;=0A=
    ep.mon =3D ep.addListener;=0A=
=0A=
ep.getUpdateManager =3D ep.getUpdater;=0A=
=0A=
=0A=
ep.un =3D ep.removeListener;=0A=
=0A=
=0A=
ep.autoBoxAdjust =3D true;=0A=
=0A=
El.unitPattern =3D /\d+(px|em|%|en|ex|pt|in|cm|mm|pc)$/i;=0A=
=0A=
El.addUnits =3D function(v, defaultUnit){=0A=
    if(v =3D=3D=3D "" || v =3D=3D "auto"){=0A=
        return v;=0A=
    }=0A=
    if(v =3D=3D=3D undefined){=0A=
        return '';=0A=
    }=0A=
    if(typeof v =3D=3D "number" || !El.unitPattern.test(v)){=0A=
        return v + (defaultUnit || 'px');=0A=
    }=0A=
    return v;=0A=
};=0A=
=0A=
El.boxMarkup =3D '<div class=3D"{0}-tl"><div class=3D"{0}-tr"><div =
class=3D"{0}-tc"></div></div></div><div class=3D"{0}-ml"><div =
class=3D"{0}-mr"><div class=3D"{0}-mc"></div></div></div><div =
class=3D"{0}-bl"><div class=3D"{0}-br"><div =
class=3D"{0}-bc"></div></div></div>';=0A=
=0A=
El.VISIBILITY =3D 1;=0A=
=0A=
El.DISPLAY =3D 2;=0A=
=0A=
El.borders =3D {l: "border-left-width", r: "border-right-width", t: =
"border-top-width", b: "border-bottom-width"};=0A=
El.paddings =3D {l: "padding-left", r: "padding-right", t: =
"padding-top", b: "padding-bottom"};=0A=
El.margins =3D {l: "margin-left", r: "margin-right", t: "margin-top", b: =
"margin-bottom"};=0A=
=0A=
=0A=
=0A=
=0A=
El.cache =3D {};=0A=
=0A=
var docEl;=0A=
=0A=
=0A=
El.get =3D function(el){=0A=
    var ex, elm, id;=0A=
    if(!el){ return null; }=0A=
    if(typeof el =3D=3D "string"){         if(!(elm =3D =
document.getElementById(el))){=0A=
            return null;=0A=
        }=0A=
        if(ex =3D El.cache[el]){=0A=
            ex.dom =3D elm;=0A=
        }else{=0A=
            ex =3D El.cache[el] =3D new El(elm);=0A=
        }=0A=
        return ex;=0A=
    }else if(el.tagName){         if(!(id =3D el.id)){=0A=
            id =3D Ext.id(el);=0A=
        }=0A=
        if(ex =3D El.cache[id]){=0A=
            ex.dom =3D el;=0A=
        }else{=0A=
            ex =3D El.cache[id] =3D new El(el);=0A=
        }=0A=
        return ex;=0A=
    }else if(el instanceof El){=0A=
        if(el !=3D docEl){=0A=
            el.dom =3D document.getElementById(el.id) || el.dom;         =
                                                              =
El.cache[el.id] =3D el;         }=0A=
        return el;=0A=
    }else if(el.isComposite){=0A=
        return el;=0A=
    }else if(Ext.isArray(el)){=0A=
        return El.select(el);=0A=
    }else if(el =3D=3D document){=0A=
                if(!docEl){=0A=
            var f =3D function(){};=0A=
            f.prototype =3D El.prototype;=0A=
            docEl =3D new f();=0A=
            docEl.dom =3D document;=0A=
        }=0A=
        return docEl;=0A=
    }=0A=
    return null;=0A=
};=0A=
=0A=
El.uncache =3D function(el){=0A=
    for(var i =3D 0, a =3D arguments, len =3D a.length; i < len; i++) {=0A=
        if(a[i]){=0A=
            delete El.cache[a[i].id || a[i]];=0A=
        }=0A=
    }=0A=
};=0A=
=0A=
El.garbageCollect =3D function(){=0A=
    if(!Ext.enableGarbageCollector){=0A=
        clearInterval(El.collectorThread);=0A=
        return;=0A=
    }=0A=
    for(var eid in El.cache){=0A=
        var el =3D El.cache[eid], d =3D el.dom;=0A=
                                                                         =
                                                                       =
if(!d || !d.parentNode || (!d.offsetParent && =
!document.getElementById(eid))){=0A=
            delete El.cache[eid];=0A=
            if(d && Ext.enableListenerCollection){=0A=
                E.purgeElement(d);=0A=
            }=0A=
        }=0A=
    }=0A=
}=0A=
El.collectorThreadId =3D setInterval(El.garbageCollect, 30000);=0A=
=0A=
var flyFn =3D function(){};=0A=
flyFn.prototype =3D El.prototype;=0A=
var _cls =3D new flyFn();=0A=
=0A=
El.Flyweight =3D function(dom){=0A=
    this.dom =3D dom;=0A=
};=0A=
=0A=
El.Flyweight.prototype =3D _cls;=0A=
El.Flyweight.prototype.isFlyweight =3D true;=0A=
=0A=
El._flyweights =3D {};=0A=
=0A=
El.fly =3D function(el, named){=0A=
    named =3D named || '_global';=0A=
    el =3D Ext.getDom(el);=0A=
    if(!el){=0A=
        return null;=0A=
    }=0A=
    if(!El._flyweights[named]){=0A=
        El._flyweights[named] =3D new El.Flyweight();=0A=
    }=0A=
    El._flyweights[named].dom =3D el;=0A=
    return El._flyweights[named];=0A=
};=0A=
=0A=
=0A=
Ext.get =3D El.get;=0A=
=0A=
Ext.fly =3D El.fly;=0A=
=0A=
var noBoxAdjust =3D Ext.isStrict ? {=0A=
    select:1=0A=
} : {=0A=
    input:1, select:1, textarea:1=0A=
};=0A=
if(Ext.isIE || Ext.isGecko){=0A=
    noBoxAdjust['button'] =3D 1;=0A=
}=0A=
=0A=
=0A=
Ext.EventManager.on(window, 'unload', function(){=0A=
    delete El.cache;=0A=
    delete El._flyweights;=0A=
});=0A=
})();=0A=
=0A=
Ext.enableFx =3D true;=0A=
=0A=
=0A=
Ext.Fx =3D {=0A=
	=0A=
    slideIn : function(anchor, o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
=0A=
            anchor =3D anchor || "t";=0A=
=0A=
                        this.fixDisplay();=0A=
=0A=
                        var r =3D this.getFxRestore();=0A=
            var b =3D this.getBox();=0A=
                        this.setSize(b);=0A=
=0A=
                        var wrap =3D this.fxWrap(r.pos, o, "hidden");=0A=
=0A=
            var st =3D this.dom.style;=0A=
            st.visibility =3D "visible";=0A=
            st.position =3D "absolute";=0A=
=0A=
                        var after =3D function(){=0A=
                el.fxUnwrap(wrap, r.pos, o);=0A=
                st.width =3D r.width;=0A=
                st.height =3D r.height;=0A=
                el.afterFx(o);=0A=
            };=0A=
                        var a, pt =3D {to: [b.x, b.y]}, bw =3D {to: =
b.width}, bh =3D {to: b.height};=0A=
=0A=
            switch(anchor.toLowerCase()){=0A=
                case "t":=0A=
                    wrap.setSize(b.width, 0);=0A=
                    st.left =3D st.bottom =3D "0";=0A=
                    a =3D {height: bh};=0A=
                break;=0A=
                case "l":=0A=
                    wrap.setSize(0, b.height);=0A=
                    st.right =3D st.top =3D "0";=0A=
                    a =3D {width: bw};=0A=
                break;=0A=
                case "r":=0A=
                    wrap.setSize(0, b.height);=0A=
                    wrap.setX(b.right);=0A=
                    st.left =3D st.top =3D "0";=0A=
                    a =3D {width: bw, points: pt};=0A=
                break;=0A=
                case "b":=0A=
                    wrap.setSize(b.width, 0);=0A=
                    wrap.setY(b.bottom);=0A=
                    st.left =3D st.top =3D "0";=0A=
                    a =3D {height: bh, points: pt};=0A=
                break;=0A=
                case "tl":=0A=
                    wrap.setSize(0, 0);=0A=
                    st.right =3D st.bottom =3D "0";=0A=
                    a =3D {width: bw, height: bh};=0A=
                break;=0A=
                case "bl":=0A=
                    wrap.setSize(0, 0);=0A=
                    wrap.setY(b.y+b.height);=0A=
                    st.right =3D st.top =3D "0";=0A=
                    a =3D {width: bw, height: bh, points: pt};=0A=
                break;=0A=
                case "br":=0A=
                    wrap.setSize(0, 0);=0A=
                    wrap.setXY([b.right, b.bottom]);=0A=
                    st.left =3D st.top =3D "0";=0A=
                    a =3D {width: bw, height: bh, points: pt};=0A=
                break;=0A=
                case "tr":=0A=
                    wrap.setSize(0, 0);=0A=
                    wrap.setX(b.x+b.width);=0A=
                    st.left =3D st.bottom =3D "0";=0A=
                    a =3D {width: bw, height: bh, points: pt};=0A=
                break;=0A=
            }=0A=
            this.dom.style.visibility =3D "visible";=0A=
            wrap.show();=0A=
=0A=
            arguments.callee.anim =3D wrap.fxanim(a,=0A=
                o,=0A=
                'motion',=0A=
                .5,=0A=
                'easeOut', after);=0A=
        });=0A=
        return this;=0A=
    },=0A=
    =0A=
	=0A=
    slideOut : function(anchor, o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
=0A=
            anchor =3D anchor || "t";=0A=
=0A=
                        var r =3D this.getFxRestore();=0A=
            =0A=
            var b =3D this.getBox();=0A=
                        this.setSize(b);=0A=
=0A=
                        var wrap =3D this.fxWrap(r.pos, o, "visible");=0A=
=0A=
            var st =3D this.dom.style;=0A=
            st.visibility =3D "visible";=0A=
            st.position =3D "absolute";=0A=
=0A=
            wrap.setSize(b);=0A=
=0A=
            var after =3D function(){=0A=
                if(o.useDisplay){=0A=
                    el.setDisplayed(false);=0A=
                }else{=0A=
                    el.hide();=0A=
                }=0A=
=0A=
                el.fxUnwrap(wrap, r.pos, o);=0A=
=0A=
                st.width =3D r.width;=0A=
                st.height =3D r.height;=0A=
=0A=
                el.afterFx(o);=0A=
            };=0A=
=0A=
            var a, zero =3D {to: 0};=0A=
            switch(anchor.toLowerCase()){=0A=
                case "t":=0A=
                    st.left =3D st.bottom =3D "0";=0A=
                    a =3D {height: zero};=0A=
                break;=0A=
                case "l":=0A=
                    st.right =3D st.top =3D "0";=0A=
                    a =3D {width: zero};=0A=
                break;=0A=
                case "r":=0A=
                    st.left =3D st.top =3D "0";=0A=
                    a =3D {width: zero, points: {to:[b.right, b.y]}};=0A=
                break;=0A=
                case "b":=0A=
                    st.left =3D st.top =3D "0";=0A=
                    a =3D {height: zero, points: {to:[b.x, b.bottom]}};=0A=
                break;=0A=
                case "tl":=0A=
                    st.right =3D st.bottom =3D "0";=0A=
                    a =3D {width: zero, height: zero};=0A=
                break;=0A=
                case "bl":=0A=
                    st.right =3D st.top =3D "0";=0A=
                    a =3D {width: zero, height: zero, points: {to:[b.x, =
b.bottom]}};=0A=
                break;=0A=
                case "br":=0A=
                    st.left =3D st.top =3D "0";=0A=
                    a =3D {width: zero, height: zero, points: =
{to:[b.x+b.width, b.bottom]}};=0A=
                break;=0A=
                case "tr":=0A=
                    st.left =3D st.bottom =3D "0";=0A=
                    a =3D {width: zero, height: zero, points: =
{to:[b.right, b.y]}};=0A=
                break;=0A=
            }=0A=
=0A=
            arguments.callee.anim =3D wrap.fxanim(a,=0A=
                o,=0A=
                'motion',=0A=
                .5,=0A=
                "easeOut", after);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    puff : function(o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
            this.clearOpacity();=0A=
            this.show();=0A=
=0A=
                        var r =3D this.getFxRestore();=0A=
            var st =3D this.dom.style;=0A=
=0A=
            var after =3D function(){=0A=
                if(o.useDisplay){=0A=
                    el.setDisplayed(false);=0A=
                }else{=0A=
                    el.hide();=0A=
                }=0A=
=0A=
                el.clearOpacity();=0A=
=0A=
                el.setPositioning(r.pos);=0A=
                st.width =3D r.width;=0A=
                st.height =3D r.height;=0A=
                st.fontSize =3D '';=0A=
                el.afterFx(o);=0A=
            };=0A=
=0A=
            var width =3D this.getWidth();=0A=
            var height =3D this.getHeight();=0A=
=0A=
            arguments.callee.anim =3D this.fxanim({=0A=
                    width : {to: this.adjustWidth(width * 2)},=0A=
                    height : {to: this.adjustHeight(height * 2)},=0A=
                    points : {by: [-(width * .5), -(height * .5)]},=0A=
                    opacity : {to: 0},=0A=
                    fontSize: {to:200, unit: "%"}=0A=
                },=0A=
                o,=0A=
                'motion',=0A=
                .5,=0A=
                "easeOut", after);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    switchOff : function(o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
            this.clearOpacity();=0A=
            this.clip();=0A=
=0A=
                        var r =3D this.getFxRestore();=0A=
            var st =3D this.dom.style;=0A=
=0A=
            var after =3D function(){=0A=
                if(o.useDisplay){=0A=
                    el.setDisplayed(false);=0A=
                }else{=0A=
                    el.hide();=0A=
                }=0A=
=0A=
                el.clearOpacity();=0A=
                el.setPositioning(r.pos);=0A=
                st.width =3D r.width;=0A=
                st.height =3D r.height;=0A=
=0A=
                el.afterFx(o);=0A=
            };=0A=
=0A=
            this.fxanim({opacity:{to:0.3}}, null, null, .1, null, =
function(){=0A=
                this.clearOpacity();=0A=
                (function(){=0A=
                    this.fxanim({=0A=
                        height:{to:1},=0A=
                        points:{by:[0, this.getHeight() * .5]}=0A=
                    }, o, 'motion', 0.3, 'easeIn', after);=0A=
                }).defer(100, this);=0A=
            });=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    	=0A=
    highlight : function(color, o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
            color =3D color || "ffff9c";=0A=
            var attr =3D o.attr || "backgroundColor";=0A=
=0A=
            this.clearOpacity();=0A=
            this.show();=0A=
=0A=
            var origColor =3D this.getColor(attr);=0A=
            var restoreColor =3D this.dom.style[attr];=0A=
            var endColor =3D (o.endColor || origColor) || "ffffff";=0A=
=0A=
            var after =3D function(){=0A=
                el.dom.style[attr] =3D restoreColor;=0A=
                el.afterFx(o);=0A=
            };=0A=
=0A=
            var a =3D {};=0A=
            a[attr] =3D {from: color, to: endColor};=0A=
            arguments.callee.anim =3D this.fxanim(a,=0A=
                o,=0A=
                'color',=0A=
                1,=0A=
                'easeIn', after);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
   =0A=
    frame : function(color, count, o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
            color =3D color || "#C3DAF9";=0A=
            if(color.length =3D=3D 6){=0A=
                color =3D "#" + color;=0A=
            }=0A=
            count =3D count || 1;=0A=
            var duration =3D o.duration || 1;=0A=
            this.show();=0A=
=0A=
            var b =3D this.getBox();=0A=
            var animFn =3D function(){=0A=
                var proxy =3D Ext.getBody().createChild({=0A=
                     style:{=0A=
                        visbility:"hidden",=0A=
                        position:"absolute",=0A=
                        "z-index":"35000",                         =
border:"0px solid " + color=0A=
                     }=0A=
                  });=0A=
                var scale =3D Ext.isBorderBox ? 2 : 1;=0A=
                proxy.animate({=0A=
                    top:{from:b.y, to:b.y - 20},=0A=
                    left:{from:b.x, to:b.x - 20},=0A=
                    borderWidth:{from:0, to:10},=0A=
                    opacity:{from:1, to:0},=0A=
                    height:{from:b.height, to:(b.height + (20*scale))},=0A=
                    width:{from:b.width, to:(b.width + (20*scale))}=0A=
                }, duration, function(){=0A=
                    proxy.remove();=0A=
                    if(--count > 0){=0A=
                         animFn();=0A=
                    }else{=0A=
                        el.afterFx(o);=0A=
                    }=0A=
                });=0A=
            };=0A=
            animFn.call(this);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
   =0A=
    pause : function(seconds){=0A=
        var el =3D this.getFxEl();=0A=
        var o =3D {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
            setTimeout(function(){=0A=
                el.afterFx(o);=0A=
            }, seconds * 1000);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
   =0A=
    fadeIn : function(o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
        el.queueFx(o, function(){=0A=
            this.setOpacity(0);=0A=
            this.fixDisplay();=0A=
            this.dom.style.visibility =3D 'visible';=0A=
            var to =3D o.endOpacity || 1;=0A=
            arguments.callee.anim =3D this.fxanim({opacity:{to:to}},=0A=
                o, null, .5, "easeOut", function(){=0A=
                if(to =3D=3D 1){=0A=
                    this.clearOpacity();=0A=
                }=0A=
                el.afterFx(o);=0A=
            });=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
   =0A=
    fadeOut : function(o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
        el.queueFx(o, function(){=0A=
            arguments.callee.anim =3D =
this.fxanim({opacity:{to:o.endOpacity || 0}},=0A=
                o, null, .5, "easeOut", function(){=0A=
                if(this.visibilityMode =3D=3D Ext.Element.DISPLAY || =
o.useDisplay){=0A=
                     this.dom.style.display =3D "none";=0A=
                }else{=0A=
                     this.dom.style.visibility =3D "hidden";=0A=
                }=0A=
                this.clearOpacity();=0A=
                el.afterFx(o);=0A=
            });=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
   =0A=
    scale : function(w, h, o){=0A=
        this.shift(Ext.apply({}, o, {=0A=
            width: w,=0A=
            height: h=0A=
        }));=0A=
        return this;=0A=
    },=0A=
=0A=
   =0A=
    shift : function(o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
        el.queueFx(o, function(){=0A=
            var a =3D {}, w =3D o.width, h =3D o.height, x =3D o.x, y =
=3D o.y,  op =3D o.opacity;=0A=
            if(w !=3D=3D undefined){=0A=
                a.width =3D {to: this.adjustWidth(w)};=0A=
            }=0A=
            if(h !=3D=3D undefined){=0A=
                a.height =3D {to: this.adjustHeight(h)};=0A=
            }=0A=
            if(o.left !=3D=3D undefined){=0A=
                a.left =3D {to: o.left};=0A=
            }=0A=
            if(o.top !=3D=3D undefined){=0A=
                a.top =3D {to: o.top};=0A=
            }=0A=
            if(o.right !=3D=3D undefined){=0A=
                a.right =3D {to: o.right};=0A=
            }=0A=
            if(o.bottom !=3D=3D undefined){=0A=
                a.bottom =3D {to: o.bottom};=0A=
            }=0A=
            if(x !=3D=3D undefined || y !=3D=3D undefined){=0A=
                a.points =3D {to: [=0A=
                    x !=3D=3D undefined ? x : this.getX(),=0A=
                    y !=3D=3D undefined ? y : this.getY()=0A=
                ]};=0A=
            }=0A=
            if(op !=3D=3D undefined){=0A=
                a.opacity =3D {to: op};=0A=
            }=0A=
            if(o.xy !=3D=3D undefined){=0A=
                a.points =3D {to: o.xy};=0A=
            }=0A=
            arguments.callee.anim =3D this.fxanim(a,=0A=
                o, 'motion', .35, "easeOut", function(){=0A=
                el.afterFx(o);=0A=
            });=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    ghost : function(anchor, o){=0A=
        var el =3D this.getFxEl();=0A=
        o =3D o || {};=0A=
=0A=
        el.queueFx(o, function(){=0A=
            anchor =3D anchor || "b";=0A=
=0A=
                        var r =3D this.getFxRestore();=0A=
            var w =3D this.getWidth(),=0A=
                h =3D this.getHeight();=0A=
=0A=
            var st =3D this.dom.style;=0A=
=0A=
            var after =3D function(){=0A=
                if(o.useDisplay){=0A=
                    el.setDisplayed(false);=0A=
                }else{=0A=
                    el.hide();=0A=
                }=0A=
=0A=
                el.clearOpacity();=0A=
                el.setPositioning(r.pos);=0A=
                st.width =3D r.width;=0A=
                st.height =3D r.height;=0A=
=0A=
                el.afterFx(o);=0A=
            };=0A=
=0A=
            var a =3D {opacity: {to: 0}, points: {}}, pt =3D a.points;=0A=
            switch(anchor.toLowerCase()){=0A=
                case "t":=0A=
                    pt.by =3D [0, -h];=0A=
                break;=0A=
                case "l":=0A=
                    pt.by =3D [-w, 0];=0A=
                break;=0A=
                case "r":=0A=
                    pt.by =3D [w, 0];=0A=
                break;=0A=
                case "b":=0A=
                    pt.by =3D [0, h];=0A=
                break;=0A=
                case "tl":=0A=
                    pt.by =3D [-w, -h];=0A=
                break;=0A=
                case "bl":=0A=
                    pt.by =3D [-w, h];=0A=
                break;=0A=
                case "br":=0A=
                    pt.by =3D [w, h];=0A=
                break;=0A=
                case "tr":=0A=
                    pt.by =3D [w, -h];=0A=
                break;=0A=
            }=0A=
=0A=
            arguments.callee.anim =3D this.fxanim(a,=0A=
                o,=0A=
                'motion',=0A=
                .5,=0A=
                "easeOut", after);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    syncFx : function(){=0A=
        this.fxDefaults =3D Ext.apply(this.fxDefaults || {}, {=0A=
            block : false,=0A=
            concurrent : true,=0A=
            stopFx : false=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    sequenceFx : function(){=0A=
        this.fxDefaults =3D Ext.apply(this.fxDefaults || {}, {=0A=
            block : false,=0A=
            concurrent : false,=0A=
            stopFx : false=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    nextFx : function(){=0A=
        var ef =3D this.fxQueue[0];=0A=
        if(ef){=0A=
            ef.call(this);=0A=
        }=0A=
    },=0A=
=0A=
	=0A=
    hasActiveFx : function(){=0A=
        return this.fxQueue && this.fxQueue[0];=0A=
    },=0A=
=0A=
	=0A=
    stopFx : function(){=0A=
        if(this.hasActiveFx()){=0A=
            var cur =3D this.fxQueue[0];=0A=
            if(cur && cur.anim && cur.anim.isAnimated()){=0A=
                this.fxQueue =3D [cur];                 =
cur.anim.stop(true);=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    beforeFx : function(o){=0A=
        if(this.hasActiveFx() && !o.concurrent){=0A=
           if(o.stopFx){=0A=
               this.stopFx();=0A=
               return true;=0A=
           }=0A=
           return false;=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
	=0A=
    hasFxBlock : function(){=0A=
        var q =3D this.fxQueue;=0A=
        return q && q[0] && q[0].block;=0A=
    },=0A=
=0A=
	=0A=
    queueFx : function(o, fn){=0A=
        if(!this.fxQueue){=0A=
            this.fxQueue =3D [];=0A=
        }=0A=
        if(!this.hasFxBlock()){=0A=
            Ext.applyIf(o, this.fxDefaults);=0A=
            if(!o.concurrent){=0A=
                var run =3D this.beforeFx(o);=0A=
                fn.block =3D o.block;=0A=
                this.fxQueue.push(fn);=0A=
                if(run){=0A=
                    this.nextFx();=0A=
                }=0A=
            }else{=0A=
                fn.call(this);=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
	=0A=
    fxWrap : function(pos, o, vis){=0A=
        var wrap;=0A=
        if(!o.wrap || !(wrap =3D Ext.get(o.wrap))){=0A=
            var wrapXY;=0A=
            if(o.fixPosition){=0A=
                wrapXY =3D this.getXY();=0A=
            }=0A=
            var div =3D document.createElement("div");=0A=
            div.style.visibility =3D vis;=0A=
            wrap =3D Ext.get(this.dom.parentNode.insertBefore(div, =
this.dom));=0A=
            wrap.setPositioning(pos);=0A=
            if(wrap.getStyle("position") =3D=3D "static"){=0A=
                wrap.position("relative");=0A=
            }=0A=
            this.clearPositioning('auto');=0A=
            wrap.clip();=0A=
            wrap.dom.appendChild(this.dom);=0A=
            if(wrapXY){=0A=
                wrap.setXY(wrapXY);=0A=
            }=0A=
        }=0A=
        return wrap;=0A=
    },=0A=
=0A=
	=0A=
    fxUnwrap : function(wrap, pos, o){=0A=
        this.clearPositioning();=0A=
        this.setPositioning(pos);=0A=
        if(!o.wrap){=0A=
            wrap.dom.parentNode.insertBefore(this.dom, wrap.dom);=0A=
            wrap.remove();=0A=
        }=0A=
    },=0A=
=0A=
	=0A=
    getFxRestore : function(){=0A=
        var st =3D this.dom.style;=0A=
        return {pos: this.getPositioning(), width: st.width, height : =
st.height};=0A=
    },=0A=
=0A=
	=0A=
    afterFx : function(o){=0A=
        if(o.afterStyle){=0A=
            this.applyStyles(o.afterStyle);=0A=
        }=0A=
        if(o.afterCls){=0A=
            this.addClass(o.afterCls);=0A=
        }=0A=
        if(o.remove =3D=3D=3D true){=0A=
            this.remove();=0A=
        }=0A=
        Ext.callback(o.callback, o.scope, [this]);=0A=
        if(!o.concurrent){=0A=
            this.fxQueue.shift();=0A=
            this.nextFx();=0A=
        }=0A=
    },=0A=
=0A=
	=0A=
    getFxEl : function(){         return Ext.get(this.dom);=0A=
    },=0A=
=0A=
	=0A=
    fxanim : function(args, opt, animType, defaultDur, defaultEase, cb){=0A=
        animType =3D animType || 'run';=0A=
        opt =3D opt || {};=0A=
        var anim =3D Ext.lib.Anim[animType](=0A=
            this.dom, args,=0A=
            (opt.duration || defaultDur) || .35,=0A=
            (opt.easing || defaultEase) || 'easeOut',=0A=
            function(){=0A=
                Ext.callback(cb, this);=0A=
            },=0A=
            this=0A=
        );=0A=
        opt.anim =3D anim;=0A=
        return anim;=0A=
    }=0A=
};=0A=
=0A=
Ext.Fx.resize =3D Ext.Fx.scale;=0A=
=0A=
Ext.apply(Ext.Element.prototype, Ext.Fx);=0A=
=0A=

Ext.CompositeElement =3D function(els){
    this.elements =3D [];
    this.addElements(els);
};
Ext.CompositeElement.prototype =3D {
    isComposite: true,
    addElements : function(els){
        if(!els) return this;
        if(typeof els =3D=3D "string"){
            els =3D Ext.Element.selectorFunction(els);
        }
        var yels =3D this.elements;
        var index =3D yels.length-1;
        for(var i =3D 0, len =3D els.length; i < len; i++) {
        	yels[++index] =3D Ext.get(els[i]);
        }
        return this;
    },

   =20
    fill : function(els){
        this.elements =3D [];
        this.add(els);
        return this;
    },

   =20
    filter : function(selector){
        var els =3D [];
        this.each(function(el){
            if(el.is(selector)){
                els[els.length] =3D el.dom;
            }
        });
        this.fill(els);
        return this;
    },

    invoke : function(fn, args){
        var els =3D this.elements;
        for(var i =3D 0, len =3D els.length; i < len; i++) {
        	Ext.Element.prototype[fn].apply(els[i], args);
        }
        return this;
    },
   =20
    add : function(els){
        if(typeof els =3D=3D "string"){
            this.addElements(Ext.Element.selectorFunction(els));
        }else if(els.length !=3D=3D undefined){
            this.addElements(els);
        }else{
            this.addElements([els]);
        }
        return this;
    },
   =20
    each : function(fn, scope){
        var els =3D this.elements;
        for(var i =3D 0, len =3D els.length; i < len; i++){
            if(fn.call(scope || els[i], els[i], this, i) =3D=3D=3D =
false) {
                break;
            }
        }
        return this;
    },

   =20
    item : function(index){
        return this.elements[index] || null;
    },

   =20
    first : function(){
        return this.item(0);
    },

   =20
    last : function(){
        return this.item(this.elements.length-1);
    },

   =20
    getCount : function(){
        return this.elements.length;
    },

   =20
    contains : function(el){
        return this.indexOf(el) !=3D=3D -1;
    },

   =20
    indexOf : function(el){
        return this.elements.indexOf(Ext.get(el));
    },


   =20
    removeElement : function(el, removeDom){
        if(Ext.isArray(el)){
            for(var i =3D 0, len =3D el.length; i < len; i++){
                this.removeElement(el[i]);
            }
            return this;
        }
        var index =3D typeof el =3D=3D 'number' ? el : this.indexOf(el);
        if(index !=3D=3D -1 && this.elements[index]){
            if(removeDom){
                var d =3D this.elements[index];
                if(d.dom){
                    d.remove();
                }else{
                    Ext.removeNode(d);
                }
            }
            this.elements.splice(index, 1);
        }
        return this;
    },

   =20
    replaceElement : function(el, replacement, domReplace){
        var index =3D typeof el =3D=3D 'number' ? el : this.indexOf(el);
        if(index !=3D=3D -1){
            if(domReplace){
                this.elements[index].replaceWith(replacement);
            }else{
                this.elements.splice(index, 1, Ext.get(replacement))
            }
        }
        return this;
    },

   =20
    clear : function(){
        this.elements =3D [];
    }
};
(function(){
Ext.CompositeElement.createCall =3D function(proto, fnName){
    if(!proto[fnName]){
        proto[fnName] =3D function(){
            return this.invoke(fnName, arguments);
        };
    }
};
for(var fnName in Ext.Element.prototype){
    if(typeof Ext.Element.prototype[fnName] =3D=3D "function"){
        Ext.CompositeElement.createCall(Ext.CompositeElement.prototype, =
fnName);
    }
};
})();


Ext.CompositeElementLite =3D function(els){
    Ext.CompositeElementLite.superclass.constructor.call(this, els);
    this.el =3D new Ext.Element.Flyweight();
};
Ext.extend(Ext.CompositeElementLite, Ext.CompositeElement, {
    addElements : function(els){
        if(els){
            if(Ext.isArray(els)){
                this.elements =3D this.elements.concat(els);
            }else{
                var yels =3D this.elements;
                var index =3D yels.length-1;
                for(var i =3D 0, len =3D els.length; i < len; i++) {
                    yels[++index] =3D els[i];
                }
            }
        }
        return this;
    },
    invoke : function(fn, args){
        var els =3D this.elements;
        var el =3D this.el;
        for(var i =3D 0, len =3D els.length; i < len; i++) {
            el.dom =3D els[i];
        	Ext.Element.prototype[fn].apply(el, args);
        }
        return this;
    },
   =20
    item : function(index){
        if(!this.elements[index]){
            return null;
        }
        this.el.dom =3D this.elements[index];
        return this.el;
    },

    =0A=
    addListener : function(eventName, handler, scope, opt){
        var els =3D this.elements;
        for(var i =3D 0, len =3D els.length; i < len; i++) {
            Ext.EventManager.on(els[i], eventName, handler, scope || =
els[i], opt);
        }
        return this;
    },

   =20
    each : function(fn, scope){
        var els =3D this.elements;
        var el =3D this.el;
        for(var i =3D 0, len =3D els.length; i < len; i++){
            el.dom =3D els[i];
        	if(fn.call(scope || el, el, this, i) =3D=3D=3D false){
                break;
            }
        }
        return this;
    },

    indexOf : function(el){
        return this.elements.indexOf(Ext.getDom(el));
    },

    replaceElement : function(el, replacement, domReplace){
        var index =3D typeof el =3D=3D 'number' ? el : this.indexOf(el);
        if(index !=3D=3D -1){
            replacement =3D Ext.getDom(replacement);
            if(domReplace){
                var d =3D this.elements[index];
                d.parentNode.insertBefore(replacement, d);
                Ext.removeNode(d);
            }
            this.elements.splice(index, 1, replacement);
        }
        return this;
    }
});
Ext.CompositeElementLite.prototype.on =3D =
Ext.CompositeElementLite.prototype.addListener;
if(Ext.DomQuery){
    Ext.Element.selectorFunction =3D Ext.DomQuery.select;
}

Ext.Element.select =3D function(selector, unique, root){
    var els;
    if(typeof selector =3D=3D "string"){
        els =3D Ext.Element.selectorFunction(selector, root);
    }else if(selector.length !=3D=3D undefined){
        els =3D selector;
    }else{
        throw "Invalid selector";
    }
    if(unique =3D=3D=3D true){
        return new Ext.CompositeElement(els);
    }else{
        return new Ext.CompositeElementLite(els);
    }
};

Ext.select =3D Ext.Element.select;=0A=
=0A=
Ext.data.Connection =3D function(config){=0A=
    Ext.apply(this, config);=0A=
    this.addEvents(=0A=
        =0A=
        "beforerequest",=0A=
        =0A=
        "requestcomplete",=0A=
        =0A=
        "requestexception"=0A=
    );=0A=
    Ext.data.Connection.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.data.Connection, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    timeout : 30000,=0A=
    =0A=
    autoAbort:false,=0A=
=0A=
    =0A=
    disableCaching: true,=0A=
=0A=
    =0A=
    request : function(o){=0A=
        if(this.fireEvent("beforerequest", this, o) !=3D=3D false){=0A=
            var p =3D o.params;=0A=
=0A=
            if(typeof p =3D=3D "function"){=0A=
                p =3D p.call(o.scope||window, o);=0A=
            }=0A=
            if(typeof p =3D=3D "object"){=0A=
                p =3D Ext.urlEncode(p);=0A=
            }=0A=
            if(this.extraParams){=0A=
                var extras =3D Ext.urlEncode(this.extraParams);=0A=
                p =3D p ? (p + '&' + extras) : extras;=0A=
            }=0A=
=0A=
            var url =3D o.url || this.url;=0A=
            if(typeof url =3D=3D 'function'){=0A=
                url =3D url.call(o.scope||window, o);=0A=
            }=0A=
=0A=
            if(o.form){=0A=
                var form =3D Ext.getDom(o.form);=0A=
                url =3D url || form.action;=0A=
=0A=
                var enctype =3D form.getAttribute("enctype");=0A=
                if(o.isUpload || (enctype && enctype.toLowerCase() =
=3D=3D 'multipart/form-data')){=0A=
                    return this.doFormUpload(o, p, url);=0A=
                }=0A=
                var f =3D Ext.lib.Ajax.serializeForm(form);=0A=
                p =3D p ? (p + '&' + f) : f;=0A=
            }=0A=
=0A=
            var hs =3D o.headers;=0A=
            if(this.defaultHeaders){=0A=
                hs =3D Ext.apply(hs || {}, this.defaultHeaders);=0A=
                if(!o.headers){=0A=
                    o.headers =3D hs;=0A=
                }=0A=
            }=0A=
=0A=
            var cb =3D {=0A=
                success: this.handleResponse,=0A=
                failure: this.handleFailure,=0A=
                scope: this,=0A=
                argument: {options: o},=0A=
                timeout : o.timeout || this.timeout=0A=
            };=0A=
=0A=
            var method =3D o.method||this.method||(p ? "POST" : "GET");=0A=
=0A=
            if(method =3D=3D 'GET' && (this.disableCaching && =
o.disableCaching !=3D=3D false) || o.disableCaching =3D=3D=3D true){=0A=
                url +=3D (url.indexOf('?') !=3D -1 ? '&' : '?') + =
'_dc=3D' + (new Date().getTime());=0A=
            }=0A=
=0A=
            if(typeof o.autoAbort =3D=3D 'boolean'){                 =
if(o.autoAbort){=0A=
                    this.abort();=0A=
                }=0A=
            }else if(this.autoAbort !=3D=3D false){=0A=
                this.abort();=0A=
            }=0A=
            if((method =3D=3D 'GET' || o.xmlData || o.jsonData) && p){=0A=
                url +=3D (url.indexOf('?') !=3D -1 ? '&' : '?') + p;=0A=
                p =3D '';=0A=
            }=0A=
            this.transId =3D Ext.lib.Ajax.request(method, url, cb, p, o);=0A=
            return this.transId;=0A=
        }else{=0A=
            Ext.callback(o.callback, o.scope, [o, null, null]);=0A=
            return null;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    isLoading : function(transId){=0A=
        if(transId){=0A=
            return Ext.lib.Ajax.isCallInProgress(transId);=0A=
        }else{=0A=
            return this.transId ? true : false;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    abort : function(transId){=0A=
        if(transId || this.isLoading()){=0A=
            Ext.lib.Ajax.abort(transId || this.transId);=0A=
        }=0A=
    },=0A=
=0A=
        handleResponse : function(response){=0A=
        this.transId =3D false;=0A=
        var options =3D response.argument.options;=0A=
        response.argument =3D options ? options.argument : null;=0A=
        this.fireEvent("requestcomplete", this, response, options);=0A=
        Ext.callback(options.success, options.scope, [response, =
options]);=0A=
        Ext.callback(options.callback, options.scope, [options, true, =
response]);=0A=
    },=0A=
=0A=
        handleFailure : function(response, e){=0A=
        this.transId =3D false;=0A=
        var options =3D response.argument.options;=0A=
        response.argument =3D options ? options.argument : null;=0A=
        this.fireEvent("requestexception", this, response, options, e);=0A=
        Ext.callback(options.failure, options.scope, [response, =
options]);=0A=
        Ext.callback(options.callback, options.scope, [options, false, =
response]);=0A=
    },=0A=
=0A=
        doFormUpload : function(o, ps, url){=0A=
        var id =3D Ext.id();=0A=
        var frame =3D document.createElement('iframe');=0A=
        frame.id =3D id;=0A=
        frame.name =3D id;=0A=
        frame.className =3D 'x-hidden';=0A=
        if(Ext.isIE){=0A=
            frame.src =3D Ext.SSL_SECURE_URL;=0A=
        }=0A=
        document.body.appendChild(frame);=0A=
=0A=
        if(Ext.isIE){=0A=
           document.frames[id].name =3D id;=0A=
        }=0A=
=0A=
        var form =3D Ext.getDom(o.form);=0A=
        form.target =3D id;=0A=
        form.method =3D 'POST';=0A=
        form.enctype =3D form.encoding =3D 'multipart/form-data';=0A=
        if(url){=0A=
            form.action =3D url;=0A=
        }=0A=
=0A=
        var hiddens, hd;=0A=
        if(ps){             hiddens =3D [];=0A=
            ps =3D Ext.urlDecode(ps, false);=0A=
            for(var k in ps){=0A=
                if(ps.hasOwnProperty(k)){=0A=
                    hd =3D document.createElement('input');=0A=
                    hd.type =3D 'hidden';=0A=
                    hd.name =3D k;=0A=
                    hd.value =3D ps[k];=0A=
                    form.appendChild(hd);=0A=
                    hiddens.push(hd);=0A=
                }=0A=
            }=0A=
        }=0A=
=0A=
        function cb(){=0A=
            var r =3D {                  responseText : '',=0A=
                responseXML : null=0A=
            };=0A=
=0A=
            r.argument =3D o ? o.argument : null;=0A=
=0A=
            try {                 var doc;=0A=
                if(Ext.isIE){=0A=
                    doc =3D frame.contentWindow.document;=0A=
                }else {=0A=
                    doc =3D (frame.contentDocument || =
window.frames[id].document);=0A=
                }=0A=
                if(doc && doc.body){=0A=
                    r.responseText =3D doc.body.innerHTML;=0A=
                }=0A=
                if(doc && doc.XMLDocument){=0A=
                    r.responseXML =3D doc.XMLDocument;=0A=
                }else {=0A=
                    r.responseXML =3D doc;=0A=
                }=0A=
            }=0A=
            catch(e) {=0A=
                            }=0A=
=0A=
            Ext.EventManager.removeListener(frame, 'load', cb, this);=0A=
=0A=
            this.fireEvent("requestcomplete", this, r, o);=0A=
=0A=
            Ext.callback(o.success, o.scope, [r, o]);=0A=
            Ext.callback(o.callback, o.scope, [o, true, r]);=0A=
=0A=
            setTimeout(function(){Ext.removeNode(frame);}, 100);=0A=
        }=0A=
=0A=
        Ext.EventManager.on(frame, 'load', cb, this);=0A=
        form.submit();=0A=
=0A=
        if(hiddens){             for(var i =3D 0, len =3D =
hiddens.length; i < len; i++){=0A=
                Ext.removeNode(hiddens[i]);=0A=
            }=0A=
        }=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.Ajax =3D new Ext.data.Connection({=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
    =0A=
=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
    =0A=
    autoAbort : false,=0A=
=0A=
    =0A=
    serializeForm : function(form){=0A=
        return Ext.lib.Ajax.serializeForm(form);=0A=
    }=0A=
});=0A=

Ext.Updater =3D function(el, forceNew){
    el =3D Ext.get(el);
    if(!forceNew && el.updateManager){
        return el.updateManager;
    }
   =20
    this.el =3D el;
   =20
    this.defaultUrl =3D null;

    this.addEvents(
       =20
        "beforeupdate",
       =20
        "update",
       =20
        "failure"
    );
    var d =3D Ext.Updater.defaults;
   =20
    this.sslBlankUrl =3D d.sslBlankUrl;
   =20
    this.disableCaching =3D d.disableCaching;
   =20
    this.indicatorText =3D d.indicatorText;
   =20
    this.showLoadIndicator =3D d.showLoadIndicator;
   =20
    this.timeout =3D d.timeout;
   =20
    this.loadScripts =3D d.loadScripts;
   =20
    this.transaction =3D null;
   =20
    this.refreshDelegate =3D this.refresh.createDelegate(this);
   =20
    this.updateDelegate =3D this.update.createDelegate(this);
   =20
    this.formUpdateDelegate =3D this.formUpdate.createDelegate(this);

    if(!this.renderer){
    =20
    this.renderer =3D new Ext.Updater.BasicRenderer();
    }
    Ext.Updater.superclass.constructor.call(this);
};

Ext.extend(Ext.Updater, Ext.util.Observable, {
   =20
    getEl : function(){
        return this.el;
    },
   =20
   =20
    update : function(url, params, callback, discardUrl){
        if(this.fireEvent("beforeupdate", this.el, url, params) !=3D=3D =
false){
            var cfg, callerScope;
            if(typeof url =3D=3D "object"){ =0A=
                cfg =3D url;
                url =3D cfg.url;
                params =3D params || cfg.params;
                callback =3D callback || cfg.callback;
                discardUrl =3D discardUrl || cfg.discardUrl;
                callerScope =3D cfg.scope;
                if(typeof cfg.nocache !=3D =
"undefined"){this.disableCaching =3D cfg.nocache;};
                if(typeof cfg.text !=3D "undefined"){this.indicatorText =
=3D '<div class=3D"loading-indicator">'+cfg.text+"</div>";};
                if(typeof cfg.scripts !=3D "undefined"){this.loadScripts =
=3D cfg.scripts;};
                if(typeof cfg.timeout !=3D "undefined"){this.timeout =3D =
cfg.timeout;};
            }
            this.showLoading();

            if(!discardUrl){
                this.defaultUrl =3D url;
            }
            if(typeof url =3D=3D "function"){
                url =3D url.call(this);
            }

            var o =3D Ext.apply(cfg ||{}, {
                url : url,
                params: (typeof params =3D=3D "function" && callerScope) =
? params.createDelegate(callerScope) : params,
                success: this.processSuccess,
                failure: this.processFailure,
                scope: this,
                callback: undefined,
                timeout: (this.timeout*1000),
                disableCaching: this.disableCaching,
                argument: {
                    "options": cfg,
                    "url": url,
                    "form": null,
                    "callback": callback,
                    "scope": callerScope || window,
                    "params": params
                }
            });

            this.transaction =3D Ext.Ajax.request(o);
        }
    },

   =20
    formUpdate : function(form, url, reset, callback){
        if(this.fireEvent("beforeupdate", this.el, form, url) !=3D=3D =
false){
            if(typeof url =3D=3D "function"){
                url =3D url.call(this);
            }
            form =3D Ext.getDom(form)
            this.transaction =3D Ext.Ajax.request({
                form: form,
                url:url,
                success: this.processSuccess,
                failure: this.processFailure,
                scope: this,
                timeout: (this.timeout*1000),
                argument: {
                    "url": url,
                    "form": form,
                    "callback": callback,
                    "reset": reset
                }
            });
            this.showLoading.defer(1, this);
        }
    },

   =20
    refresh : function(callback){
        if(this.defaultUrl =3D=3D null){
            return;
        }
        this.update(this.defaultUrl, null, callback, true);
    },

   =20
    startAutoRefresh : function(interval, url, params, callback, =
refreshNow){
        if(refreshNow){
            this.update(url || this.defaultUrl, params, callback, true);
        }
        if(this.autoRefreshProcId){
            clearInterval(this.autoRefreshProcId);
        }
        this.autoRefreshProcId =3D =
setInterval(this.update.createDelegate(this, [url || this.defaultUrl, =
params, callback, true]), interval*1000);
    },

   =20
     stopAutoRefresh : function(){
        if(this.autoRefreshProcId){
            clearInterval(this.autoRefreshProcId);
            delete this.autoRefreshProcId;
        }
    },

   =20
    isAutoRefreshing : function(){
       return this.autoRefreshProcId ? true : false;
    },
   =20
   =20
    showLoading : function(){
        if(this.showLoadIndicator){
            this.el.update(this.indicatorText);
        }
    },

    =0A=
    processSuccess : function(response){
        this.transaction =3D null;
        if(response.argument.form && response.argument.reset){
            try{ =0A=
                response.argument.form.reset();
            }catch(e){}
        }
        if(this.loadScripts){
            this.renderer.render(this.el, response, this,
                this.updateComplete.createDelegate(this, [response]));
        }else{
            this.renderer.render(this.el, response, this);
            this.updateComplete(response);
        }
    },

    =0A=
    updateComplete : function(response){
        this.fireEvent("update", this.el, response);
        if(typeof response.argument.callback =3D=3D "function"){
            response.argument.callback.call(response.argument.scope, =
this.el, true, response, response.argument.options);
        }
    },

    =0A=
    processFailure : function(response){
        this.transaction =3D null;
        this.fireEvent("failure", this.el, response);
        if(typeof response.argument.callback =3D=3D "function"){
            response.argument.callback.call(response.argument.scope, =
this.el, false, response, response.argument.options);
        }
    },

   =20
    setRenderer : function(renderer){
        this.renderer =3D renderer;
    },

   =20
    getRenderer : function(){
       return this.renderer;
    },

   =20
    setDefaultUrl : function(defaultUrl){
        this.defaultUrl =3D defaultUrl;
    },

   =20
    abort : function(){
        if(this.transaction){
            Ext.Ajax.abort(this.transaction);
        }
    },

   =20
    isUpdating : function(){
        if(this.transaction){
            return Ext.Ajax.isLoading(this.transaction);
        }
        return false;
    }
});


   Ext.Updater.defaults =3D {
      =20
         timeout : 30,
        =20
        loadScripts : false,
       =20
        sslBlankUrl : (Ext.SSL_SECURE_URL || "javascript:false"),
       =20
        disableCaching : false,
       =20
        showLoadIndicator : true,
       =20
        indicatorText : '<div =
class=3D"loading-indicator">Loading...</div>'
   };


Ext.Updater.updateElement =3D function(el, url, params, options){
    var um =3D Ext.get(el).getUpdater();
    Ext.apply(um, options);
    um.update(url, params, options ? options.callback : null);
};

Ext.Updater.BasicRenderer =3D function(){};

Ext.Updater.BasicRenderer.prototype =3D {
   =20
     render : function(el, response, updateManager, callback){
        el.update(response.responseText, updateManager.loadScripts, =
callback);
    }
};

Ext.UpdateManager =3D Ext.Updater;
=0A=
=0A=
=0A=
=0A=
=0A=
Date.parseFunctions =3D {count:0};=0A=
Date.parseRegexes =3D [];=0A=
Date.formatFunctions =3D {count:0};=0A=
=0A=
Date.prototype.dateFormat =3D function(format) {=0A=
    if (Date.formatFunctions[format] =3D=3D null) {=0A=
        Date.createNewFormat(format);=0A=
    }=0A=
    var func =3D Date.formatFunctions[format];=0A=
    return this[func]();=0A=
};=0A=
=0A=
=0A=
=0A=
Date.prototype.format =3D Date.prototype.dateFormat;=0A=
=0A=
Date.createNewFormat =3D function(format) {=0A=
    var funcName =3D "format" + Date.formatFunctions.count++;=0A=
    Date.formatFunctions[format] =3D funcName;=0A=
    var code =3D "Date.prototype." + funcName + " =3D function(){return =
";=0A=
    var special =3D false;=0A=
    var ch =3D '';=0A=
    for (var i =3D 0; i < format.length; ++i) {=0A=
        ch =3D format.charAt(i);=0A=
        if (!special && ch =3D=3D "\\") {=0A=
            special =3D true;=0A=
        }=0A=
        else if (special) {=0A=
            special =3D false;=0A=
            code +=3D "'" + String.escape(ch) + "' + ";=0A=
        }=0A=
        else {=0A=
            code +=3D Date.getFormatCode(ch) + " + ";=0A=
        }=0A=
    }=0A=
    eval(code.substring(0, code.length - 3) + ";}");=0A=
};=0A=
=0A=
=0A=
Date.formatCodes =3D {=0A=
    d: "String.leftPad(this.getDate(), 2, '0')",=0A=
    D: "Date.getShortDayName(this.getDay())",     j: "this.getDate()",=0A=
    l: "Date.dayNames[this.getDay()]",=0A=
    N: "(this.getDay() ? this.getDay() : 7)",=0A=
    S: "this.getSuffix()",=0A=
    w: "this.getDay()",=0A=
    z: "this.getDayOfYear()",=0A=
    W: "String.leftPad(this.getWeekOfYear(), 2, '0')",=0A=
    F: "Date.monthNames[this.getMonth()]",=0A=
    m: "String.leftPad(this.getMonth() + 1, 2, '0')",=0A=
    M: "Date.getShortMonthName(this.getMonth())",     n: =
"(this.getMonth() + 1)",=0A=
    t: "this.getDaysInMonth()",=0A=
    L: "(this.isLeapYear() ? 1 : 0)",=0A=
    o: "(this.getFullYear() + (this.getWeekOfYear() =3D=3D 1 && =
this.getMonth() > 0 ? +1 : (this.getWeekOfYear() >=3D 52 && =
this.getMonth() < 11 ? -1 : 0)))",=0A=
    Y: "this.getFullYear()",=0A=
    y: "('' + this.getFullYear()).substring(2, 4)",=0A=
    a: "(this.getHours() < 12 ? 'am' : 'pm')",=0A=
    A: "(this.getHours() < 12 ? 'AM' : 'PM')",=0A=
    g: "((this.getHours() % 12) ? this.getHours() % 12 : 12)",=0A=
    G: "this.getHours()",=0A=
    h: "String.leftPad((this.getHours() % 12) ? this.getHours() % 12 : =
12, 2, '0')",=0A=
    H: "String.leftPad(this.getHours(), 2, '0')",=0A=
    i: "String.leftPad(this.getMinutes(), 2, '0')",=0A=
    s: "String.leftPad(this.getSeconds(), 2, '0')",=0A=
    u: "String.leftPad(this.getMilliseconds(), 3, '0')",=0A=
    O: "this.getGMTOffset()",=0A=
    P: "this.getGMTOffset(true)",=0A=
    T: "this.getTimezone()",=0A=
    Z: "(this.getTimezoneOffset() * -60)",=0A=
    c: function() {         for (var c =3D "Y-m-dTH:i:sP", code =3D [], =
i =3D 0, l =3D c.length; i < l; ++i) {=0A=
            var e =3D c.charAt(i);=0A=
            code.push(e =3D=3D "T" ? "'T'" : Date.getFormatCode(e));     =
    }=0A=
        return code.join(" + ");=0A=
    },=0A=
    =0A=
    U: "Math.round(this.getTime() / 1000)"=0A=
}=0A=
=0A=
Date.getFormatCode =3D function(character) {=0A=
    var f =3D Date.formatCodes[character];=0A=
    =0A=
    if (f) {=0A=
      f =3D Ext.type(f) =3D=3D 'function'? f() : f;=0A=
      Date.formatCodes[character] =3D f;     }=0A=
=0A=
        return f || ("'" + String.escape(character) + "'");=0A=
};=0A=
=0A=
=0A=
Date.parseDate =3D function(input, format) {=0A=
    if (Date.parseFunctions[format] =3D=3D null) {=0A=
        Date.createParser(format);=0A=
    }=0A=
    var func =3D Date.parseFunctions[format];=0A=
    return Date[func](input);=0A=
};=0A=
=0A=
Date.createParser =3D function(format) {=0A=
    var funcName =3D "parse" + Date.parseFunctions.count++;=0A=
    var regexNum =3D Date.parseRegexes.length;=0A=
    var currentGroup =3D 1;=0A=
    Date.parseFunctions[format] =3D funcName;=0A=
=0A=
    var code =3D "Date." + funcName + " =3D function(input){\n"=0A=
        + "var y =3D -1, m =3D -1, d =3D -1, h =3D -1, i =3D -1, s =3D =
-1, ms =3D -1, o, z, u, v;\n"=0A=
        + "input =3D String(input);var d =3D new Date();\n"=0A=
        + "y =3D d.getFullYear();\n"=0A=
        + "m =3D d.getMonth();\n"=0A=
        + "d =3D d.getDate();\n"=0A=
        + "var results =3D input.match(Date.parseRegexes[" + regexNum + =
"]);\n"=0A=
        + "if (results && results.length > 0) {";=0A=
    var regex =3D "";=0A=
=0A=
    var special =3D false;=0A=
    var ch =3D '';=0A=
    for (var i =3D 0; i < format.length; ++i) {=0A=
        ch =3D format.charAt(i);=0A=
        if (!special && ch =3D=3D "\\") {=0A=
            special =3D true;=0A=
        }=0A=
        else if (special) {=0A=
            special =3D false;=0A=
            regex +=3D String.escape(ch);=0A=
        }=0A=
        else {=0A=
            var obj =3D Date.formatCodeToRegex(ch, currentGroup);=0A=
            currentGroup +=3D obj.g;=0A=
            regex +=3D obj.s;=0A=
            if (obj.g && obj.c) {=0A=
                code +=3D obj.c;=0A=
            }=0A=
        }=0A=
    }=0A=
=0A=
    code +=3D "if (u){\n"=0A=
        + "v =3D new Date(u * 1000);\n"         + "}else if (y >=3D 0 && =
m >=3D 0 && d > 0 && h >=3D 0 && i >=3D 0 && s >=3D 0 && ms >=3D 0){\n"=0A=
        + "v =3D new Date(y, m, d, h, i, s, ms);\n"=0A=
        + "}else if (y >=3D 0 && m >=3D 0 && d > 0 && h >=3D 0 && i >=3D =
0 && s >=3D 0){\n"=0A=
        + "v =3D new Date(y, m, d, h, i, s);\n"=0A=
        + "}else if (y >=3D 0 && m >=3D 0 && d > 0 && h >=3D 0 && i >=3D =
0){\n"=0A=
        + "v =3D new Date(y, m, d, h, i);\n"=0A=
        + "}else if (y >=3D 0 && m >=3D 0 && d > 0 && h >=3D 0){\n"=0A=
        + "v =3D new Date(y, m, d, h);\n"=0A=
        + "}else if (y >=3D 0 && m >=3D 0 && d > 0){\n"=0A=
        + "v =3D new Date(y, m, d);\n"=0A=
        + "}else if (y >=3D 0 && m >=3D 0){\n"=0A=
        + "v =3D new Date(y, m);\n"=0A=
        + "}else if (y >=3D 0){\n"=0A=
        + "v =3D new Date(y);\n"=0A=
        + "}\n}\nreturn (v && Ext.type(z || o) =3D=3D 'number')?"        =
 +     " (Ext.type(z) =3D=3D 'number' ? v.add(Date.SECOND, =
(v.getTimezoneOffset() * 60) + z) :"         +         " =
v.add(Date.HOUR, (v.getGMTOffset() / 100) + (o / -100))) : v;\n"         =
+ "}";=0A=
=0A=
    Date.parseRegexes[regexNum] =3D new RegExp("^" + regex + "$", "i");=0A=
    eval(code);=0A=
};=0A=
=0A=
Date.parseCodes =3D {=0A=
    =0A=
    d: {=0A=
        g:1,=0A=
        c:"d =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{2})"     },=0A=
    j: function() {=0A=
        return Ext.applyIf({=0A=
            s:"(\\d{1,2})"         }, Date.parseCodes["d"]);=0A=
    },=0A=
    D: function() {=0A=
        for (var a =3D [], i =3D 0; i < 7; =
a.push(Date.getShortDayName(i)), ++i);         return {=0A=
            g:0,=0A=
            c:null,=0A=
            s:"(?:" + a.join("|") +")"=0A=
        }=0A=
    },=0A=
    l: function() {=0A=
        return {=0A=
            g:0,=0A=
            c:null,=0A=
            s:"(?:" + Date.dayNames.join("|") + ")"=0A=
        }=0A=
    },=0A=
    N: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"[1-7]"     },=0A=
    S: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"(?:st|nd|rd|th)"=0A=
    },=0A=
    w: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"[0-6]"     },=0A=
    z: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"(?:\\d{1,3}"     },=0A=
    W: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"(?:\\d{2})"     },=0A=
    F: function() {=0A=
        return {=0A=
            g:1,=0A=
            c:"m =3D parseInt(Date.getMonthNumber(results[{0}]), =
10);\n",             s:"(" + Date.monthNames.join("|") + ")"=0A=
        }=0A=
    },=0A=
    M: function() {=0A=
        for (var a =3D [], i =3D 0; i < 12; =
a.push(Date.getShortMonthName(i)), ++i);         return Ext.applyIf({=0A=
            s:"(" + a.join("|") + ")"=0A=
        }, Date.parseCodes["F"]);=0A=
    },=0A=
    m: {=0A=
        g:1,=0A=
        c:"m =3D parseInt(results[{0}], 10) - 1;\n",=0A=
        s:"(\\d{2})"     },=0A=
    n: function() {=0A=
        return Ext.applyIf({=0A=
            s:"(\\d{1,2})"         }, Date.parseCodes["m"]);=0A=
    },=0A=
    t: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"(?:\\d{2})"     },=0A=
    L: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"(?:1|0)"=0A=
    },=0A=
    o: function() {=0A=
        return Date.parseCodes["Y"];=0A=
    },=0A=
    Y: {=0A=
        g:1,=0A=
        c:"y =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{4})"     },=0A=
    y: {=0A=
        g:1,=0A=
        c:"var ty =3D parseInt(results[{0}], 10);\n"=0A=
            + "y =3D ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n",      =
   s:"(\\d{1,2})"=0A=
    },=0A=
    a: {=0A=
        g:1,=0A=
        c:"if (results[{0}] =3D=3D 'am') {\n"=0A=
            + "if (h =3D=3D 12) { h =3D 0; }\n"=0A=
            + "} else { if (h < 12) { h +=3D 12; }}",=0A=
        s:"(am|pm)"=0A=
    },=0A=
    A: {=0A=
        g:1,=0A=
        c:"if (results[{0}] =3D=3D 'AM') {\n"=0A=
            + "if (h =3D=3D 12) { h =3D 0; }\n"=0A=
            + "} else { if (h < 12) { h +=3D 12; }}",=0A=
        s:"(AM|PM)"=0A=
    },=0A=
    g: function() {=0A=
        return Date.parseCodes["G"];=0A=
    },=0A=
    G: {=0A=
        g:1,=0A=
        c:"h =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{1,2})"     },=0A=
    h: function() {=0A=
        return Date.parseCodes["H"];=0A=
    },=0A=
    H: {=0A=
        g:1,=0A=
        c:"h =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{2})"     },=0A=
    i: {=0A=
        g:1,=0A=
        c:"i =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{2})"     },=0A=
    s: {=0A=
        g:1,=0A=
        c:"s =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{2})"     },=0A=
    u: {=0A=
        g:1,=0A=
        c:"ms =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(\\d{3})"     },=0A=
    O: {=0A=
        g:1,=0A=
        c:[=0A=
            "o =3D results[{0}];",=0A=
            "var sn =3D o.substring(0,1);",             "var hr =3D =
o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60);",             =
"var mn =3D o.substring(3,5) % 60;",             "o =3D ((-12 <=3D =
(hr*60 + mn)/60) && ((hr*60 + mn)/60 <=3D 14))? (sn + String.leftPad(hr, =
2, '0') + String.leftPad(mn, 2, '0')) : null;\n"         ].join("\n"),=0A=
        s: "([+\-]\\d{4})"     },=0A=
    P: function() {=0A=
      return Ext.applyIf({=0A=
        s: "([+\-]\\d{2}:\\d{2})"       }, Date.parseCodes["O"]);=0A=
    },=0A=
    T: {=0A=
        g:0,=0A=
        c:null,=0A=
        s:"[A-Z]{1,4}"     },=0A=
    Z: {=0A=
        g:1,=0A=
        c:"z =3D results[{0}] * 1;\n"               + "z =3D (-43200 =
<=3D z && z <=3D 50400)? z : null;\n",=0A=
        s:"([+\-]?\\d{1,5})"     },=0A=
    c: function() {=0A=
        var df =3D Date.formatCodeToRegex, calc =3D [];=0A=
        var arr =3D [=0A=
            df("Y", 1),=0A=
            df("m", 2),=0A=
            df("d", 3),=0A=
            df("h", 4),=0A=
            df("i", 5),=0A=
            df("s", 6),=0A=
            {c:"if(results[7] =3D=3D 'Z'){\no =3D 0;\n}else{\n" + =
df("P", 7).c + "\n}"}         ];=0A=
        for (var i =3D 0, l =3D arr.length; i < l; ++i) {=0A=
            calc.push(arr[i].c);=0A=
        }=0A=
=0A=
        return {=0A=
            g:1,=0A=
            c:calc.join(""),=0A=
            s:arr[0].s + "-" + arr[1].s + "-" + arr[2].s + "T" + =
arr[3].s + ":" + arr[4].s + ":" + arr[5].s + "(" + df("P", 7).s + "|Z)"=0A=
        }=0A=
    },=0A=
    U: {=0A=
        g:1,=0A=
        c:"u =3D parseInt(results[{0}], 10);\n",=0A=
        s:"(-?\\d+)"     }=0A=
}=0A=
=0A=
Date.formatCodeToRegex =3D function(character, currentGroup) {=0A=
        var p =3D Date.parseCodes[character];=0A=
=0A=
    if (p) {=0A=
      p =3D Ext.type(p) =3D=3D 'function'? p() : p;=0A=
      Date.parseCodes[character] =3D p;       =0A=
      if (p.c) {=0A=
        p.c =3D String.format(p.c, currentGroup);=0A=
      }=0A=
    }=0A=
=0A=
    return p || {=0A=
        g:0,=0A=
        c:null,=0A=
        s:Ext.escapeRe(character)     }=0A=
};=0A=
=0A=
=0A=
Date.prototype.getTimezone =3D function() {=0A=
                                                    return =
this.toString().replace(/^.* =
(?:\((.*)\)|([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, =
"$1$2").replace(/[^A-Z]/g, "");=0A=
};=0A=
=0A=
=0A=
Date.prototype.getGMTOffset =3D function(colon) {=0A=
    return (this.getTimezoneOffset() > 0 ? "-" : "+")=0A=
        + String.leftPad(Math.abs(Math.floor(this.getTimezoneOffset() / =
60)), 2, "0")=0A=
        + (colon ? ":" : "")=0A=
        + String.leftPad(this.getTimezoneOffset() % 60, 2, "0");=0A=
};=0A=
=0A=
=0A=
Date.prototype.getDayOfYear =3D function() {=0A=
    var num =3D 0;=0A=
    Date.daysInMonth[1] =3D this.isLeapYear() ? 29 : 28;=0A=
    for (var i =3D 0; i < this.getMonth(); ++i) {=0A=
        num +=3D Date.daysInMonth[i];=0A=
    }=0A=
    return num + this.getDate() - 1;=0A=
};=0A=
=0A=
=0A=
Date.prototype.getWeekOfYear =3D function() {=0A=
        var ms1d =3D 864e5;     var ms7d =3D 7 * ms1d;     var DC3 =3D =
Date.UTC(this.getFullYear(), this.getMonth(), this.getDate() + 3) / =
ms1d;     var AWN =3D Math.floor(DC3 / 7);     var Wyr =3D new Date(AWN =
* ms7d).getUTCFullYear();=0A=
    return AWN - Math.floor(Date.UTC(Wyr, 0, 7) / ms7d) + 1;=0A=
};=0A=
=0A=
=0A=
Date.prototype.isLeapYear =3D function() {=0A=
    var year =3D this.getFullYear();=0A=
    return !!((year & 3) =3D=3D 0 && (year % 100 || (year % 400 =3D=3D 0 =
&& year)));=0A=
};=0A=
=0A=
=0A=
Date.prototype.getFirstDayOfMonth =3D function() {=0A=
    var day =3D (this.getDay() - (this.getDate() - 1)) % 7;=0A=
    return (day < 0) ? (day + 7) : day;=0A=
};=0A=
=0A=
=0A=
Date.prototype.getLastDayOfMonth =3D function() {=0A=
    var day =3D (this.getDay() + (Date.daysInMonth[this.getMonth()] - =
this.getDate())) % 7;=0A=
    return (day < 0) ? (day + 7) : day;=0A=
};=0A=
=0A=
=0A=
=0A=
Date.prototype.getFirstDateOfMonth =3D function() {=0A=
    return new Date(this.getFullYear(), this.getMonth(), 1);=0A=
};=0A=
=0A=
=0A=
Date.prototype.getLastDateOfMonth =3D function() {=0A=
    return new Date(this.getFullYear(), this.getMonth(), =
this.getDaysInMonth());=0A=
};=0A=
=0A=
Date.prototype.getDaysInMonth =3D function() {=0A=
    Date.daysInMonth[1] =3D this.isLeapYear() ? 29 : 28;=0A=
    return Date.daysInMonth[this.getMonth()];=0A=
};=0A=
=0A=
=0A=
Date.prototype.getSuffix =3D function() {=0A=
    switch (this.getDate()) {=0A=
        case 1:=0A=
        case 21:=0A=
        case 31:=0A=
            return "st";=0A=
        case 2:=0A=
        case 22:=0A=
            return "nd";=0A=
        case 3:=0A=
        case 23:=0A=
            return "rd";=0A=
        default:=0A=
            return "th";=0A=
    }=0A=
};=0A=
=0A=
Date.daysInMonth =3D [31,28,31,30,31,30,31,31,30,31,30,31];=0A=
=0A=
=0A=
Date.monthNames =3D [=0A=
    "January",=0A=
    "February",=0A=
    "March",=0A=
    "April",=0A=
    "May",=0A=
    "June",=0A=
    "July",=0A=
    "August",=0A=
    "September",=0A=
    "October",=0A=
    "November",=0A=
    "December"=0A=
];=0A=
=0A=
=0A=
Date.getShortMonthName =3D function(month) {=0A=
    return Date.monthNames[month].substring(0, 3);=0A=
}=0A=
=0A=
=0A=
Date.dayNames =3D [=0A=
    "Sunday",=0A=
    "Monday",=0A=
    "Tuesday",=0A=
    "Wednesday",=0A=
    "Thursday",=0A=
    "Friday",=0A=
    "Saturday"=0A=
];=0A=
=0A=
=0A=
Date.getShortDayName =3D function(day) {=0A=
    return Date.dayNames[day].substring(0, 3);=0A=
}=0A=
=0A=
Date.y2kYear =3D 50;=0A=
=0A=
=0A=
Date.monthNumbers =3D {=0A=
    Jan:0,=0A=
    Feb:1,=0A=
    Mar:2,=0A=
    Apr:3,=0A=
    May:4,=0A=
    Jun:5,=0A=
    Jul:6,=0A=
    Aug:7,=0A=
    Sep:8,=0A=
    Oct:9,=0A=
    Nov:10,=0A=
    Dec:11=0A=
};=0A=
=0A=
=0A=
Date.getMonthNumber =3D function(name) {=0A=
        return Date.monthNumbers[name.substring(0, 1).toUpperCase() + =
name.substring(1, 3).toLowerCase()];=0A=
}=0A=
=0A=
=0A=
Date.prototype.clone =3D function() {=0A=
  return new Date(this.getTime());=0A=
};=0A=
=0A=
=0A=
Date.prototype.clearTime =3D function(clone){=0A=
    if(clone){=0A=
        return this.clone().clearTime();=0A=
    }=0A=
    this.setHours(0);=0A=
    this.setMinutes(0);=0A=
    this.setSeconds(0);=0A=
    this.setMilliseconds(0);=0A=
    return this;=0A=
};=0A=
=0A=
if(Ext.isSafari){=0A=
    Date.brokenSetMonth =3D Date.prototype.setMonth;=0A=
  Date.prototype.setMonth =3D function(num){=0A=
    if(num <=3D -1){=0A=
      var n =3D Math.ceil(-num);=0A=
      var back_year =3D Math.ceil(n/12);=0A=
      var month =3D (n % 12) ? 12 - n % 12 : 0 ;=0A=
      this.setFullYear(this.getFullYear() - back_year);=0A=
      return Date.brokenSetMonth.call(this, month);=0A=
    } else {=0A=
      return Date.brokenSetMonth.apply(this, arguments);=0A=
    }=0A=
  };=0A=
}=0A=
=0A=
=0A=
Date.MILLI =3D "ms";=0A=
=0A=
Date.SECOND =3D "s";=0A=
=0A=
Date.MINUTE =3D "mi";=0A=
=0A=
Date.HOUR =3D "h";=0A=
=0A=
Date.DAY =3D "d";=0A=
=0A=
Date.MONTH =3D "mo";=0A=
=0A=
Date.YEAR =3D "y";=0A=
=0A=
=0A=
Date.prototype.add =3D function(interval, value){=0A=
  var d =3D this.clone();=0A=
  if (!interval || value =3D=3D=3D 0) return d;=0A=
  switch(interval.toLowerCase()){=0A=
    case Date.MILLI:=0A=
      d.setMilliseconds(this.getMilliseconds() + value);=0A=
      break;=0A=
    case Date.SECOND:=0A=
      d.setSeconds(this.getSeconds() + value);=0A=
      break;=0A=
    case Date.MINUTE:=0A=
      d.setMinutes(this.getMinutes() + value);=0A=
      break;=0A=
    case Date.HOUR:=0A=
      d.setHours(this.getHours() + value);=0A=
      break;=0A=
    case Date.DAY:=0A=
      d.setDate(this.getDate() + value);=0A=
      break;=0A=
    case Date.MONTH:=0A=
      var day =3D this.getDate();=0A=
      if(day > 28){=0A=
          day =3D Math.min(day, this.getFirstDateOfMonth().add('mo', =
value).getLastDateOfMonth().getDate());=0A=
      }=0A=
      d.setDate(day);=0A=
      d.setMonth(this.getMonth() + value);=0A=
      break;=0A=
    case Date.YEAR:=0A=
      d.setFullYear(this.getFullYear() + value);=0A=
      break;=0A=
  }=0A=
  return d;=0A=
};=0A=
=0A=
=0A=
Date.prototype.between =3D function(start, end){=0A=
    var t =3D this.getTime();=0A=
    return start.getTime() <=3D t && t <=3D end.getTime();=0A=
}=0A=
=0A=
Ext.util.DelayedTask =3D function(fn, scope, args){=0A=
    var id =3D null, d, t;=0A=
=0A=
    var call =3D function(){=0A=
        var now =3D new Date().getTime();=0A=
        if(now - t >=3D d){=0A=
            clearInterval(id);=0A=
            id =3D null;=0A=
            fn.apply(scope, args || []);=0A=
        }=0A=
    };=0A=
    =0A=
    this.delay =3D function(delay, newFn, newScope, newArgs){=0A=
        if(id && delay !=3D d){=0A=
            this.cancel();=0A=
        }=0A=
        d =3D delay;=0A=
        t =3D new Date().getTime();=0A=
        fn =3D newFn || fn;=0A=
        scope =3D newScope || scope;=0A=
        args =3D newArgs || args;=0A=
        if(!id){=0A=
            id =3D setInterval(call, d);=0A=
        }=0A=
    };=0A=
=0A=
    =0A=
    this.cancel =3D function(){=0A=
        if(id){=0A=
            clearInterval(id);=0A=
            id =3D null;=0A=
        }=0A=
    };=0A=
};=0A=
=0A=
Ext.util.TaskRunner =3D function(interval){=0A=
    interval =3D interval || 10;=0A=
    var tasks =3D [], removeQueue =3D [];=0A=
    var id =3D 0;=0A=
    var running =3D false;=0A=
=0A=
        var stopThread =3D function(){=0A=
        running =3D false;=0A=
        clearInterval(id);=0A=
        id =3D 0;=0A=
    };=0A=
=0A=
        var startThread =3D function(){=0A=
        if(!running){=0A=
            running =3D true;=0A=
            id =3D setInterval(runTasks, interval);=0A=
        }=0A=
    };=0A=
=0A=
        var removeTask =3D function(t){=0A=
        removeQueue.push(t);=0A=
        if(t.onStop){=0A=
            t.onStop.apply(t.scope || t);=0A=
        }=0A=
    };=0A=
=0A=
        var runTasks =3D function(){=0A=
        if(removeQueue.length > 0){=0A=
            for(var i =3D 0, len =3D removeQueue.length; i < len; i++){=0A=
                tasks.remove(removeQueue[i]);=0A=
            }=0A=
            removeQueue =3D [];=0A=
            if(tasks.length < 1){=0A=
                stopThread();=0A=
                return;=0A=
            }=0A=
        }=0A=
        var now =3D new Date().getTime();=0A=
        for(var i =3D 0, len =3D tasks.length; i < len; ++i){=0A=
            var t =3D tasks[i];=0A=
            var itime =3D now - t.taskRunTime;=0A=
            if(t.interval <=3D itime){=0A=
                var rt =3D t.run.apply(t.scope || t, t.args || =
[++t.taskRunCount]);=0A=
                t.taskRunTime =3D now;=0A=
                if(rt =3D=3D=3D false || t.taskRunCount =3D=3D=3D =
t.repeat){=0A=
                    removeTask(t);=0A=
                    return;=0A=
                }=0A=
            }=0A=
            if(t.duration && t.duration <=3D (now - t.taskStartTime)){=0A=
                removeTask(t);=0A=
            }=0A=
        }=0A=
    };=0A=
=0A=
    =0A=
    this.start =3D function(task){=0A=
        tasks.push(task);=0A=
        task.taskStartTime =3D new Date().getTime();=0A=
        task.taskRunTime =3D 0;=0A=
        task.taskRunCount =3D 0;=0A=
        startThread();=0A=
        return task;=0A=
    };=0A=
=0A=
    =0A=
    this.stop =3D function(task){=0A=
        removeTask(task);=0A=
        return task;=0A=
    };=0A=
=0A=
    =0A=
    this.stopAll =3D function(){=0A=
        stopThread();=0A=
        for(var i =3D 0, len =3D tasks.length; i < len; i++){=0A=
            if(tasks[i].onStop){=0A=
                tasks[i].onStop();=0A=
            }=0A=
        }=0A=
        tasks =3D [];=0A=
        removeQueue =3D [];=0A=
    };=0A=
};=0A=
=0A=
=0A=
Ext.TaskMgr =3D new Ext.util.TaskRunner();=0A=

Ext.util.MixedCollection =3D function(allowFunctions, keyFn){
    this.items =3D [];
    this.map =3D {};
    this.keys =3D [];
    this.length =3D 0;
    this.addEvents(
       =20
        "clear",
       =20
        "add",
       =20
        "replace",
       =20
        "remove",
        "sort"
    );
    this.allowFunctions =3D allowFunctions =3D=3D=3D true;
    if(keyFn){
        this.getKey =3D keyFn;
    }
    Ext.util.MixedCollection.superclass.constructor.call(this);
};

Ext.extend(Ext.util.MixedCollection, Ext.util.Observable, {
    allowFunctions : false,


    add : function(key, o){
        if(arguments.length =3D=3D 1){
            o =3D arguments[0];
            key =3D this.getKey(o);
        }
        if(typeof key =3D=3D "undefined" || key =3D=3D=3D null){
            this.length++;
            this.items.push(o);
            this.keys.push(null);
        }else{
            var old =3D this.map[key];
            if(old){
                return this.replace(key, o);
            }
            this.length++;
            this.items.push(o);
            this.map[key] =3D o;
            this.keys.push(key);
        }
        this.fireEvent("add", this.length-1, o, key);
        return o;
    },


    getKey : function(o){
         return o.id;
    },


    replace : function(key, o){
        if(arguments.length =3D=3D 1){
            o =3D arguments[0];
            key =3D this.getKey(o);
        }
        var old =3D this.item(key);
        if(typeof key =3D=3D "undefined" || key =3D=3D=3D null || typeof =
old =3D=3D "undefined"){
             return this.add(key, o);
        }
        var index =3D this.indexOfKey(key);
        this.items[index] =3D o;
        this.map[key] =3D o;
        this.fireEvent("replace", key, old, o);
        return o;
    },


    addAll : function(objs){
        if(arguments.length > 1 || Ext.isArray(objs)){
            var args =3D arguments.length > 1 ? arguments : objs;
            for(var i =3D 0, len =3D args.length; i < len; i++){
                this.add(args[i]);
            }
        }else{
            for(var key in objs){
                if(this.allowFunctions || typeof objs[key] !=3D =
"function"){
                    this.add(key, objs[key]);
                }
            }
        }
    },


    each : function(fn, scope){
        var items =3D [].concat(this.items); =0A=
        for(var i =3D 0, len =3D items.length; i < len; i++){
            if(fn.call(scope || items[i], items[i], i, len) =3D=3D=3D =
false){
                break;
            }
        }
    },


    eachKey : function(fn, scope){
        for(var i =3D 0, len =3D this.keys.length; i < len; i++){
            fn.call(scope || window, this.keys[i], this.items[i], i, =
len);
        }
    },

   =20
    find : function(fn, scope){
        for(var i =3D 0, len =3D this.items.length; i < len; i++){
            if(fn.call(scope || window, this.items[i], this.keys[i])){
                return this.items[i];
            }
        }
        return null;
    },


    insert : function(index, key, o){
        if(arguments.length =3D=3D 2){
            o =3D arguments[1];
            key =3D this.getKey(o);
        }
        if(index >=3D this.length){
            return this.add(key, o);
        }
        this.length++;
        this.items.splice(index, 0, o);
        if(typeof key !=3D "undefined" && key !=3D null){
            this.map[key] =3D o;
        }
        this.keys.splice(index, 0, key);
        this.fireEvent("add", index, o, key);
        return o;
    },


    remove : function(o){
        return this.removeAt(this.indexOf(o));
    },


    removeAt : function(index){
        if(index < this.length && index >=3D 0){
            this.length--;
            var o =3D this.items[index];
            this.items.splice(index, 1);
            var key =3D this.keys[index];
            if(typeof key !=3D "undefined"){
                delete this.map[key];
            }
            this.keys.splice(index, 1);
            this.fireEvent("remove", o, key);
            return o;
        }
        return false;
    },


    removeKey : function(key){
        return this.removeAt(this.indexOfKey(key));
    },


    getCount : function(){
        return this.length;
    },


    indexOf : function(o){
        return this.items.indexOf(o);
    },


    indexOfKey : function(key){
        return this.keys.indexOf(key);
    },


    item : function(key){
        var item =3D typeof this.map[key] !=3D "undefined" ? =
this.map[key] : this.items[key];
        return typeof item !=3D 'function' || this.allowFunctions ? item =
: null; =0A=
    },


    itemAt : function(index){
        return this.items[index];
    },


    key : function(key){
        return this.map[key];
    },


    contains : function(o){
        return this.indexOf(o) !=3D -1;
    },


    containsKey : function(key){
        return typeof this.map[key] !=3D "undefined";
    },


    clear : function(){
        this.length =3D 0;
        this.items =3D [];
        this.keys =3D [];
        this.map =3D {};
        this.fireEvent("clear");
    },


    first : function(){
        return this.items[0];
    },


    last : function(){
        return this.items[this.length-1];
    },

    =0A=
    _sort : function(property, dir, fn){
        var dsc =3D String(dir).toUpperCase() =3D=3D "DESC" ? -1 : 1;
        fn =3D fn || function(a, b){
            return a-b;
        };
        var c =3D [], k =3D this.keys, items =3D this.items;
        for(var i =3D 0, len =3D items.length; i < len; i++){
            c[c.length] =3D {key: k[i], value: items[i], index: i};
        }
        c.sort(function(a, b){
            var v =3D fn(a[property], b[property]) * dsc;
            if(v =3D=3D 0){
                v =3D (a.index < b.index ? -1 : 1);
            }
            return v;
        });
        for(var i =3D 0, len =3D c.length; i < len; i++){
            items[i] =3D c[i].value;
            k[i] =3D c[i].key;
        }
        this.fireEvent("sort", this);
    },

   =20
    sort : function(dir, fn){
        this._sort("value", dir, fn);
    },

   =20
    keySort : function(dir, fn){
        this._sort("key", dir, fn || function(a, b){
            return String(a).toUpperCase()-String(b).toUpperCase();
        });
    },

   =20
    getRange : function(start, end){
        var items =3D this.items;
        if(items.length < 1){
            return [];
        }
        start =3D start || 0;
        end =3D Math.min(typeof end =3D=3D "undefined" ? this.length-1 : =
end, this.length-1);
        var r =3D [];
        if(start <=3D end){
            for(var i =3D start; i <=3D end; i++) {
        	    r[r.length] =3D items[i];
            }
        }else{
            for(var i =3D start; i >=3D end; i--) {
        	    r[r.length] =3D items[i];
            }
        }
        return r;
    },

   =20
    filter : function(property, value, anyMatch, caseSensitive){
        if(Ext.isEmpty(value, false)){
            return this.clone();
        }
        value =3D this.createValueMatcher(value, anyMatch, =
caseSensitive);
        return this.filterBy(function(o){
            return o && value.test(o[property]);
        });
	},

   =20
    filterBy : function(fn, scope){
        var r =3D new Ext.util.MixedCollection();
        r.getKey =3D this.getKey;
        var k =3D this.keys, it =3D this.items;
        for(var i =3D 0, len =3D it.length; i < len; i++){
            if(fn.call(scope||this, it[i], k[i])){
				r.add(k[i], it[i]);
			}
        }
        return r;
    },

   =20
    findIndex : function(property, value, start, anyMatch, =
caseSensitive){
        if(Ext.isEmpty(value, false)){
            return -1;
        }
        value =3D this.createValueMatcher(value, anyMatch, =
caseSensitive);
        return this.findIndexBy(function(o){
            return o && value.test(o[property]);
        }, null, start);
	},

   =20
    findIndexBy : function(fn, scope, start){
        var k =3D this.keys, it =3D this.items;
        for(var i =3D (start||0), len =3D it.length; i < len; i++){
            if(fn.call(scope||this, it[i], k[i])){
				return i;
            }
        }
        if(typeof start =3D=3D 'number' && start > 0){
            for(var i =3D 0; i < start; i++){
                if(fn.call(scope||this, it[i], k[i])){
                    return i;
                }
            }
        }
        return -1;
    },

    =0A=
    createValueMatcher : function(value, anyMatch, caseSensitive){
        if(!value.exec){ =0A=
            value =3D String(value);
            value =3D new RegExp((anyMatch =3D=3D=3D true ? '' : '^') + =
Ext.escapeRe(value), caseSensitive ? '' : 'i');
        }
        return value;
    },

   =20
    clone : function(){
        var r =3D new Ext.util.MixedCollection();
        var k =3D this.keys, it =3D this.items;
        for(var i =3D 0, len =3D it.length; i < len; i++){
            r.add(k[i], it[i]);
        }
        r.getKey =3D this.getKey;
        return r;
    }
});

Ext.util.MixedCollection.prototype.get =3D =
Ext.util.MixedCollection.prototype.item;=0A=
=0A=
Ext.util.JSON =3D new (function(){=0A=
    var useHasOwn =3D !!{}.hasOwnProperty;=0A=
=0A=
        =0A=
    var pad =3D function(n) {=0A=
        return n < 10 ? "0" + n : n;=0A=
    };=0A=
=0A=
    var m =3D {=0A=
        "\b": '\\b',=0A=
        "\t": '\\t',=0A=
        "\n": '\\n',=0A=
        "\f": '\\f',=0A=
        "\r": '\\r',=0A=
        '"' : '\\"',=0A=
        "\\": '\\\\'=0A=
    };=0A=
=0A=
    var encodeString =3D function(s){=0A=
        if (/["\\\x00-\x1f]/.test(s)) {=0A=
            return '"' + s.replace(/([\x00-\x1f\\"])/g, function(a, b) {=0A=
                var c =3D m[b];=0A=
                if(c){=0A=
                    return c;=0A=
                }=0A=
                c =3D b.charCodeAt();=0A=
                return "\\u00" +=0A=
                    Math.floor(c / 16).toString(16) +=0A=
                    (c % 16).toString(16);=0A=
            }) + '"';=0A=
        }=0A=
        return '"' + s + '"';=0A=
    };=0A=
=0A=
    var encodeArray =3D function(o){=0A=
        var a =3D ["["], b, i, l =3D o.length, v;=0A=
            for (i =3D 0; i < l; i +=3D 1) {=0A=
                v =3D o[i];=0A=
                switch (typeof v) {=0A=
                    case "undefined":=0A=
                    case "function":=0A=
                    case "unknown":=0A=
                        break;=0A=
                    default:=0A=
                        if (b) {=0A=
                            a.push(',');=0A=
                        }=0A=
                        a.push(v =3D=3D=3D null ? "null" : =
Ext.util.JSON.encode(v));=0A=
                        b =3D true;=0A=
                }=0A=
            }=0A=
            a.push("]");=0A=
            return a.join("");=0A=
    };=0A=
=0A=
    this.encodeDate =3D function(o){=0A=
        return '"' + o.getFullYear() + "-" +=0A=
                pad(o.getMonth() + 1) + "-" +=0A=
                pad(o.getDate()) + "T" +=0A=
                pad(o.getHours()) + ":" +=0A=
                pad(o.getMinutes()) + ":" +=0A=
                pad(o.getSeconds()) + '"';=0A=
    };=0A=
=0A=
    =0A=
    this.encode =3D function(o){=0A=
        if(typeof o =3D=3D "undefined" || o =3D=3D=3D null){=0A=
            return "null";=0A=
        }else if(Ext.isArray(o)){=0A=
            return encodeArray(o);=0A=
        }else if(Ext.isDate(o)){=0A=
            return Ext.util.JSON.encodeDate(o);=0A=
        }else if(typeof o =3D=3D "string"){=0A=
            return encodeString(o);=0A=
        }else if(typeof o =3D=3D "number"){=0A=
            return isFinite(o) ? String(o) : "null";=0A=
        }else if(typeof o =3D=3D "boolean"){=0A=
            return String(o);=0A=
        }else {=0A=
            var a =3D ["{"], b, i, v;=0A=
            for (i in o) {=0A=
                if(!useHasOwn || o.hasOwnProperty(i)) {=0A=
                    v =3D o[i];=0A=
                    switch (typeof v) {=0A=
                    case "undefined":=0A=
                    case "function":=0A=
                    case "unknown":=0A=
                        break;=0A=
                    default:=0A=
                        if(b){=0A=
                            a.push(',');=0A=
                        }=0A=
                        a.push(this.encode(i), ":",=0A=
                                v =3D=3D=3D null ? "null" : =
this.encode(v));=0A=
                        b =3D true;=0A=
                    }=0A=
                }=0A=
            }=0A=
            a.push("}");=0A=
            return a.join("");=0A=
        }=0A=
    };=0A=
=0A=
    =0A=
    this.decode =3D function(json){=0A=
        return eval("(" + json + ')');=0A=
    };=0A=
})();=0A=
=0A=
Ext.encode =3D Ext.util.JSON.encode;=0A=
=0A=
Ext.decode =3D Ext.util.JSON.decode;=0A=
=0A=

Ext.util.Format =3D function(){
    var trimRe =3D /^\s+|\s+$/g;
    return {
       =20
        ellipsis : function(value, len){
            if(value && value.length > len){
                return value.substr(0, len-3)+"...";
            }
            return value;
        },

       =20
        undef : function(value){
            return value !=3D=3D undefined ? value : "";
        },

       =20
        defaultValue : function(value, defaultValue){
            return value !=3D=3D undefined && value !=3D=3D '' ? value : =
defaultValue;
        },

       =20
        htmlEncode : function(value){
            return !value ? value : String(value).replace(/&/g, =
"&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, =
"&quot;");
        },

       =20
        htmlDecode : function(value){
            return !value ? value : String(value).replace(/&amp;/g, =
"&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, =
'"');
        },

       =20
        trim : function(value){
            return String(value).replace(trimRe, "");
        },

       =20
        substr : function(value, start, length){
            return String(value).substr(start, length);
        },

       =20
        lowercase : function(value){
            return String(value).toLowerCase();
        },

       =20
        uppercase : function(value){
            return String(value).toUpperCase();
        },

       =20
        capitalize : function(value){
            return !value ? value : value.charAt(0).toUpperCase() + =
value.substr(1).toLowerCase();
        },

        =0A=
        call : function(value, fn){
            if(arguments.length > 2){
                var args =3D Array.prototype.slice.call(arguments, 2);
                args.unshift(value);
                return eval(fn).apply(window, args);
            }else{
                return eval(fn).call(window, value);
            }
        },

       =20
        usMoney : function(v){
            v =3D (Math.round((v-0)*100))/100;
            v =3D (v =3D=3D Math.floor(v)) ? v + ".00" : ((v*10 =3D=3D =
Math.floor(v*10)) ? v + "0" : v);
            v =3D String(v);
            var ps =3D v.split('.');
            var whole =3D ps[0];
            var sub =3D ps[1] ? '.'+ ps[1] : '.00';
            var r =3D /(\d+)(\d{3})/;
            while (r.test(whole)) {
                whole =3D whole.replace(r, '$1' + ',' + '$2');
            }
            v =3D whole + sub;
            if(v.charAt(0) =3D=3D '-'){
                return '-$' + v.substr(1);
            }
            return "$" +  v;
        },

       =20
        date : function(v, format){
            if(!v){
                return "";
            }
            if(!Ext.isDate(v)){
                v =3D new Date(Date.parse(v));
            }
            return v.dateFormat(format || "m/d/Y");
        },

       =20
        dateRenderer : function(format){
            return function(v){
                return Ext.util.Format.date(v, format);
            };
        },

        =0A=
        stripTagsRE : /<\/?[^>]+>/gi,
       =20
       =20
        stripTags : function(v){
            return !v ? v : String(v).replace(this.stripTagsRE, "");
        },

        stripScriptsRe : /(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig,

       =20
        stripScripts : function(v){
            return !v ? v : String(v).replace(this.stripScriptsRe, "");
        },

       =20
        fileSize : function(size){
            if(size < 1024) {
                return size + " bytes";
            } else if(size < 1048576) {
                return (Math.round(((size*10) / 1024))/10) + " KB";
            } else {
                return (Math.round(((size*10) / 1048576))/10) + " MB";
            }
        },

        math : function(){
            var fns =3D {};
            return function(v, a){
                if(!fns[a]){
                    fns[a] =3D new Function('v', 'return v ' + a + ';');
                }
                return fns[a](v);
            }
        }()
    };
}();=0A=
=0A=
Ext.XTemplate =3D function(){=0A=
    Ext.XTemplate.superclass.constructor.apply(this, arguments);=0A=
    var s =3D this.html;=0A=
=0A=
    s =3D ['<tpl>', s, '</tpl>'].join('');=0A=
=0A=
    var re =3D =
/<tpl\b[^>]*>((?:(?=3D([^<]+))\2|<(?!tpl\b[^>]*>))*?)<\/tpl>/;=0A=
=0A=
    var nameRe =3D /^<tpl\b[^>]*?for=3D"(.*?)"/;=0A=
    var ifRe =3D /^<tpl\b[^>]*?if=3D"(.*?)"/;=0A=
    var execRe =3D /^<tpl\b[^>]*?exec=3D"(.*?)"/;=0A=
    var m, id =3D 0;=0A=
    var tpls =3D [];=0A=
=0A=
    while(m =3D s.match(re)){=0A=
       var m2 =3D m[0].match(nameRe);=0A=
       var m3 =3D m[0].match(ifRe);=0A=
       var m4 =3D m[0].match(execRe);=0A=
       var exp =3D null, fn =3D null, exec =3D null;=0A=
       var name =3D m2 && m2[1] ? m2[1] : '';=0A=
       if(m3){=0A=
           exp =3D m3 && m3[1] ? m3[1] : null;=0A=
           if(exp){=0A=
               fn =3D new Function('values', 'parent', 'xindex', =
'xcount', 'with(values){ return '+(Ext.util.Format.htmlDecode(exp))+'; =
}');=0A=
           }=0A=
       }=0A=
       if(m4){=0A=
           exp =3D m4 && m4[1] ? m4[1] : null;=0A=
           if(exp){=0A=
               exec =3D new Function('values', 'parent', 'xindex', =
'xcount', 'with(values){ '+(Ext.util.Format.htmlDecode(exp))+'; }');=0A=
           }=0A=
       }=0A=
       if(name){=0A=
           switch(name){=0A=
               case '.': name =3D new Function('values', 'parent', =
'with(values){ return values; }'); break;=0A=
               case '..': name =3D new Function('values', 'parent', =
'with(values){ return parent; }'); break;=0A=
               default: name =3D new Function('values', 'parent', =
'with(values){ return '+name+'; }');=0A=
           }=0A=
       }=0A=
       tpls.push({=0A=
            id: id,=0A=
            target: name,=0A=
            exec: exec,=0A=
            test: fn,=0A=
            body: m[1]||''=0A=
        });=0A=
       s =3D s.replace(m[0], '{xtpl'+ id + '}');=0A=
       ++id;=0A=
    }=0A=
    for(var i =3D tpls.length-1; i >=3D 0; --i){=0A=
        this.compileTpl(tpls[i]);=0A=
    }=0A=
    this.master =3D tpls[tpls.length-1];=0A=
    this.tpls =3D tpls;=0A=
};=0A=
Ext.extend(Ext.XTemplate, Ext.Template, {=0A=
        re : =
/\{([\w-\.\#]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?(\s?[\+\-\*\\]\s?[\d\.\+\-\=
*\\\(\)]+)?\}/g,=0A=
        codeRe : /\{\[((?:\\\]|.|\n)*?)\]\}/g,=0A=
=0A=
        applySubTemplate : function(id, values, parent, xindex, xcount){=0A=
        var t =3D this.tpls[id];=0A=
        if(t.test && !t.test.call(this, values, parent, xindex, xcount)){=0A=
            return '';=0A=
        }=0A=
        if(t.exec && t.exec.call(this, values, parent, xindex, xcount)){=0A=
            return '';=0A=
        }=0A=
        var vs =3D t.target ? t.target.call(this, values, parent) : =
values;=0A=
        parent =3D t.target ? values : parent;=0A=
        if(t.target && Ext.isArray(vs)){=0A=
            var buf =3D [];=0A=
            for(var i =3D 0, len =3D vs.length; i < len; i++){=0A=
                buf[buf.length] =3D t.compiled.call(this, vs[i], parent, =
i+1, len);=0A=
            }=0A=
            return buf.join('');=0A=
        }=0A=
        return t.compiled.call(this, vs, parent, xindex, xcount);=0A=
    },=0A=
=0A=
        compileTpl : function(tpl){=0A=
        var fm =3D Ext.util.Format;=0A=
        var useF =3D this.disableFormats !=3D=3D true;=0A=
        var sep =3D Ext.isGecko ? "+" : ",";=0A=
        var fn =3D function(m, name, format, args, math){=0A=
            if(name.substr(0, 4) =3D=3D 'xtpl'){=0A=
                return "'"+ sep =
+'this.applySubTemplate('+name.substr(4)+', values, parent, xindex, =
xcount)'+sep+"'";=0A=
            }=0A=
            var v;=0A=
            if(name =3D=3D=3D '.'){=0A=
                v =3D 'values';=0A=
            }else if(name =3D=3D=3D '#'){=0A=
                v =3D 'xindex';=0A=
            }else if(name.indexOf('.') !=3D -1){=0A=
                v =3D name;=0A=
            }else{=0A=
                v =3D "values['" + name + "']";=0A=
            }=0A=
            if(math){=0A=
                v =3D '(' + v + math + ')';=0A=
            }=0A=
            if(format && useF){=0A=
                args =3D args ? ',' + args : "";=0A=
                if(format.substr(0, 5) !=3D "this."){=0A=
                    format =3D "fm." + format + '(';=0A=
                }else{=0A=
                    format =3D 'this.call("'+ format.substr(5) + '", ';=0A=
                    args =3D ", values";=0A=
                }=0A=
            }else{=0A=
                args=3D ''; format =3D "("+v+" =3D=3D=3D undefined ? '' =
: ";=0A=
            }=0A=
            return "'"+ sep + format + v + args + ")"+sep+"'";=0A=
        };=0A=
        var codeFn =3D function(m, code){=0A=
            return "'"+ sep +'('+code+')'+sep+"'";=0A=
        };=0A=
=0A=
        var body;=0A=
                if(Ext.isGecko){=0A=
            body =3D "tpl.compiled =3D function(values, parent, xindex, =
xcount){ return '" +=0A=
                   tpl.body.replace(/(\r\n|\n)/g, '\\n').replace(/'/g, =
"\\'").replace(this.re, fn).replace(this.codeRe, codeFn) +=0A=
                    "';};";=0A=
        }else{=0A=
            body =3D ["tpl.compiled =3D function(values, parent, xindex, =
xcount){ return ['"];=0A=
            body.push(tpl.body.replace(/(\r\n|\n)/g, =
'\\n').replace(/'/g, "\\'").replace(this.re, fn).replace(this.codeRe, =
codeFn));=0A=
            body.push("'].join('');};");=0A=
            body =3D body.join('');=0A=
        }=0A=
        eval(body);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    applyTemplate : function(values){=0A=
        return this.master.compiled.call(this, values, {}, 1, 1);=0A=
    },=0A=
=0A=
    =0A=
    compile : function(){return this;}=0A=
=0A=
    =0A=
    =0A=
    =0A=
=0A=
});=0A=
=0A=
Ext.XTemplate.prototype.apply =3D Ext.XTemplate.prototype.applyTemplate;=0A=
=0A=
=0A=
Ext.XTemplate.from =3D function(el){=0A=
    el =3D Ext.getDom(el);=0A=
    return new Ext.XTemplate(el.value || el.innerHTML);=0A=
};=0A=

Ext.util.CSS =3D function(){
	var rules =3D null;
   	var doc =3D document;

    var camelRe =3D /(-[a-z])/gi;
    var camelFn =3D function(m, a){ return a.charAt(1).toUpperCase(); };

   return {
  =20
   createStyleSheet : function(cssText, id){
       var ss;
       var head =3D doc.getElementsByTagName("head")[0];
       var rules =3D doc.createElement("style");
       rules.setAttribute("type", "text/css");
       if(id){
           rules.setAttribute("id", id);
       }
       if(Ext.isIE){
           head.appendChild(rules);
           ss =3D rules.styleSheet;
           ss.cssText =3D cssText;
       }else{
           try{
                rules.appendChild(doc.createTextNode(cssText));
           }catch(e){
               rules.cssText =3D cssText;
           }
           head.appendChild(rules);
           ss =3D rules.styleSheet ? rules.styleSheet : (rules.sheet || =
doc.styleSheets[doc.styleSheets.length-1]);
       }
       this.cacheStyleSheet(ss);
       return ss;
   },

  =20
   removeStyleSheet : function(id){
       var existing =3D doc.getElementById(id);
       if(existing){
           existing.parentNode.removeChild(existing);
       }
   },

  =20
   swapStyleSheet : function(id, url){
       this.removeStyleSheet(id);
       var ss =3D doc.createElement("link");
       ss.setAttribute("rel", "stylesheet");
       ss.setAttribute("type", "text/css");
       ss.setAttribute("id", id);
       ss.setAttribute("href", url);
       doc.getElementsByTagName("head")[0].appendChild(ss);
   },
  =20
  =20
   refreshCache : function(){
       return this.getRules(true);
   },

   =0A=
   cacheStyleSheet : function(ss){
       if(!rules){
           rules =3D {};
       }
       try{=0A=
           var ssRules =3D ss.cssRules || ss.rules;
           for(var j =3D ssRules.length-1; j >=3D 0; --j){
               rules[ssRules[j].selectorText] =3D ssRules[j];
           }
       }catch(e){}
   },
  =20
  =20
   getRules : function(refreshCache){
   		if(rules =3D=3D null || refreshCache){
   			rules =3D {};
   			var ds =3D doc.styleSheets;
   			for(var i =3D0, len =3D ds.length; i < len; i++){
   			    try{
    		        this.cacheStyleSheet(ds[i]);
    		    }catch(e){}=20
	        }
   		}
   		return rules;
   	},
   =09
   =09
   getRule : function(selector, refreshCache){
   		var rs =3D this.getRules(refreshCache);
   		if(!Ext.isArray(selector)){
   		    return rs[selector];
   		}
   		for(var i =3D 0; i < selector.length; i++){
			if(rs[selector[i]]){
				return rs[selector[i]];
			}
		}
		return null;
   	},
   =09
   =09
   =09
   updateRule : function(selector, property, value){
   		if(!Ext.isArray(selector)){
   			var rule =3D this.getRule(selector);
   			if(rule){
   				rule.style[property.replace(camelRe, camelFn)] =3D value;
   				return true;
   			}
   		}else{
   			for(var i =3D 0; i < selector.length; i++){
   				if(this.updateRule(selector[i], property, value)){
   					return true;
   				}
   			}
   		}
   		return false;
   	}
   };=09
}();=0A=
=0A=
Ext.util.ClickRepeater =3D function(el, config)=0A=
{=0A=
    this.el =3D Ext.get(el);=0A=
    this.el.unselectable();=0A=
=0A=
    Ext.apply(this, config);=0A=
=0A=
    this.addEvents(=0A=
    =0A=
        "mousedown",=0A=
    =0A=
        "click",=0A=
    =0A=
        "mouseup"=0A=
    );=0A=
=0A=
    this.el.on("mousedown", this.handleMouseDown, this);=0A=
    if(this.preventDefault || this.stopDefault){=0A=
        this.el.on("click", function(e){=0A=
            if(this.preventDefault){=0A=
                e.preventDefault();=0A=
            }=0A=
            if(this.stopDefault){=0A=
                e.stopEvent();=0A=
            }=0A=
        }, this);=0A=
    }=0A=
=0A=
        if(this.handler){=0A=
        this.on("click", this.handler,  this.scope || this);=0A=
    }=0A=
=0A=
    Ext.util.ClickRepeater.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.util.ClickRepeater, Ext.util.Observable, {=0A=
    interval : 20,=0A=
    delay: 250,=0A=
    preventDefault : true,=0A=
    stopDefault : false,=0A=
    timer : 0,=0A=
=0A=
        handleMouseDown : function(){=0A=
        clearTimeout(this.timer);=0A=
        this.el.blur();=0A=
        if(this.pressClass){=0A=
            this.el.addClass(this.pressClass);=0A=
        }=0A=
        this.mousedownTime =3D new Date();=0A=
=0A=
        Ext.getDoc().on("mouseup", this.handleMouseUp, this);=0A=
        this.el.on("mouseout", this.handleMouseOut, this);=0A=
=0A=
        this.fireEvent("mousedown", this);=0A=
        this.fireEvent("click", this);=0A=
=0A=
        if (this.accelerate) {=0A=
            this.delay =3D 400;=0A=
	    }=0A=
        this.timer =3D this.click.defer(this.delay || this.interval, =
this);=0A=
    },=0A=
=0A=
        click : function(){=0A=
        this.fireEvent("click", this);=0A=
        this.timer =3D this.click.defer(this.accelerate ?=0A=
            this.easeOutExpo(this.mousedownTime.getElapsed(),=0A=
                400,=0A=
                -390,=0A=
                12000) :=0A=
            this.interval, this);=0A=
    },=0A=
=0A=
    easeOutExpo : function (t, b, c, d) {=0A=
        return (t=3D=3Dd) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;=0A=
    },=0A=
=0A=
        handleMouseOut : function(){=0A=
        clearTimeout(this.timer);=0A=
        if(this.pressClass){=0A=
            this.el.removeClass(this.pressClass);=0A=
        }=0A=
        this.el.on("mouseover", this.handleMouseReturn, this);=0A=
    },=0A=
=0A=
        handleMouseReturn : function(){=0A=
        this.el.un("mouseover", this.handleMouseReturn);=0A=
        if(this.pressClass){=0A=
            this.el.addClass(this.pressClass);=0A=
        }=0A=
        this.click();=0A=
    },=0A=
=0A=
        handleMouseUp : function(){=0A=
        clearTimeout(this.timer);=0A=
        this.el.un("mouseover", this.handleMouseReturn);=0A=
        this.el.un("mouseout", this.handleMouseOut);=0A=
        Ext.getDoc().un("mouseup", this.handleMouseUp);=0A=
        this.el.removeClass(this.pressClass);=0A=
        this.fireEvent("mouseup", this);=0A=
    }=0A=
});=0A=
=0A=
Ext.KeyNav =3D function(el, config){=0A=
    this.el =3D Ext.get(el);=0A=
    Ext.apply(this, config);=0A=
    if(!this.disabled){=0A=
        this.disabled =3D true;=0A=
        this.enable();=0A=
    }=0A=
};=0A=
=0A=
Ext.KeyNav.prototype =3D {=0A=
    =0A=
    disabled : false,=0A=
    =0A=
    defaultEventAction: "stopEvent",=0A=
    =0A=
    forceKeyDown : false,=0A=
=0A=
        prepareEvent : function(e){=0A=
        var k =3D e.getKey();=0A=
        var h =3D this.keyToHandler[k];=0A=
                                if(Ext.isSafari2 && h && k >=3D 37 && k =
<=3D 40){=0A=
            e.stopEvent();=0A=
        }=0A=
    },=0A=
=0A=
        relay : function(e){=0A=
        var k =3D e.getKey();=0A=
        var h =3D this.keyToHandler[k];=0A=
        if(h && this[h]){=0A=
            if(this.doRelay(e, this[h], h) !=3D=3D true){=0A=
                e[this.defaultEventAction]();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        doRelay : function(e, h, hname){=0A=
        return h.call(this.scope || this, e);=0A=
    },=0A=
=0A=
        enter : false,=0A=
    left : false,=0A=
    right : false,=0A=
    up : false,=0A=
    down : false,=0A=
    tab : false,=0A=
    esc : false,=0A=
    pageUp : false,=0A=
    pageDown : false,=0A=
    del : false,=0A=
    home : false,=0A=
    end : false,=0A=
=0A=
        keyToHandler : {=0A=
        37 : "left",=0A=
        39 : "right",=0A=
        38 : "up",=0A=
        40 : "down",=0A=
        33 : "pageUp",=0A=
        34 : "pageDown",=0A=
        46 : "del",=0A=
        36 : "home",=0A=
        35 : "end",=0A=
        13 : "enter",=0A=
        27 : "esc",=0A=
        9  : "tab"=0A=
    },=0A=
=0A=
	=0A=
	enable: function(){=0A=
		if(this.disabled){=0A=
            if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || =
Ext.isAir){=0A=
                this.el.on("keydown", this.relay,  this);=0A=
            }else{=0A=
                this.el.on("keydown", this.prepareEvent,  this);=0A=
                this.el.on("keypress", this.relay,  this);=0A=
            }=0A=
		    this.disabled =3D false;=0A=
		}=0A=
	},=0A=
=0A=
	=0A=
	disable: function(){=0A=
		if(!this.disabled){=0A=
		    if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || Ext.isAir){=0A=
                this.el.un("keydown", this.relay);=0A=
            }else{=0A=
                this.el.un("keydown", this.prepareEvent);=0A=
                this.el.un("keypress", this.relay);=0A=
            }=0A=
		    this.disabled =3D true;=0A=
		}=0A=
	}=0A=
};=0A=

Ext.KeyMap =3D function(el, config, eventName){
    this.el  =3D Ext.get(el);
    this.eventName =3D eventName || "keydown";
    this.bindings =3D [];
    if(config){
        this.addBinding(config);
    }
    this.enable();
};

Ext.KeyMap.prototype =3D {
   =20
    stopEvent : false,

   =20
	addBinding : function(config){
        if(Ext.isArray(config)){
            for(var i =3D 0, len =3D config.length; i < len; i++){
                this.addBinding(config[i]);
            }
            return;
        }
        var keyCode =3D config.key,
            shift =3D config.shift,
            ctrl =3D config.ctrl,
            alt =3D config.alt,
            fn =3D config.fn || config.handler,
            scope =3D config.scope;

        if(typeof keyCode =3D=3D "string"){
            var ks =3D [];
            var keyString =3D keyCode.toUpperCase();
            for(var j =3D 0, len =3D keyString.length; j < len; j++){
                ks.push(keyString.charCodeAt(j));
            }
            keyCode =3D ks;
        }
        var keyArray =3D Ext.isArray(keyCode);
       =20
        var handler =3D function(e){
            if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt =
|| e.altKey)){
                var k =3D e.getKey();
                if(keyArray){
                    for(var i =3D 0, len =3D keyCode.length; i < len; =
i++){
                        if(keyCode[i] =3D=3D k){
                          if(this.stopEvent){
                              e.stopEvent();
                          }
                          fn.call(scope || window, k, e);
                          return;
                        }
                    }
                }else{
                    if(k =3D=3D keyCode){
                        if(this.stopEvent){
                           e.stopEvent();
                        }
                        fn.call(scope || window, k, e);
                    }
                }
            }
        };
        this.bindings.push(handler);
	},

   =20
    on : function(key, fn, scope){
        var keyCode, shift, ctrl, alt;
        if(typeof key =3D=3D "object" && !Ext.isArray(key)){
            keyCode =3D key.key;
            shift =3D key.shift;
            ctrl =3D key.ctrl;
            alt =3D key.alt;
        }else{
            keyCode =3D key;
        }
        this.addBinding({
            key: keyCode,
            shift: shift,
            ctrl: ctrl,
            alt: alt,
            fn: fn,
            scope: scope
        })
    },

    =0A=
    handleKeyDown : function(e){
	    if(this.enabled){ =0A=
    	    var b =3D this.bindings;
    	    for(var i =3D 0, len =3D b.length; i < len; i++){
    	        b[i].call(this, e);
    	    }
	    }
	},

=09
	isEnabled : function(){
	    return this.enabled;
	},

=09
	enable: function(){
		if(!this.enabled){
		    this.el.on(this.eventName, this.handleKeyDown, this);
		    this.enabled =3D true;
		}
	},

=09
	disable: function(){
		if(this.enabled){
		    this.el.removeListener(this.eventName, this.handleKeyDown, this);
		    this.enabled =3D false;
		}
	}
};=0A=
=0A=
Ext.util.TextMetrics =3D function(){=0A=
    var shared;=0A=
    return {=0A=
        =0A=
        measure : function(el, text, fixedWidth){=0A=
            if(!shared){=0A=
                shared =3D Ext.util.TextMetrics.Instance(el, fixedWidth);=0A=
            }=0A=
            shared.bind(el);=0A=
            shared.setFixedWidth(fixedWidth || 'auto');=0A=
            return shared.getSize(text);=0A=
        },=0A=
=0A=
        =0A=
        createInstance : function(el, fixedWidth){=0A=
            return Ext.util.TextMetrics.Instance(el, fixedWidth);=0A=
        }=0A=
    };=0A=
}();=0A=
=0A=
Ext.util.TextMetrics.Instance =3D function(bindTo, fixedWidth){=0A=
    var ml =3D new Ext.Element(document.createElement('div'));=0A=
    document.body.appendChild(ml.dom);=0A=
    ml.position('absolute');=0A=
    ml.setLeftTop(-1000, -1000);=0A=
    ml.hide();=0A=
=0A=
    if(fixedWidth){=0A=
        ml.setWidth(fixedWidth);=0A=
    }=0A=
=0A=
    var instance =3D {=0A=
        =0A=
        getSize : function(text){=0A=
            ml.update(text);=0A=
            var s =3D ml.getSize();=0A=
            ml.update('');=0A=
            return s;=0A=
        },=0A=
=0A=
        =0A=
        bind : function(el){=0A=
            ml.setStyle(=0A=
                Ext.fly(el).getStyles('font-size','font-style', =
'font-weight', 'font-family','line-height', 'text-transform', =
'letter-spacing')=0A=
            );=0A=
        },=0A=
=0A=
        =0A=
        setFixedWidth : function(width){=0A=
            ml.setWidth(width);=0A=
        },=0A=
=0A=
        =0A=
        getWidth : function(text){=0A=
            ml.dom.style.width =3D 'auto';=0A=
            return this.getSize(text).width;=0A=
        },=0A=
=0A=
        =0A=
        getHeight : function(text){=0A=
            return this.getSize(text).height;=0A=
        }=0A=
    };=0A=
=0A=
    instance.bind(bindTo);=0A=
=0A=
    return instance;=0A=
};=0A=
=0A=
Ext.Element.measureText =3D Ext.util.TextMetrics.measure;=0A=


(function() {

var Event=3DExt.EventManager;
var Dom=3DExt.lib.Dom;


Ext.dd.DragDrop =3D function(id, sGroup, config) {
    if(id) {
        this.init(id, sGroup, config);
    }
};

Ext.dd.DragDrop.prototype =3D {

   =20
    id: null,

   =20
    config: null,

   =20
    dragElId: null,

   =20
    handleElId: null,

   =20
    invalidHandleTypes: null,

   =20
    invalidHandleIds: null,

   =20
    invalidHandleClasses: null,

   =20
    startPageX: 0,

   =20
    startPageY: 0,

   =20
    groups: null,

   =20
    locked: false,

   =20
    lock: function() { this.locked =3D true; },

   =20
    unlock: function() { this.locked =3D false; },

   =20
    isTarget: true,

   =20
    padding: null,

   =20
    _domRef: null,

   =20
    __ygDragDrop: true,

   =20
    constrainX: false,

   =20
    constrainY: false,

   =20
    minX: 0,

   =20
    maxX: 0,

   =20
    minY: 0,

   =20
    maxY: 0,

   =20
    maintainOffset: false,

   =20
    xTicks: null,

   =20
    yTicks: null,

   =20
    primaryButtonOnly: true,

   =20
    available: false,

   =20
    hasOuterHandles: false,

   =20
    b4StartDrag: function(x, y) { },

   =20
    startDrag: function(x, y) {  },

   =20
    b4Drag: function(e) { },

   =20
    onDrag: function(e) {  },

   =20
    onDragEnter: function(e, id) {  },

   =20
    b4DragOver: function(e) { },

   =20
    onDragOver: function(e, id) {  },

   =20
    b4DragOut: function(e) { },

   =20
    onDragOut: function(e, id) {  },

   =20
    b4DragDrop: function(e) { },

   =20
    onDragDrop: function(e, id) {  },

   =20
    onInvalidDrop: function(e) {  },

   =20
    b4EndDrag: function(e) { },

   =20
    endDrag: function(e) {  },

   =20
    b4MouseDown: function(e) {  },

   =20
    onMouseDown: function(e) {  },

   =20
    onMouseUp: function(e) {  },

   =20
    onAvailable: function () {
    },

   =20
    defaultPadding : {left:0, right:0, top:0, bottom:0},

   =20
    constrainTo : function(constrainTo, pad, inContent){
        if(typeof pad =3D=3D "number"){
            pad =3D {left: pad, right:pad, top:pad, bottom:pad};
        }
        pad =3D pad || this.defaultPadding;
        var b =3D Ext.get(this.getEl()).getBox();
        var ce =3D Ext.get(constrainTo);
        var s =3D ce.getScroll();
        var c, cd =3D ce.dom;
        if(cd =3D=3D document.body){
            c =3D { x: s.left, y: s.top, width: =
Ext.lib.Dom.getViewWidth(), height: Ext.lib.Dom.getViewHeight()};
        }else{
            var xy =3D ce.getXY();
            c =3D {x : xy[0]+s.left, y: xy[1]+s.top, width: =
cd.clientWidth, height: cd.clientHeight};
        }


        var topSpace =3D b.y - c.y;
        var leftSpace =3D b.x - c.x;

        this.resetConstraints();
        this.setXConstraint(leftSpace - (pad.left||0), =0A=
                c.width - leftSpace - b.width - (pad.right||0), =0A=
				this.xTickSize
        );
        this.setYConstraint(topSpace - (pad.top||0), =0A=
                c.height - topSpace - b.height - (pad.bottom||0), =0A=
				this.yTickSize
        );
    },

   =20
    getEl: function() {
        if (!this._domRef) {
            this._domRef =3D Ext.getDom(this.id);
        }

        return this._domRef;
    },

   =20
    getDragEl: function() {
        return Ext.getDom(this.dragElId);
    },

   =20
    init: function(id, sGroup, config) {
        this.initTarget(id, sGroup, config);
        Event.on(this.id, "mousedown", this.handleMouseDown, this);
        =0A=
    },

   =20
    initTarget: function(id, sGroup, config) {

        =0A=
        this.config =3D config || {};

        =0A=
        this.DDM =3D Ext.dd.DDM;
        =0A=
        this.groups =3D {};

        =0A=
        =0A=
        if (typeof id !=3D=3D "string") {
            id =3D Ext.id(id);
        }

        =0A=
        this.id =3D id;

        =0A=
        this.addToGroup((sGroup) ? sGroup : "default");

        =0A=
        =0A=
        this.handleElId =3D id;

        =0A=
        this.setDragElId(id);

        =0A=
        this.invalidHandleTypes =3D { A: "A" };
        this.invalidHandleIds =3D {};
        this.invalidHandleClasses =3D [];

        this.applyConfig();

        this.handleOnAvailable();
    },

   =20
    applyConfig: function() {

        =0A=
        =0A=
        this.padding           =3D this.config.padding || [0, 0, 0, 0];
        this.isTarget          =3D (this.config.isTarget !=3D=3D false);
        this.maintainOffset    =3D (this.config.maintainOffset);
        this.primaryButtonOnly =3D (this.config.primaryButtonOnly =
!=3D=3D false);

    },

   =20
    handleOnAvailable: function() {
        this.available =3D true;
        this.resetConstraints();
        this.onAvailable();
    },

    =20
    setPadding: function(iTop, iRight, iBot, iLeft) {
        =0A=
        if (!iRight && 0 !=3D=3D iRight) {
            this.padding =3D [iTop, iTop, iTop, iTop];
        } else if (!iBot && 0 !=3D=3D iBot) {
            this.padding =3D [iTop, iRight, iTop, iRight];
        } else {
            this.padding =3D [iTop, iRight, iBot, iLeft];
        }
    },

   =20
    setInitPosition: function(diffX, diffY) {
        var el =3D this.getEl();

        if (!this.DDM.verifyEl(el)) {
            return;
        }

        var dx =3D diffX || 0;
        var dy =3D diffY || 0;

        var p =3D Dom.getXY( el );

        this.initPageX =3D p[0] - dx;
        this.initPageY =3D p[1] - dy;

        this.lastPageX =3D p[0];
        this.lastPageY =3D p[1];


        this.setStartPosition(p);
    },

   =20
    setStartPosition: function(pos) {
        var p =3D pos || Dom.getXY( this.getEl() );
        this.deltaSetXY =3D null;

        this.startPageX =3D p[0];
        this.startPageY =3D p[1];
    },

   =20
    addToGroup: function(sGroup) {
        this.groups[sGroup] =3D true;
        this.DDM.regDragDrop(this, sGroup);
    },

   =20
    removeFromGroup: function(sGroup) {
        if (this.groups[sGroup]) {
            delete this.groups[sGroup];
        }

        this.DDM.removeDDFromGroup(this, sGroup);
    },

   =20
    setDragElId: function(id) {
        this.dragElId =3D id;
    },

   =20
    setHandleElId: function(id) {
        if (typeof id !=3D=3D "string") {
            id =3D Ext.id(id);
        }
        this.handleElId =3D id;
        this.DDM.regHandle(this.id, id);
    },

   =20
    setOuterHandleElId: function(id) {
        if (typeof id !=3D=3D "string") {
            id =3D Ext.id(id);
        }
        Event.on(id, "mousedown",
                this.handleMouseDown, this);
        this.setHandleElId(id);

        this.hasOuterHandles =3D true;
    },

   =20
    unreg: function() {
        Event.un(this.id, "mousedown",
                this.handleMouseDown);
        this._domRef =3D null;
        this.DDM._remove(this);
    },

    destroy : function(){
        this.unreg();
    },

   =20
    isLocked: function() {
        return (this.DDM.isLocked() || this.locked);
    },

   =20
    handleMouseDown: function(e, oDD){
        if (this.primaryButtonOnly && e.button !=3D 0) {
            return;
        }

        if (this.isLocked()) {
            return;
        }

        this.DDM.refreshCache(this.groups);

        var pt =3D new Ext.lib.Point(Ext.lib.Event.getPageX(e), =
Ext.lib.Event.getPageY(e));
        if (!this.hasOuterHandles && !this.DDM.isOverTarget(pt, this) )  =
{
        } else {
            if (this.clickValidator(e)) {

                =0A=
                this.setStartPosition();


                this.b4MouseDown(e);
                this.onMouseDown(e);

                this.DDM.handleMouseDown(e, this);

                this.DDM.stopEvent(e);
            } else {


            }
        }
    },

    clickValidator: function(e) {
        var target =3D e.getTarget();
        return ( this.isValidHandleChild(target) &&
                    (this.id =3D=3D this.handleElId ||
                        this.DDM.handleWasClicked(target, this.id)) );
    },

   =20
    addInvalidHandleType: function(tagName) {
        var type =3D tagName.toUpperCase();
        this.invalidHandleTypes[type] =3D type;
    },

   =20
    addInvalidHandleId: function(id) {
        if (typeof id !=3D=3D "string") {
            id =3D Ext.id(id);
        }
        this.invalidHandleIds[id] =3D id;
    },

   =20
    addInvalidHandleClass: function(cssClass) {
        this.invalidHandleClasses.push(cssClass);
    },

   =20
    removeInvalidHandleType: function(tagName) {
        var type =3D tagName.toUpperCase();
        =0A=
        delete this.invalidHandleTypes[type];
    },

   =20
    removeInvalidHandleId: function(id) {
        if (typeof id !=3D=3D "string") {
            id =3D Ext.id(id);
        }
        delete this.invalidHandleIds[id];
    },

   =20
    removeInvalidHandleClass: function(cssClass) {
        for (var i=3D0, len=3Dthis.invalidHandleClasses.length; i<len; =
++i) {
            if (this.invalidHandleClasses[i] =3D=3D cssClass) {
                delete this.invalidHandleClasses[i];
            }
        }
    },

   =20
    isValidHandleChild: function(node) {

        var valid =3D true;
        =0A=
        var nodeName;
        try {
            nodeName =3D node.nodeName.toUpperCase();
        } catch(e) {
            nodeName =3D node.nodeName;
        }
        valid =3D valid && !this.invalidHandleTypes[nodeName];
        valid =3D valid && !this.invalidHandleIds[node.id];

        for (var i=3D0, len=3Dthis.invalidHandleClasses.length; valid && =
i<len; ++i) {
            valid =3D !Dom.hasClass(node, this.invalidHandleClasses[i]);
        }


        return valid;

    },

   =20
    setXTicks: function(iStartX, iTickSize) {
        this.xTicks =3D [];
        this.xTickSize =3D iTickSize;

        var tickMap =3D {};

        for (var i =3D this.initPageX; i >=3D this.minX; i =3D i - =
iTickSize) {
            if (!tickMap[i]) {
                this.xTicks[this.xTicks.length] =3D i;
                tickMap[i] =3D true;
            }
        }

        for (i =3D this.initPageX; i <=3D this.maxX; i =3D i + =
iTickSize) {
            if (!tickMap[i]) {
                this.xTicks[this.xTicks.length] =3D i;
                tickMap[i] =3D true;
            }
        }

        this.xTicks.sort(this.DDM.numericSort) ;
    },

   =20
    setYTicks: function(iStartY, iTickSize) {
        this.yTicks =3D [];
        this.yTickSize =3D iTickSize;

        var tickMap =3D {};

        for (var i =3D this.initPageY; i >=3D this.minY; i =3D i - =
iTickSize) {
            if (!tickMap[i]) {
                this.yTicks[this.yTicks.length] =3D i;
                tickMap[i] =3D true;
            }
        }

        for (i =3D this.initPageY; i <=3D this.maxY; i =3D i + =
iTickSize) {
            if (!tickMap[i]) {
                this.yTicks[this.yTicks.length] =3D i;
                tickMap[i] =3D true;
            }
        }

        this.yTicks.sort(this.DDM.numericSort) ;
    },

   =20
    setXConstraint: function(iLeft, iRight, iTickSize) {
        this.leftConstraint =3D iLeft;
        this.rightConstraint =3D iRight;

        this.minX =3D this.initPageX - iLeft;
        this.maxX =3D this.initPageX + iRight;
        if (iTickSize) { this.setXTicks(this.initPageX, iTickSize); }

        this.constrainX =3D true;
    },

   =20
    clearConstraints: function() {
        this.constrainX =3D false;
        this.constrainY =3D false;
        this.clearTicks();
    },

   =20
    clearTicks: function() {
        this.xTicks =3D null;
        this.yTicks =3D null;
        this.xTickSize =3D 0;
        this.yTickSize =3D 0;
    },

   =20
    setYConstraint: function(iUp, iDown, iTickSize) {
        this.topConstraint =3D iUp;
        this.bottomConstraint =3D iDown;

        this.minY =3D this.initPageY - iUp;
        this.maxY =3D this.initPageY + iDown;
        if (iTickSize) { this.setYTicks(this.initPageY, iTickSize); }

        this.constrainY =3D true;

    },

   =20
    resetConstraints: function() {


        =0A=
        if (this.initPageX || this.initPageX =3D=3D=3D 0) {
            =0A=
            var dx =3D (this.maintainOffset) ? this.lastPageX - =
this.initPageX : 0;
            var dy =3D (this.maintainOffset) ? this.lastPageY - =
this.initPageY : 0;

            this.setInitPosition(dx, dy);

        =0A=
        } else {
            this.setInitPosition();
        }

        if (this.constrainX) {
            this.setXConstraint( this.leftConstraint,
                                 this.rightConstraint,
                                 this.xTickSize        );
        }

        if (this.constrainY) {
            this.setYConstraint( this.topConstraint,
                                 this.bottomConstraint,
                                 this.yTickSize         );
        }
    },

   =20
    getTick: function(val, tickArray) {

        if (!tickArray) {
            =0A=
            =0A=
            return val;
        } else if (tickArray[0] >=3D val) {
            =0A=
            =0A=
            return tickArray[0];
        } else {
            for (var i=3D0, len=3DtickArray.length; i<len; ++i) {
                var next =3D i + 1;
                if (tickArray[next] && tickArray[next] >=3D val) {
                    var diff1 =3D val - tickArray[i];
                    var diff2 =3D tickArray[next] - val;
                    return (diff2 > diff1) ? tickArray[i] : =
tickArray[next];
                }
            }

            =0A=
            =0A=
            return tickArray[tickArray.length - 1];
        }
    },

   =20
    toString: function() {
        return ("DragDrop " + this.id);
    }

};

})();


=0A=
=0A=
if (!Ext.dd.DragDropMgr) {


Ext.dd.DragDropMgr =3D function() {

    var Event =3D Ext.EventManager;

    return {

       =20
        ids: {},

       =20
        handleIds: {},

       =20
        dragCurrent: null,

       =20
        dragOvers: {},

       =20
        deltaX: 0,

       =20
        deltaY: 0,

       =20
        preventDefault: true,

       =20
        stopPropagation: true,

       =20
        initialized: false,

       =20
        locked: false,

       =20
        init: function() {
            this.initialized =3D true;
        },

       =20
        POINT: 0,

       =20
        INTERSECT: 1,

       =20
        mode: 0,

       =20
        _execOnAll: function(sMethod, args) {
            for (var i in this.ids) {
                for (var j in this.ids[i]) {
                    var oDD =3D this.ids[i][j];
                    if (! this.isTypeOfDD(oDD)) {
                        continue;
                    }
                    oDD[sMethod].apply(oDD, args);
                }
            }
        },

       =20
        _onLoad: function() {

            this.init();


            Event.on(document, "mouseup",   this.handleMouseUp, this, =
true);
            Event.on(document, "mousemove", this.handleMouseMove, this, =
true);
            Event.on(window,   "unload",    this._onUnload, this, true);
            Event.on(window,   "resize",    this._onResize, this, true);
            =0A=

        },

       =20
        _onResize: function(e) {
            this._execOnAll("resetConstraints", []);
        },

       =20
        lock: function() { this.locked =3D true; },

       =20
        unlock: function() { this.locked =3D false; },

       =20
        isLocked: function() { return this.locked; },

       =20
        locationCache: {},

       =20
        useCache: true,

       =20
        clickPixelThresh: 3,

       =20
        clickTimeThresh: 350,

       =20
        dragThreshMet: false,

       =20
        clickTimeout: null,

       =20
        startX: 0,

       =20
        startY: 0,

       =20
        regDragDrop: function(oDD, sGroup) {
            if (!this.initialized) { this.init(); }

            if (!this.ids[sGroup]) {
                this.ids[sGroup] =3D {};
            }
            this.ids[sGroup][oDD.id] =3D oDD;
        },

       =20
        removeDDFromGroup: function(oDD, sGroup) {
            if (!this.ids[sGroup]) {
                this.ids[sGroup] =3D {};
            }

            var obj =3D this.ids[sGroup];
            if (obj && obj[oDD.id]) {
                delete obj[oDD.id];
            }
        },

       =20
        _remove: function(oDD) {
            for (var g in oDD.groups) {
                if (g && this.ids[g][oDD.id]) {
                    delete this.ids[g][oDD.id];
                }
            }
            delete this.handleIds[oDD.id];
        },

       =20
        regHandle: function(sDDId, sHandleId) {
            if (!this.handleIds[sDDId]) {
                this.handleIds[sDDId] =3D {};
            }
            this.handleIds[sDDId][sHandleId] =3D sHandleId;
        },

       =20
        isDragDrop: function(id) {
            return ( this.getDDById(id) ) ? true : false;
        },

       =20
        getRelated: function(p_oDD, bTargetsOnly) {
            var oDDs =3D [];
            for (var i in p_oDD.groups) {
                for (j in this.ids[i]) {
                    var dd =3D this.ids[i][j];
                    if (! this.isTypeOfDD(dd)) {
                        continue;
                    }
                    if (!bTargetsOnly || dd.isTarget) {
                        oDDs[oDDs.length] =3D dd;
                    }
                }
            }

            return oDDs;
        },

       =20
        isLegalTarget: function (oDD, oTargetDD) {
            var targets =3D this.getRelated(oDD, true);
            for (var i=3D0, len=3Dtargets.length;i<len;++i) {
                if (targets[i].id =3D=3D oTargetDD.id) {
                    return true;
                }
            }

            return false;
        },

       =20
        isTypeOfDD: function (oDD) {
            return (oDD && oDD.__ygDragDrop);
        },

       =20
        isHandle: function(sDDId, sHandleId) {
            return ( this.handleIds[sDDId] &&
                            this.handleIds[sDDId][sHandleId] );
        },

       =20
        getDDById: function(id) {
            for (var i in this.ids) {
                if (this.ids[i][id]) {
                    return this.ids[i][id];
                }
            }
            return null;
        },

       =20
        handleMouseDown: function(e, oDD) {
            if(Ext.QuickTips){
                Ext.QuickTips.disable();
            }
            this.currentTarget =3D e.getTarget();

            this.dragCurrent =3D oDD;

            var el =3D oDD.getEl();

            =0A=
            this.startX =3D e.getPageX();
            this.startY =3D e.getPageY();

            this.deltaX =3D this.startX - el.offsetLeft;
            this.deltaY =3D this.startY - el.offsetTop;

            this.dragThreshMet =3D false;

            this.clickTimeout =3D setTimeout(
                    function() {
                        var DDM =3D Ext.dd.DDM;
                        DDM.startDrag(DDM.startX, DDM.startY);
                    },
                    this.clickTimeThresh );
        },

       =20
        startDrag: function(x, y) {
            clearTimeout(this.clickTimeout);
            if (this.dragCurrent) {
                this.dragCurrent.b4StartDrag(x, y);
                this.dragCurrent.startDrag(x, y);
            }
            this.dragThreshMet =3D true;
        },

       =20
        handleMouseUp: function(e) {

            if(Ext.QuickTips){
                Ext.QuickTips.enable();
            }
            if (! this.dragCurrent) {
                return;
            }

            clearTimeout(this.clickTimeout);

            if (this.dragThreshMet) {
                this.fireEvents(e, true);
            } else {
            }

            this.stopDrag(e);

            this.stopEvent(e);
        },

       =20
        stopEvent: function(e){
            if(this.stopPropagation) {
                e.stopPropagation();
            }

            if (this.preventDefault) {
                e.preventDefault();
            }
        },

       =20
        stopDrag: function(e) {
            =0A=
            if (this.dragCurrent) {
                if (this.dragThreshMet) {
                    this.dragCurrent.b4EndDrag(e);
                    this.dragCurrent.endDrag(e);
                }

                this.dragCurrent.onMouseUp(e);
            }

            this.dragCurrent =3D null;
            this.dragOvers =3D {};
        },

       =20
        handleMouseMove: function(e) {
            if (! this.dragCurrent) {
                return true;
            }

            =0A=

            =0A=
            if (Ext.isIE && (e.button !=3D=3D 0 && e.button !=3D=3D 1 && =
e.button !=3D=3D 2)) {
                this.stopEvent(e);
                return this.handleMouseUp(e);
            }

            if (!this.dragThreshMet) {
                var diffX =3D Math.abs(this.startX - e.getPageX());
                var diffY =3D Math.abs(this.startY - e.getPageY());
                if (diffX > this.clickPixelThresh ||
                            diffY > this.clickPixelThresh) {
                    this.startDrag(this.startX, this.startY);
                }
            }

            if (this.dragThreshMet) {
                this.dragCurrent.b4Drag(e);
                this.dragCurrent.onDrag(e);
                if(!this.dragCurrent.moveOnly){
                    this.fireEvents(e, false);
                }
            }

            this.stopEvent(e);

            return true;
        },

       =20
        fireEvents: function(e, isDrop) {
            var dc =3D this.dragCurrent;

            =0A=
            =0A=
            if (!dc || dc.isLocked()) {
                return;
            }

            var pt =3D e.getPoint();

            =0A=
            var oldOvers =3D [];

            var outEvts   =3D [];
            var overEvts  =3D [];
            var dropEvts  =3D [];
            var enterEvts =3D [];

            =0A=
            =0A=
            for (var i in this.dragOvers) {

                var ddo =3D this.dragOvers[i];

                if (! this.isTypeOfDD(ddo)) {
                    continue;
                }

                if (! this.isOverTarget(pt, ddo, this.mode)) {
                    outEvts.push( ddo );
                }

                oldOvers[i] =3D true;
                delete this.dragOvers[i];
            }

            for (var sGroup in dc.groups) {

                if ("string" !=3D typeof sGroup) {
                    continue;
                }

                for (i in this.ids[sGroup]) {
                    var oDD =3D this.ids[sGroup][i];
                    if (! this.isTypeOfDD(oDD)) {
                        continue;
                    }

                    if (oDD.isTarget && !oDD.isLocked() && oDD !=3D dc) =
{
                        if (this.isOverTarget(pt, oDD, this.mode)) {
                            =0A=
                            if (isDrop) {
                                dropEvts.push( oDD );
                            =0A=
                            } else {

                                =0A=
                                if (!oldOvers[oDD.id]) {
                                    enterEvts.push( oDD );
                                =0A=
                                } else {
                                    overEvts.push( oDD );
                                }

                                this.dragOvers[oDD.id] =3D oDD;
                            }
                        }
                    }
                }
            }

            if (this.mode) {
                if (outEvts.length) {
                    dc.b4DragOut(e, outEvts);
                    dc.onDragOut(e, outEvts);
                }

                if (enterEvts.length) {
                    dc.onDragEnter(e, enterEvts);
                }

                if (overEvts.length) {
                    dc.b4DragOver(e, overEvts);
                    dc.onDragOver(e, overEvts);
                }

                if (dropEvts.length) {
                    dc.b4DragDrop(e, dropEvts);
                    dc.onDragDrop(e, dropEvts);
                }

            } else {
                =0A=
                var len =3D 0;
                for (i=3D0, len=3DoutEvts.length; i<len; ++i) {
                    dc.b4DragOut(e, outEvts[i].id);
                    dc.onDragOut(e, outEvts[i].id);
                }

                =0A=
                for (i=3D0,len=3DenterEvts.length; i<len; ++i) {
                    =0A=
                    dc.onDragEnter(e, enterEvts[i].id);
                }

                =0A=
                for (i=3D0,len=3DoverEvts.length; i<len; ++i) {
                    dc.b4DragOver(e, overEvts[i].id);
                    dc.onDragOver(e, overEvts[i].id);
                }

                =0A=
                for (i=3D0, len=3DdropEvts.length; i<len; ++i) {
                    dc.b4DragDrop(e, dropEvts[i].id);
                    dc.onDragDrop(e, dropEvts[i].id);
                }

            }

            =0A=
            if (isDrop && !dropEvts.length) {
                dc.onInvalidDrop(e);
            }

        },

       =20
        getBestMatch: function(dds) {
            var winner =3D null;
            =0A=
            =0A=
               =0A=
            =0A=
            =0A=

            var len =3D dds.length;

            if (len =3D=3D 1) {
                winner =3D dds[0];
            } else {
                =0A=
                for (var i=3D0; i<len; ++i) {
                    var dd =3D dds[i];
                    =0A=
                    =0A=
                    =0A=
                    if (dd.cursorIsOver) {
                        winner =3D dd;
                        break;
                    =0A=
                    } else {
                        if (!winner ||
                            winner.overlap.getArea() < =
dd.overlap.getArea()) {
                            winner =3D dd;
                        }
                    }
                }
            }

            return winner;
        },

       =20
        refreshCache: function(groups) {
            for (var sGroup in groups) {
                if ("string" !=3D typeof sGroup) {
                    continue;
                }
                for (var i in this.ids[sGroup]) {
                    var oDD =3D this.ids[sGroup][i];

                    if (this.isTypeOfDD(oDD)) {
                    =0A=
                        var loc =3D this.getLocation(oDD);
                        if (loc) {
                            this.locationCache[oDD.id] =3D loc;
                        } else {
                            delete this.locationCache[oDD.id];
                            =0A=
                            =0A=
                            =0A=
                        }
                    }
                }
            }
        },

       =20
        verifyEl: function(el) {
            if (el) {
                var parent;
                if(Ext.isIE){
                    try{
                        parent =3D el.offsetParent;
                    }catch(e){}
                }else{
                    parent =3D el.offsetParent;
                }
                if (parent) {
                    return true;
                }
            }

            return false;
        },

       =20
        getLocation: function(oDD) {
            if (! this.isTypeOfDD(oDD)) {
                return null;
            }

            var el =3D oDD.getEl(), pos, x1, x2, y1, y2, t, r, b, l;

            try {
                pos=3D Ext.lib.Dom.getXY(el);
            } catch (e) { }

            if (!pos) {
                return null;
            }

            x1 =3D pos[0];
            x2 =3D x1 + el.offsetWidth;
            y1 =3D pos[1];
            y2 =3D y1 + el.offsetHeight;

            t =3D y1 - oDD.padding[0];
            r =3D x2 + oDD.padding[1];
            b =3D y2 + oDD.padding[2];
            l =3D x1 - oDD.padding[3];

            return new Ext.lib.Region( t, r, b, l );
        },

       =20
        isOverTarget: function(pt, oTarget, intersect) {
            =0A=
            var loc =3D this.locationCache[oTarget.id];
            if (!loc || !this.useCache) {
                loc =3D this.getLocation(oTarget);
                this.locationCache[oTarget.id] =3D loc;

            }

            if (!loc) {
                return false;
            }

            oTarget.cursorIsOver =3D loc.contains( pt );

            =0A=
            =0A=
            =0A=
            =0A=
            =0A=
            var dc =3D this.dragCurrent;
            if (!dc || !dc.getTargetCoord ||
                    (!intersect && !dc.constrainX && !dc.constrainY)) {
                return oTarget.cursorIsOver;
            }

            oTarget.overlap =3D null;

            =0A=
            =0A=
            =0A=
            =0A=
            var pos =3D dc.getTargetCoord(pt.x, pt.y);

            var el =3D dc.getDragEl();
            var curRegion =3D new Ext.lib.Region( pos.y,
                                                   pos.x + =
el.offsetWidth,
                                                   pos.y + =
el.offsetHeight,
                                                   pos.x );

            var overlap =3D curRegion.intersect(loc);

            if (overlap) {
                oTarget.overlap =3D overlap;
                return (intersect) ? true : oTarget.cursorIsOver;
            } else {
                return false;
            }
        },

       =20
        _onUnload: function(e, me) {
            Ext.dd.DragDropMgr.unregAll();
        },

       =20
        unregAll: function() {

            if (this.dragCurrent) {
                this.stopDrag();
                this.dragCurrent =3D null;
            }

            this._execOnAll("unreg", []);

            for (var i in this.elementCache) {
                delete this.elementCache[i];
            }

            this.elementCache =3D {};
            this.ids =3D {};
        },

       =20
        elementCache: {},

       =20
        getElWrapper: function(id) {
            var oWrapper =3D this.elementCache[id];
            if (!oWrapper || !oWrapper.el) {
                oWrapper =3D this.elementCache[id] =3D
                    new this.ElementWrapper(Ext.getDom(id));
            }
            return oWrapper;
        },

       =20
        getElement: function(id) {
            return Ext.getDom(id);
        },

       =20
        getCss: function(id) {
            var el =3D Ext.getDom(id);
            return (el) ? el.style : null;
        },

       =20
        ElementWrapper: function(el) {
               =20
                this.el =3D el || null;
               =20
                this.id =3D this.el && el.id;
               =20
                this.css =3D this.el && el.style;
            },

       =20
        getPosX: function(el) {
            return Ext.lib.Dom.getX(el);
        },

       =20
        getPosY: function(el) {
            return Ext.lib.Dom.getY(el);
        },

       =20
        swapNode: function(n1, n2) {
            if (n1.swapNode) {
                n1.swapNode(n2);
            } else {
                var p =3D n2.parentNode;
                var s =3D n2.nextSibling;

                if (s =3D=3D n1) {
                    p.insertBefore(n1, n2);
                } else if (n2 =3D=3D n1.nextSibling) {
                    p.insertBefore(n2, n1);
                } else {
                    n1.parentNode.replaceChild(n2, n1);
                    p.insertBefore(n1, s);
                }
            }
        },

       =20
        getScroll: function () {
            var t, l, dde=3Ddocument.documentElement, =
db=3Ddocument.body;
            if (dde && (dde.scrollTop || dde.scrollLeft)) {
                t =3D dde.scrollTop;
                l =3D dde.scrollLeft;
            } else if (db) {
                t =3D db.scrollTop;
                l =3D db.scrollLeft;
            } else {

            }
            return { top: t, left: l };
        },

       =20
        getStyle: function(el, styleProp) {
            return Ext.fly(el).getStyle(styleProp);
        },

       =20
        getScrollTop: function () { return this.getScroll().top; },

       =20
        getScrollLeft: function () { return this.getScroll().left; },

       =20
        moveToEl: function (moveEl, targetEl) {
            var aCoord =3D Ext.lib.Dom.getXY(targetEl);
            Ext.lib.Dom.setXY(moveEl, aCoord);
        },

       =20
        numericSort: function(a, b) { return (a - b); },

       =20
        _timeoutCount: 0,

       =20
        _addListeners: function() {
            var DDM =3D Ext.dd.DDM;
            if ( Ext.lib.Event && document ) {
                DDM._onLoad();
            } else {
                if (DDM._timeoutCount > 2000) {
                } else {
                    setTimeout(DDM._addListeners, 10);
                    if (document && document.body) {
                        DDM._timeoutCount +=3D 1;
                    }
                }
            }
        },

       =20
        handleWasClicked: function(node, id) {
            if (this.isHandle(id, node.id)) {
                return true;
            } else {
                =0A=
                var p =3D node.parentNode;

                while (p) {
                    if (this.isHandle(id, p.id)) {
                        return true;
                    } else {
                        p =3D p.parentNode;
                    }
                }
            }

            return false;
        }

    };

}();

=0A=
Ext.dd.DDM =3D Ext.dd.DragDropMgr;
Ext.dd.DDM._addListeners();

}


Ext.dd.DD =3D function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
    }
};

Ext.extend(Ext.dd.DD, Ext.dd.DragDrop, {

   =20
    scroll: true,

   =20
    autoOffset: function(iPageX, iPageY) {
        var x =3D iPageX - this.startPageX;
        var y =3D iPageY - this.startPageY;
        this.setDelta(x, y);
    },

   =20
    setDelta: function(iDeltaX, iDeltaY) {
        this.deltaX =3D iDeltaX;
        this.deltaY =3D iDeltaY;
    },

   =20
    setDragElPos: function(iPageX, iPageY) {
        =0A=
        =0A=

        var el =3D this.getDragEl();
        this.alignElWithMouse(el, iPageX, iPageY);
    },

   =20
    alignElWithMouse: function(el, iPageX, iPageY) {
        var oCoord =3D this.getTargetCoord(iPageX, iPageY);
        var fly =3D el.dom ? el : Ext.fly(el, '_dd');
        if (!this.deltaSetXY) {
            var aCoord =3D [oCoord.x, oCoord.y];
            fly.setXY(aCoord);
            var newLeft =3D fly.getLeft(true);
            var newTop  =3D fly.getTop(true);
            this.deltaSetXY =3D [ newLeft - oCoord.x, newTop - oCoord.y =
];
        } else {
            fly.setLeftTop(oCoord.x + this.deltaSetXY[0], oCoord.y + =
this.deltaSetXY[1]);
        }

        this.cachePosition(oCoord.x, oCoord.y);
        this.autoScroll(oCoord.x, oCoord.y, el.offsetHeight, =
el.offsetWidth);
        return oCoord;
    },

   =20
    cachePosition: function(iPageX, iPageY) {
        if (iPageX) {
            this.lastPageX =3D iPageX;
            this.lastPageY =3D iPageY;
        } else {
            var aCoord =3D Ext.lib.Dom.getXY(this.getEl());
            this.lastPageX =3D aCoord[0];
            this.lastPageY =3D aCoord[1];
        }
    },

   =20
    autoScroll: function(x, y, h, w) {

        if (this.scroll) {
            =0A=
            var clientH =3D Ext.lib.Dom.getViewHeight();

            =0A=
            var clientW =3D Ext.lib.Dom.getViewWidth();

            =0A=
            var st =3D this.DDM.getScrollTop();

            =0A=
            var sl =3D this.DDM.getScrollLeft();

            =0A=
            var bot =3D h + y;

            =0A=
            var right =3D w + x;

            =0A=
            =0A=
            =0A=
            var toBot =3D (clientH + st - y - this.deltaY);

            =0A=
            var toRight =3D (clientW + sl - x - this.deltaX);


            =0A=
            =0A=
            var thresh =3D 40;

            =0A=
            =0A=
            =0A=
            var scrAmt =3D (document.all) ? 80 : 30;

            =0A=
            =0A=
            if ( bot > clientH && toBot < thresh ) {
                window.scrollTo(sl, st + scrAmt);
            }

            =0A=
            =0A=
            if ( y < st && st > 0 && y - st < thresh ) {
                window.scrollTo(sl, st - scrAmt);
            }

            =0A=
            =0A=
            if ( right > clientW && toRight < thresh ) {
                window.scrollTo(sl + scrAmt, st);
            }

            =0A=
            =0A=
            if ( x < sl && sl > 0 && x - sl < thresh ) {
                window.scrollTo(sl - scrAmt, st);
            }
        }
    },

   =20
    getTargetCoord: function(iPageX, iPageY) {


        var x =3D iPageX - this.deltaX;
        var y =3D iPageY - this.deltaY;

        if (this.constrainX) {
            if (x < this.minX) { x =3D this.minX; }
            if (x > this.maxX) { x =3D this.maxX; }
        }

        if (this.constrainY) {
            if (y < this.minY) { y =3D this.minY; }
            if (y > this.maxY) { y =3D this.maxY; }
        }

        x =3D this.getTick(x, this.xTicks);
        y =3D this.getTick(y, this.yTicks);


        return {x:x, y:y};
    },

   =20
    applyConfig: function() {
        Ext.dd.DD.superclass.applyConfig.call(this);
        this.scroll =3D (this.config.scroll !=3D=3D false);
    },

   =20
    b4MouseDown: function(e) {
        =0A=
        this.autoOffset(e.getPageX(),
                            e.getPageY());
    },

   =20
    b4Drag: function(e) {
        this.setDragElPos(e.getPageX(),
                            e.getPageY());
    },

    toString: function() {
        return ("DD " + this.id);
    }

    =0A=
    =0A=
    =0A=
   =20

});

Ext.dd.DDProxy =3D function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
        this.initFrame();
    }
};


Ext.dd.DDProxy.dragElId =3D "ygddfdiv";

Ext.extend(Ext.dd.DDProxy, Ext.dd.DD, {

   =20
    resizeFrame: true,

   =20
    centerFrame: false,

   =20
    createFrame: function() {
        var self =3D this;
        var body =3D document.body;

        if (!body || !body.firstChild) {
            setTimeout( function() { self.createFrame(); }, 50 );
            return;
        }

        var div =3D this.getDragEl();

        if (!div) {
            div    =3D document.createElement("div");
            div.id =3D this.dragElId;
            var s  =3D div.style;

            s.position   =3D "absolute";
            s.visibility =3D "hidden";
            s.cursor     =3D "move";
            s.border     =3D "2px solid #aaa";
            s.zIndex     =3D 999;

            =0A=
            =0A=
            =0A=
            body.insertBefore(div, body.firstChild);
        }
    },

   =20
    initFrame: function() {
        this.createFrame();
    },

    applyConfig: function() {
        Ext.dd.DDProxy.superclass.applyConfig.call(this);

        this.resizeFrame =3D (this.config.resizeFrame !=3D=3D false);
        this.centerFrame =3D (this.config.centerFrame);
        this.setDragElId(this.config.dragElId || =
Ext.dd.DDProxy.dragElId);
    },

   =20
    showFrame: function(iPageX, iPageY) {
        var el =3D this.getEl();
        var dragEl =3D this.getDragEl();
        var s =3D dragEl.style;

        this._resizeProxy();

        if (this.centerFrame) {
            this.setDelta( Math.round(parseInt(s.width,  10)/2),
                           Math.round(parseInt(s.height, 10)/2) );
        }

        this.setDragElPos(iPageX, iPageY);

        Ext.fly(dragEl).show();
    },

   =20
    _resizeProxy: function() {
        if (this.resizeFrame) {
            var el =3D this.getEl();
            Ext.fly(this.getDragEl()).setSize(el.offsetWidth, =
el.offsetHeight);
        }
    },

    =0A=
    b4MouseDown: function(e) {
        var x =3D e.getPageX();
        var y =3D e.getPageY();
        this.autoOffset(x, y);
        this.setDragElPos(x, y);
    },

    =0A=
    b4StartDrag: function(x, y) {
        =0A=
        this.showFrame(x, y);
    },

    =0A=
    b4EndDrag: function(e) {
        Ext.fly(this.getDragEl()).hide();
    },

    =0A=
    =0A=
    =0A=
    endDrag: function(e) {

        var lel =3D this.getEl();
        var del =3D this.getDragEl();

        =0A=
        del.style.visibility =3D "";

        this.beforeMove();
        =0A=
        =0A=
        lel.style.visibility =3D "hidden";
        Ext.dd.DDM.moveToEl(lel, del);
        del.style.visibility =3D "hidden";
        lel.style.visibility =3D "";

        this.afterDrag();
    },

    beforeMove : function(){

    },

    afterDrag : function(){

    },

    toString: function() {
        return ("DDProxy " + this.id);
    }

});

Ext.dd.DDTarget =3D function(id, sGroup, config) {
    if (id) {
        this.initTarget(id, sGroup, config);
    }
};

=0A=
Ext.extend(Ext.dd.DDTarget, Ext.dd.DragDrop, {
    toString: function() {
        return ("DDTarget " + this.id);
    }
});
=0A=
Ext.dd.DragTracker =3D function(config){
    Ext.apply(this, config);
    this.addEvents(
        'mousedown',
        'mouseup',
        'mousemove',
        'dragstart',
        'dragend',
        'drag'
    );

    this.dragRegion =3D new Ext.lib.Region(0,0,0,0);

    if(this.el){
        this.initEl(this.el);
    }
}

Ext.extend(Ext.dd.DragTracker, Ext.util.Observable,  {
    active: false,
    tolerance: 5,
    autoStart: false,

    initEl: function(el){
        this.el =3D Ext.get(el);
        el.on('mousedown', this.onMouseDown, this,
                this.delegate ? {delegate: this.delegate} : undefined);
    },

    destroy : function(){
        this.el.un('mousedown', this.onMouseDown, this);
    },

    onMouseDown: function(e, target){
        if(this.fireEvent('mousedown', this, e) !=3D=3D false && =
this.onBeforeStart(e) !=3D=3D false){
            this.startXY =3D this.lastXY =3D e.getXY();
            this.dragTarget =3D this.delegate ? target : this.el.dom;
            e.preventDefault();
            var doc =3D Ext.getDoc();
            doc.on('mouseup', this.onMouseUp, this);
            doc.on('mousemove', this.onMouseMove, this);
            doc.on('selectstart', this.stopSelect, this);
            if(this.autoStart){
                this.timer =3D this.triggerStart.defer(this.autoStart =
=3D=3D=3D true ? 1000 : this.autoStart, this);
            }
        }
    },

    onMouseMove: function(e, target){
        e.preventDefault();
        var xy =3D e.getXY(), s =3D this.startXY;
        this.lastXY =3D xy;
        if(!this.active){
            if(Math.abs(s[0]-xy[0]) > this.tolerance || =
Math.abs(s[1]-xy[1]) > this.tolerance){
                this.triggerStart();
            }else{
                return;
            }
        }
        this.fireEvent('mousemove', this, e);
        this.onDrag(e);
        this.fireEvent('drag', this, e);
    },

    onMouseUp: function(e){
        var doc =3D Ext.getDoc();
        doc.un('mousemove', this.onMouseMove, this);
        doc.un('mouseup', this.onMouseUp, this);
        doc.un('selectstart', this.stopSelect, this);
        e.preventDefault();
        this.clearStart();
        this.active =3D false;
        delete this.elRegion;
        this.fireEvent('mouseup', this, e);
        this.onEnd(e);
        this.fireEvent('dragend', this, e);
    },

    triggerStart: function(isTimer){
        this.clearStart();
        this.active =3D true;
        this.onStart(this.startXY);
        this.fireEvent('dragstart', this, this.startXY);
    },

    clearStart : function(){
        if(this.timer){
            clearTimeout(this.timer);
            delete this.timer;
        }
    },

    stopSelect : function(e){
        e.stopEvent();
        return false;
    },

    onBeforeStart : function(e){

    },

    onStart : function(xy){

    },

    onDrag : function(e){

    },

    onEnd : function(e){

    },

    getDragTarget : function(){
        return this.dragTarget;
    },

    getDragCt : function(){
        return this.el;
    },

    getXY : function(constrain){
        return constrain ?
               this.constrainModes[constrain].call(this, this.lastXY) : =
this.lastXY;
    },

    getOffset : function(constrain){
        var xy =3D this.getXY(constrain);
        var s =3D this.startXY;
        return [s[0]-xy[0], s[1]-xy[1]];
    },

    constrainModes: {
        'point' : function(xy){

            if(!this.elRegion){
                this.elRegion =3D this.getDragCt().getRegion();
            }

            var dr =3D this.dragRegion;

            dr.left =3D xy[0];
            dr.top =3D xy[1];
            dr.right =3D xy[0];
            dr.bottom =3D xy[1];

            dr.constrainTo(this.elRegion);

            return [dr.left, dr.top];
        }
    }
});=0A=

Ext.dd.ScrollManager =3D function(){
    var ddm =3D Ext.dd.DragDropMgr;
    var els =3D {};
    var dragEl =3D null;
    var proc =3D {};
   =20
    var onStop =3D function(e){
        dragEl =3D null;
        clearProc();
    };
   =20
    var triggerRefresh =3D function(){
        if(ddm.dragCurrent){
             ddm.refreshCache(ddm.dragCurrent.groups);
        }
    };
   =20
    var doScroll =3D function(){
        if(ddm.dragCurrent){
            var dds =3D Ext.dd.ScrollManager;
            var inc =3D proc.el.ddScrollConfig ?
                      proc.el.ddScrollConfig.increment : dds.increment;
            if(!dds.animate){
                if(proc.el.scroll(proc.dir, inc)){
                    triggerRefresh();
                }
            }else{
                proc.el.scroll(proc.dir, inc, true, dds.animDuration, =
triggerRefresh);
            }
        }
    };
   =20
    var clearProc =3D function(){
        if(proc.id){
            clearInterval(proc.id);
        }
        proc.id =3D 0;
        proc.el =3D null;
        proc.dir =3D "";
    };
   =20
    var startProc =3D function(el, dir){
        clearProc();
        proc.el =3D el;
        proc.dir =3D dir;
        proc.id =3D setInterval(doScroll, =
Ext.dd.ScrollManager.frequency);
    };
   =20
    var onFire =3D function(e, isDrop){
        if(isDrop || !ddm.dragCurrent){ return; }
        var dds =3D Ext.dd.ScrollManager;
        if(!dragEl || dragEl !=3D ddm.dragCurrent){
            dragEl =3D ddm.dragCurrent;
            =0A=
            dds.refreshCache();
        }
       =20
        var xy =3D Ext.lib.Event.getXY(e);
        var pt =3D new Ext.lib.Point(xy[0], xy[1]);
        for(var id in els){
            var el =3D els[id], r =3D el._region;
            var c =3D el.ddScrollConfig ? el.ddScrollConfig : dds;
            if(r && r.contains(pt) && el.isScrollable()){
                if(r.bottom - pt.y <=3D c.vthresh){
                    if(proc.el !=3D el){
                        startProc(el, "down");
                    }
                    return;
                }else if(r.right - pt.x <=3D c.hthresh){
                    if(proc.el !=3D el){
                        startProc(el, "left");
                    }
                    return;
                }else if(pt.y - r.top <=3D c.vthresh){
                    if(proc.el !=3D el){
                        startProc(el, "up");
                    }
                    return;
                }else if(pt.x - r.left <=3D c.hthresh){
                    if(proc.el !=3D el){
                        startProc(el, "right");
                    }
                    return;
                }
            }
        }
        clearProc();
    };
   =20
    ddm.fireEvents =3D ddm.fireEvents.createSequence(onFire, ddm);
    ddm.stopDrag =3D ddm.stopDrag.createSequence(onStop, ddm);
   =20
    return {
       =20
        register : function(el){
            if(Ext.isArray(el)){
                for(var i =3D 0, len =3D el.length; i < len; i++) {
                	this.register(el[i]);
                }
            }else{
                el =3D Ext.get(el);
                els[el.id] =3D el;
            }
        },
       =20
       =20
        unregister : function(el){
            if(Ext.isArray(el)){
                for(var i =3D 0, len =3D el.length; i < len; i++) {
                	this.unregister(el[i]);
                }
            }else{
                el =3D Ext.get(el);
                delete els[el.id];
            }
        },
       =20
       =20
        vthresh : 25,
       =20
        hthresh : 25,

       =20
        increment : 100,
       =20
       =20
        frequency : 500,
       =20
       =20
        animate: true,
       =20
       =20
        animDuration: .4,
       =20
       =20
        refreshCache : function(){
            for(var id in els){
                if(typeof els[id] =3D=3D 'object'){ =0A=
                    els[id]._region =3D els[id].getRegion();
                }
            }
        }
    };
}();=0A=

Ext.dd.Registry =3D function(){
    var elements =3D {};=20
    var handles =3D {};=20
    var autoIdSeed =3D 0;

    var getId =3D function(el, autogen){
        if(typeof el =3D=3D "string"){
            return el;
        }
        var id =3D el.id;
        if(!id && autogen !=3D=3D false){
            id =3D "extdd-" + (++autoIdSeed);
            el.id =3D id;
        }
        return id;
    };
   =20
    return {
   =20
        register : function(el, data){
            data =3D data || {};
            if(typeof el =3D=3D "string"){
                el =3D document.getElementById(el);
            }
            data.ddel =3D el;
            elements[getId(el)] =3D data;
            if(data.isHandle !=3D=3D false){
                handles[data.ddel.id] =3D data;
            }
            if(data.handles){
                var hs =3D data.handles;
                for(var i =3D 0, len =3D hs.length; i < len; i++){
                	handles[getId(hs[i])] =3D data;
                }
            }
        },

   =20
        unregister : function(el){
            var id =3D getId(el, false);
            var data =3D elements[id];
            if(data){
                delete elements[id];
                if(data.handles){
                    var hs =3D data.handles;
                    for(var i =3D 0, len =3D hs.length; i < len; i++){
                    	delete handles[getId(hs[i], false)];
                    }
                }
            }
        },

   =20
        getHandle : function(id){
            if(typeof id !=3D "string"){ =0A=
                id =3D id.id;
            }
            return handles[id];
        },

   =20
        getHandleFromEvent : function(e){
            var t =3D Ext.lib.Event.getTarget(e);
            return t ? handles[t.id] : null;
        },

   =20
        getTarget : function(id){
            if(typeof id !=3D "string"){ =0A=
                id =3D id.id;
            }
            return elements[id];
        },

   =20
        getTargetFromEvent : function(e){
            var t =3D Ext.lib.Event.getTarget(e);
            return t ? elements[t.id] || handles[t.id] : null;
        }
    };
}();=0A=

Ext.dd.StatusProxy =3D function(config){
    Ext.apply(this, config);
    this.id =3D this.id || Ext.id();
    this.el =3D new Ext.Layer({
        dh: {
            id: this.id, tag: "div", cls: "x-dd-drag-proxy =
"+this.dropNotAllowed, children: [
                {tag: "div", cls: "x-dd-drop-icon"},
                {tag: "div", cls: "x-dd-drag-ghost"}
            ]
        },=20
        shadow: !config || config.shadow !=3D=3D false
    });
    this.ghost =3D Ext.get(this.el.dom.childNodes[1]);
    this.dropStatus =3D this.dropNotAllowed;
};

Ext.dd.StatusProxy.prototype =3D {
   =20
    dropAllowed : "x-dd-drop-ok",
   =20
    dropNotAllowed : "x-dd-drop-nodrop",

   =20
    setStatus : function(cssClass){
        cssClass =3D cssClass || this.dropNotAllowed;
        if(this.dropStatus !=3D cssClass){
            this.el.replaceClass(this.dropStatus, cssClass);
            this.dropStatus =3D cssClass;
        }
    },

   =20
    reset : function(clearGhost){
        this.el.dom.className =3D "x-dd-drag-proxy " + =
this.dropNotAllowed;
        this.dropStatus =3D this.dropNotAllowed;
        if(clearGhost){
            this.ghost.update("");
        }
    },

   =20
    update : function(html){
        if(typeof html =3D=3D "string"){
            this.ghost.update(html);
        }else{
            this.ghost.update("");
            html.style.margin =3D "0";
            this.ghost.dom.appendChild(html);
        }       =20
    },

   =20
    getEl : function(){
        return this.el;
    },

   =20
    getGhost : function(){
        return this.ghost;
    },

   =20
    hide : function(clear){
        this.el.hide();
        if(clear){
            this.reset(true);
        }
    },

   =20
    stop : function(){
        if(this.anim && this.anim.isAnimated && this.anim.isAnimated()){
            this.anim.stop();
        }
    },

   =20
    show : function(){
        this.el.show();
    },

   =20
    sync : function(){
        this.el.sync();
    },

   =20
    repair : function(xy, callback, scope){
        this.callback =3D callback;
        this.scope =3D scope;
        if(xy && this.animRepair !=3D=3D false){
            this.el.addClass("x-dd-drag-repair");
            this.el.hideUnders(true);
            this.anim =3D this.el.shift({
                duration: this.repairDuration || .5,
                easing: 'easeOut',
                xy: xy,
                stopFx: true,
                callback: this.afterRepair,
                scope: this
            });
        }else{
            this.afterRepair();
        }
    },

    =0A=
    afterRepair : function(){
        this.hide(true);
        if(typeof this.callback =3D=3D "function"){
            this.callback.call(this.scope || this);
        }
        this.callback =3D null;
        this.scope =3D null;
    }
};=0A=

Ext.dd.DragSource =3D function(el, config){
    this.el =3D Ext.get(el);
    if(!this.dragData){
        this.dragData =3D {};
    }
   =20
    Ext.apply(this, config);
   =20
    if(!this.proxy){
        this.proxy =3D new Ext.dd.StatusProxy();
    }
    Ext.dd.DragSource.superclass.constructor.call(this, this.el.dom, =
this.ddGroup || this.group,=20
          {dragElId : this.proxy.id, resizeFrame: false, isTarget: =
false, scroll: this.scroll =3D=3D=3D true});
   =20
    this.dragging =3D false;
};

Ext.extend(Ext.dd.DragSource, Ext.dd.DDProxy, {
   =20
   =20
    dropAllowed : "x-dd-drop-ok",
   =20
    dropNotAllowed : "x-dd-drop-nodrop",

   =20
    getDragData : function(e){
        return this.dragData;
    },

    =0A=
    onDragEnter : function(e, id){
        var target =3D Ext.dd.DragDropMgr.getDDById(id);
        this.cachedTarget =3D target;
        if(this.beforeDragEnter(target, e, id) !=3D=3D false){
            if(target.isNotifyTarget){
                var status =3D target.notifyEnter(this, e, =
this.dragData);
                this.proxy.setStatus(status);
            }else{
                this.proxy.setStatus(this.dropAllowed);
            }
           =20
            if(this.afterDragEnter){
               =20
                this.afterDragEnter(target, e, id);
            }
        }
    },

   =20
    beforeDragEnter : function(target, e, id){
        return true;
    },

    =0A=
    alignElWithMouse: function() {
        Ext.dd.DragSource.superclass.alignElWithMouse.apply(this, =
arguments);
        this.proxy.sync();
    },

    =0A=
    onDragOver : function(e, id){
        var target =3D this.cachedTarget || =
Ext.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragOver(target, e, id) !=3D=3D false){
            if(target.isNotifyTarget){
                var status =3D target.notifyOver(this, e, =
this.dragData);
                this.proxy.setStatus(status);
            }

            if(this.afterDragOver){
               =20
                this.afterDragOver(target, e, id);
            }
        }
    },

   =20
    beforeDragOver : function(target, e, id){
        return true;
    },

    =0A=
    onDragOut : function(e, id){
        var target =3D this.cachedTarget || =
Ext.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragOut(target, e, id) !=3D=3D false){
            if(target.isNotifyTarget){
                target.notifyOut(this, e, this.dragData);
            }
            this.proxy.reset();
            if(this.afterDragOut){
               =20
                this.afterDragOut(target, e, id);
            }
        }
        this.cachedTarget =3D null;
    },

   =20
    beforeDragOut : function(target, e, id){
        return true;
    },
   =20
    =0A=
    onDragDrop : function(e, id){
        var target =3D this.cachedTarget || =
Ext.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragDrop(target, e, id) !=3D=3D false){
            if(target.isNotifyTarget){
                if(target.notifyDrop(this, e, this.dragData)){ =0A=
                    this.onValidDrop(target, e, id);
                }else{
                    this.onInvalidDrop(target, e, id);
                }
            }else{
                this.onValidDrop(target, e, id);
            }
           =20
            if(this.afterDragDrop){
               =20
                this.afterDragDrop(target, e, id);
            }
        }
        delete this.cachedTarget;
    },

   =20
    beforeDragDrop : function(target, e, id){
        return true;
    },

    =0A=
    onValidDrop : function(target, e, id){
        this.hideProxy();
        if(this.afterValidDrop){
           =20
            this.afterValidDrop(target, e, id);
        }
    },

    =0A=
    getRepairXY : function(e, data){
        return this.el.getXY(); =20
    },

    =0A=
    onInvalidDrop : function(target, e, id){
        this.beforeInvalidDrop(target, e, id);
        if(this.cachedTarget){
            if(this.cachedTarget.isNotifyTarget){
                this.cachedTarget.notifyOut(this, e, this.dragData);
            }
            this.cacheTarget =3D null;
        }
        this.proxy.repair(this.getRepairXY(e, this.dragData), =
this.afterRepair, this);

        if(this.afterInvalidDrop){
           =20
            this.afterInvalidDrop(e, id);
        }
    },

    =0A=
    afterRepair : function(){
        if(Ext.enableFx){
            this.el.highlight(this.hlColor || "c3daf9");
        }
        this.dragging =3D false;
    },

   =20
    beforeInvalidDrop : function(target, e, id){
        return true;
    },

    =0A=
    handleMouseDown : function(e){
        if(this.dragging) {
            return;
        }
        var data =3D this.getDragData(e);
        if(data && this.onBeforeDrag(data, e) !=3D=3D false){
            this.dragData =3D data;
            this.proxy.stop();
            Ext.dd.DragSource.superclass.handleMouseDown.apply(this, =
arguments);
        }=20
    },

   =20
    onBeforeDrag : function(data, e){
        return true;
    },

   =20
    onStartDrag : Ext.emptyFn,

    =0A=
    startDrag : function(x, y){
        this.proxy.reset();
        this.dragging =3D true;
        this.proxy.update("");
        this.onInitDrag(x, y);
        this.proxy.show();
    },

    =0A=
    onInitDrag : function(x, y){
        var clone =3D this.el.dom.cloneNode(true);
        clone.id =3D Ext.id(); =0A=
        this.proxy.update(clone);
        this.onStartDrag(x, y);
        return true;
    },

   =20
    getProxy : function(){
        return this.proxy; =20
    },

   =20
    hideProxy : function(){
        this.proxy.hide(); =20
        this.proxy.reset(true);
        this.dragging =3D false;
    },

    =0A=
    triggerCacheRefresh : function(){
        Ext.dd.DDM.refreshCache(this.groups);
    },

    =0A=
    b4EndDrag: function(e) {
    },

    =0A=
    endDrag : function(e){
        this.onEndDrag(this.dragData, e);
    },

    =0A=
    onEndDrag : function(data, e){
    },
   =20
    =0A=
    autoOffset : function(x, y) {
        this.setDelta(-12, -20);
    }   =20
});=0A=

Ext.dd.DropTarget =3D function(el, config){
    this.el =3D Ext.get(el);
   =20
    Ext.apply(this, config);
   =20
    if(this.containerScroll){
        Ext.dd.ScrollManager.register(this.el);
    }
   =20
    Ext.dd.DropTarget.superclass.constructor.call(this, this.el.dom, =
this.ddGroup || this.group,=20
          {isTarget: true});

};

Ext.extend(Ext.dd.DropTarget, Ext.dd.DDTarget, {
   =20
   =20
   =20
    dropAllowed : "x-dd-drop-ok",
   =20
    dropNotAllowed : "x-dd-drop-nodrop",

    =0A=
    isTarget : true,

    =0A=
    isNotifyTarget : true,

   =20
    notifyEnter : function(dd, e, data){
        if(this.overClass){
            this.el.addClass(this.overClass);
        }
        return this.dropAllowed;
    },

   =20
    notifyOver : function(dd, e, data){
        return this.dropAllowed;
    },

   =20
    notifyOut : function(dd, e, data){
        if(this.overClass){
            this.el.removeClass(this.overClass);
        }
    },

   =20
    notifyDrop : function(dd, e, data){
        return false;
    }
});=0A=

Ext.dd.DragZone =3D function(el, config){
    Ext.dd.DragZone.superclass.constructor.call(this, el, config);
    if(this.containerScroll){
        Ext.dd.ScrollManager.register(this.el);
    }
};

Ext.extend(Ext.dd.DragZone, Ext.dd.DragSource, {
   =20
   =20

   =20
    getDragData : function(e){
        return Ext.dd.Registry.getHandleFromEvent(e);
    },
   =20
   =20
    onInitDrag : function(x, y){
        this.proxy.update(this.dragData.ddel.cloneNode(true));
        this.onStartDrag(x, y);
        return true;
    },
   =20
   =20
    afterRepair : function(){
        if(Ext.enableFx){
            Ext.Element.fly(this.dragData.ddel).highlight(this.hlColor =
|| "c3daf9");
        }
        this.dragging =3D false;
    },

   =20
    getRepairXY : function(e){
        return Ext.Element.fly(this.dragData.ddel).getXY(); =20
    }
});=0A=

Ext.dd.DropZone =3D function(el, config){
    Ext.dd.DropZone.superclass.constructor.call(this, el, config);
};

Ext.extend(Ext.dd.DropZone, Ext.dd.DropTarget, {
   =20
    getTargetFromEvent : function(e){
        return Ext.dd.Registry.getTargetFromEvent(e);
    },

   =20
    onNodeEnter : function(n, dd, e, data){
       =20
    },

   =20
    onNodeOver : function(n, dd, e, data){
        return this.dropAllowed;
    },

   =20
    onNodeOut : function(n, dd, e, data){
       =20
    },

   =20
    onNodeDrop : function(n, dd, e, data){
        return false;
    },

   =20
    onContainerOver : function(dd, e, data){
        return this.dropNotAllowed;
    },

   =20
    onContainerDrop : function(dd, e, data){
        return false;
    },

   =20
    notifyEnter : function(dd, e, data){
        return this.dropNotAllowed;
    },

   =20
    notifyOver : function(dd, e, data){
        var n =3D this.getTargetFromEvent(e);
        if(!n){ =0A=
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
                this.lastOverNode =3D null;
            }
            return this.onContainerOver(dd, e, data);
        }
        if(this.lastOverNode !=3D n){
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
            }
            this.onNodeEnter(n, dd, e, data);
            this.lastOverNode =3D n;
        }
        return this.onNodeOver(n, dd, e, data);
    },

   =20
    notifyOut : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode =3D null;
        }
    },

   =20
    notifyDrop : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode =3D null;
        }
        var n =3D this.getTargetFromEvent(e);
        return n ?
            this.onNodeDrop(n, dd, e, data) :
            this.onContainerDrop(dd, e, data);
    },

    =0A=
    triggerCacheRefresh : function(){
        Ext.dd.DDM.refreshCache(this.groups);
    } =20
});=0A=


Ext.data.SortTypes =3D {
   =20
    none : function(s){
        return s;
    },
   =20
   =20
    stripTagsRE : /<\/?[^>]+>/gi,
   =20
   =20
    asText : function(s){
        return String(s).replace(this.stripTagsRE, "");
    },
   =20
   =20
    asUCText : function(s){
        return String(s).toUpperCase().replace(this.stripTagsRE, "");
    },
   =20
   =20
    asUCString : function(s) {
    	return String(s).toUpperCase();
    },
   =20
   =20
    asDate : function(s) {
        if(!s){
            return 0;
        }
        if(Ext.isDate(s)){
            return s.getTime();
        }
    	return Date.parse(String(s));
    },
   =20
   =20
    asFloat : function(s) {
    	var val =3D parseFloat(String(s).replace(/,/g, ""));
        if(isNaN(val)) val =3D 0;
    	return val;
    },
   =20
   =20
    asInt : function(s) {
        var val =3D parseInt(String(s).replace(/,/g, ""));
        if(isNaN(val)) val =3D 0;
    	return val;
    }
};=0A=
=0A=
Ext.data.Record =3D function(data, id){=0A=
    this.id =3D (id || id =3D=3D=3D 0) ? id : ++Ext.data.Record.AUTO_ID;=0A=
    this.data =3D data;=0A=
};=0A=
=0A=
=0A=
Ext.data.Record.create =3D function(o){=0A=
    var f =3D Ext.extend(Ext.data.Record, {});=0A=
	var p =3D f.prototype;=0A=
    p.fields =3D new Ext.util.MixedCollection(false, function(field){=0A=
        return field.name;=0A=
    });=0A=
    for(var i =3D 0, len =3D o.length; i < len; i++){=0A=
        p.fields.add(new Ext.data.Field(o[i]));=0A=
    }=0A=
    f.getField =3D function(name){=0A=
        return p.fields.get(name);=0A=
    };=0A=
    return f;=0A=
};=0A=
=0A=
Ext.data.Record.AUTO_ID =3D 1000;=0A=
Ext.data.Record.EDIT =3D 'edit';=0A=
Ext.data.Record.REJECT =3D 'reject';=0A=
Ext.data.Record.COMMIT =3D 'commit';=0A=
=0A=
Ext.data.Record.prototype =3D {=0A=
	=0A=
    =0A=
    =0A=
    dirty : false,=0A=
    editing : false,=0A=
    error: null,=0A=
    =0A=
    modified: null,=0A=
=0A=
        join : function(store){=0A=
        this.store =3D store;=0A=
    },=0A=
=0A=
    =0A=
    set : function(name, value){=0A=
        if(String(this.data[name]) =3D=3D String(value)){=0A=
            return;=0A=
        }=0A=
        this.dirty =3D true;=0A=
        if(!this.modified){=0A=
            this.modified =3D {};=0A=
        }=0A=
        if(typeof this.modified[name] =3D=3D 'undefined'){=0A=
            this.modified[name] =3D this.data[name];=0A=
        }=0A=
        this.data[name] =3D value;=0A=
        if(!this.editing && this.store){=0A=
            this.store.afterEdit(this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    get : function(name){=0A=
        return this.data[name];=0A=
    },=0A=
=0A=
    =0A=
    beginEdit : function(){=0A=
        this.editing =3D true;=0A=
        this.modified =3D {};=0A=
    },=0A=
=0A=
    =0A=
    cancelEdit : function(){=0A=
        this.editing =3D false;=0A=
        delete this.modified;=0A=
    },=0A=
=0A=
    =0A=
    endEdit : function(){=0A=
        this.editing =3D false;=0A=
        if(this.dirty && this.store){=0A=
            this.store.afterEdit(this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    reject : function(silent){=0A=
        var m =3D this.modified;=0A=
        for(var n in m){=0A=
            if(typeof m[n] !=3D "function"){=0A=
                this.data[n] =3D m[n];=0A=
            }=0A=
        }=0A=
        this.dirty =3D false;=0A=
        delete this.modified;=0A=
        this.editing =3D false;=0A=
        if(this.store && silent !=3D=3D true){=0A=
            this.store.afterReject(this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    commit : function(silent){=0A=
        this.dirty =3D false;=0A=
        delete this.modified;=0A=
        this.editing =3D false;=0A=
        if(this.store && silent !=3D=3D true){=0A=
            this.store.afterCommit(this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getChanges : function(){=0A=
        var m =3D this.modified, cs =3D {};=0A=
        for(var n in m){=0A=
            if(m.hasOwnProperty(n)){=0A=
                cs[n] =3D this.data[n];=0A=
            }=0A=
        }=0A=
        return cs;=0A=
    },=0A=
=0A=
        hasError : function(){=0A=
        return this.error !=3D null;=0A=
    },=0A=
=0A=
        clearError : function(){=0A=
        this.error =3D null;=0A=
    },=0A=
=0A=
    =0A=
    copy : function(newId) {=0A=
        return new this.constructor(Ext.apply({}, this.data), newId || =
this.id);=0A=
    },=0A=
=0A=
    =0A=
    isModified : function(fieldName){=0A=
        return this.modified && this.modified.hasOwnProperty(fieldName);=0A=
    }=0A=
};=0A=
=0A=
Ext.StoreMgr =3D Ext.apply(new Ext.util.MixedCollection(), {=0A=
    =0A=
=0A=
    =0A=
    register : function(){=0A=
        for(var i =3D 0, s; s =3D arguments[i]; i++){=0A=
            this.add(s);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    unregister : function(){=0A=
        for(var i =3D 0, s; s =3D arguments[i]; i++){=0A=
            this.remove(this.lookup(s));=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    lookup : function(id){=0A=
        return typeof id =3D=3D "object" ? id : this.get(id);=0A=
    },=0A=
=0A=
        getKey : function(o){=0A=
         return o.storeId || o.id;=0A=
    }=0A=
});=0A=
=0A=
Ext.data.Store =3D function(config){=0A=
    this.data =3D new Ext.util.MixedCollection(false);=0A=
    this.data.getKey =3D function(o){=0A=
        return o.id;=0A=
    };=0A=
    =0A=
    this.baseParams =3D {};=0A=
        this.paramNames =3D {=0A=
        "start" : "start",=0A=
        "limit" : "limit",=0A=
        "sort" : "sort",=0A=
        "dir" : "dir"=0A=
    };=0A=
=0A=
    if(config && config.data){=0A=
        this.inlineData =3D config.data;=0A=
        delete config.data;=0A=
    }=0A=
=0A=
    Ext.apply(this, config);=0A=
=0A=
    if(this.url && !this.proxy){=0A=
        this.proxy =3D new Ext.data.HttpProxy({url: this.url});=0A=
    }=0A=
=0A=
    if(this.reader){         if(!this.recordType){=0A=
            this.recordType =3D this.reader.recordType;=0A=
        }=0A=
        if(this.reader.onMetaChange){=0A=
            this.reader.onMetaChange =3D =
this.onMetaChange.createDelegate(this);=0A=
        }=0A=
    }=0A=
=0A=
    if(this.recordType){=0A=
        this.fields =3D this.recordType.prototype.fields;=0A=
    }=0A=
    this.modified =3D [];=0A=
=0A=
    this.addEvents(=0A=
        =0A=
        'datachanged',=0A=
        =0A=
        'metachange',=0A=
        =0A=
        'add',=0A=
        =0A=
        'remove',=0A=
        =0A=
        'update',=0A=
        =0A=
        'clear',=0A=
        =0A=
        'beforeload',=0A=
        =0A=
        'load',=0A=
        =0A=
        'loadexception'=0A=
    );=0A=
=0A=
    if(this.proxy){=0A=
        this.relayEvents(this.proxy,  ["loadexception"]);=0A=
    }=0A=
=0A=
    this.sortToggle =3D {};=0A=
	if(this.sortInfo){=0A=
		this.setDefaultSort(this.sortInfo.field, this.sortInfo.direction);=0A=
	}=0A=
=0A=
    Ext.data.Store.superclass.constructor.call(this);=0A=
=0A=
    if(this.storeId || this.id){=0A=
        Ext.StoreMgr.register(this);=0A=
    }=0A=
    if(this.inlineData){=0A=
        this.loadData(this.inlineData);=0A=
        delete this.inlineData;=0A=
    }else if(this.autoLoad){=0A=
        this.load.defer(10, this, [=0A=
            typeof this.autoLoad =3D=3D 'object' ?=0A=
                this.autoLoad : undefined]);=0A=
    }=0A=
};=0A=
Ext.extend(Ext.data.Store, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    remoteSort : false,=0A=
=0A=
    =0A=
    pruneModifiedRecords : false,=0A=
=0A=
    =0A=
   lastOptions : null,=0A=
=0A=
    destroy : function(){=0A=
        if(this.id){=0A=
            Ext.StoreMgr.unregister(this);=0A=
        }=0A=
        this.data =3D null;=0A=
        this.purgeListeners();=0A=
    },=0A=
=0A=
    =0A=
    add : function(records){=0A=
        records =3D [].concat(records);=0A=
        if(records.length < 1){=0A=
            return;=0A=
        }=0A=
        for(var i =3D 0, len =3D records.length; i < len; i++){=0A=
            records[i].join(this);=0A=
        }=0A=
        var index =3D this.data.length;=0A=
        this.data.addAll(records);=0A=
        if(this.snapshot){=0A=
            this.snapshot.addAll(records);=0A=
        }=0A=
        this.fireEvent("add", this, records, index);=0A=
    },=0A=
=0A=
    =0A=
    addSorted : function(record){=0A=
        var index =3D this.findInsertIndex(record);=0A=
        this.insert(index, record);=0A=
    },=0A=
=0A=
    =0A=
    remove : function(record){=0A=
        var index =3D this.data.indexOf(record);=0A=
        this.data.removeAt(index);=0A=
        if(this.pruneModifiedRecords){=0A=
            this.modified.remove(record);=0A=
        }=0A=
        if(this.snapshot){=0A=
            this.snapshot.remove(record);=0A=
        }=0A=
        this.fireEvent("remove", this, record, index);=0A=
    },=0A=
=0A=
    =0A=
    removeAll : function(){=0A=
        this.data.clear();=0A=
        if(this.snapshot){=0A=
            this.snapshot.clear();=0A=
        }=0A=
        if(this.pruneModifiedRecords){=0A=
            this.modified =3D [];=0A=
        }=0A=
        this.fireEvent("clear", this);=0A=
    },=0A=
=0A=
    =0A=
    insert : function(index, records){=0A=
        records =3D [].concat(records);=0A=
        for(var i =3D 0, len =3D records.length; i < len; i++){=0A=
            this.data.insert(index, records[i]);=0A=
            records[i].join(this);=0A=
        }=0A=
        this.fireEvent("add", this, records, index);=0A=
    },=0A=
=0A=
    =0A=
    indexOf : function(record){=0A=
        return this.data.indexOf(record);=0A=
    },=0A=
=0A=
    =0A=
    indexOfId : function(id){=0A=
        return this.data.indexOfKey(id);=0A=
    },=0A=
=0A=
    =0A=
    getById : function(id){=0A=
        return this.data.key(id);=0A=
    },=0A=
=0A=
    =0A=
    getAt : function(index){=0A=
        return this.data.itemAt(index);=0A=
    },=0A=
=0A=
    =0A=
    getRange : function(start, end){=0A=
        return this.data.getRange(start, end);=0A=
    },=0A=
=0A=
        storeOptions : function(o){=0A=
        o =3D Ext.apply({}, o);=0A=
        delete o.callback;=0A=
        delete o.scope;=0A=
        this.lastOptions =3D o;=0A=
    },=0A=
=0A=
    =0A=
    load : function(options){=0A=
        options =3D options || {};=0A=
        if(this.fireEvent("beforeload", this, options) !=3D=3D false){=0A=
            this.storeOptions(options);=0A=
            var p =3D Ext.apply(options.params || {}, this.baseParams);=0A=
            if(this.sortInfo && this.remoteSort){=0A=
                var pn =3D this.paramNames;=0A=
                p[pn["sort"]] =3D this.sortInfo.field;=0A=
                p[pn["dir"]] =3D this.sortInfo.direction;=0A=
            }=0A=
            this.proxy.load(p, this.reader, this.loadRecords, this, =
options);=0A=
            return true;=0A=
        } else {=0A=
          return false;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    reload : function(options){=0A=
        this.load(Ext.applyIf(options||{}, this.lastOptions));=0A=
    },=0A=
=0A=
            loadRecords : function(o, options, success){=0A=
        if(!o || success =3D=3D=3D false){=0A=
            if(success !=3D=3D false){=0A=
                this.fireEvent("load", this, [], options);=0A=
            }=0A=
            if(options.callback){=0A=
                options.callback.call(options.scope || this, [], =
options, false);=0A=
            }=0A=
            return;=0A=
        }=0A=
        var r =3D o.records, t =3D o.totalRecords || r.length;=0A=
        if(!options || options.add !=3D=3D true){=0A=
            if(this.pruneModifiedRecords){=0A=
                this.modified =3D [];=0A=
            }=0A=
            for(var i =3D 0, len =3D r.length; i < len; i++){=0A=
                r[i].join(this);=0A=
            }=0A=
            if(this.snapshot){=0A=
                this.data =3D this.snapshot;=0A=
                delete this.snapshot;=0A=
            }=0A=
            this.data.clear();=0A=
            this.data.addAll(r);=0A=
            this.totalLength =3D t;=0A=
            this.applySort();=0A=
            this.fireEvent("datachanged", this);=0A=
        }else{=0A=
            this.totalLength =3D Math.max(t, this.data.length+r.length);=0A=
            this.add(r);=0A=
        }=0A=
        this.fireEvent("load", this, r, options);=0A=
        if(options.callback){=0A=
            options.callback.call(options.scope || this, r, options, =
true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    loadData : function(o, append){=0A=
        var r =3D this.reader.readRecords(o);=0A=
        this.loadRecords(r, {add: append}, true);=0A=
    },=0A=
=0A=
    =0A=
    getCount : function(){=0A=
        return this.data.length || 0;=0A=
    },=0A=
=0A=
    =0A=
    getTotalCount : function(){=0A=
        return this.totalLength || 0;=0A=
    },=0A=
=0A=
    =0A=
    getSortState : function(){=0A=
        return this.sortInfo;=0A=
    },=0A=
=0A=
        applySort : function(){=0A=
        if(this.sortInfo && !this.remoteSort){=0A=
            var s =3D this.sortInfo, f =3D s.field;=0A=
            this.sortData(f, s.direction);=0A=
        }=0A=
    },=0A=
=0A=
        sortData : function(f, direction){=0A=
        direction =3D direction || 'ASC';=0A=
        var st =3D this.fields.get(f).sortType;=0A=
        var fn =3D function(r1, r2){=0A=
            var v1 =3D st(r1.data[f]), v2 =3D st(r2.data[f]);=0A=
            return v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);=0A=
        };=0A=
        this.data.sort(direction, fn);=0A=
        if(this.snapshot && this.snapshot !=3D this.data){=0A=
            this.snapshot.sort(direction, fn);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setDefaultSort : function(field, dir){=0A=
        dir =3D dir ? dir.toUpperCase() : "ASC";=0A=
        this.sortInfo =3D {field: field, direction: dir};=0A=
        this.sortToggle[field] =3D dir;=0A=
    },=0A=
=0A=
    =0A=
    sort : function(fieldName, dir){=0A=
        var f =3D this.fields.get(fieldName);=0A=
        if(!f){=0A=
            return false;=0A=
        }=0A=
        if(!dir){=0A=
            if(this.sortInfo && this.sortInfo.field =3D=3D f.name){      =
           dir =3D (this.sortToggle[f.name] || "ASC").toggle("ASC", =
"DESC");=0A=
            }else{=0A=
                dir =3D f.sortDir;=0A=
            }=0A=
        }=0A=
        var st =3D (this.sortToggle) ? this.sortToggle[f.name] : null;=0A=
        var si =3D (this.sortInfo) ? this.sortInfo : null;=0A=
=0A=
        this.sortToggle[f.name] =3D dir;=0A=
        this.sortInfo =3D {field: f.name, direction: dir};=0A=
        if(!this.remoteSort){=0A=
            this.applySort();=0A=
            this.fireEvent("datachanged", this);=0A=
        }else{=0A=
            if (!this.load(this.lastOptions)) {=0A=
                if (st) {=0A=
                    this.sortToggle[f.name] =3D st;=0A=
                }=0A=
                if (si) {=0A=
                    this.sortInfo =3D si;=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    each : function(fn, scope){=0A=
        this.data.each(fn, scope);=0A=
    },=0A=
=0A=
    =0A=
    getModifiedRecords : function(){=0A=
        return this.modified;=0A=
    },=0A=
=0A=
        createFilterFn : function(property, value, anyMatch, =
caseSensitive){=0A=
        if(Ext.isEmpty(value, false)){=0A=
            return false;=0A=
        }=0A=
        value =3D this.data.createValueMatcher(value, anyMatch, =
caseSensitive);=0A=
        return function(r){=0A=
            return value.test(r.data[property]);=0A=
        };=0A=
    },=0A=
=0A=
    =0A=
    sum : function(property, start, end){=0A=
        var rs =3D this.data.items, v =3D 0;=0A=
        start =3D start || 0;=0A=
        end =3D (end || end =3D=3D=3D 0) ? end : rs.length-1;=0A=
=0A=
        for(var i =3D start; i <=3D end; i++){=0A=
            v +=3D (rs[i].data[property] || 0);=0A=
        }=0A=
        return v;=0A=
    },=0A=
=0A=
    =0A=
    filter : function(property, value, anyMatch, caseSensitive){=0A=
        var fn =3D this.createFilterFn(property, value, anyMatch, =
caseSensitive);=0A=
        return fn ? this.filterBy(fn) : this.clearFilter();=0A=
    },=0A=
=0A=
    =0A=
    filterBy : function(fn, scope){=0A=
        this.snapshot =3D this.snapshot || this.data;=0A=
        this.data =3D this.queryBy(fn, scope||this);=0A=
        this.fireEvent("datachanged", this);=0A=
    },=0A=
=0A=
    =0A=
    query : function(property, value, anyMatch, caseSensitive){=0A=
        var fn =3D this.createFilterFn(property, value, anyMatch, =
caseSensitive);=0A=
        return fn ? this.queryBy(fn) : this.data.clone();=0A=
    },=0A=
=0A=
    =0A=
    queryBy : function(fn, scope){=0A=
        var data =3D this.snapshot || this.data;=0A=
        return data.filterBy(fn, scope||this);=0A=
    },=0A=
=0A=
    =0A=
    find : function(property, value, start, anyMatch, caseSensitive){=0A=
        var fn =3D this.createFilterFn(property, value, anyMatch, =
caseSensitive);=0A=
        return fn ? this.data.findIndexBy(fn, null, start) : -1;=0A=
    },=0A=
=0A=
    =0A=
    findBy : function(fn, scope, start){=0A=
        return this.data.findIndexBy(fn, scope, start);=0A=
    },=0A=
=0A=
    =0A=
    collect : function(dataIndex, allowNull, bypassFilter){=0A=
        var d =3D (bypassFilter =3D=3D=3D true && this.snapshot) ?=0A=
                this.snapshot.items : this.data.items;=0A=
        var v, sv, r =3D [], l =3D {};=0A=
        for(var i =3D 0, len =3D d.length; i < len; i++){=0A=
            v =3D d[i].data[dataIndex];=0A=
            sv =3D String(v);=0A=
            if((allowNull || !Ext.isEmpty(v)) && !l[sv]){=0A=
                l[sv] =3D true;=0A=
                r[r.length] =3D v;=0A=
            }=0A=
        }=0A=
        return r;=0A=
    },=0A=
=0A=
    =0A=
    clearFilter : function(suppressEvent){=0A=
        if(this.isFiltered()){=0A=
            this.data =3D this.snapshot;=0A=
            delete this.snapshot;=0A=
            if(suppressEvent !=3D=3D true){=0A=
                this.fireEvent("datachanged", this);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    isFiltered : function(){=0A=
        return this.snapshot && this.snapshot !=3D this.data;=0A=
    },=0A=
=0A=
        afterEdit : function(record){=0A=
        if(this.modified.indexOf(record) =3D=3D -1){=0A=
            this.modified.push(record);=0A=
        }=0A=
        this.fireEvent("update", this, record, Ext.data.Record.EDIT);=0A=
    },=0A=
=0A=
        afterReject : function(record){=0A=
        this.modified.remove(record);=0A=
        this.fireEvent("update", this, record, Ext.data.Record.REJECT);=0A=
    },=0A=
=0A=
        afterCommit : function(record){=0A=
        this.modified.remove(record);=0A=
        this.fireEvent("update", this, record, Ext.data.Record.COMMIT);=0A=
    },=0A=
=0A=
    =0A=
    commitChanges : function(){=0A=
        var m =3D this.modified.slice(0);=0A=
        this.modified =3D [];=0A=
        for(var i =3D 0, len =3D m.length; i < len; i++){=0A=
            m[i].commit();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    rejectChanges : function(){=0A=
        var m =3D this.modified.slice(0);=0A=
        this.modified =3D [];=0A=
        for(var i =3D 0, len =3D m.length; i < len; i++){=0A=
            m[i].reject();=0A=
        }=0A=
    },=0A=
=0A=
        onMetaChange : function(meta, rtype, o){=0A=
        this.recordType =3D rtype;=0A=
        this.fields =3D rtype.prototype.fields;=0A=
        delete this.snapshot;=0A=
        this.sortInfo =3D meta.sortInfo;=0A=
        this.modified =3D [];=0A=
        this.fireEvent('metachange', this, this.reader.meta);=0A=
    },=0A=
=0A=
        findInsertIndex : function(record){=0A=
        this.suspendEvents();=0A=
        var data =3D this.data.clone();=0A=
        this.data.add(record);=0A=
        this.applySort();=0A=
        var index =3D this.data.indexOf(record);=0A=
        this.data =3D data;=0A=
        this.resumeEvents();=0A=
        return index;=0A=
    }=0A=
});=0A=
=0A=
Ext.data.SimpleStore =3D function(config){=0A=
    Ext.data.SimpleStore.superclass.constructor.call(this, =
Ext.apply(config, {=0A=
        reader: new Ext.data.ArrayReader({=0A=
                id: config.id=0A=
            },=0A=
            Ext.data.Record.create(config.fields)=0A=
        )=0A=
    }));=0A=
};=0A=
Ext.extend(Ext.data.SimpleStore, Ext.data.Store, {=0A=
    loadData : function(data, append){=0A=
        if(this.expandData =3D=3D=3D true){=0A=
            var r =3D [];=0A=
            for(var i =3D 0, len =3D data.length; i < len; i++){=0A=
                r[r.length] =3D [data[i]];=0A=
            }=0A=
            data =3D r;=0A=
        }=0A=
        Ext.data.SimpleStore.superclass.loadData.call(this, data, =
append);=0A=
    }=0A=
});=0A=

Ext.data.JsonStore =3D function(c){
    Ext.data.JsonStore.superclass.constructor.call(this, Ext.apply(c, {
        proxy: !c.data ? new Ext.data.HttpProxy({url: c.url}) : =
undefined,
        reader: new Ext.data.JsonReader(c, c.fields)
    }));
};
Ext.extend(Ext.data.JsonStore, Ext.data.Store);=0A=
=0A=
=0A=
=0A=
Ext.data.Field =3D function(config){
    if(typeof config =3D=3D "string"){
        config =3D {name: config};
    }
    Ext.apply(this, config);
   =20
    if(!this.type){
        this.type =3D "auto";
    }
   =20
    var st =3D Ext.data.SortTypes;
    =0A=
    if(typeof this.sortType =3D=3D "string"){
        this.sortType =3D st[this.sortType];
    }
   =20
    =0A=
    if(!this.sortType){
        switch(this.type){
            case "string":
                this.sortType =3D st.asUCString;
                break;
            case "date":
                this.sortType =3D st.asDate;
                break;
            default:
                this.sortType =3D st.none;
        }
    }

    =0A=
    var stripRe =3D /[\$,%]/g;

    =0A=
    =0A=
    if(!this.convert){
        var cv, dateFormat =3D this.dateFormat;
        switch(this.type){
            case "":
            case "auto":
            case undefined:
                cv =3D function(v){ return v; };
                break;
            case "string":
                cv =3D function(v){ return (v =3D=3D=3D undefined || v =
=3D=3D=3D null) ? '' : String(v); };
                break;
            case "int":
                cv =3D function(v){
                    return v !=3D=3D undefined && v !=3D=3D null && v =
!=3D=3D '' ?
                           parseInt(String(v).replace(stripRe, ""), 10) =
: '';
                    };
                break;
            case "float":
                cv =3D function(v){
                    return v !=3D=3D undefined && v !=3D=3D null && v =
!=3D=3D '' ?
                           parseFloat(String(v).replace(stripRe, ""), =
10) : '';=20
                    };
                break;
            case "bool":
            case "boolean":
                cv =3D function(v){ return v =3D=3D=3D true || v =
=3D=3D=3D "true" || v =3D=3D 1; };
                break;
            case "date":
                cv =3D function(v){
                    if(!v){
                        return '';
                    }
                    if(Ext.isDate(v)){
                        return v;
                    }
                    if(dateFormat){
                        if(dateFormat =3D=3D "timestamp"){
                            return new Date(v*1000);
                        }
                        if(dateFormat =3D=3D "time"){
                            return new Date(parseInt(v, 10));
                        }
                        return Date.parseDate(v, dateFormat);
                    }
                    var parsed =3D Date.parse(v);
                    return parsed ? new Date(parsed) : null;
                };
             break;
           =20
        }
        this.convert =3D cv;
    }
};

Ext.data.Field.prototype =3D {
    dateFormat: null,
    defaultValue: "",
    mapping: null,
    sortType : null,
    sortDir : "ASC"
};=0A=

Ext.data.DataReader =3D function(meta, recordType){
   =20
    this.meta =3D meta;
    this.recordType =3D Ext.isArray(recordType) ?=20
        Ext.data.Record.create(recordType) : recordType;
};

Ext.data.DataReader.prototype =3D {
   =20
};=0A=

Ext.data.DataProxy =3D function(){
    this.addEvents(
       =20
        'beforeload',
       =20
        'load'
    );
    Ext.data.DataProxy.superclass.constructor.call(this);
};

Ext.extend(Ext.data.DataProxy, Ext.util.Observable);=0A=

Ext.data.MemoryProxy =3D function(data){
    Ext.data.MemoryProxy.superclass.constructor.call(this);
    this.data =3D data;
};

Ext.extend(Ext.data.MemoryProxy, Ext.data.DataProxy, {
   =20
   =20
   =20
    load : function(params, reader, callback, scope, arg){
        params =3D params || {};
        var result;
        try {
            result =3D reader.readRecords(this.data);
        }catch(e){
            this.fireEvent("loadexception", this, arg, null, e);
            callback.call(scope, null, arg, false);
            return;
        }
        callback.call(scope, result, arg, true);
    },
   =20
    =0A=
    update : function(params, records){
       =20
    }
});=0A=

Ext.data.HttpProxy =3D function(conn){
    Ext.data.HttpProxy.superclass.constructor.call(this);
   =20
    this.conn =3D conn;
    this.useAjax =3D !conn || !conn.events;

   =20
};

Ext.extend(Ext.data.HttpProxy, Ext.data.DataProxy, {
   =20
    getConnection : function(){
        return this.useAjax ? Ext.Ajax : this.conn;
    },

   =20
    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !=3D=3D false){
            var  o =3D {
                params : params || {},
                request: {
                    callback : callback,
                    scope : scope,
                    arg : arg
                },
                reader: reader,
                callback : this.loadResponse,
                scope: this
            };
            if(this.useAjax){
                Ext.applyIf(o, this.conn);
                if(this.activeRequest){
                    Ext.Ajax.abort(this.activeRequest);
                }
                this.activeRequest =3D Ext.Ajax.request(o);
            }else{
                this.conn.request(o);
            }
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },

    =0A=
    loadResponse : function(o, success, response){
        delete this.activeRequest;
        if(!success){
            this.fireEvent("loadexception", this, o, response);
            o.request.callback.call(o.request.scope, null, =
o.request.arg, false);
            return;
        }
        var result;
        try {
            result =3D o.reader.read(response);
        }catch(e){
            this.fireEvent("loadexception", this, o, response, e);
            o.request.callback.call(o.request.scope, null, =
o.request.arg, false);
            return;
        }
        this.fireEvent("load", this, o, o.request.arg);
        o.request.callback.call(o.request.scope, result, o.request.arg, =
true);
    },
   =20
    =0A=
    update : function(dataSet){
       =20
    },
   =20
    =0A=
    updateResponse : function(dataSet){
       =20
    }
});=0A=

Ext.data.ScriptTagProxy =3D function(config){
    Ext.data.ScriptTagProxy.superclass.constructor.call(this);
    Ext.apply(this, config);
    this.head =3D document.getElementsByTagName("head")[0];
   =20
   =20
};

Ext.data.ScriptTagProxy.TRANS_ID =3D 1000;

Ext.extend(Ext.data.ScriptTagProxy, Ext.data.DataProxy, {
   =20
   =20
    timeout : 30000,
   =20
    callbackParam : "callback",
   =20
    nocache : true,

   =20
    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !=3D=3D false){

            var p =3D Ext.urlEncode(Ext.apply(params, =
this.extraParams));

            var url =3D this.url;
            url +=3D (url.indexOf("?") !=3D -1 ? "&" : "?") + p;
            if(this.nocache){
                url +=3D "&_dc=3D" + (new Date().getTime());
            }
            var transId =3D ++Ext.data.ScriptTagProxy.TRANS_ID;
            var trans =3D {
                id : transId,
                cb : "stcCallback"+transId,
                scriptId : "stcScript"+transId,
                params : params,
                arg : arg,
                url : url,
                callback : callback,
                scope : scope,
                reader : reader
            };
            var conn =3D this;

            window[trans.cb] =3D function(o){
                conn.handleResponse(o, trans);
            };

            url +=3D String.format("&{0}=3D{1}", this.callbackParam, =
trans.cb);

            if(this.autoAbort !=3D=3D false){
                this.abort();
            }

            trans.timeoutId =3D this.handleFailure.defer(this.timeout, =
this, [trans]);

            var script =3D document.createElement("script");
            script.setAttribute("src", url);
            script.setAttribute("type", "text/javascript");
            script.setAttribute("id", trans.scriptId);
            this.head.appendChild(script);

            this.trans =3D trans;
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },

    =0A=
    isLoading : function(){
        return this.trans ? true : false;
    },

   =20
    abort : function(){
        if(this.isLoading()){
            this.destroyTrans(this.trans);
        }
    },

    =0A=
    destroyTrans : function(trans, isLoaded){
        this.head.removeChild(document.getElementById(trans.scriptId));
        clearTimeout(trans.timeoutId);
        if(isLoaded){
            window[trans.cb] =3D undefined;
            try{
                delete window[trans.cb];
            }catch(e){}
        }else{
            =0A=
            window[trans.cb] =3D function(){
                window[trans.cb] =3D undefined;
                try{
                    delete window[trans.cb];
                }catch(e){}
            };
        }
    },

    =0A=
    handleResponse : function(o, trans){
        this.trans =3D false;
        this.destroyTrans(trans, true);
        var result;
        try {
            result =3D trans.reader.readRecords(o);
        }catch(e){
            this.fireEvent("loadexception", this, o, trans.arg, e);
            trans.callback.call(trans.scope||window, null, trans.arg, =
false);
            return;
        }
        this.fireEvent("load", this, o, trans.arg);
        trans.callback.call(trans.scope||window, result, trans.arg, =
true);
    },

    =0A=
    handleFailure : function(trans){
        this.trans =3D false;
        this.destroyTrans(trans, false);
        this.fireEvent("loadexception", this, null, trans.arg);
        trans.callback.call(trans.scope||window, null, trans.arg, =
false);
    }
});=0A=
=0A=
Ext.data.JsonReader =3D function(meta, recordType){=0A=
    meta =3D meta || {};=0A=
    Ext.data.JsonReader.superclass.constructor.call(this, meta, =
recordType || meta.fields);=0A=
};=0A=
Ext.extend(Ext.data.JsonReader, Ext.data.DataReader, {=0A=
    =0A=
    =0A=
    read : function(response){=0A=
        var json =3D response.responseText;=0A=
        var o =3D eval("("+json+")");=0A=
        if(!o) {=0A=
            throw {message: "JsonReader.read: Json object not found"};=0A=
        }=0A=
        return this.readRecords(o);=0A=
    },=0A=
=0A=
        onMetaChange : function(meta, recordType, o){=0A=
=0A=
    },=0A=
=0A=
    =0A=
    simpleAccess: function(obj, subsc) {=0A=
    	return obj[subsc];=0A=
    },=0A=
=0A=
	=0A=
    getJsonAccessor: function(){=0A=
        var re =3D /[\[\.]/;=0A=
        return function(expr) {=0A=
            try {=0A=
                return(re.test(expr))=0A=
                    ? new Function("obj", "return obj." + expr)=0A=
                    : function(obj){=0A=
                        return obj[expr];=0A=
                    };=0A=
            } catch(e){}=0A=
            return Ext.emptyFn;=0A=
        };=0A=
    }(),=0A=
=0A=
    =0A=
    readRecords : function(o){=0A=
        =0A=
        this.jsonData =3D o;=0A=
        if(o.metaData){=0A=
            delete this.ef;=0A=
            this.meta =3D o.metaData;=0A=
            this.recordType =3D =
Ext.data.Record.create(o.metaData.fields);=0A=
            this.onMetaChange(this.meta, this.recordType, o);=0A=
        }=0A=
        var s =3D this.meta, Record =3D this.recordType,=0A=
            f =3D Record.prototype.fields, fi =3D f.items, fl =3D =
f.length;=0A=
=0A=
        if (!this.ef) {=0A=
            if(s.totalProperty) {=0A=
	            this.getTotal =3D this.getJsonAccessor(s.totalProperty);=0A=
	        }=0A=
	        if(s.successProperty) {=0A=
	            this.getSuccess =3D this.getJsonAccessor(s.successProperty);=0A=
	        }=0A=
	        this.getRoot =3D s.root ? this.getJsonAccessor(s.root) : =
function(p){return p;};=0A=
	        if (s.id) {=0A=
	        	var g =3D this.getJsonAccessor(s.id);=0A=
	        	this.getId =3D function(rec) {=0A=
	        		var r =3D g(rec);=0A=
		        	return (r =3D=3D=3D undefined || r =3D=3D=3D "") ? null : r;=0A=
	        	};=0A=
	        } else {=0A=
	        	this.getId =3D function(){return null;};=0A=
	        }=0A=
            this.ef =3D [];=0A=
            for(var i =3D 0; i < fl; i++){=0A=
                f =3D fi[i];=0A=
                var map =3D (f.mapping !=3D=3D undefined && f.mapping =
!=3D=3D null) ? f.mapping : f.name;=0A=
                this.ef[i] =3D this.getJsonAccessor(map);=0A=
            }=0A=
        }=0A=
=0A=
    	var root =3D this.getRoot(o), c =3D root.length, totalRecords =3D =
c, success =3D true;=0A=
    	if(s.totalProperty){=0A=
            var v =3D parseInt(this.getTotal(o), 10);=0A=
            if(!isNaN(v)){=0A=
                totalRecords =3D v;=0A=
            }=0A=
        }=0A=
        if(s.successProperty){=0A=
            var v =3D this.getSuccess(o);=0A=
            if(v =3D=3D=3D false || v =3D=3D=3D 'false'){=0A=
                success =3D false;=0A=
            }=0A=
        }=0A=
        var records =3D [];=0A=
	    for(var i =3D 0; i < c; i++){=0A=
		    var n =3D root[i];=0A=
	        var values =3D {};=0A=
	        var id =3D this.getId(n);=0A=
	        for(var j =3D 0; j < fl; j++){=0A=
	            f =3D fi[j];=0A=
                var v =3D this.ef[j](n);=0A=
                values[f.name] =3D f.convert((v !=3D=3D undefined) ? v : =
f.defaultValue, n);=0A=
	        }=0A=
	        var record =3D new Record(values, id);=0A=
	        record.json =3D n;=0A=
	        records[i] =3D record;=0A=
	    }=0A=
	    return {=0A=
	        success : success,=0A=
	        records : records,=0A=
	        totalRecords : totalRecords=0A=
	    };=0A=
    }=0A=
});=0A=
=0A=
Ext.data.XmlReader =3D function(meta, recordType){=0A=
    meta =3D meta || {};=0A=
    Ext.data.XmlReader.superclass.constructor.call(this, meta, =
recordType || meta.fields);=0A=
};=0A=
Ext.extend(Ext.data.XmlReader, Ext.data.DataReader, {=0A=
    =0A=
    read : function(response){=0A=
        var doc =3D response.responseXML;=0A=
        if(!doc) {=0A=
            throw {message: "XmlReader.read: XML Document not =
available"};=0A=
        }=0A=
        return this.readRecords(doc);=0A=
    },=0A=
=0A=
    =0A=
    readRecords : function(doc){=0A=
        =0A=
        this.xmlData =3D doc;=0A=
        var root =3D doc.documentElement || doc;=0A=
    	var q =3D Ext.DomQuery;=0A=
    	var recordType =3D this.recordType, fields =3D =
recordType.prototype.fields;=0A=
    	var sid =3D this.meta.id;=0A=
    	var totalRecords =3D 0, success =3D true;=0A=
    	if(this.meta.totalRecords){=0A=
    	    totalRecords =3D q.selectNumber(this.meta.totalRecords, root, =
0);=0A=
    	}=0A=
=0A=
        if(this.meta.success){=0A=
            var sv =3D q.selectValue(this.meta.success, root, true);=0A=
            success =3D sv !=3D=3D false && sv !=3D=3D 'false';=0A=
    	}=0A=
    	var records =3D [];=0A=
    	var ns =3D q.select(this.meta.record, root);=0A=
        for(var i =3D 0, len =3D ns.length; i < len; i++) {=0A=
	        var n =3D ns[i];=0A=
	        var values =3D {};=0A=
	        var id =3D sid ? q.selectValue(sid, n) : undefined;=0A=
	        for(var j =3D 0, jlen =3D fields.length; j < jlen; j++){=0A=
	            var f =3D fields.items[j];=0A=
                var v =3D q.selectValue(f.mapping || f.name, n, =
f.defaultValue);=0A=
	            v =3D f.convert(v, n);=0A=
	            values[f.name] =3D v;=0A=
	        }=0A=
	        var record =3D new recordType(values, id);=0A=
	        record.node =3D n;=0A=
	        records[records.length] =3D record;=0A=
	    }=0A=
=0A=
	    return {=0A=
	        success : success,=0A=
	        records : records,=0A=
	        totalRecords : totalRecords || records.length=0A=
	    };=0A=
    }=0A=
});=0A=

Ext.data.ArrayReader =3D Ext.extend(Ext.data.JsonReader, {
   =20
    readRecords : function(o){
        var sid =3D this.meta ? this.meta.id : null;
    	var recordType =3D this.recordType, fields =3D =
recordType.prototype.fields;
    	var records =3D [];
    	var root =3D o;
	    for(var i =3D 0; i < root.length; i++){
		    var n =3D root[i];
	        var values =3D {};
	        var id =3D ((sid || sid =3D=3D=3D 0) && n[sid] !=3D=3D =
undefined && n[sid] !=3D=3D "" ? n[sid] : null);
	        for(var j =3D 0, jlen =3D fields.length; j < jlen; j++){
                var f =3D fields.items[j];
                var k =3D f.mapping !=3D=3D undefined && f.mapping =
!=3D=3D null ? f.mapping : j;
                var v =3D n[k] !=3D=3D undefined ? n[k] : =
f.defaultValue;
                v =3D f.convert(v, n);
                values[f.name] =3D v;
            }
	        var record =3D new recordType(values, id);
	        record.json =3D n;
	        records[records.length] =3D record;
	    }
	    return {
	        records : records,
	        totalRecords : records.length
	    };
    }
});=0A=

Ext.data.Tree =3D function(root){
   this.nodeHash =3D {};
  =20
   this.root =3D null;
   if(root){
       this.setRootNode(root);
   }
   this.addEvents(
      =20
       "append",
      =20
       "remove",
      =20
       "move",
      =20
       "insert",
      =20
       "beforeappend",
      =20
       "beforeremove",
      =20
       "beforemove",
      =20
       "beforeinsert"
   );

    Ext.data.Tree.superclass.constructor.call(this);
};

Ext.extend(Ext.data.Tree, Ext.util.Observable, {
   =20
    pathSeparator: "/",

    =0A=
    proxyNodeEvent : function(){
        return this.fireEvent.apply(this, arguments);
    },

   =20
    getRootNode : function(){
        return this.root;
    },

   =20
    setRootNode : function(node){
        this.root =3D node;
        node.ownerTree =3D this;
        node.isRoot =3D true;
        this.registerNode(node);
        return node;
    },

   =20
    getNodeById : function(id){
        return this.nodeHash[id];
    },

    =0A=
    registerNode : function(node){
        this.nodeHash[node.id] =3D node;
    },

    =0A=
    unregisterNode : function(node){
        delete this.nodeHash[node.id];
    },

    toString : function(){
        return "[Tree"+(this.id?" "+this.id:"")+"]";
    }
});


Ext.data.Node =3D function(attributes){
   =20
    this.attributes =3D attributes || {};
    this.leaf =3D this.attributes.leaf;
   =20
    this.id =3D this.attributes.id;
    if(!this.id){
        this.id =3D Ext.id(null, "ynode-");
        this.attributes.id =3D this.id;
    }
   =20
    this.childNodes =3D [];
    if(!this.childNodes.indexOf){ =0A=
        this.childNodes.indexOf =3D function(o){
            for(var i =3D 0, len =3D this.length; i < len; i++){
                if(this[i] =3D=3D o) return i;
            }
            return -1;
        };
    }
   =20
    this.parentNode =3D null;
   =20
    this.firstChild =3D null;
   =20
    this.lastChild =3D null;
   =20
    this.previousSibling =3D null;
   =20
    this.nextSibling =3D null;

    this.addEvents({
      =20
       "append" : true,
      =20
       "remove" : true,
      =20
       "move" : true,
      =20
       "insert" : true,
      =20
       "beforeappend" : true,
      =20
       "beforeremove" : true,
      =20
       "beforemove" : true,
      =20
       "beforeinsert" : true
   });
    this.listeners =3D this.attributes.listeners;
    Ext.data.Node.superclass.constructor.call(this);
};

Ext.extend(Ext.data.Node, Ext.util.Observable, {
    =0A=
    fireEvent : function(evtName){
        =0A=
        if(Ext.data.Node.superclass.fireEvent.apply(this, arguments) =
=3D=3D=3D false){
            return false;
        }
        =0A=
        var ot =3D this.getOwnerTree();
        if(ot){
            if(ot.proxyNodeEvent.apply(ot, arguments) =3D=3D=3D false){
                return false;
            }
        }
        return true;
    },

   =20
    isLeaf : function(){
        return this.leaf =3D=3D=3D true;
    },

    =0A=
    setFirstChild : function(node){
        this.firstChild =3D node;
    },

    =0A=
    setLastChild : function(node){
        this.lastChild =3D node;
    },


   =20
    isLast : function(){
       return (!this.parentNode ? true : this.parentNode.lastChild =
=3D=3D this);
    },

   =20
    isFirst : function(){
       return (!this.parentNode ? true : this.parentNode.firstChild =
=3D=3D this);
    },

    hasChildNodes : function(){
        return !this.isLeaf() && this.childNodes.length > 0;
    },

   =20
    appendChild : function(node){
        var multi =3D false;
        if(Ext.isArray(node)){
            multi =3D node;
        }else if(arguments.length > 1){
            multi =3D arguments;
        }
        =0A=
        if(multi){
            for(var i =3D 0, len =3D multi.length; i < len; i++) {
            	this.appendChild(multi[i]);
            }
        }else{
            if(this.fireEvent("beforeappend", this.ownerTree, this, =
node) =3D=3D=3D false){
                return false;
            }
            var index =3D this.childNodes.length;
            var oldParent =3D node.parentNode;
            =0A=
            if(oldParent){
                if(node.fireEvent("beforemove", node.getOwnerTree(), =
node, oldParent, this, index) =3D=3D=3D false){
                    return false;
                }
                oldParent.removeChild(node);
            }
            index =3D this.childNodes.length;
            if(index =3D=3D 0){
                this.setFirstChild(node);
            }
            this.childNodes.push(node);
            node.parentNode =3D this;
            var ps =3D this.childNodes[index-1];
            if(ps){
                node.previousSibling =3D ps;
                ps.nextSibling =3D node;
            }else{
                node.previousSibling =3D null;
            }
            node.nextSibling =3D null;
            this.setLastChild(node);
            node.setOwnerTree(this.getOwnerTree());
            this.fireEvent("append", this.ownerTree, this, node, index);
            if(oldParent){
                node.fireEvent("move", this.ownerTree, node, oldParent, =
this, index);
            }
            return node;
        }
    },

   =20
    removeChild : function(node){
        var index =3D this.childNodes.indexOf(node);
        if(index =3D=3D -1){
            return false;
        }
        if(this.fireEvent("beforeremove", this.ownerTree, this, node) =
=3D=3D=3D false){
            return false;
        }

        =0A=
        this.childNodes.splice(index, 1);

        =0A=
        if(node.previousSibling){
            node.previousSibling.nextSibling =3D node.nextSibling;
        }
        if(node.nextSibling){
            node.nextSibling.previousSibling =3D node.previousSibling;
        }

        =0A=
        if(this.firstChild =3D=3D node){
            this.setFirstChild(node.nextSibling);
        }
        if(this.lastChild =3D=3D node){
            this.setLastChild(node.previousSibling);
        }

        node.setOwnerTree(null);
        =0A=
        node.parentNode =3D null;
        node.previousSibling =3D null;
        node.nextSibling =3D null;
        this.fireEvent("remove", this.ownerTree, this, node);
        return node;
    },

   =20
    insertBefore : function(node, refNode){
        if(!refNode){ =0A=
            return this.appendChild(node);
        }
        =0A=
        if(node =3D=3D refNode){
            return false;
        }

        if(this.fireEvent("beforeinsert", this.ownerTree, this, node, =
refNode) =3D=3D=3D false){
            return false;
        }
        var index =3D this.childNodes.indexOf(refNode);
        var oldParent =3D node.parentNode;
        var refIndex =3D index;

        =0A=
        if(oldParent =3D=3D this && this.childNodes.indexOf(node) < =
index){
            refIndex--;
        }

        =0A=
        if(oldParent){
            if(node.fireEvent("beforemove", node.getOwnerTree(), node, =
oldParent, this, index, refNode) =3D=3D=3D false){
                return false;
            }
            oldParent.removeChild(node);
        }
        if(refIndex =3D=3D 0){
            this.setFirstChild(node);
        }
        this.childNodes.splice(refIndex, 0, node);
        node.parentNode =3D this;
        var ps =3D this.childNodes[refIndex-1];
        if(ps){
            node.previousSibling =3D ps;
            ps.nextSibling =3D node;
        }else{
            node.previousSibling =3D null;
        }
        node.nextSibling =3D refNode;
        refNode.previousSibling =3D node;
        node.setOwnerTree(this.getOwnerTree());
        this.fireEvent("insert", this.ownerTree, this, node, refNode);
        if(oldParent){
            node.fireEvent("move", this.ownerTree, node, oldParent, =
this, refIndex, refNode);
        }
        return node;
    },

   =20
    remove : function(){
        this.parentNode.removeChild(this);
        return this;
    },

   =20
    item : function(index){
        return this.childNodes[index];
    },

   =20
    replaceChild : function(newChild, oldChild){
        this.insertBefore(newChild, oldChild);
        this.removeChild(oldChild);
        return oldChild;
    },

   =20
    indexOf : function(child){
        return this.childNodes.indexOf(child);
    },

   =20
    getOwnerTree : function(){
        =0A=
        if(!this.ownerTree){
            var p =3D this;
            while(p){
                if(p.ownerTree){
                    this.ownerTree =3D p.ownerTree;
                    break;
                }
                p =3D p.parentNode;
            }
        }
        return this.ownerTree;
    },

   =20
    getDepth : function(){
        var depth =3D 0;
        var p =3D this;
        while(p.parentNode){
            ++depth;
            p =3D p.parentNode;
        }
        return depth;
    },

    =0A=
    setOwnerTree : function(tree){
        =0A=
        if(tree !=3D this.ownerTree){
            if(this.ownerTree){
                this.ownerTree.unregisterNode(this);
            }
            this.ownerTree =3D tree;
            var cs =3D this.childNodes;
            for(var i =3D 0, len =3D cs.length; i < len; i++) {
            	cs[i].setOwnerTree(tree);
            }
            if(tree){
                tree.registerNode(this);
            }
        }
    },

   =20
    getPath : function(attr){
        attr =3D attr || "id";
        var p =3D this.parentNode;
        var b =3D [this.attributes[attr]];
        while(p){
            b.unshift(p.attributes[attr]);
            p =3D p.parentNode;
        }
        var sep =3D this.getOwnerTree().pathSeparator;
        return sep + b.join(sep);
    },

   =20
    bubble : function(fn, scope, args){
        var p =3D this;
        while(p){
            if(fn.apply(scope || p, args || [p]) =3D=3D=3D false){
                break;
            }
            p =3D p.parentNode;
        }
    },

   =20
    cascade : function(fn, scope, args){
        if(fn.apply(scope || this, args || [this]) !=3D=3D false){
            var cs =3D this.childNodes;
            for(var i =3D 0, len =3D cs.length; i < len; i++) {
            	cs[i].cascade(fn, scope, args);
            }
        }
    },

   =20
    eachChild : function(fn, scope, args){
        var cs =3D this.childNodes;
        for(var i =3D 0, len =3D cs.length; i < len; i++) {
        	if(fn.apply(scope || this, args || [cs[i]]) =3D=3D=3D false){
        	    break;
        	}
        }
    },

   =20
    findChild : function(attribute, value){
        var cs =3D this.childNodes;
        for(var i =3D 0, len =3D cs.length; i < len; i++) {
        	if(cs[i].attributes[attribute] =3D=3D value){
        	    return cs[i];
        	}
        }
        return null;
    },

   =20
    findChildBy : function(fn, scope){
        var cs =3D this.childNodes;
        for(var i =3D 0, len =3D cs.length; i < len; i++) {
        	if(fn.call(scope||cs[i], cs[i]) =3D=3D=3D true){
        	    return cs[i];
        	}
        }
        return null;
    },

   =20
    sort : function(fn, scope){
        var cs =3D this.childNodes;
        var len =3D cs.length;
        if(len > 0){
            var sortFn =3D scope ? function(){fn.apply(scope, =
arguments);} : fn;
            cs.sort(sortFn);
            for(var i =3D 0; i < len; i++){
                var n =3D cs[i];
                n.previousSibling =3D cs[i-1];
                n.nextSibling =3D cs[i+1];
                if(i =3D=3D 0){
                    this.setFirstChild(n);
                }
                if(i =3D=3D len-1){
                    this.setLastChild(n);
                }
            }
        }
    },

   =20
    contains : function(node){
        return node.isAncestor(this);
    },

   =20
    isAncestor : function(node){
        var p =3D this.parentNode;
        while(p){
            if(p =3D=3D node){
                return true;
            }
            p =3D p.parentNode;
        }
        return false;
    },

    toString : function(){
        return "[Node"+(this.id?" "+this.id:"")+"]";
    }
});=0A=

Ext.data.GroupingStore =3D Ext.extend(Ext.data.Store, {
   =20
   =20
    remoteGroup : false,
   =20
    groupOnSort:false,

   =20
    clearGrouping : function(){
        this.groupField =3D false;
        if(this.remoteGroup){
            if(this.baseParams){
                delete this.baseParams.groupBy;
            }
            this.reload();
        }else{
            this.applySort();
            this.fireEvent('datachanged', this);
        }
    },

   =20
    groupBy : function(field, forceRegroup){
        if(this.groupField =3D=3D field && !forceRegroup){
            return; =0A=
        }
        this.groupField =3D field;
        if(this.remoteGroup){
            if(!this.baseParams){
                this.baseParams =3D {};
            }
            this.baseParams['groupBy'] =3D field;
        }
        if(this.groupOnSort){
            this.sort(field);
            return;
        }
        if(this.remoteGroup){
            this.reload();
        }else{
            var si =3D this.sortInfo || {};
            if(si.field !=3D field){
                this.applySort();
            }else{
                this.sortData(field);
            }
            this.fireEvent('datachanged', this);
        }
    },

    =0A=
    applySort : function(){
        Ext.data.GroupingStore.superclass.applySort.call(this);
        if(!this.groupOnSort && !this.remoteGroup){
            var gs =3D this.getGroupState();
            if(gs && gs !=3D this.sortInfo.field){
                this.sortData(this.groupField);
            }
        }
    },

    =0A=
    applyGrouping : function(alwaysFireChange){
        if(this.groupField !=3D=3D false){
            this.groupBy(this.groupField, true);
            return true;
        }else{
            if(alwaysFireChange =3D=3D=3D true){
                this.fireEvent('datachanged', this);
            }
            return false;
        }
    },

    =0A=
    getGroupState : function(){
        return this.groupOnSort && this.groupField !=3D=3D false ?
               (this.sortInfo ? this.sortInfo.field : undefined) : =
this.groupField;
    }
});=0A=
=0A=
Ext.ComponentMgr =3D function(){=0A=
    var all =3D new Ext.util.MixedCollection();=0A=
    var types =3D {};=0A=
=0A=
    return {=0A=
        =0A=
        register : function(c){=0A=
            all.add(c);=0A=
        },=0A=
=0A=
        =0A=
        unregister : function(c){=0A=
            all.remove(c);=0A=
        },=0A=
=0A=
        =0A=
        get : function(id){=0A=
            return all.get(id);=0A=
        },=0A=
=0A=
        =0A=
        onAvailable : function(id, fn, scope){=0A=
            all.on("add", function(index, o){=0A=
                if(o.id =3D=3D id){=0A=
                    fn.call(scope || o, o);=0A=
                    all.un("add", fn, scope);=0A=
                }=0A=
            });=0A=
        },=0A=
=0A=
        =0A=
        all : all,=0A=
=0A=
        =0A=
        registerType : function(xtype, cls){=0A=
            types[xtype] =3D cls;=0A=
            cls.xtype =3D xtype;=0A=
        },=0A=
=0A=
                create : function(config, defaultType){=0A=
            return new types[config.xtype || defaultType](config);=0A=
        }=0A=
    };=0A=
}();=0A=
=0A=
=0A=
Ext.reg =3D Ext.ComponentMgr.registerType; // this will be called a lot =
internally, shorthand to keep the bytes down=0A=
=0A=
Ext.Component =3D function(config){=0A=
    config =3D config || {};=0A=
    if(config.initialConfig){=0A=
        if(config.isAction){                       this.baseAction =3D =
config;=0A=
        }=0A=
        config =3D config.initialConfig;     }else if(config.tagName || =
config.dom || typeof config =3D=3D "string"){         config =3D =
{applyTo: config, id: config.id || config};=0A=
    }=0A=
=0A=
    =0A=
    this.initialConfig =3D config;=0A=
=0A=
    Ext.apply(this, config);=0A=
    this.addEvents(=0A=
        =0A=
        'disable',=0A=
        =0A=
        'enable',=0A=
        =0A=
        'beforeshow',=0A=
        =0A=
        'show',=0A=
        =0A=
        'beforehide',=0A=
        =0A=
        'hide',=0A=
        =0A=
        'beforerender',=0A=
        =0A=
        'render',=0A=
        =0A=
        'beforedestroy',=0A=
        =0A=
        'destroy',=0A=
        =0A=
        'beforestaterestore',=0A=
        =0A=
        'staterestore',=0A=
        =0A=
        'beforestatesave',=0A=
        =0A=
        'statesave'=0A=
    );=0A=
    this.getId();=0A=
    Ext.ComponentMgr.register(this);=0A=
    Ext.Component.superclass.constructor.call(this);=0A=
=0A=
    if(this.baseAction){=0A=
        this.baseAction.addComponent(this);=0A=
    }=0A=
=0A=
    this.initComponent();=0A=
=0A=
    if(this.plugins){=0A=
        if(Ext.isArray(this.plugins)){=0A=
            for(var i =3D 0, len =3D this.plugins.length; i < len; i++){=0A=
                this.plugins[i].init(this);=0A=
            }=0A=
        }else{=0A=
            this.plugins.init(this);=0A=
        }=0A=
    }=0A=
=0A=
    if(this.stateful !=3D=3D false){=0A=
        this.initState(config);=0A=
    }=0A=
=0A=
    if(this.applyTo){=0A=
        this.applyToMarkup(this.applyTo);=0A=
        delete this.applyTo;=0A=
    }else if(this.renderTo){=0A=
        this.render(this.renderTo);=0A=
        delete this.renderTo;=0A=
    }=0A=
};=0A=
=0A=
Ext.Component.AUTO_ID =3D 1000;=0A=
=0A=
Ext.extend(Ext.Component, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
    =0A=
    =0A=
    =0A=
=0A=
    =0A=
    disabledClass : "x-item-disabled",=0A=
	=0A=
    allowDomMove : true,=0A=
	=0A=
    autoShow : false,=0A=
    =0A=
    hideMode: 'display',=0A=
    =0A=
    hideParent: false,=0A=
=0A=
    =0A=
    =0A=
    hidden : false,=0A=
    =0A=
    disabled : false,=0A=
    =0A=
    rendered : false,=0A=
=0A=
        ctype : "Ext.Component",=0A=
=0A=
        actionMode : "el",=0A=
=0A=
        getActionEl : function(){=0A=
        return this[this.actionMode];=0A=
    },=0A=
=0A=
    =0A=
    initComponent : Ext.emptyFn,=0A=
=0A=
    =0A=
    render : function(container, position){=0A=
        if(!this.rendered && this.fireEvent("beforerender", this) =
!=3D=3D false){=0A=
            if(!container && this.el){=0A=
                this.el =3D Ext.get(this.el);=0A=
                container =3D this.el.dom.parentNode;=0A=
                this.allowDomMove =3D false;=0A=
            }=0A=
            this.container =3D Ext.get(container);=0A=
            if(this.ctCls){=0A=
                this.container.addClass(this.ctCls);=0A=
            }=0A=
            this.rendered =3D true;=0A=
            if(position !=3D=3D undefined){=0A=
                if(typeof position =3D=3D 'number'){=0A=
                    position =3D this.container.dom.childNodes[position];=0A=
                }else{=0A=
                    position =3D Ext.getDom(position);=0A=
                }=0A=
            }=0A=
            this.onRender(this.container, position || null);=0A=
            if(this.autoShow){=0A=
                this.el.removeClass(['x-hidden','x-hide-' + =
this.hideMode]);=0A=
            }=0A=
            if(this.cls){=0A=
                this.el.addClass(this.cls);=0A=
                delete this.cls;=0A=
            }=0A=
            if(this.style){=0A=
                this.el.applyStyles(this.style);=0A=
                delete this.style;=0A=
            }=0A=
            this.fireEvent("render", this);=0A=
            this.afterRender(this.container);=0A=
            if(this.hidden){=0A=
                this.hide();=0A=
            }=0A=
            if(this.disabled){=0A=
                this.disable();=0A=
            }=0A=
=0A=
            this.initStateEvents();=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        initState : function(config){=0A=
        if(Ext.state.Manager){=0A=
            var state =3D Ext.state.Manager.get(this.stateId || this.id);=0A=
            if(state){=0A=
                if(this.fireEvent('beforestaterestore', this, state) =
!=3D=3D false){=0A=
                    this.applyState(state);=0A=
                    this.fireEvent('staterestore', this, state);=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        initStateEvents : function(){=0A=
        if(this.stateEvents){=0A=
            for(var i =3D 0, e; e =3D this.stateEvents[i]; i++){=0A=
                this.on(e, this.saveState, this, {delay:100});=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        applyState : function(state, config){=0A=
        if(state){=0A=
            Ext.apply(this, state);=0A=
        }=0A=
    },=0A=
=0A=
        getState : function(){=0A=
        return null;=0A=
    },=0A=
=0A=
        saveState : function(){=0A=
        if(Ext.state.Manager){=0A=
            var state =3D this.getState();=0A=
            if(this.fireEvent('beforestatesave', this, state) !=3D=3D =
false){=0A=
                Ext.state.Manager.set(this.stateId || this.id, state);=0A=
                this.fireEvent('statesave', this, state);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    applyToMarkup : function(el){=0A=
        this.allowDomMove =3D false;=0A=
        this.el =3D Ext.get(el);=0A=
        this.render(this.el.dom.parentNode);=0A=
    },=0A=
=0A=
    =0A=
    addClass : function(cls){=0A=
        if(this.el){=0A=
            this.el.addClass(cls);=0A=
        }else{=0A=
            this.cls =3D this.cls ? this.cls + ' ' + cls : cls;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    removeClass : function(cls){=0A=
        if(this.el){=0A=
            this.el.removeClass(cls);=0A=
        }else if(this.cls){=0A=
            this.cls =3D this.cls.split(' ').remove(cls).join(' ');=0A=
        }=0A=
    },=0A=
=0A=
            onRender : function(ct, position){=0A=
        if(this.autoEl){=0A=
            if(typeof this.autoEl =3D=3D 'string'){=0A=
                this.el =3D document.createElement(this.autoEl);=0A=
            }else{=0A=
                var div =3D document.createElement('div');=0A=
                Ext.DomHelper.overwrite(div, this.autoEl);=0A=
                this.el =3D div.firstChild;=0A=
            }=0A=
            if (!this.el.id) {=0A=
            	this.el.id =3D this.getId();=0A=
            }=0A=
        }=0A=
        if(this.el){=0A=
            this.el =3D Ext.get(this.el);=0A=
            if(this.allowDomMove !=3D=3D false){=0A=
                ct.dom.insertBefore(this.el.dom, position);=0A=
            }=0A=
            if(this.overCls) {=0A=
                this.el.addClassOnOver(this.overCls);=0A=
            }   =0A=
        }=0A=
    },=0A=
=0A=
        getAutoCreate : function(){=0A=
        var cfg =3D typeof this.autoCreate =3D=3D "object" ?=0A=
                      this.autoCreate : Ext.apply({}, =
this.defaultAutoCreate);=0A=
        if(this.id && !cfg.id){=0A=
            cfg.id =3D this.id;=0A=
        }=0A=
        return cfg;=0A=
    },=0A=
=0A=
        afterRender : Ext.emptyFn,=0A=
=0A=
    =0A=
    destroy : function(){=0A=
        if(this.fireEvent("beforedestroy", this) !=3D=3D false){=0A=
            this.beforeDestroy();=0A=
            if(this.rendered){=0A=
                this.el.removeAllListeners();=0A=
                this.el.remove();=0A=
                if(this.actionMode =3D=3D "container"){=0A=
                    this.container.remove();=0A=
                }=0A=
            }=0A=
            this.onDestroy();=0A=
            Ext.ComponentMgr.unregister(this);=0A=
            this.fireEvent("destroy", this);=0A=
            this.purgeListeners();=0A=
        }=0A=
    },=0A=
=0A=
	    beforeDestroy : Ext.emptyFn,=0A=
=0A=
	    onDestroy  : Ext.emptyFn,=0A=
=0A=
    =0A=
    getEl : function(){=0A=
        return this.el;=0A=
    },=0A=
=0A=
    =0A=
    getId : function(){=0A=
        return this.id || (this.id =3D "ext-comp-" + =
(++Ext.Component.AUTO_ID));=0A=
    },=0A=
=0A=
    =0A=
    getItemId : function(){=0A=
        return this.itemId || this.getId();=0A=
    },=0A=
=0A=
    =0A=
    focus : function(selectText, delay){=0A=
        if(delay){=0A=
            this.focus.defer(typeof delay =3D=3D 'number' ? delay : 10, =
this, [selectText, false]);=0A=
            return;=0A=
        }=0A=
        if(this.rendered){=0A=
            this.el.focus();=0A=
            if(selectText =3D=3D=3D true){=0A=
                this.el.dom.select();=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        blur : function(){=0A=
        if(this.rendered){=0A=
            this.el.blur();=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    disable : function(){=0A=
        if(this.rendered){=0A=
            this.onDisable();=0A=
        }=0A=
        this.disabled =3D true;=0A=
        this.fireEvent("disable", this);=0A=
        return this;=0A=
    },=0A=
=0A=
	    onDisable : function(){=0A=
        this.getActionEl().addClass(this.disabledClass);=0A=
        this.el.dom.disabled =3D true;=0A=
    },=0A=
=0A=
    =0A=
    enable : function(){=0A=
        if(this.rendered){=0A=
            this.onEnable();=0A=
        }=0A=
        this.disabled =3D false;=0A=
        this.fireEvent("enable", this);=0A=
        return this;=0A=
    },=0A=
=0A=
	    onEnable : function(){=0A=
        this.getActionEl().removeClass(this.disabledClass);=0A=
        this.el.dom.disabled =3D false;=0A=
    },=0A=
=0A=
    =0A=
    setDisabled : function(disabled){=0A=
        this[disabled ? "disable" : "enable"]();=0A=
    },=0A=
=0A=
    =0A=
    show: function(){=0A=
        if(this.fireEvent("beforeshow", this) !=3D=3D false){=0A=
            this.hidden =3D false;=0A=
            if(this.autoRender){=0A=
                this.render(typeof this.autoRender =3D=3D 'boolean' ? =
Ext.getBody() : this.autoRender);=0A=
            }=0A=
            if(this.rendered){=0A=
                this.onShow();=0A=
            }=0A=
            this.fireEvent("show", this);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        onShow : function(){=0A=
        if(this.hideParent){=0A=
            this.container.removeClass('x-hide-' + this.hideMode);=0A=
        }else{=0A=
            this.getActionEl().removeClass('x-hide-' + this.hideMode);=0A=
        }=0A=
=0A=
    },=0A=
=0A=
    =0A=
    hide: function(){=0A=
        if(this.fireEvent("beforehide", this) !=3D=3D false){=0A=
            this.hidden =3D true;=0A=
            if(this.rendered){=0A=
                this.onHide();=0A=
            }=0A=
            this.fireEvent("hide", this);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
        onHide : function(){=0A=
        if(this.hideParent){=0A=
            this.container.addClass('x-hide-' + this.hideMode);=0A=
        }else{=0A=
            this.getActionEl().addClass('x-hide-' + this.hideMode);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setVisible: function(visible){=0A=
        if(visible) {=0A=
            this.show();=0A=
        }else{=0A=
            this.hide();=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    isVisible : function(){=0A=
        return this.rendered && this.getActionEl().isVisible();=0A=
    },=0A=
=0A=
    =0A=
    cloneConfig : function(overrides){=0A=
        overrides =3D overrides || {};=0A=
        var id =3D overrides.id || Ext.id();=0A=
        var cfg =3D Ext.applyIf(overrides, this.initialConfig);=0A=
        cfg.id =3D id;         return new this.constructor(cfg);=0A=
    },=0A=
=0A=
    =0A=
    getXType : function(){=0A=
        return this.constructor.xtype;=0A=
    },=0A=
=0A=
    =0A=
    isXType : function(xtype, shallow){=0A=
        return !shallow ?=0A=
               ('/' + this.getXTypes() + '/').indexOf('/' + xtype + '/') =
!=3D -1 :=0A=
                this.constructor.xtype =3D=3D xtype;=0A=
    },=0A=
=0A=
    =0A=
    getXTypes : function(){=0A=
        var tc =3D this.constructor;=0A=
        if(!tc.xtypes){=0A=
            var c =3D [], sc =3D this;=0A=
            while(sc && sc.constructor.xtype){=0A=
                c.unshift(sc.constructor.xtype);=0A=
                sc =3D sc.constructor.superclass;=0A=
            }=0A=
            tc.xtypeChain =3D c;=0A=
            tc.xtypes =3D c.join('/');=0A=
        }=0A=
        return tc.xtypes;=0A=
    },=0A=
=0A=
    =0A=
    findParentBy: function(fn) {=0A=
        for (var p =3D this.ownerCt; (p !=3D null) && !fn(p, this); p =
=3D p.ownerCt);=0A=
        return p || null;=0A=
    },=0A=
=0A=
    =0A=
    findParentByType: function(xtype) {=0A=
        return typeof xtype =3D=3D 'function' ?=0A=
            this.findParentBy(function(p){=0A=
                return p.constructor =3D=3D=3D xtype;=0A=
            }) :=0A=
            this.findParentBy(function(p){=0A=
                return p.constructor.xtype =3D=3D=3D xtype;=0A=
            });=0A=
    },=0A=
=0A=
        mon : function(item, ename, fn, scope, opt){=0A=
        if(!this.mons){=0A=
            this.mons =3D [];=0A=
            this.on('beforedestroy', function(){=0A=
                for(var i=3D 0, len =3D this.mons.length; i < len; i++){=0A=
                    var m =3D this.mons[i];=0A=
                    m.item.un(m.ename, m.fn, m.scope);=0A=
                }=0A=
            }, this);=0A=
        }=0A=
        this.mons.push({=0A=
            item: item, ename: ename, fn: fn, scope: scope=0A=
        });=0A=
        item.on(ename, fn, scope, opt);=0A=
    }=0A=
});=0A=
=0A=
Ext.reg('component', Ext.Component);=0A=
=0A=

Ext.Action =3D function(config){
    this.initialConfig =3D config;
    this.items =3D [];
}

Ext.Action.prototype =3D {
   =20
   =20
   =20
   =20
   =20
   =20

    =0A=
    isAction : true,

   =20
    setText : function(text){
        this.initialConfig.text =3D text;
        this.callEach('setText', [text]);
    },

   =20
    getText : function(){
        return this.initialConfig.text;
    },

   =20
    setIconClass : function(cls){
        this.initialConfig.iconCls =3D cls;
        this.callEach('setIconClass', [cls]);
    },

   =20
    getIconClass : function(){
        return this.initialConfig.iconCls;
    },

   =20
    setDisabled : function(v){
        this.initialConfig.disabled =3D v;
        this.callEach('setDisabled', [v]);
    },

   =20
    enable : function(){
        this.setDisabled(false);
    },

   =20
    disable : function(){
        this.setDisabled(true);
    },

   =20
    isDisabled : function(){
        return this.initialConfig.disabled;
    },

   =20
    setHidden : function(v){
        this.initialConfig.hidden =3D v;
        this.callEach('setVisible', [!v]);
    },

   =20
    show : function(){
        this.setHidden(false);
    },

   =20
    hide : function(){
        this.setHidden(true);
    },

   =20
    isHidden : function(){
        return this.initialConfig.hidden;
    },

   =20
    setHandler : function(fn, scope){
        this.initialConfig.handler =3D fn;
        this.initialConfig.scope =3D scope;
        this.callEach('setHandler', [fn, scope]);
    },

   =20
    each : function(fn, scope){
        Ext.each(this.items, fn, scope);
    },

    =0A=
    callEach : function(fnName, args){
        var cs =3D this.items;
        for(var i =3D 0, len =3D cs.length; i < len; i++){
            cs[i][fnName].apply(cs[i], args);
        }
    },

    =0A=
    addComponent : function(comp){
        this.items.push(comp);
        comp.on('destroy', this.removeComponent, this);
    },

    =0A=
    removeComponent : function(comp){
        this.items.remove(comp);
    },

   =20
    execute : function(){
        this.initialConfig.handler.apply(this.initialConfig.scope || =
window, arguments);
    }
};=0A=

(function(){=20
Ext.Layer =3D function(config, existingEl){
    config =3D config || {};
    var dh =3D Ext.DomHelper;
    var cp =3D config.parentEl, pel =3D cp ? Ext.getDom(cp) : =
document.body;
    if(existingEl){
        this.dom =3D Ext.getDom(existingEl);
    }
    if(!this.dom){
        var o =3D config.dh || {tag: "div", cls: "x-layer"};
        this.dom =3D dh.append(pel, o);
    }
    if(config.cls){
        this.addClass(config.cls);
    }
    this.constrain =3D config.constrain !=3D=3D false;
    this.visibilityMode =3D Ext.Element.VISIBILITY;
    if(config.id){
        this.id =3D this.dom.id =3D config.id;
    }else{
        this.id =3D Ext.id(this.dom);
    }
    this.zindex =3D config.zindex || this.getZIndex();
    this.position("absolute", this.zindex);
    if(config.shadow){
        this.shadowOffset =3D config.shadowOffset || 4;
        this.shadow =3D new Ext.Shadow({
            offset : this.shadowOffset,
            mode : config.shadow
        });
    }else{
        this.shadowOffset =3D 0;
    }
    this.useShim =3D config.shim !=3D=3D false && Ext.useShims;
    this.useDisplay =3D config.useDisplay;
    this.hide();
};

var supr =3D Ext.Element.prototype;

=0A=
var shims =3D [];

Ext.extend(Ext.Layer, Ext.Element, {

    getZIndex : function(){
        return this.zindex || parseInt(this.getStyle("z-index"), 10) || =
11000;
    },

    getShim : function(){
        if(!this.useShim){
            return null;
        }
        if(this.shim){
            return this.shim;
        }
        var shim =3D shims.shift();
        if(!shim){
            shim =3D this.createShim();
            shim.enableDisplayMode('block');
            shim.dom.style.display =3D 'none';
            shim.dom.style.visibility =3D 'visible';
        }
        var pn =3D this.dom.parentNode;
        if(shim.dom.parentNode !=3D pn){
            pn.insertBefore(shim.dom, this.dom);
        }
        shim.setStyle('z-index', this.getZIndex()-2);
        this.shim =3D shim;
        return shim;
    },

    hideShim : function(){
        if(this.shim){
            this.shim.setDisplayed(false);
            shims.push(this.shim);
            delete this.shim;
        }
    },

    disableShadow : function(){
        if(this.shadow){
            this.shadowDisabled =3D true;
            this.shadow.hide();
            this.lastShadowOffset =3D this.shadowOffset;
            this.shadowOffset =3D 0;
        }
    },

    enableShadow : function(show){
        if(this.shadow){
            this.shadowDisabled =3D false;
            this.shadowOffset =3D this.lastShadowOffset;
            delete this.lastShadowOffset;
            if(show){
                this.sync(true);
            }
        }
    },

    =0A=
    =0A=
    =0A=
    sync : function(doShow){
        var sw =3D this.shadow;
        if(!this.updating && this.isVisible() && (sw || this.useShim)){
            var sh =3D this.getShim();

            var w =3D this.getWidth(),
                h =3D this.getHeight();

            var l =3D this.getLeft(true),
                t =3D this.getTop(true);

            if(sw && !this.shadowDisabled){
                if(doShow && !sw.isVisible()){
                    sw.show(this);
                }else{
                    sw.realign(l, t, w, h);
                }
                if(sh){
                    if(doShow){
                       sh.show();
                    }
                    =0A=
                    var a =3D sw.adjusts, s =3D sh.dom.style;
                    s.left =3D (Math.min(l, l+a.l))+"px";
                    s.top =3D (Math.min(t, t+a.t))+"px";
                    s.width =3D (w+a.w)+"px";
                    s.height =3D (h+a.h)+"px";
                }
            }else if(sh){
                if(doShow){
                   sh.show();
                }
                sh.setSize(w, h);
                sh.setLeftTop(l, t);
            }
           =20
        }
    },

    =0A=
    destroy : function(){
        this.hideShim();
        if(this.shadow){
            this.shadow.hide();
        }
        this.removeAllListeners();
        Ext.removeNode(this.dom);
        Ext.Element.uncache(this.id);
    },

    remove : function(){
        this.destroy();
    },

    =0A=
    beginUpdate : function(){
        this.updating =3D true;
    },

    =0A=
    endUpdate : function(){
        this.updating =3D false;
        this.sync(true);
    },

    =0A=
    hideUnders : function(negOffset){
        if(this.shadow){
            this.shadow.hide();
        }
        this.hideShim();
    },

    =0A=
    constrainXY : function(){
        if(this.constrain){
            var vw =3D Ext.lib.Dom.getViewWidth(),
                vh =3D Ext.lib.Dom.getViewHeight();
            var s =3D Ext.getDoc().getScroll();

            var xy =3D this.getXY();
            var x =3D xy[0], y =3D xy[1];  =20
            var w =3D this.dom.offsetWidth+this.shadowOffset, h =3D =
this.dom.offsetHeight+this.shadowOffset;
            =0A=
            var moved =3D false;
            =0A=
            if((x + w) > vw+s.left){
                x =3D vw - w - this.shadowOffset;
                moved =3D true;
            }
            if((y + h) > vh+s.top){
                y =3D vh - h - this.shadowOffset;
                moved =3D true;
            }
            =0A=
            if(x < s.left){
                x =3D s.left;
                moved =3D true;
            }
            if(y < s.top){
                y =3D s.top;
                moved =3D true;
            }
            if(moved){
                if(this.avoidY){
                    var ay =3D this.avoidY;
                    if(y <=3D ay && (y+h) >=3D ay){
                        y =3D ay-h-5;  =20
                    }
                }
                xy =3D [x, y];
                this.storeXY(xy);
                supr.setXY.call(this, xy);
                this.sync();
            }
        }
    },

    isVisible : function(){
        return this.visible;   =20
    },

    =0A=
    showAction : function(){
        this.visible =3D true; =0A=
        if(this.useDisplay =3D=3D=3D true){
            this.setDisplayed("");
        }else if(this.lastXY){
            supr.setXY.call(this, this.lastXY);
        }else if(this.lastLT){
            supr.setLeftTop.call(this, this.lastLT[0], this.lastLT[1]);
        }
    },

    =0A=
    hideAction : function(){
        this.visible =3D false;
        if(this.useDisplay =3D=3D=3D true){
            this.setDisplayed(false);
        }else{
            this.setLeftTop(-10000,-10000);
        }
    },

    =0A=
    setVisible : function(v, a, d, c, e){
        if(v){
            this.showAction();
        }
        if(a && v){
            var cb =3D function(){
                this.sync(true);
                if(c){
                    c();
                }
            }.createDelegate(this);
            supr.setVisible.call(this, true, true, d, cb, e);
        }else{
            if(!v){
                this.hideUnders(true);
            }
            var cb =3D c;
            if(a){
                cb =3D function(){
                    this.hideAction();
                    if(c){
                        c();
                    }
                }.createDelegate(this);
            }
            supr.setVisible.call(this, v, a, d, cb, e);
            if(v){
                this.sync(true);
            }else if(!a){
                this.hideAction();
            }
        }
    },

    storeXY : function(xy){
        delete this.lastLT;
        this.lastXY =3D xy;
    },

    storeLeftTop : function(left, top){
        delete this.lastXY;
        this.lastLT =3D [left, top];
    },

    =0A=
    beforeFx : function(){
        this.beforeAction();
        return Ext.Layer.superclass.beforeFx.apply(this, arguments);
    },

    =0A=
    afterFx : function(){
        Ext.Layer.superclass.afterFx.apply(this, arguments);
        this.sync(this.isVisible());
    },

    =0A=
    beforeAction : function(){
        if(!this.updating && this.shadow){
            this.shadow.hide();
        }
    },

    =0A=
    setLeft : function(left){
        this.storeLeftTop(left, this.getTop(true));
        supr.setLeft.apply(this, arguments);
        this.sync();
    },

    setTop : function(top){
        this.storeLeftTop(this.getLeft(true), top);
        supr.setTop.apply(this, arguments);
        this.sync();
    },

    setLeftTop : function(left, top){
        this.storeLeftTop(left, top);
        supr.setLeftTop.apply(this, arguments);
        this.sync();
    },

    setXY : function(xy, a, d, c, e){
        this.fixDisplay();
        this.beforeAction();
        this.storeXY(xy);
        var cb =3D this.createCB(c);
        supr.setXY.call(this, xy, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    =0A=
    createCB : function(c){
        var el =3D this;
        return function(){
            el.constrainXY();
            el.sync(true);
            if(c){
                c();
            }
        };
    },

    =0A=
    setX : function(x, a, d, c, e){
        this.setXY([x, this.getY()], a, d, c, e);
    },

    =0A=
    setY : function(y, a, d, c, e){
        this.setXY([this.getX(), y], a, d, c, e);
    },

    =0A=
    setSize : function(w, h, a, d, c, e){
        this.beforeAction();
        var cb =3D this.createCB(c);
        supr.setSize.call(this, w, h, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    =0A=
    setWidth : function(w, a, d, c, e){
        this.beforeAction();
        var cb =3D this.createCB(c);
        supr.setWidth.call(this, w, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    =0A=
    setHeight : function(h, a, d, c, e){
        this.beforeAction();
        var cb =3D this.createCB(c);
        supr.setHeight.call(this, h, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    =0A=
    setBounds : function(x, y, w, h, a, d, c, e){
        this.beforeAction();
        var cb =3D this.createCB(c);
        if(!a){
            this.storeXY([x, y]);
            supr.setXY.call(this, [x, y]);
            supr.setSize.call(this, w, h, a, d, cb, e);
            cb();
        }else{
            supr.setBounds.call(this, x, y, w, h, a, d, cb, e);
        }
        return this;
    },
   =20
   =20
    setZIndex : function(zindex){
        this.zindex =3D zindex;
        this.setStyle("z-index", zindex + 2);
        if(this.shadow){
            this.shadow.setZIndex(zindex + 1);
        }
        if(this.shim){
            this.shim.setStyle("z-index", zindex);
        }
    }
});
})();=0A=
=0A=
Ext.Shadow =3D function(config){=0A=
    Ext.apply(this, config);=0A=
    if(typeof this.mode !=3D "string"){=0A=
        this.mode =3D this.defaultMode;=0A=
    }=0A=
    var o =3D this.offset, a =3D {h: 0};=0A=
    var rad =3D Math.floor(this.offset/2);=0A=
    switch(this.mode.toLowerCase()){         case "drop":=0A=
            a.w =3D 0;=0A=
            a.l =3D a.t =3D o;=0A=
            a.t -=3D 1;=0A=
            if(Ext.isIE){=0A=
                a.l -=3D this.offset + rad;=0A=
                a.t -=3D this.offset + rad;=0A=
                a.w -=3D rad;=0A=
                a.h -=3D rad;=0A=
                a.t +=3D 1;=0A=
            }=0A=
        break;=0A=
        case "sides":=0A=
            a.w =3D (o*2);=0A=
            a.l =3D -o;=0A=
            a.t =3D o-1;=0A=
            if(Ext.isIE){=0A=
                a.l -=3D (this.offset - rad);=0A=
                a.t -=3D this.offset + rad;=0A=
                a.l +=3D 1;=0A=
                a.w -=3D (this.offset - rad)*2;=0A=
                a.w -=3D rad + 1;=0A=
                a.h -=3D 1;=0A=
            }=0A=
        break;=0A=
        case "frame":=0A=
            a.w =3D a.h =3D (o*2);=0A=
            a.l =3D a.t =3D -o;=0A=
            a.t +=3D 1;=0A=
            a.h -=3D 2;=0A=
            if(Ext.isIE){=0A=
                a.l -=3D (this.offset - rad);=0A=
                a.t -=3D (this.offset - rad);=0A=
                a.l +=3D 1;=0A=
                a.w -=3D (this.offset + rad + 1);=0A=
                a.h -=3D (this.offset + rad);=0A=
                a.h +=3D 1;=0A=
            }=0A=
        break;=0A=
    };=0A=
=0A=
    this.adjusts =3D a;=0A=
};=0A=
=0A=
Ext.Shadow.prototype =3D {=0A=
    =0A=
    =0A=
    offset: 4,=0A=
=0A=
        defaultMode: "drop",=0A=
=0A=
    =0A=
    show : function(target){=0A=
        target =3D Ext.get(target);=0A=
        if(!this.el){=0A=
            this.el =3D Ext.Shadow.Pool.pull();=0A=
            if(this.el.dom.nextSibling !=3D target.dom){=0A=
                this.el.insertBefore(target);=0A=
            }=0A=
        }=0A=
        this.el.setStyle("z-index", this.zIndex || =
parseInt(target.getStyle("z-index"), 10)-1);=0A=
        if(Ext.isIE){=0A=
            =
this.el.dom.style.filter=3D"progid:DXImageTransform.Microsoft.alpha(opaci=
ty=3D50) =
progid:DXImageTransform.Microsoft.Blur(pixelradius=3D"+(this.offset)+")";=0A=
        }=0A=
        this.realign(=0A=
            target.getLeft(true),=0A=
            target.getTop(true),=0A=
            target.getWidth(),=0A=
            target.getHeight()=0A=
        );=0A=
        this.el.dom.style.display =3D "block";=0A=
    },=0A=
=0A=
    =0A=
    isVisible : function(){=0A=
        return this.el ? true : false;  =0A=
    },=0A=
=0A=
    =0A=
    realign : function(l, t, w, h){=0A=
        if(!this.el){=0A=
            return;=0A=
        }=0A=
        var a =3D this.adjusts, d =3D this.el.dom, s =3D d.style;=0A=
        var iea =3D 0;=0A=
        s.left =3D (l+a.l)+"px";=0A=
        s.top =3D (t+a.t)+"px";=0A=
        var sw =3D (w+a.w), sh =3D (h+a.h), sws =3D sw +"px", shs =3D sh =
+ "px";=0A=
        if(s.width !=3D sws || s.height !=3D shs){=0A=
            s.width =3D sws;=0A=
            s.height =3D shs;=0A=
            if(!Ext.isIE){=0A=
                var cn =3D d.childNodes;=0A=
                var sww =3D Math.max(0, (sw-12))+"px";=0A=
                cn[0].childNodes[1].style.width =3D sww;=0A=
                cn[1].childNodes[1].style.width =3D sww;=0A=
                cn[2].childNodes[1].style.width =3D sww;=0A=
                cn[1].style.height =3D Math.max(0, (sh-12))+"px";=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    hide : function(){=0A=
        if(this.el){=0A=
            this.el.dom.style.display =3D "none";=0A=
            Ext.Shadow.Pool.push(this.el);=0A=
            delete this.el;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setZIndex : function(z){=0A=
        this.zIndex =3D z;=0A=
        if(this.el){=0A=
            this.el.setStyle("z-index", z);=0A=
        }=0A=
    }=0A=
};=0A=
=0A=
Ext.Shadow.Pool =3D function(){=0A=
    var p =3D [];=0A=
    var markup =3D Ext.isIE ?=0A=
                 '<div class=3D"x-ie-shadow"></div>' :=0A=
                 '<div class=3D"x-shadow"><div class=3D"xst"><div =
class=3D"xstl"></div><div class=3D"xstc"></div><div =
class=3D"xstr"></div></div><div class=3D"xsc"><div =
class=3D"xsml"></div><div class=3D"xsmc"></div><div =
class=3D"xsmr"></div></div><div class=3D"xsb"><div =
class=3D"xsbl"></div><div class=3D"xsbc"></div><div =
class=3D"xsbr"></div></div></div>';=0A=
    return {=0A=
        pull : function(){=0A=
            var sh =3D p.shift();=0A=
            if(!sh){=0A=
                sh =3D Ext.get(Ext.DomHelper.insertHtml("beforeBegin", =
document.body.firstChild, markup));=0A=
                sh.autoBoxAdjust =3D false;=0A=
            }=0A=
            return sh;=0A=
        },=0A=
=0A=
        push : function(sh){=0A=
            p.push(sh);=0A=
        }=0A=
    };=0A=
}();=0A=
=0A=
Ext.BoxComponent =3D Ext.extend(Ext.Component, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
	=0A=
    =0A=
=0A=
	    initComponent : function(){=0A=
        Ext.BoxComponent.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            'resize',=0A=
            =0A=
            'move'=0A=
        );=0A=
    },=0A=
=0A=
        boxReady : false,=0A=
        deferHeight: false,=0A=
=0A=
    =0A=
    setSize : function(w, h){=0A=
                if(typeof w =3D=3D 'object'){=0A=
            h =3D w.height;=0A=
            w =3D w.width;=0A=
        }=0A=
                if(!this.boxReady){=0A=
            this.width =3D w;=0A=
            this.height =3D h;=0A=
            return this;=0A=
        }=0A=
=0A=
                if(this.lastSize && this.lastSize.width =3D=3D w && =
this.lastSize.height =3D=3D h){=0A=
            return this;=0A=
        }=0A=
        this.lastSize =3D {width: w, height: h};=0A=
        var adj =3D this.adjustSize(w, h);=0A=
        var aw =3D adj.width, ah =3D adj.height;=0A=
        if(aw !=3D=3D undefined || ah !=3D=3D undefined){             =
var rz =3D this.getResizeEl();=0A=
            if(!this.deferHeight && aw !=3D=3D undefined && ah !=3D=3D =
undefined){=0A=
                rz.setSize(aw, ah);=0A=
            }else if(!this.deferHeight && ah !=3D=3D undefined){=0A=
                rz.setHeight(ah);=0A=
            }else if(aw !=3D=3D undefined){=0A=
                rz.setWidth(aw);=0A=
            }=0A=
            this.onResize(aw, ah, w, h);=0A=
            this.fireEvent('resize', this, aw, ah, w, h);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setWidth : function(width){=0A=
        return this.setSize(width);=0A=
    },=0A=
=0A=
    =0A=
    setHeight : function(height){=0A=
        return this.setSize(undefined, height);=0A=
    },=0A=
=0A=
    =0A=
    getSize : function(){=0A=
        return this.el.getSize();=0A=
    },=0A=
=0A=
    =0A=
    getPosition : function(local){=0A=
        if(local =3D=3D=3D true){=0A=
            return [this.el.getLeft(true), this.el.getTop(true)];=0A=
        }=0A=
        return this.xy || this.el.getXY();=0A=
    },=0A=
=0A=
    =0A=
    getBox : function(local){=0A=
        var s =3D this.el.getSize();=0A=
        if(local =3D=3D=3D true){=0A=
            s.x =3D this.el.getLeft(true);=0A=
            s.y =3D this.el.getTop(true);=0A=
        }else{=0A=
            var xy =3D this.xy || this.el.getXY();=0A=
            s.x =3D xy[0];=0A=
            s.y =3D xy[1];=0A=
        }=0A=
        return s;=0A=
    },=0A=
=0A=
    =0A=
    updateBox : function(box){=0A=
        this.setSize(box.width, box.height);=0A=
        this.setPagePosition(box.x, box.y);=0A=
        return this;=0A=
    },=0A=
=0A=
        getResizeEl : function(){=0A=
        return this.resizeEl || this.el;=0A=
    },=0A=
=0A=
        getPositionEl : function(){=0A=
        return this.positionEl || this.el;=0A=
    },=0A=
=0A=
    =0A=
    setPosition : function(x, y){=0A=
        if(x && typeof x[1] =3D=3D 'number'){=0A=
            y =3D x[1];=0A=
            x =3D x[0];=0A=
        }=0A=
        this.x =3D x;=0A=
        this.y =3D y;=0A=
        if(!this.boxReady){=0A=
            return this;=0A=
        }=0A=
        var adj =3D this.adjustPosition(x, y);=0A=
        var ax =3D adj.x, ay =3D adj.y;=0A=
=0A=
        var el =3D this.getPositionEl();=0A=
        if(ax !=3D=3D undefined || ay !=3D=3D undefined){=0A=
            if(ax !=3D=3D undefined && ay !=3D=3D undefined){=0A=
                el.setLeftTop(ax, ay);=0A=
            }else if(ax !=3D=3D undefined){=0A=
                el.setLeft(ax);=0A=
            }else if(ay !=3D=3D undefined){=0A=
                el.setTop(ay);=0A=
            }=0A=
            this.onPosition(ax, ay);=0A=
            this.fireEvent('move', this, ax, ay);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setPagePosition : function(x, y){=0A=
        if(x && typeof x[1] =3D=3D 'number'){=0A=
            y =3D x[1];=0A=
            x =3D x[0];=0A=
        }=0A=
        this.pageX =3D x;=0A=
        this.pageY =3D y;=0A=
        if(!this.boxReady){=0A=
            return;=0A=
        }=0A=
        if(x =3D=3D=3D undefined || y =3D=3D=3D undefined){             =
return;=0A=
        }=0A=
        var p =3D this.el.translatePoints(x, y);=0A=
        this.setPosition(p.left, p.top);=0A=
        return this;=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.BoxComponent.superclass.onRender.call(this, ct, position);=0A=
        if(this.resizeEl){=0A=
            this.resizeEl =3D Ext.get(this.resizeEl);=0A=
        }=0A=
        if(this.positionEl){=0A=
            this.positionEl =3D Ext.get(this.positionEl);=0A=
        }=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        Ext.BoxComponent.superclass.afterRender.call(this);=0A=
        this.boxReady =3D true;=0A=
        this.setSize(this.width, this.height);=0A=
        if(this.x || this.y){=0A=
            this.setPosition(this.x, this.y);=0A=
        }else if(this.pageX || this.pageY){=0A=
            this.setPagePosition(this.pageX, this.pageY);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    syncSize : function(){=0A=
        delete this.lastSize;=0A=
        this.setSize(this.autoWidth ? undefined : this.el.getWidth(), =
this.autoHeight ? undefined : this.el.getHeight());=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){=0A=
=0A=
    },=0A=
=0A=
    =0A=
    onPosition : function(x, y){=0A=
=0A=
    },=0A=
=0A=
        adjustSize : function(w, h){=0A=
        if(this.autoWidth){=0A=
            w =3D 'auto';=0A=
        }=0A=
        if(this.autoHeight){=0A=
            h =3D 'auto';=0A=
        }=0A=
        return {width : w, height: h};=0A=
    },=0A=
=0A=
        adjustPosition : function(x, y){=0A=
        return {x : x, y: y};=0A=
    }=0A=
});=0A=
Ext.reg('box', Ext.BoxComponent);=0A=

Ext.SplitBar =3D function(dragElement, resizingElement, orientation, =
placement, existingProxy){
   =20
   =20
    this.el =3D Ext.get(dragElement, true);
    this.el.dom.unselectable =3D "on";
   =20
    this.resizingEl =3D Ext.get(resizingElement, true);

   =20
    this.orientation =3D orientation || Ext.SplitBar.HORIZONTAL;
   =20
   =20
    this.minSize =3D 0;
   =20
   =20
    this.maxSize =3D 2000;
   =20
   =20
    this.animate =3D false;
   =20
   =20
    this.useShim =3D false;
   =20
   =20
    this.shim =3D null;
   =20
    if(!existingProxy){
       =20
        this.proxy =3D Ext.SplitBar.createProxy(this.orientation);
    }else{
        this.proxy =3D Ext.get(existingProxy).dom;
    }
   =20
    this.dd =3D new Ext.dd.DDProxy(this.el.dom.id, "XSplitBars", =
{dragElId : this.proxy.id});
   =20
   =20
    this.dd.b4StartDrag =3D this.onStartProxyDrag.createDelegate(this);
   =20
   =20
    this.dd.endDrag =3D this.onEndProxyDrag.createDelegate(this);
   =20
   =20
    this.dragSpecs =3D {};
   =20
   =20
    this.adapter =3D new Ext.SplitBar.BasicLayoutAdapter();
    this.adapter.init(this);
   =20
    if(this.orientation =3D=3D Ext.SplitBar.HORIZONTAL){
       =20
        this.placement =3D placement || (this.el.getX() > =
this.resizingEl.getX() ? Ext.SplitBar.LEFT : Ext.SplitBar.RIGHT);
        this.el.addClass("x-splitbar-h");
    }else{
       =20
        this.placement =3D placement || (this.el.getY() > =
this.resizingEl.getY() ? Ext.SplitBar.TOP : Ext.SplitBar.BOTTOM);
        this.el.addClass("x-splitbar-v");
    }
   =20
    this.addEvents(
       =20
        "resize",
       =20
        "moved",
       =20
        "beforeresize",

        "beforeapply"
    );

    Ext.SplitBar.superclass.constructor.call(this);
};

Ext.extend(Ext.SplitBar, Ext.util.Observable, {
    onStartProxyDrag : function(x, y){
        this.fireEvent("beforeresize", this);
        this.overlay =3D  Ext.DomHelper.append(document.body,  {cls: =
"x-drag-overlay", html: "&#160;"}, true);
        this.overlay.unselectable();
        this.overlay.setSize(Ext.lib.Dom.getViewWidth(true), =
Ext.lib.Dom.getViewHeight(true));
        this.overlay.show();
        Ext.get(this.proxy).setDisplayed("block");
        var size =3D this.adapter.getElementSize(this);
        this.activeMinSize =3D this.getMinimumSize();;
        this.activeMaxSize =3D this.getMaximumSize();;
        var c1 =3D size - this.activeMinSize;
        var c2 =3D Math.max(this.activeMaxSize - size, 0);
        if(this.orientation =3D=3D Ext.SplitBar.HORIZONTAL){
            this.dd.resetConstraints();
            this.dd.setXConstraint(
                this.placement =3D=3D Ext.SplitBar.LEFT ? c1 : c2,=20
                this.placement =3D=3D Ext.SplitBar.LEFT ? c2 : c1
            );
            this.dd.setYConstraint(0, 0);
        }else{
            this.dd.resetConstraints();
            this.dd.setXConstraint(0, 0);
            this.dd.setYConstraint(
                this.placement =3D=3D Ext.SplitBar.TOP ? c1 : c2,=20
                this.placement =3D=3D Ext.SplitBar.TOP ? c2 : c1
            );
         }
        this.dragSpecs.startSize =3D size;
        this.dragSpecs.startPoint =3D [x, y];
        Ext.dd.DDProxy.prototype.b4StartDrag.call(this.dd, x, y);
    },
   =20
   =20
    onEndProxyDrag : function(e){
        Ext.get(this.proxy).setDisplayed(false);
        var endPoint =3D Ext.lib.Event.getXY(e);
        if(this.overlay){
            this.overlay.remove();
            delete this.overlay;
        }
        var newSize;
        if(this.orientation =3D=3D Ext.SplitBar.HORIZONTAL){
            newSize =3D this.dragSpecs.startSize +=20
                (this.placement =3D=3D Ext.SplitBar.LEFT ?
                    endPoint[0] - this.dragSpecs.startPoint[0] :
                    this.dragSpecs.startPoint[0] - endPoint[0]
                );
        }else{
            newSize =3D this.dragSpecs.startSize +=20
                (this.placement =3D=3D Ext.SplitBar.TOP ?
                    endPoint[1] - this.dragSpecs.startPoint[1] :
                    this.dragSpecs.startPoint[1] - endPoint[1]
                );
        }
        newSize =3D Math.min(Math.max(newSize, this.activeMinSize), =
this.activeMaxSize);
        if(newSize !=3D this.dragSpecs.startSize){
            if(this.fireEvent('beforeapply', this, newSize) !=3D=3D =
false){
                this.adapter.setElementSize(this, newSize);
                this.fireEvent("moved", this, newSize);
                this.fireEvent("resize", this, newSize);
            }
        }
    },
   =20
   =20
    getAdapter : function(){
        return this.adapter;
    },
   =20
   =20
    setAdapter : function(adapter){
        this.adapter =3D adapter;
        this.adapter.init(this);
    },
   =20
   =20
    getMinimumSize : function(){
        return this.minSize;
    },
   =20
   =20
    setMinimumSize : function(minSize){
        this.minSize =3D minSize;
    },
   =20
   =20
    getMaximumSize : function(){
        return this.maxSize;
    },
   =20
   =20
    setMaximumSize : function(maxSize){
        this.maxSize =3D maxSize;
    },
   =20
   =20
    setCurrentSize : function(size){
        var oldAnimate =3D this.animate;
        this.animate =3D false;
        this.adapter.setElementSize(this, size);
        this.animate =3D oldAnimate;
    },
   =20
   =20
    destroy : function(removeEl){
        if(this.shim){
            this.shim.remove();
        }
        this.dd.unreg();
        Ext.removeNode(this.proxy);
        if(removeEl){
            this.el.remove();
        }
    }
});


Ext.SplitBar.createProxy =3D function(dir){
    var proxy =3D new Ext.Element(document.createElement("div"));
    proxy.unselectable();
    var cls =3D 'x-splitbar-proxy';
    proxy.addClass(cls + ' ' + (dir =3D=3D Ext.SplitBar.HORIZONTAL ? cls =
+'-h' : cls + '-v'));
    document.body.appendChild(proxy.dom);
    return proxy.dom;
};


Ext.SplitBar.BasicLayoutAdapter =3D function(){
};

Ext.SplitBar.BasicLayoutAdapter.prototype =3D {
    =0A=
    init : function(s){
   =20
    },
   =20
     getElementSize : function(s){
        if(s.orientation =3D=3D Ext.SplitBar.HORIZONTAL){
            return s.resizingEl.getWidth();
        }else{
            return s.resizingEl.getHeight();
        }
    },
   =20
   =20
    setElementSize : function(s, newSize, onComplete){
        if(s.orientation =3D=3D Ext.SplitBar.HORIZONTAL){
            if(!s.animate){
                s.resizingEl.setWidth(newSize);
                if(onComplete){
                    onComplete(s, newSize);
                }
            }else{
                s.resizingEl.setWidth(newSize, true, .1, onComplete, =
'easeOut');
            }
        }else{
           =20
            if(!s.animate){
                s.resizingEl.setHeight(newSize);
                if(onComplete){
                    onComplete(s, newSize);
                }
            }else{
                s.resizingEl.setHeight(newSize, true, .1, onComplete, =
'easeOut');
            }
        }
    }
};


Ext.SplitBar.AbsoluteLayoutAdapter =3D function(container){
    this.basic =3D new Ext.SplitBar.BasicLayoutAdapter();
    this.container =3D Ext.get(container);
};

Ext.SplitBar.AbsoluteLayoutAdapter.prototype =3D {
    init : function(s){
        this.basic.init(s);
    },
   =20
    getElementSize : function(s){
        return this.basic.getElementSize(s);
    },
   =20
    setElementSize : function(s, newSize, onComplete){
        this.basic.setElementSize(s, newSize, =
this.moveSplitter.createDelegate(this, [s]));
    },
   =20
    moveSplitter : function(s){
        var yes =3D Ext.SplitBar;
        switch(s.placement){
            case yes.LEFT:
                s.el.setX(s.resizingEl.getRight());
                break;
            case yes.RIGHT:
                s.el.setStyle("right", (this.container.getWidth() - =
s.resizingEl.getLeft()) + "px");
                break;
            case yes.TOP:
                s.el.setY(s.resizingEl.getBottom());
                break;
            case yes.BOTTOM:
                s.el.setY(s.resizingEl.getTop() - s.el.getHeight());
                break;
        }
    }
};


Ext.SplitBar.VERTICAL =3D 1;


Ext.SplitBar.HORIZONTAL =3D 2;


Ext.SplitBar.LEFT =3D 1;


Ext.SplitBar.RIGHT =3D 2;


Ext.SplitBar.TOP =3D 3;


Ext.SplitBar.BOTTOM =3D 4;
=0A=
=0A=
Ext.Container =3D Ext.extend(Ext.BoxComponent, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
    =0A=
    autoDestroy: true,=0A=
    =0A=
    =0A=
    defaultType: 'panel',=0A=
=0A=
        initComponent : function(){=0A=
        Ext.Container.superclass.initComponent.call(this);=0A=
=0A=
        this.addEvents(=0A=
            =0A=
            'afterlayout',=0A=
            =0A=
            'beforeadd',=0A=
            =0A=
            'beforeremove',=0A=
            =0A=
            'add',=0A=
            =0A=
            'remove'=0A=
        );=0A=
=0A=
        =0A=
        var items =3D this.items;=0A=
        if(items){=0A=
            delete this.items;=0A=
            if(Ext.isArray(items)){=0A=
                this.add.apply(this, items);=0A=
            }else{=0A=
                this.add(items);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        initItems : function(){=0A=
        if(!this.items){=0A=
            this.items =3D new Ext.util.MixedCollection(false, =
this.getComponentId);=0A=
            this.getLayout();         }=0A=
    },=0A=
=0A=
        setLayout : function(layout){=0A=
        if(this.layout && this.layout !=3D layout){=0A=
            this.layout.setContainer(null);=0A=
        }=0A=
        this.initItems();=0A=
        this.layout =3D layout;=0A=
        layout.setContainer(this);=0A=
    },=0A=
=0A=
        render : function(){=0A=
        Ext.Container.superclass.render.apply(this, arguments);=0A=
        if(this.layout){=0A=
            if(typeof this.layout =3D=3D 'string'){=0A=
                this.layout =3D new =
Ext.Container.LAYOUTS[this.layout.toLowerCase()](this.layoutConfig);=0A=
            }=0A=
            this.setLayout(this.layout);=0A=
=0A=
            if(this.activeItem !=3D=3D undefined){=0A=
                var item =3D this.activeItem;=0A=
                delete this.activeItem;=0A=
                this.layout.setActiveItem(item);=0A=
                return;=0A=
            }=0A=
        }=0A=
        if(!this.ownerCt){=0A=
            this.doLayout();=0A=
        }=0A=
        if(this.monitorResize =3D=3D=3D true){=0A=
            Ext.EventManager.onWindowResize(this.doLayout, this, =
[false]);=0A=
        }=0A=
    },=0A=
=0A=
        getLayoutTarget : function(){=0A=
        return this.el;=0A=
    },=0A=
=0A=
        getComponentId : function(comp){=0A=
        return comp.itemId || comp.id;=0A=
    },=0A=
=0A=
    =0A=
    add : function(comp){=0A=
        if(!this.items){=0A=
            this.initItems();=0A=
        }=0A=
        var a =3D arguments, len =3D a.length;=0A=
        if(len > 1){=0A=
            for(var i =3D 0; i < len; i++) {=0A=
                this.add(a[i]);=0A=
            }=0A=
            return;=0A=
        }=0A=
        var c =3D this.lookupComponent(this.applyDefaults(comp));=0A=
        var pos =3D this.items.length;=0A=
        if(this.fireEvent('beforeadd', this, c, pos) !=3D=3D false && =
this.onBeforeAdd(c) !=3D=3D false){=0A=
            this.items.add(c);=0A=
            c.ownerCt =3D this;=0A=
            this.fireEvent('add', this, c, pos);=0A=
        }=0A=
        return c;=0A=
    },=0A=
=0A=
    =0A=
    insert : function(index, comp){=0A=
        if(!this.items){=0A=
            this.initItems();=0A=
        }=0A=
        var a =3D arguments, len =3D a.length;=0A=
        if(len > 2){=0A=
            for(var i =3D len-1; i >=3D 1; --i) {=0A=
                this.insert(index, a[i]);=0A=
            }=0A=
            return;=0A=
        }=0A=
        var c =3D this.lookupComponent(this.applyDefaults(comp));=0A=
=0A=
        if(c.ownerCt =3D=3D this && this.items.indexOf(c) < index){=0A=
            --index;=0A=
        }=0A=
=0A=
        if(this.fireEvent('beforeadd', this, c, index) !=3D=3D false && =
this.onBeforeAdd(c) !=3D=3D false){=0A=
            this.items.insert(index, c);=0A=
            c.ownerCt =3D this;=0A=
            this.fireEvent('add', this, c, index);=0A=
        }=0A=
        return c;=0A=
    },=0A=
=0A=
        applyDefaults : function(c){=0A=
        if(this.defaults){=0A=
            if(typeof c =3D=3D 'string'){=0A=
                c =3D Ext.ComponentMgr.get(c);=0A=
                Ext.apply(c, this.defaults);=0A=
            }else if(!c.events){=0A=
                Ext.applyIf(c, this.defaults);=0A=
            }else{=0A=
                Ext.apply(c, this.defaults);=0A=
            }=0A=
        }=0A=
        return c;=0A=
    },=0A=
=0A=
        onBeforeAdd : function(item){=0A=
        if(item.ownerCt){=0A=
            item.ownerCt.remove(item, false);=0A=
        }=0A=
        if(this.hideBorders =3D=3D=3D true){=0A=
            item.border =3D (item.border =3D=3D=3D true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    remove : function(comp, autoDestroy){=0A=
        var c =3D this.getComponent(comp);=0A=
        if(c && this.fireEvent('beforeremove', this, c) !=3D=3D false){=0A=
            this.items.remove(c);=0A=
            delete c.ownerCt;=0A=
            if(autoDestroy =3D=3D=3D true || (autoDestroy !=3D=3D false =
&& this.autoDestroy)){=0A=
                c.destroy();=0A=
            }=0A=
            if(this.layout && this.layout.activeItem =3D=3D c){=0A=
                delete this.layout.activeItem;=0A=
            }=0A=
            this.fireEvent('remove', this, c);=0A=
        }=0A=
        return c;=0A=
    },=0A=
=0A=
    =0A=
    getComponent : function(comp){=0A=
        if(typeof comp =3D=3D 'object'){=0A=
            return comp;=0A=
        }=0A=
        return this.items.get(comp);=0A=
    },=0A=
=0A=
        lookupComponent : function(comp){=0A=
        if(typeof comp =3D=3D 'string'){=0A=
            return Ext.ComponentMgr.get(comp);=0A=
        }else if(!comp.events){=0A=
            return this.createComponent(comp);=0A=
        }=0A=
        return comp;=0A=
    },=0A=
=0A=
        createComponent : function(config){=0A=
        return Ext.ComponentMgr.create(config, this.defaultType);=0A=
    },=0A=
=0A=
    =0A=
    doLayout : function(shallow){=0A=
        if(this.rendered && this.layout){=0A=
            this.layout.layout();=0A=
        }=0A=
        if(shallow !=3D=3D false && this.items){=0A=
            var cs =3D this.items.items;=0A=
            for(var i =3D 0, len =3D cs.length; i < len; i++) {=0A=
                var c  =3D cs[i];=0A=
                if(c.doLayout){=0A=
                    c.doLayout();=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getLayout : function(){=0A=
        if(!this.layout){=0A=
            var layout =3D new =
Ext.layout.ContainerLayout(this.layoutConfig);=0A=
            this.setLayout(layout);=0A=
        }=0A=
        return this.layout;=0A=
    },=0A=
=0A=
        onDestroy : function(){=0A=
        if(this.items){=0A=
            var cs =3D this.items.items;=0A=
            for(var i =3D 0, len =3D cs.length; i < len; i++) {=0A=
                Ext.destroy(cs[i]);=0A=
            }=0A=
        }=0A=
        if(this.monitorResize){=0A=
            Ext.EventManager.removeResizeListener(this.doLayout, this);=0A=
        }=0A=
        Ext.Container.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
    =0A=
    bubble : function(fn, scope, args){=0A=
        var p =3D this;=0A=
        while(p){=0A=
            if(fn.apply(scope || p, args || [p]) =3D=3D=3D false){=0A=
                break;=0A=
            }=0A=
            p =3D p.ownerCt;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    cascade : function(fn, scope, args){=0A=
        if(fn.apply(scope || this, args || [this]) !=3D=3D false){=0A=
            if(this.items){=0A=
                var cs =3D this.items.items;=0A=
                for(var i =3D 0, len =3D cs.length; i < len; i++){=0A=
                    if(cs[i].cascade){=0A=
                        cs[i].cascade(fn, scope, args);=0A=
                    }else{=0A=
                        fn.apply(scope || this, args || [cs[i]]);=0A=
                    }=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    findById : function(id){=0A=
        var m, ct =3D this;=0A=
        this.cascade(function(c){=0A=
            if(ct !=3D c && c.id =3D=3D=3D id){=0A=
                m =3D c;=0A=
                return false;=0A=
            }=0A=
        });=0A=
        return m || null;=0A=
    },=0A=
=0A=
    =0A=
    findByType : function(xtype){=0A=
        return typeof xtype =3D=3D 'function' ?=0A=
            this.findBy(function(c){=0A=
                return c.constructor =3D=3D=3D xtype;=0A=
            }) :=0A=
            this.findBy(function(c){=0A=
                return c.constructor.xtype =3D=3D=3D xtype;=0A=
            });=0A=
    },=0A=
=0A=
    =0A=
    find : function(prop, value){=0A=
        return this.findBy(function(c){=0A=
            return c[prop] =3D=3D=3D value;=0A=
        });=0A=
    },=0A=
=0A=
    =0A=
    findBy : function(fn, scope){=0A=
        var m =3D [], ct =3D this;=0A=
        this.cascade(function(c){=0A=
            if(ct !=3D c && fn.call(scope || c, c, ct) =3D=3D=3D true){=0A=
                m.push(c);=0A=
            }=0A=
        });=0A=
        return m;=0A=
    }=0A=
});=0A=
=0A=
Ext.Container.LAYOUTS =3D {};=0A=
Ext.reg('container', Ext.Container);=0A=
=0A=
Ext.layout.ContainerLayout =3D function(config){=0A=
    Ext.apply(this, config);=0A=
};=0A=
=0A=
Ext.layout.ContainerLayout.prototype =3D {=0A=
    =0A=
    =0A=
=0A=
    =0A=
=0A=
        monitorResize:false,=0A=
        activeItem : null,=0A=
=0A=
        layout : function(){=0A=
        var target =3D this.container.getLayoutTarget();=0A=
        this.onLayout(this.container, target);=0A=
        this.container.fireEvent('afterlayout', this.container, this);=0A=
    },=0A=
=0A=
        onLayout : function(ct, target){=0A=
        this.renderAll(ct, target);=0A=
    },=0A=
=0A=
        isValidParent : function(c, target){=0A=
		var el =3D c.getPositionEl ? c.getPositionEl() : c.getEl();=0A=
		return el.dom.parentNode =3D=3D target.dom;=0A=
    },=0A=
=0A=
        renderAll : function(ct, target){=0A=
        var items =3D ct.items.items;=0A=
        for(var i =3D 0, len =3D items.length; i < len; i++) {=0A=
            var c =3D items[i];=0A=
            if(c && (!c.rendered || !this.isValidParent(c, target))){=0A=
                this.renderItem(c, i, target);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        renderItem : function(c, position, target){=0A=
        if(c && !c.rendered){=0A=
            c.render(target, position);=0A=
            if(this.extraCls){=0A=
            	var t =3D c.getPositionEl ? c.getPositionEl() : c;=0A=
            	t.addClass(this.extraCls);=0A=
            }=0A=
            if (this.renderHidden && c !=3D this.activeItem) {=0A=
                c.hide();=0A=
            }=0A=
        }else if(c && !this.isValidParent(c, target)){=0A=
            if(this.extraCls){=0A=
                c.addClass(this.extraCls);=0A=
            }=0A=
            if(typeof position =3D=3D 'number'){=0A=
                position =3D target.dom.childNodes[position];=0A=
            }=0A=
            target.dom.insertBefore(c.getEl().dom, position || null);=0A=
            if (this.renderHidden && c !=3D this.activeItem) {=0A=
                c.hide();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onResize: function(){=0A=
        if(this.container.collapsed){=0A=
            return;=0A=
        }=0A=
        var b =3D this.container.bufferResize;=0A=
        if(b){=0A=
            if(!this.resizeTask){=0A=
                this.resizeTask =3D new =
Ext.util.DelayedTask(this.layout, this);=0A=
                this.resizeBuffer =3D typeof b =3D=3D 'number' ? b : 100;=0A=
            }=0A=
            this.resizeTask.delay(this.resizeBuffer);=0A=
        }else{=0A=
            this.layout();=0A=
        }=0A=
    },=0A=
=0A=
        setContainer : function(ct){=0A=
        if(this.monitorResize && ct !=3D this.container){=0A=
            if(this.container){=0A=
                this.container.un('resize', this.onResize, this);=0A=
            }=0A=
            if(ct){=0A=
                ct.on('resize', this.onResize, this);=0A=
            }=0A=
        }=0A=
        this.container =3D ct;=0A=
    },=0A=
=0A=
        parseMargins : function(v){=0A=
        var ms =3D v.split(' ');=0A=
        var len =3D ms.length;=0A=
        if(len =3D=3D 1){=0A=
            ms[1] =3D ms[0];=0A=
            ms[2] =3D ms[0];=0A=
            ms[3] =3D ms[0];=0A=
        }=0A=
        if(len =3D=3D 2){=0A=
            ms[2] =3D ms[0];=0A=
            ms[3] =3D ms[1];=0A=
        }=0A=
        return {=0A=
            top:parseInt(ms[0], 10) || 0,=0A=
            right:parseInt(ms[1], 10) || 0,=0A=
            bottom:parseInt(ms[2], 10) || 0,=0A=
            left:parseInt(ms[3], 10) || 0=0A=
        };=0A=
    }=0A=
};=0A=
Ext.Container.LAYOUTS['auto'] =3D Ext.layout.ContainerLayout;=0A=

Ext.layout.FitLayout =3D Ext.extend(Ext.layout.ContainerLayout, {
    =0A=
    monitorResize:true,

    =0A=
    onLayout : function(ct, target){
        Ext.layout.FitLayout.superclass.onLayout.call(this, ct, target);
        if(!this.container.collapsed){
            this.setItemSize(this.activeItem || ct.items.itemAt(0), =
target.getStyleSize());
        }
    },

    =0A=
    setItemSize : function(item, size){
        if(item && size.height > 0){ =0A=
            item.setSize(size);
        }
    }
});
Ext.Container.LAYOUTS['fit'] =3D Ext.layout.FitLayout;=0A=

Ext.layout.CardLayout =3D Ext.extend(Ext.layout.FitLayout, {
   =20
    deferredRender : false,

    =0A=
    renderHidden : true,

   =20
    setActiveItem : function(item){
        item =3D this.container.getComponent(item);
        if(this.activeItem !=3D item){
            if(this.activeItem){
                this.activeItem.hide();
            }
            this.activeItem =3D item;
            item.show();
            this.layout();
        }
    },

    =0A=
    renderAll : function(ct, target){
        if(this.deferredRender){
            this.renderItem(this.activeItem, undefined, target);
        }else{
            Ext.layout.CardLayout.superclass.renderAll.call(this, ct, =
target);
        }
    }
});
Ext.Container.LAYOUTS['card'] =3D Ext.layout.CardLayout;=0A=

Ext.layout.AnchorLayout =3D Ext.extend(Ext.layout.ContainerLayout, {
    =0A=
    monitorResize:true,

    =0A=
    getAnchorViewSize : function(ct, target){
        return target.dom =3D=3D document.body ?
                   target.getViewSize() : target.getStyleSize();
    },

    =0A=
    onLayout : function(ct, target){
        Ext.layout.AnchorLayout.superclass.onLayout.call(this, ct, =
target);

        var size =3D this.getAnchorViewSize(ct, target);

        var w =3D size.width, h =3D size.height;

        if(w < 20 || h < 20){
            return;
        }

        =0A=
        var aw, ah;
        if(ct.anchorSize){
            if(typeof ct.anchorSize =3D=3D 'number'){
                aw =3D ct.anchorSize;
            }else{
                aw =3D ct.anchorSize.width;
                ah =3D ct.anchorSize.height;
            }
        }else{
            aw =3D ct.initialConfig.width;
            ah =3D ct.initialConfig.height;
        }

        var cs =3D ct.items.items, len =3D cs.length, i, c, a, cw, ch;
        for(i =3D 0; i < len; i++){
            c =3D cs[i];
            if(c.anchor){
                a =3D c.anchorSpec;
                if(!a){ =0A=
                    var vs =3D c.anchor.split(' ');
                    c.anchorSpec =3D a =3D {
                        right: this.parseAnchor(vs[0], =
c.initialConfig.width, aw),
                        bottom: this.parseAnchor(vs[1], =
c.initialConfig.height, ah)
                    };
                }
                cw =3D a.right ? this.adjustWidthAnchor(a.right(w), c) : =
undefined;
                ch =3D a.bottom ? this.adjustHeightAnchor(a.bottom(h), =
c) : undefined;

                if(cw || ch){
                    c.setSize(cw || undefined, ch || undefined);
                }
            }
        }
    },

    =0A=
    parseAnchor : function(a, start, cstart){
        if(a && a !=3D 'none'){
            var last;
            if(/^(r|right|b|bottom)$/i.test(a)){   =0A=
                var diff =3D cstart - start;
                return function(v){
                    if(v !=3D=3D last){
                        last =3D v;
                        return v - diff;
                    }
                }
            }else if(a.indexOf('%') !=3D -1){
                var ratio =3D parseFloat(a.replace('%', ''))*.01;   =0A=
                return function(v){
                    if(v !=3D=3D last){
                        last =3D v;
                        return Math.floor(v*ratio);
                    }
                }
            }else{
                a =3D parseInt(a, 10);
                if(!isNaN(a)){                            =0A=
                    return function(v){
                        if(v !=3D=3D last){
                            last =3D v;
                            return v + a;
                        }
                    }
                }
            }
        }
        return false;
    },

    =0A=
    adjustWidthAnchor : function(value, comp){
        return value;
    },

    =0A=
    adjustHeightAnchor : function(value, comp){
        return value;
    }
   =20
   =20
});
Ext.Container.LAYOUTS['anchor'] =3D Ext.layout.AnchorLayout;=0A=

Ext.layout.ColumnLayout =3D Ext.extend(Ext.layout.ContainerLayout, {
    =0A=
    monitorResize:true,
    =0A=
    extraCls: 'x-column',

    scrollOffset : 0,

    =0A=
    isValidParent : function(c, target){
        return c.getEl().dom.parentNode =3D=3D this.innerCt.dom;
    },

    =0A=
    onLayout : function(ct, target){
        var cs =3D ct.items.items, len =3D cs.length, c, i;

        if(!this.innerCt){
            target.addClass('x-column-layout-ct');

            =0A=
            =0A=
            this.innerCt =3D target.createChild({cls:'x-column-inner'});
            this.innerCt.createChild({cls:'x-clear'});
        }
        this.renderAll(ct, this.innerCt);

        var size =3D target.getViewSize();

        if(size.width < 1 && size.height < 1){ =0A=
            return;
        }

        var w =3D size.width - target.getPadding('lr') - =
this.scrollOffset,
            h =3D size.height - target.getPadding('tb'),
            pw =3D w;

        this.innerCt.setWidth(w);
       =20
        =0A=
        =0A=

        for(i =3D 0; i < len; i++){
            c =3D cs[i];
            if(!c.columnWidth){
                pw -=3D (c.getSize().width + =
c.getEl().getMargins('lr'));
            }
        }

        pw =3D pw < 0 ? 0 : pw;

        for(i =3D 0; i < len; i++){
            c =3D cs[i];
            if(c.columnWidth){
                c.setSize(Math.floor(c.columnWidth*pw) - =
c.getEl().getMargins('lr'));
            }
        }
    }
   =20
   =20
});

Ext.Container.LAYOUTS['column'] =3D Ext.layout.ColumnLayout;=0A=
=0A=
Ext.layout.BorderLayout =3D Ext.extend(Ext.layout.ContainerLayout, {=0A=
        monitorResize:true,=0A=
        rendered : false,=0A=
=0A=
        onLayout : function(ct, target){=0A=
        var collapsed;=0A=
        if(!this.rendered){=0A=
            target.position();=0A=
            target.addClass('x-border-layout-ct');=0A=
            var items =3D ct.items.items;=0A=
            collapsed =3D [];=0A=
            for(var i =3D 0, len =3D items.length; i < len; i++) {=0A=
                var c =3D items[i];=0A=
                var pos =3D c.region;=0A=
                if(c.collapsed){=0A=
                    collapsed.push(c);=0A=
                }=0A=
                c.collapsed =3D false;=0A=
                if(!c.rendered){=0A=
                    c.cls =3D c.cls ? c.cls +' x-border-panel' : =
'x-border-panel';=0A=
                    c.render(target, i);=0A=
                }=0A=
                this[pos] =3D pos !=3D 'center' && c.split ?=0A=
                    new Ext.layout.BorderLayout.SplitRegion(this, =
c.initialConfig, pos) :=0A=
                    new Ext.layout.BorderLayout.Region(this, =
c.initialConfig, pos);=0A=
                this[pos].render(target, c);=0A=
            }=0A=
            this.rendered =3D true;=0A=
        }=0A=
=0A=
        var size =3D target.getViewSize();=0A=
        if(size.width < 20 || size.height < 20){             =
if(collapsed){=0A=
                this.restoreCollapsed =3D collapsed;=0A=
            }=0A=
            return;=0A=
        }else if(this.restoreCollapsed){=0A=
            collapsed =3D this.restoreCollapsed;=0A=
            delete this.restoreCollapsed;=0A=
        }=0A=
=0A=
        var w =3D size.width, h =3D size.height;=0A=
        var centerW =3D w, centerH =3D h, centerY =3D 0, centerX =3D 0;=0A=
=0A=
        var n =3D this.north, s =3D this.south, west =3D this.west, e =
=3D this.east, c =3D this.center;=0A=
        if(!c){=0A=
            throw 'No center region defined in BorderLayout ' + ct.id;=0A=
        }=0A=
=0A=
        if(n && n.isVisible()){=0A=
            var b =3D n.getSize();=0A=
            var m =3D n.getMargins();=0A=
            b.width =3D w - (m.left+m.right);=0A=
            b.x =3D m.left;=0A=
            b.y =3D m.top;=0A=
            centerY =3D b.height + b.y + m.bottom;=0A=
            centerH -=3D centerY;=0A=
            n.applyLayout(b);=0A=
        }=0A=
        if(s && s.isVisible()){=0A=
            var b =3D s.getSize();=0A=
            var m =3D s.getMargins();=0A=
            b.width =3D w - (m.left+m.right);=0A=
            b.x =3D m.left;=0A=
            var totalHeight =3D (b.height + m.top + m.bottom);=0A=
            b.y =3D h - totalHeight + m.top;=0A=
            centerH -=3D totalHeight;=0A=
            s.applyLayout(b);=0A=
        }=0A=
        if(west && west.isVisible()){=0A=
            var b =3D west.getSize();=0A=
            var m =3D west.getMargins();=0A=
            b.height =3D centerH - (m.top+m.bottom);=0A=
            b.x =3D m.left;=0A=
            b.y =3D centerY + m.top;=0A=
            var totalWidth =3D (b.width + m.left + m.right);=0A=
            centerX +=3D totalWidth;=0A=
            centerW -=3D totalWidth;=0A=
            west.applyLayout(b);=0A=
        }=0A=
        if(e && e.isVisible()){=0A=
            var b =3D e.getSize();=0A=
            var m =3D e.getMargins();=0A=
            b.height =3D centerH - (m.top+m.bottom);=0A=
            var totalWidth =3D (b.width + m.left + m.right);=0A=
            b.x =3D w - totalWidth + m.left;=0A=
            b.y =3D centerY + m.top;=0A=
            centerW -=3D totalWidth;=0A=
            e.applyLayout(b);=0A=
        }=0A=
=0A=
        var m =3D c.getMargins();=0A=
        var centerBox =3D {=0A=
            x: centerX + m.left,=0A=
            y: centerY + m.top,=0A=
            width: centerW - (m.left+m.right),=0A=
            height: centerH - (m.top+m.bottom)=0A=
        };=0A=
        c.applyLayout(centerBox);=0A=
=0A=
        if(collapsed){=0A=
            for(var i =3D 0, len =3D collapsed.length; i < len; i++){=0A=
                collapsed[i].collapse(false);=0A=
            }=0A=
        }=0A=
=0A=
        if(Ext.isIE && Ext.isStrict){             target.repaint();=0A=
        }=0A=
    }=0A=
    =0A=
    =0A=
});=0A=
=0A=
=0A=
Ext.layout.BorderLayout.Region =3D function(layout, config, pos){=0A=
    Ext.apply(this, config);=0A=
    this.layout =3D layout;=0A=
    this.position =3D pos;=0A=
    this.state =3D {};=0A=
    if(typeof this.margins =3D=3D 'string'){=0A=
        this.margins =3D this.layout.parseMargins(this.margins);=0A=
    }=0A=
    this.margins =3D Ext.applyIf(this.margins || {}, =
this.defaultMargins);=0A=
    if(this.collapsible){=0A=
        if(typeof this.cmargins =3D=3D 'string'){=0A=
            this.cmargins =3D this.layout.parseMargins(this.cmargins);=0A=
        }=0A=
        if(this.collapseMode =3D=3D 'mini' && !this.cmargins){=0A=
            this.cmargins =3D {left:0,top:0,right:0,bottom:0};=0A=
        }else{=0A=
            this.cmargins =3D Ext.applyIf(this.cmargins || {},=0A=
                pos =3D=3D 'north' || pos =3D=3D 'south' ? =
this.defaultNSCMargins : this.defaultEWCMargins);=0A=
        }=0A=
    }=0A=
};=0A=
=0A=
Ext.layout.BorderLayout.Region.prototype =3D {=0A=
    =0A=
    =0A=
	=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    collapsible : false,=0A=
    =0A=
    split:false,=0A=
    =0A=
    floatable: true,=0A=
    =0A=
    minWidth:50,=0A=
    =0A=
    minHeight:50,=0A=
=0A=
        defaultMargins : {left:0,top:0,right:0,bottom:0},=0A=
        defaultNSCMargins : {left:5,top:5,right:5,bottom:5},=0A=
        defaultEWCMargins : {left:5,top:0,right:5,bottom:0},=0A=
=0A=
    =0A=
    isCollapsed : false,=0A=
=0A=
    =0A=
    =0A=
    =0A=
=0A=
        render : function(ct, p){=0A=
        this.panel =3D p;=0A=
        p.el.enableDisplayMode();=0A=
        this.targetEl =3D ct;=0A=
        this.el =3D p.el;=0A=
=0A=
        var gs =3D p.getState, ps =3D this.position;=0A=
        p.getState =3D function(){=0A=
            return Ext.apply(gs.call(p) || {}, this.state);=0A=
        }.createDelegate(this);=0A=
=0A=
        if(ps !=3D 'center'){=0A=
            p.allowQueuedExpand =3D false;=0A=
            p.on({=0A=
                beforecollapse: this.beforeCollapse,=0A=
                collapse: this.onCollapse,=0A=
                beforeexpand: this.beforeExpand,=0A=
                expand: this.onExpand,=0A=
                hide: this.onHide,=0A=
                show: this.onShow,=0A=
                scope: this=0A=
            });=0A=
            if(this.collapsible){=0A=
                p.collapseEl =3D 'el';=0A=
                p.slideAnchor =3D this.getSlideAnchor();=0A=
            }=0A=
            if(p.tools && p.tools.toggle){=0A=
                p.tools.toggle.addClass('x-tool-collapse-'+ps);=0A=
                =
p.tools.toggle.addClassOnOver('x-tool-collapse-'+ps+'-over');=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        getCollapsedEl : function(){=0A=
        if(!this.collapsedEl){=0A=
            if(!this.toolTemplate){=0A=
                var tt =3D new Ext.Template(=0A=
                     '<div class=3D"x-tool x-tool-{id}">&#160;</div>'=0A=
                );=0A=
                tt.disableFormats =3D true;=0A=
                tt.compile();=0A=
                Ext.layout.BorderLayout.Region.prototype.toolTemplate =
=3D tt;=0A=
            }=0A=
            this.collapsedEl =3D this.targetEl.createChild({=0A=
                cls: "x-layout-collapsed =
x-layout-collapsed-"+this.position,=0A=
                id: this.panel.id + '-xcollapsed'=0A=
            });=0A=
            this.collapsedEl.enableDisplayMode('block');=0A=
=0A=
            if(this.collapseMode =3D=3D 'mini'){=0A=
                =
this.collapsedEl.addClass('x-layout-cmini-'+this.position);=0A=
                this.miniCollapsedEl =3D this.collapsedEl.createChild({=0A=
                    cls: "x-layout-mini x-layout-mini-"+this.position, =
html: "&#160;"=0A=
                });=0A=
                =
this.miniCollapsedEl.addClassOnOver('x-layout-mini-over');=0A=
                =
this.collapsedEl.addClassOnOver("x-layout-collapsed-over");=0A=
                this.collapsedEl.on('click', this.onExpandClick, this, =
{stopEvent:true});=0A=
            }else {=0A=
                var t =3D this.toolTemplate.append(=0A=
                        this.collapsedEl.dom,=0A=
                        {id:'expand-'+this.position}, true);=0A=
                t.addClassOnOver('x-tool-expand-'+this.position+'-over');=0A=
                t.on('click', this.onExpandClick, this, =
{stopEvent:true});=0A=
                =0A=
                if(this.floatable !=3D=3D false){=0A=
                   =
this.collapsedEl.addClassOnOver("x-layout-collapsed-over");=0A=
                   this.collapsedEl.on("click", this.collapseClick, =
this);=0A=
                }=0A=
            }=0A=
        }=0A=
        return this.collapsedEl;=0A=
    },=0A=
=0A=
        onExpandClick : function(e){=0A=
        if(this.isSlid){=0A=
            this.afterSlideIn();=0A=
            this.panel.expand(false);=0A=
        }else{=0A=
            this.panel.expand();=0A=
        }=0A=
    },=0A=
=0A=
        onCollapseClick : function(e){=0A=
        this.panel.collapse();=0A=
    },=0A=
=0A=
        beforeCollapse : function(p, animate){=0A=
        this.lastAnim =3D animate;=0A=
        if(this.splitEl){=0A=
            this.splitEl.hide();=0A=
        }=0A=
        this.getCollapsedEl().show();=0A=
        this.panel.el.setStyle('z-index', 100);=0A=
        this.isCollapsed =3D true;=0A=
        this.layout.layout();=0A=
    },=0A=
=0A=
        onCollapse : function(animate){=0A=
        this.panel.el.setStyle('z-index', 1);=0A=
        if(this.lastAnim =3D=3D=3D false || this.panel.animCollapse =
=3D=3D=3D false){=0A=
            this.getCollapsedEl().dom.style.visibility =3D 'visible';=0A=
        }else{=0A=
            this.getCollapsedEl().slideIn(this.panel.slideAnchor, =
{duration:.2});=0A=
        }=0A=
        this.state.collapsed =3D true;=0A=
        this.panel.saveState();=0A=
    },=0A=
=0A=
        beforeExpand : function(animate){=0A=
        var c =3D this.getCollapsedEl();=0A=
        this.el.show();=0A=
        if(this.position =3D=3D 'east' || this.position =3D=3D 'west'){=0A=
            this.panel.setSize(undefined, c.getHeight());=0A=
        }else{=0A=
            this.panel.setSize(c.getWidth(), undefined);=0A=
        }=0A=
        c.hide();=0A=
        c.dom.style.visibility =3D 'hidden';=0A=
        this.panel.el.setStyle('z-index', 100);=0A=
    },=0A=
=0A=
        onExpand : function(){=0A=
        this.isCollapsed =3D false;=0A=
        if(this.splitEl){=0A=
            this.splitEl.show();=0A=
        }=0A=
        this.layout.layout();=0A=
        this.panel.el.setStyle('z-index', 1);=0A=
        this.state.collapsed =3D false;=0A=
        this.panel.saveState();=0A=
    },=0A=
=0A=
        collapseClick : function(e){=0A=
        if(this.isSlid){=0A=
           e.stopPropagation();=0A=
           this.slideIn();=0A=
        }else{=0A=
           e.stopPropagation();=0A=
           this.slideOut();=0A=
        }=0A=
    },=0A=
=0A=
        onHide : function(){=0A=
        if(this.isCollapsed){=0A=
            this.getCollapsedEl().hide();=0A=
        }else if(this.splitEl){=0A=
            this.splitEl.hide();=0A=
        }=0A=
    },=0A=
=0A=
        onShow : function(){=0A=
        if(this.isCollapsed){=0A=
            this.getCollapsedEl().show();=0A=
        }else if(this.splitEl){=0A=
            this.splitEl.show();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    isVisible : function(){=0A=
        return !this.panel.hidden;=0A=
    },=0A=
=0A=
    =0A=
    getMargins : function(){=0A=
        return this.isCollapsed && this.cmargins ? this.cmargins : =
this.margins;=0A=
    },=0A=
=0A=
    =0A=
    getSize : function(){=0A=
        return this.isCollapsed ? this.getCollapsedEl().getSize() : =
this.panel.getSize();=0A=
    },=0A=
=0A=
    =0A=
    setPanel : function(panel){=0A=
        this.panel =3D panel;=0A=
    },=0A=
=0A=
    =0A=
    getMinWidth: function(){=0A=
        return this.minWidth;=0A=
    },=0A=
=0A=
    =0A=
    getMinHeight: function(){=0A=
        return this.minHeight;=0A=
    },=0A=
=0A=
        applyLayoutCollapsed : function(box){=0A=
        var ce =3D this.getCollapsedEl();=0A=
        ce.setLeftTop(box.x, box.y);=0A=
        ce.setSize(box.width, box.height);=0A=
    },=0A=
=0A=
        applyLayout : function(box){=0A=
        if(this.isCollapsed){=0A=
            this.applyLayoutCollapsed(box);=0A=
        }else{=0A=
            this.panel.setPosition(box.x, box.y);=0A=
            this.panel.setSize(box.width, box.height);=0A=
        }=0A=
    },=0A=
=0A=
        beforeSlide: function(){=0A=
        this.panel.beforeEffect();=0A=
    },=0A=
=0A=
        afterSlide : function(){=0A=
        this.panel.afterEffect();=0A=
    },=0A=
=0A=
        initAutoHide : function(){=0A=
        if(this.autoHide !=3D=3D false){=0A=
            if(!this.autoHideHd){=0A=
                var st =3D new Ext.util.DelayedTask(this.slideIn, this);=0A=
                this.autoHideHd =3D {=0A=
                    "mouseout": function(e){=0A=
                        if(!e.within(this.el, true)){=0A=
                            st.delay(500);=0A=
                        }=0A=
                    },=0A=
                    "mouseover" : function(e){=0A=
                        st.cancel();=0A=
                    },=0A=
                    scope : this=0A=
                };=0A=
            }=0A=
            this.el.on(this.autoHideHd);=0A=
        }=0A=
    },=0A=
=0A=
        clearAutoHide : function(){=0A=
        if(this.autoHide !=3D=3D false){=0A=
            this.el.un("mouseout", this.autoHideHd.mouseout);=0A=
            this.el.un("mouseover", this.autoHideHd.mouseover);=0A=
        }=0A=
    },=0A=
=0A=
        clearMonitor : function(){=0A=
        Ext.getDoc().un("click", this.slideInIf, this);=0A=
    },=0A=
=0A=
            slideOut : function(){=0A=
        if(this.isSlid || this.el.hasActiveFx()){=0A=
            return;=0A=
        }=0A=
        this.isSlid =3D true;=0A=
        var ts =3D this.panel.tools;=0A=
        if(ts && ts.toggle){=0A=
            ts.toggle.hide();=0A=
        }=0A=
        this.el.show();=0A=
        if(this.position =3D=3D 'east' || this.position =3D=3D 'west'){=0A=
            this.panel.setSize(undefined, this.collapsedEl.getHeight());=0A=
        }else{=0A=
            this.panel.setSize(this.collapsedEl.getWidth(), undefined);=0A=
        }=0A=
        this.restoreLT =3D [this.el.dom.style.left, =
this.el.dom.style.top];=0A=
        this.el.alignTo(this.collapsedEl, this.getCollapseAnchor());=0A=
        this.el.setStyle("z-index", 102);=0A=
        if(this.animFloat !=3D=3D false){=0A=
            this.beforeSlide();=0A=
            this.el.slideIn(this.getSlideAnchor(), {=0A=
                callback: function(){=0A=
                    this.afterSlide();=0A=
                    this.initAutoHide();=0A=
                    Ext.getDoc().on("click", this.slideInIf, this);=0A=
                },=0A=
                scope: this,=0A=
                block: true=0A=
            });=0A=
        }else{=0A=
            this.initAutoHide();=0A=
             Ext.getDoc().on("click", this.slideInIf, this);=0A=
        }=0A=
    },=0A=
=0A=
        afterSlideIn : function(){=0A=
        this.clearAutoHide();=0A=
        this.isSlid =3D false;=0A=
        this.clearMonitor();=0A=
        this.el.setStyle("z-index", "");=0A=
        this.el.dom.style.left =3D this.restoreLT[0];=0A=
        this.el.dom.style.top =3D this.restoreLT[1];=0A=
=0A=
        var ts =3D this.panel.tools;=0A=
        if(ts && ts.toggle){=0A=
            ts.toggle.show();=0A=
        }=0A=
    },=0A=
=0A=
        slideIn : function(cb){=0A=
        if(!this.isSlid || this.el.hasActiveFx()){=0A=
            Ext.callback(cb);=0A=
            return;=0A=
        }=0A=
        this.isSlid =3D false;=0A=
        if(this.animFloat !=3D=3D false){=0A=
            this.beforeSlide();=0A=
            this.el.slideOut(this.getSlideAnchor(), {=0A=
                callback: function(){=0A=
                    this.el.hide();=0A=
                    this.afterSlide();=0A=
                    this.afterSlideIn();=0A=
                    Ext.callback(cb);=0A=
                },=0A=
                scope: this,=0A=
                block: true=0A=
            });=0A=
        }else{=0A=
            this.el.hide();=0A=
            this.afterSlideIn();=0A=
        }=0A=
    },=0A=
=0A=
        slideInIf : function(e){=0A=
        if(!e.within(this.el)){=0A=
            this.slideIn();=0A=
        }=0A=
    },=0A=
=0A=
        anchors : {=0A=
        "west" : "left",=0A=
        "east" : "right",=0A=
        "north" : "top",=0A=
        "south" : "bottom"=0A=
    },=0A=
=0A=
        sanchors : {=0A=
        "west" : "l",=0A=
        "east" : "r",=0A=
        "north" : "t",=0A=
        "south" : "b"=0A=
    },=0A=
=0A=
        canchors : {=0A=
        "west" : "tl-tr",=0A=
        "east" : "tr-tl",=0A=
        "north" : "tl-bl",=0A=
        "south" : "bl-tl"=0A=
    },=0A=
=0A=
        getAnchor : function(){=0A=
        return this.anchors[this.position];=0A=
    },=0A=
=0A=
        getCollapseAnchor : function(){=0A=
        return this.canchors[this.position];=0A=
    },=0A=
=0A=
        getSlideAnchor : function(){=0A=
        return this.sanchors[this.position];=0A=
    },=0A=
=0A=
        getAlignAdj : function(){=0A=
        var cm =3D this.cmargins;=0A=
        switch(this.position){=0A=
            case "west":=0A=
                return [0, 0];=0A=
            break;=0A=
            case "east":=0A=
                return [0, 0];=0A=
            break;=0A=
            case "north":=0A=
                return [0, 0];=0A=
            break;=0A=
            case "south":=0A=
                return [0, 0];=0A=
            break;=0A=
        }=0A=
    },=0A=
=0A=
        getExpandAdj : function(){=0A=
        var c =3D this.collapsedEl, cm =3D this.cmargins;=0A=
        switch(this.position){=0A=
            case "west":=0A=
                return [-(cm.right+c.getWidth()+cm.left), 0];=0A=
            break;=0A=
            case "east":=0A=
                return [cm.right+c.getWidth()+cm.left, 0];=0A=
            break;=0A=
            case "north":=0A=
                return [0, -(cm.top+cm.bottom+c.getHeight())];=0A=
            break;=0A=
            case "south":=0A=
                return [0, cm.top+cm.bottom+c.getHeight()];=0A=
            break;=0A=
        }=0A=
    }=0A=
};=0A=
=0A=
=0A=
Ext.layout.BorderLayout.SplitRegion =3D function(layout, config, pos){=0A=
    =
Ext.layout.BorderLayout.SplitRegion.superclass.constructor.call(this, =
layout, config, pos);=0A=
        this.applyLayout =3D this.applyFns[pos];=0A=
};=0A=
=0A=
Ext.extend(Ext.layout.BorderLayout.SplitRegion, =
Ext.layout.BorderLayout.Region, {=0A=
    =0A=
    splitTip : "Drag to resize.",=0A=
    =0A=
    collapsibleSplitTip : "Drag to resize. Double click to hide.",=0A=
    =0A=
    useSplitTips : false,=0A=
=0A=
        splitSettings : {=0A=
        north : {=0A=
            orientation: Ext.SplitBar.VERTICAL,=0A=
            placement: Ext.SplitBar.TOP,=0A=
            maxFn : 'getVMaxSize',=0A=
            minProp: 'minHeight',=0A=
            maxProp: 'maxHeight'=0A=
        },=0A=
        south : {=0A=
            orientation: Ext.SplitBar.VERTICAL,=0A=
            placement: Ext.SplitBar.BOTTOM,=0A=
            maxFn : 'getVMaxSize',=0A=
            minProp: 'minHeight',=0A=
            maxProp: 'maxHeight'=0A=
        },=0A=
        east : {=0A=
            orientation: Ext.SplitBar.HORIZONTAL,=0A=
            placement: Ext.SplitBar.RIGHT,=0A=
            maxFn : 'getHMaxSize',=0A=
            minProp: 'minWidth',=0A=
            maxProp: 'maxWidth'=0A=
        },=0A=
        west : {=0A=
            orientation: Ext.SplitBar.HORIZONTAL,=0A=
            placement: Ext.SplitBar.LEFT,=0A=
            maxFn : 'getHMaxSize',=0A=
            minProp: 'minWidth',=0A=
            maxProp: 'maxWidth'=0A=
        }=0A=
    },=0A=
=0A=
        applyFns : {=0A=
        west : function(box){=0A=
            if(this.isCollapsed){=0A=
                return this.applyLayoutCollapsed(box);=0A=
            }=0A=
            var sd =3D this.splitEl.dom, s =3D sd.style;=0A=
            this.panel.setPosition(box.x, box.y);=0A=
            var sw =3D sd.offsetWidth;=0A=
            s.left =3D (box.x+box.width-sw)+'px';=0A=
            s.top =3D (box.y)+'px';=0A=
            s.height =3D Math.max(0, box.height)+'px';=0A=
            this.panel.setSize(box.width-sw, box.height);=0A=
        },=0A=
        east : function(box){=0A=
            if(this.isCollapsed){=0A=
                return this.applyLayoutCollapsed(box);=0A=
            }=0A=
            var sd =3D this.splitEl.dom, s =3D sd.style;=0A=
            var sw =3D sd.offsetWidth;=0A=
            this.panel.setPosition(box.x+sw, box.y);=0A=
            s.left =3D (box.x)+'px';=0A=
            s.top =3D (box.y)+'px';=0A=
            s.height =3D Math.max(0, box.height)+'px';=0A=
            this.panel.setSize(box.width-sw, box.height);=0A=
        },=0A=
        north : function(box){=0A=
            if(this.isCollapsed){=0A=
                return this.applyLayoutCollapsed(box);=0A=
            }=0A=
            var sd =3D this.splitEl.dom, s =3D sd.style;=0A=
            var sh =3D sd.offsetHeight;=0A=
            this.panel.setPosition(box.x, box.y);=0A=
            s.left =3D (box.x)+'px';=0A=
            s.top =3D (box.y+box.height-sh)+'px';=0A=
            s.width =3D Math.max(0, box.width)+'px';=0A=
            this.panel.setSize(box.width, box.height-sh);=0A=
        },=0A=
        south : function(box){=0A=
            if(this.isCollapsed){=0A=
                return this.applyLayoutCollapsed(box);=0A=
            }=0A=
            var sd =3D this.splitEl.dom, s =3D sd.style;=0A=
            var sh =3D sd.offsetHeight;=0A=
            this.panel.setPosition(box.x, box.y+sh);=0A=
            s.left =3D (box.x)+'px';=0A=
            s.top =3D (box.y)+'px';=0A=
            s.width =3D Math.max(0, box.width)+'px';=0A=
            this.panel.setSize(box.width, box.height-sh);=0A=
        }=0A=
    },=0A=
=0A=
        render : function(ct, p){=0A=
        Ext.layout.BorderLayout.SplitRegion.superclass.render.call(this, =
ct, p);=0A=
=0A=
        var ps =3D this.position;=0A=
=0A=
        this.splitEl =3D ct.createChild({=0A=
            cls: "x-layout-split x-layout-split-"+ps, html: "&#160;",=0A=
            id: this.panel.id + '-xsplit'=0A=
        });=0A=
=0A=
        if(this.collapseMode =3D=3D 'mini'){=0A=
            this.miniSplitEl =3D this.splitEl.createChild({=0A=
                cls: "x-layout-mini x-layout-mini-"+ps, html: "&#160;"=0A=
            });=0A=
            this.miniSplitEl.addClassOnOver('x-layout-mini-over');=0A=
            this.miniSplitEl.on('click', this.onCollapseClick, this, =
{stopEvent:true});=0A=
        }=0A=
=0A=
        var s =3D this.splitSettings[ps];=0A=
=0A=
        this.split =3D new Ext.SplitBar(this.splitEl.dom, p.el, =
s.orientation);=0A=
        this.split.placement =3D s.placement;=0A=
        this.split.getMaximumSize =3D this[s.maxFn].createDelegate(this);=0A=
        this.split.minSize =3D this.minSize || this[s.minProp];=0A=
        this.split.on("beforeapply", this.onSplitMove, this);=0A=
        this.split.useShim =3D this.useShim =3D=3D=3D true;=0A=
        this.maxSize =3D this.maxSize || this[s.maxProp];=0A=
=0A=
        if(p.hidden){=0A=
            this.splitEl.hide();=0A=
        }=0A=
=0A=
        if(this.useSplitTips){=0A=
            this.splitEl.dom.title =3D this.collapsible ? =
this.collapsibleSplitTip : this.splitTip;=0A=
        }=0A=
        if(this.collapsible){=0A=
            this.splitEl.on("dblclick", this.onCollapseClick,  this);=0A=
        }=0A=
    },=0A=
=0A=
        getSize : function(){=0A=
        if(this.isCollapsed){=0A=
            return this.collapsedEl.getSize();=0A=
        }=0A=
        var s =3D this.panel.getSize();=0A=
        if(this.position =3D=3D 'north' || this.position =3D=3D 'south'){=0A=
            s.height +=3D this.splitEl.dom.offsetHeight;=0A=
        }else{=0A=
            s.width +=3D this.splitEl.dom.offsetWidth;=0A=
        }=0A=
        return s;=0A=
    },=0A=
=0A=
        getHMaxSize : function(){=0A=
         var cmax =3D this.maxSize || 10000;=0A=
         var center =3D this.layout.center;=0A=
         return Math.min(cmax, =
(this.el.getWidth()+center.el.getWidth())-center.getMinWidth());=0A=
    },=0A=
=0A=
        getVMaxSize : function(){=0A=
        var cmax =3D this.maxSize || 10000;=0A=
        var center =3D this.layout.center;=0A=
        return Math.min(cmax, =
(this.el.getHeight()+center.el.getHeight())-center.getMinHeight());=0A=
    },=0A=
=0A=
        onSplitMove : function(split, newSize){=0A=
        var s =3D this.panel.getSize();=0A=
        this.lastSplitSize =3D newSize;=0A=
        if(this.position =3D=3D 'north' || this.position =3D=3D 'south'){=0A=
            this.panel.setSize(s.width, newSize);=0A=
            this.state.height =3D newSize;=0A=
        }else{=0A=
            this.panel.setSize(newSize, s.height);=0A=
            this.state.width =3D newSize;=0A=
        }=0A=
        this.layout.layout();=0A=
        this.panel.saveState();=0A=
        return false;=0A=
    },=0A=
=0A=
    =0A=
    getSplitBar : function(){=0A=
        return this.split;=0A=
    }=0A=
});=0A=
=0A=
Ext.Container.LAYOUTS['border'] =3D Ext.layout.BorderLayout;=0A=
=0A=
Ext.layout.FormLayout =3D Ext.extend(Ext.layout.AnchorLayout, {=0A=
    =0A=
    =0A=
    =0A=
    labelSeparator : ':',=0A=
=0A=
        getAnchorViewSize : function(ct, target){=0A=
        return ct.body.getStyleSize();=0A=
    },=0A=
=0A=
        setContainer : function(ct){=0A=
        Ext.layout.FormLayout.superclass.setContainer.call(this, ct);=0A=
=0A=
        if(ct.labelAlign){=0A=
            ct.addClass('x-form-label-'+ct.labelAlign);=0A=
        }=0A=
=0A=
        if(ct.hideLabels){=0A=
            this.labelStyle =3D "display:none";=0A=
            this.elementStyle =3D "padding-left:0;";=0A=
            this.labelAdjust =3D 0;=0A=
        }else{=0A=
            this.labelSeparator =3D ct.labelSeparator || =
this.labelSeparator;=0A=
            ct.labelWidth =3D ct.labelWidth || 100;=0A=
            if(typeof ct.labelWidth =3D=3D 'number'){=0A=
                var pad =3D (typeof ct.labelPad =3D=3D 'number' ? =
ct.labelPad : 5);=0A=
                this.labelAdjust =3D ct.labelWidth+pad;=0A=
                this.labelStyle =3D "width:"+ct.labelWidth+"px;";=0A=
                this.elementStyle =3D =
"padding-left:"+(ct.labelWidth+pad)+'px';=0A=
            }=0A=
            if(ct.labelAlign =3D=3D 'top'){=0A=
                this.labelStyle =3D "width:auto;";=0A=
                this.labelAdjust =3D 0;=0A=
                this.elementStyle =3D "padding-left:0;";=0A=
            }=0A=
        }=0A=
=0A=
        if(!this.fieldTpl){=0A=
                        var t =3D new Ext.Template(=0A=
                '<div class=3D"x-form-item {5}" tabIndex=3D"-1">',=0A=
                    '<label for=3D"{0}" style=3D"{2}" =
class=3D"x-form-item-label">{1}{4}</label>',=0A=
                    '<div class=3D"x-form-element" id=3D"x-form-el-{0}" =
style=3D"{3}">',=0A=
                    '</div><div class=3D"{6}"></div>',=0A=
                '</div>'=0A=
            );=0A=
            t.disableFormats =3D true;=0A=
            t.compile();=0A=
            Ext.layout.FormLayout.prototype.fieldTpl =3D t;=0A=
        }=0A=
    },=0A=
=0A=
        renderItem : function(c, position, target){=0A=
        if(c && !c.rendered && c.isFormField && c.inputType !=3D =
'hidden'){=0A=
            var args =3D [=0A=
                   c.id, c.fieldLabel,=0A=
                   c.labelStyle||this.labelStyle||'',=0A=
                   this.elementStyle||'',=0A=
                   typeof c.labelSeparator =3D=3D 'undefined' ? =
this.labelSeparator : c.labelSeparator,=0A=
                   (c.itemCls||this.container.itemCls||'') + =
(c.hideLabel ? ' x-hide-label' : ''),=0A=
                   c.clearCls || 'x-form-clear-left' =0A=
            ];=0A=
            if(typeof position =3D=3D 'number'){=0A=
                position =3D target.dom.childNodes[position] || null;=0A=
            }=0A=
            if(position){=0A=
                this.fieldTpl.insertBefore(position, args);=0A=
            }else{=0A=
                this.fieldTpl.append(target, args);=0A=
            }=0A=
            c.render('x-form-el-'+c.id);=0A=
        }else {=0A=
            Ext.layout.FormLayout.superclass.renderItem.apply(this, =
arguments);=0A=
        }=0A=
    },=0A=
=0A=
        adjustWidthAnchor : function(value, comp){=0A=
        return value - (comp.isFormField  ? (comp.hideLabel ? 0 : =
this.labelAdjust) : 0);=0A=
    },=0A=
=0A=
        isValidParent : function(c, target){=0A=
        return true;=0A=
    }=0A=
=0A=
    =0A=
});=0A=
=0A=
Ext.Container.LAYOUTS['form'] =3D Ext.layout.FormLayout;=0A=

Ext.layout.Accordion =3D Ext.extend(Ext.layout.FitLayout, {
   =20
    fill : true,
   =20
    autoWidth : true,
   =20
    titleCollapse : true,
   =20
    hideCollapseTool : false,
   =20
    collapseFirst : false,
   =20
    animate : false,
   =20
    sequence : false,
   =20
    activeOnTop : false,

    renderItem : function(c){
        if(this.animate =3D=3D=3D false){
            c.animCollapse =3D false;
        }
        c.collapsible =3D true;
        if(this.autoWidth){
            c.autoWidth =3D true;
        }
        if(this.titleCollapse){
            c.titleCollapse =3D true;
        }
        if(this.hideCollapseTool){
            c.hideCollapseTool =3D true;
        }
        if(this.collapseFirst !=3D=3D undefined){
            c.collapseFirst =3D this.collapseFirst;
        }
        if(!this.activeItem && !c.collapsed){
            this.activeItem =3D c;
        }else if(this.activeItem){
            c.collapsed =3D true;
        }
        Ext.layout.Accordion.superclass.renderItem.apply(this, =
arguments);
        c.header.addClass('x-accordion-hd');
        c.on('beforeexpand', this.beforeExpand, this);
    },

    =0A=
    beforeExpand : function(p, anim){
        var ai =3D this.activeItem;
        if(ai){
            if(this.sequence){
                delete this.activeItem;
                if (!ai.collapsed){
                    ai.collapse({callback:function(){
                        p.expand(anim || true);
                    }, scope: this});
                    return false;
                }
            }else{
                ai.collapse(this.animate);
            }
        }
        this.activeItem =3D p;
        if(this.activeOnTop){
            p.el.dom.parentNode.insertBefore(p.el.dom, =
p.el.dom.parentNode.firstChild);
        }
        this.layout();
    },

    =0A=
    setItemSize : function(item, size){
        if(this.fill && item){
            var items =3D this.container.items.items;
            var hh =3D 0;
            for(var i =3D 0, len =3D items.length; i < len; i++){
                var p =3D items[i];
                if(p !=3D item){
                    hh +=3D (p.getSize().height - p.bwrap.getHeight());
                }
            }
            size.height -=3D hh;
            item.setSize(size);
        }
    }
});
Ext.Container.LAYOUTS['accordion'] =3D Ext.layout.Accordion;=0A=

Ext.layout.TableLayout =3D Ext.extend(Ext.layout.ContainerLayout, {
   =20

    =0A=
    monitorResize:false,

    =0A=
    setContainer : function(ct){
        Ext.layout.TableLayout.superclass.setContainer.call(this, ct);

        this.currentRow =3D 0;
        this.currentColumn =3D 0;
        this.cells =3D [];
    },

    =0A=
    onLayout : function(ct, target){
        var cs =3D ct.items.items, len =3D cs.length, c, i;

        if(!this.table){
            target.addClass('x-table-layout-ct');

            this.table =3D target.createChild(
                {tag:'table', cls:'x-table-layout', cellspacing: 0, cn: =
{tag: 'tbody'}}, null, true);

            this.renderAll(ct, target);
        }
    },

    =0A=
    getRow : function(index){
        var row =3D this.table.tBodies[0].childNodes[index];
        if(!row){
            row =3D document.createElement('tr');
            this.table.tBodies[0].appendChild(row);
        }
        return row;
    },

    =0A=
	getNextCell : function(c){
		var cell =3D this.getNextNonSpan(this.currentColumn, this.currentRow);
		var curCol =3D this.currentColumn =3D cell[0], curRow =3D =
this.currentRow =3D cell[1];
		for(var rowIndex =3D curRow; rowIndex < curRow + (c.rowspan || 1); =
rowIndex++){
			if(!this.cells[rowIndex]){
				this.cells[rowIndex] =3D [];
			}
			for(var colIndex =3D curCol; colIndex < curCol + (c.colspan || 1); =
colIndex++){
				this.cells[rowIndex][colIndex] =3D true;
			}
		}
		var td =3D document.createElement('td');
		if(c.cellId){
			td.id =3D c.cellId;
		}
		var cls =3D 'x-table-layout-cell';
		if(c.cellCls){
			cls +=3D ' ' + c.cellCls;
		}
		td.className =3D cls;
		if(c.colspan){
			td.colSpan =3D c.colspan;
		}
		if(c.rowspan){
			td.rowSpan =3D c.rowspan;
		}
		this.getRow(curRow).appendChild(td);
		return td;
	},
   =20
    =0A=
	getNextNonSpan: function(colIndex, rowIndex){
		var cols =3D this.columns;
		while((cols && colIndex >=3D cols) || (this.cells[rowIndex] && =
this.cells[rowIndex][colIndex])) {
			if(cols && colIndex >=3D cols){
				rowIndex++;
				colIndex =3D 0;
			}else{
				colIndex++;
			}
		}
		return [colIndex, rowIndex];
	},

    =0A=
    renderItem : function(c, position, target){
        if(c && !c.rendered){
            c.render(this.getNextCell(c));
        }
    },

    =0A=
    isValidParent : function(c, target){
        return true;
    }

   =20
});

Ext.Container.LAYOUTS['table'] =3D Ext.layout.TableLayout;=0A=

Ext.layout.AbsoluteLayout =3D Ext.extend(Ext.layout.AnchorLayout, {
    extraCls: 'x-abs-layout-item',
    isForm: false,
    =0A=
    setContainer : function(ct){
        Ext.layout.AbsoluteLayout.superclass.setContainer.call(this, =
ct);
        if(ct.isXType('form')){
            this.isForm =3D true;
        }
    },

    onLayout : function(ct, target){
        if(this.isForm){ ct.body.position(); } else { target.position(); =
}
        Ext.layout.AbsoluteLayout.superclass.onLayout.call(this, ct, =
target);
    },

    =0A=
    getAnchorViewSize : function(ct, target){
        return this.isForm ? ct.body.getStyleSize() : =
Ext.layout.AbsoluteLayout.superclass.getAnchorViewSize.call(this, ct, =
target);
    },

    =0A=
    isValidParent : function(c, target){
        return this.isForm ? true : =
Ext.layout.AbsoluteLayout.superclass.isValidParent.call(this, c, =
target);
    },

    =0A=
    adjustWidthAnchor : function(value, comp){
        return value ? value - comp.getPosition(true)[0] : value;
    },

    =0A=
    adjustHeightAnchor : function(value, comp){
        return  value ? value - comp.getPosition(true)[1] : value;
    }
   =20
});
Ext.Container.LAYOUTS['absolute'] =3D Ext.layout.AbsoluteLayout;=0A=

Ext.Viewport =3D Ext.extend(Ext.Container, {
=09
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    initComponent : function() {
        Ext.Viewport.superclass.initComponent.call(this);
        document.getElementsByTagName('html')[0].className +=3D ' =
x-viewport';
        this.el =3D Ext.getBody();
        this.el.setHeight =3D Ext.emptyFn;
        this.el.setWidth =3D Ext.emptyFn;
        this.el.setSize =3D Ext.emptyFn;
        this.el.dom.scroll =3D 'no';
        this.allowDomMove =3D false;
        this.autoWidth =3D true;
        this.autoHeight =3D true;
        Ext.EventManager.onWindowResize(this.fireResize, this);
        this.renderTo =3D this.el;
    },

    fireResize : function(w, h){
        this.fireEvent('resize', this, w, h, w, h);
    }
});
Ext.reg('viewport', Ext.Viewport);=0A=
=0A=
Ext.Panel =3D Ext.extend(Ext.Container, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
     =0A=
    =0A=
=0A=
=0A=
    =0A=
    baseCls : 'x-panel',=0A=
    =0A=
    collapsedCls : 'x-panel-collapsed',=0A=
    =0A=
    maskDisabled: true,=0A=
    =0A=
    animCollapse: Ext.enableFx,=0A=
    =0A=
    headerAsText: true,=0A=
    =0A=
    buttonAlign: 'right',=0A=
    =0A=
    collapsed : false,=0A=
    =0A=
    collapseFirst: true,=0A=
    =0A=
    minButtonWidth:75,=0A=
    =0A=
    elements : 'body',=0A=
=0A=
                toolTarget : 'header',=0A=
    collapseEl : 'bwrap',=0A=
    slideAnchor : 't',=0A=
=0A=
        deferHeight: true,=0A=
        expandDefaults: {=0A=
        duration:.25=0A=
    },=0A=
        collapseDefaults: {=0A=
        duration:.25=0A=
    },=0A=
=0A=
        initComponent : function(){=0A=
        Ext.Panel.superclass.initComponent.call(this);=0A=
=0A=
        this.addEvents(=0A=
            =0A=
            'bodyresize',=0A=
            =0A=
            'titlechange',=0A=
            =0A=
            'collapse',=0A=
            =0A=
            'expand',=0A=
            =0A=
            'beforecollapse',=0A=
            =0A=
            'beforeexpand',=0A=
            =0A=
            'beforeclose',=0A=
            =0A=
            'close',=0A=
            =0A=
            'activate',=0A=
            =0A=
            'deactivate'=0A=
        );=0A=
=0A=
                if(this.tbar){=0A=
            this.elements +=3D ',tbar';=0A=
            if(typeof this.tbar =3D=3D 'object'){=0A=
                this.topToolbar =3D this.tbar;=0A=
            }=0A=
            delete this.tbar;=0A=
        }=0A=
        if(this.bbar){=0A=
            this.elements +=3D ',bbar';=0A=
            if(typeof this.bbar =3D=3D 'object'){=0A=
                this.bottomToolbar =3D this.bbar;=0A=
            }=0A=
            delete this.bbar;=0A=
        }=0A=
=0A=
        if(this.header =3D=3D=3D true){=0A=
            this.elements +=3D ',header';=0A=
            delete this.header;=0A=
        }else if(this.title && this.header !=3D=3D false){=0A=
            this.elements +=3D ',header';=0A=
        }=0A=
=0A=
        if(this.footer =3D=3D=3D true){=0A=
            this.elements +=3D ',footer';=0A=
            delete this.footer;=0A=
        }=0A=
=0A=
        if(this.buttons){=0A=
            var btns =3D this.buttons;=0A=
            =0A=
            this.buttons =3D [];=0A=
            for(var i =3D 0, len =3D btns.length; i < len; i++) {=0A=
                if(btns[i].render){                     =
this.buttons.push(btns[i]);=0A=
                }else{=0A=
                    this.addButton(btns[i]);=0A=
                }=0A=
            }=0A=
        }=0A=
        if(this.autoLoad){=0A=
            this.on('render', this.doAutoLoad, this, {delay:10});=0A=
        }=0A=
    },=0A=
=0A=
        createElement : function(name, pnode){=0A=
        if(this[name]){=0A=
            pnode.appendChild(this[name].dom);=0A=
            return;=0A=
        }=0A=
=0A=
        if(name =3D=3D=3D 'bwrap' || this.elements.indexOf(name) !=3D =
-1){=0A=
            if(this[name+'Cfg']){=0A=
                this[name] =3D =
Ext.fly(pnode).createChild(this[name+'Cfg']);=0A=
            }else{=0A=
                var el =3D document.createElement('div');=0A=
                el.className =3D this[name+'Cls'];=0A=
                this[name] =3D Ext.get(pnode.appendChild(el));=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.Panel.superclass.onRender.call(this, ct, position);=0A=
=0A=
        this.createClasses();=0A=
=0A=
        if(this.el){             this.el.addClass(this.baseCls);=0A=
            this.header =3D this.el.down('.'+this.headerCls);=0A=
            this.bwrap =3D this.el.down('.'+this.bwrapCls);=0A=
            var cp =3D this.bwrap ? this.bwrap : this.el;=0A=
            this.tbar =3D cp.down('.'+this.tbarCls);=0A=
            this.body =3D cp.down('.'+this.bodyCls);=0A=
            this.bbar =3D cp.down('.'+this.bbarCls);=0A=
            this.footer =3D cp.down('.'+this.footerCls);=0A=
            this.fromMarkup =3D true;=0A=
        }else{=0A=
            this.el =3D ct.createChild({=0A=
                id: this.id,=0A=
                cls: this.baseCls=0A=
            }, position);=0A=
        }=0A=
        var el =3D this.el, d =3D el.dom;=0A=
=0A=
        if(this.cls){=0A=
            this.el.addClass(this.cls);=0A=
        }=0A=
=0A=
        if(this.buttons){=0A=
            this.elements +=3D ',footer';=0A=
        }=0A=
=0A=
        =0A=
                if(this.frame){=0A=
            el.insertHtml('afterBegin', =
String.format(Ext.Element.boxMarkup, this.baseCls));=0A=
=0A=
            this.createElement('header', =
d.firstChild.firstChild.firstChild);=0A=
            this.createElement('bwrap', d);=0A=
=0A=
                        var bw =3D this.bwrap.dom;=0A=
            var ml =3D d.childNodes[1], bl =3D d.childNodes[2];=0A=
            bw.appendChild(ml);=0A=
            bw.appendChild(bl);=0A=
=0A=
            var mc =3D bw.firstChild.firstChild.firstChild;=0A=
            this.createElement('tbar', mc);=0A=
            this.createElement('body', mc);=0A=
            this.createElement('bbar', mc);=0A=
            this.createElement('footer', =
bw.lastChild.firstChild.firstChild);=0A=
=0A=
            if(!this.footer){=0A=
                this.bwrap.dom.lastChild.className +=3D ' =
x-panel-nofooter';=0A=
            }=0A=
        }else{=0A=
            this.createElement('header', d);=0A=
            this.createElement('bwrap', d);=0A=
=0A=
                        var bw =3D this.bwrap.dom;=0A=
            this.createElement('tbar', bw);=0A=
            this.createElement('body', bw);=0A=
            this.createElement('bbar', bw);=0A=
            this.createElement('footer', bw);=0A=
=0A=
            if(!this.header){=0A=
                this.body.addClass(this.bodyCls + '-noheader');=0A=
                if(this.tbar){=0A=
                    this.tbar.addClass(this.tbarCls + '-noheader');=0A=
                }=0A=
            }=0A=
        }=0A=
=0A=
        if(this.border =3D=3D=3D false){=0A=
            this.el.addClass(this.baseCls + '-noborder');=0A=
            this.body.addClass(this.bodyCls + '-noborder');=0A=
            if(this.header){=0A=
                this.header.addClass(this.headerCls + '-noborder');=0A=
            }=0A=
            if(this.footer){=0A=
                this.footer.addClass(this.footerCls + '-noborder');=0A=
            }=0A=
            if(this.tbar){=0A=
                this.tbar.addClass(this.tbarCls + '-noborder');=0A=
            }=0A=
            if(this.bbar){=0A=
                this.bbar.addClass(this.bbarCls + '-noborder');=0A=
            }=0A=
        }=0A=
=0A=
        if(this.bodyBorder =3D=3D=3D false){=0A=
           this.body.addClass(this.bodyCls + '-noborder');=0A=
        }=0A=
=0A=
        if(this.bodyStyle){=0A=
           this.body.applyStyles(this.bodyStyle);=0A=
        }=0A=
=0A=
        this.bwrap.enableDisplayMode('block');=0A=
=0A=
        if(this.header){=0A=
            this.header.unselectable();=0A=
=0A=
                        if(this.headerAsText){=0A=
                this.header.dom.innerHTML =3D=0A=
                    '<span class=3D"' + this.headerTextCls + =
'">'+this.header.dom.innerHTML+'</span>';=0A=
=0A=
                if(this.iconCls){=0A=
                    this.setIconClass(this.iconCls);=0A=
                }=0A=
            }=0A=
        }=0A=
=0A=
        if(this.floating){=0A=
            this.makeFloating(this.floating);=0A=
        }=0A=
=0A=
        if(this.collapsible){=0A=
            this.tools =3D this.tools ? this.tools.slice(0) : [];=0A=
            if(!this.hideCollapseTool){=0A=
                this.tools[this.collapseFirst?'unshift':'push']({=0A=
                    id: 'toggle',=0A=
                    handler : this.toggleCollapse,=0A=
                    scope: this=0A=
                });=0A=
            }=0A=
            if(this.titleCollapse && this.header){=0A=
                this.header.on('click', this.toggleCollapse, this);=0A=
                this.header.setStyle('cursor', 'pointer');=0A=
            }=0A=
        }=0A=
        if(this.tools){=0A=
            var ts =3D this.tools;=0A=
            this.tools =3D {};=0A=
            this.addTool.apply(this, ts);=0A=
        }else{=0A=
            this.tools =3D {};=0A=
        }=0A=
=0A=
        if(this.buttons && this.buttons.length > 0){=0A=
                        var tb =3D =
this.footer.createChild({cls:'x-panel-btns-ct', cn: {=0A=
                cls:"x-panel-btns x-panel-btns-"+this.buttonAlign,=0A=
                html:'<table =
cellspacing=3D"0"><tbody><tr></tr></tbody></table><div =
class=3D"x-clear"></div>'=0A=
            }}, null, true);=0A=
            var tr =3D tb.getElementsByTagName('tr')[0];=0A=
            for(var i =3D 0, len =3D this.buttons.length; i < len; i++) {=0A=
                var b =3D this.buttons[i];=0A=
                var td =3D document.createElement('td');=0A=
                td.className =3D 'x-panel-btn-td';=0A=
                b.render(tr.appendChild(td));=0A=
            }=0A=
        }=0A=
=0A=
        if(this.tbar && this.topToolbar){=0A=
            if(Ext.isArray(this.topToolbar)){=0A=
                this.topToolbar =3D new Ext.Toolbar(this.topToolbar);=0A=
            }=0A=
            this.topToolbar.render(this.tbar);=0A=
            this.topToolbar.ownerCt =3D this;=0A=
        }=0A=
        if(this.bbar && this.bottomToolbar){=0A=
            if(Ext.isArray(this.bottomToolbar)){=0A=
                this.bottomToolbar =3D new =
Ext.Toolbar(this.bottomToolbar);=0A=
            }=0A=
            this.bottomToolbar.render(this.bbar);=0A=
            this.bottomToolbar.ownerCt =3D this;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setIconClass : function(cls){=0A=
        var old =3D this.iconCls;=0A=
        this.iconCls =3D cls;=0A=
        if(this.rendered && this.header){=0A=
            if(this.frame){=0A=
                this.header.addClass('x-panel-icon');=0A=
                this.header.replaceClass(old, this.iconCls);=0A=
            }else{=0A=
                var hd =3D this.header.dom;=0A=
                var img =3D hd.firstChild && =
String(hd.firstChild.tagName).toLowerCase() =3D=3D 'img' ? hd.firstChild =
: null;=0A=
                if(img){=0A=
                    Ext.fly(img).replaceClass(old, this.iconCls);=0A=
                }else{=0A=
                    Ext.DomHelper.insertBefore(hd.firstChild, {=0A=
                        tag:'img', src: Ext.BLANK_IMAGE_URL, =
cls:'x-panel-inline-icon '+this.iconCls=0A=
                    });=0A=
                 }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        makeFloating : function(cfg){=0A=
        this.floating =3D true;=0A=
        this.el =3D new Ext.Layer(=0A=
            typeof cfg =3D=3D 'object' ? cfg : {=0A=
                shadow: this.shadow !=3D=3D undefined ? this.shadow : =
'sides',=0A=
                shadowOffset: this.shadowOffset,=0A=
                constrain:false,=0A=
                shim: this.shim =3D=3D=3D false ? false : undefined=0A=
            }, this.el=0A=
        );=0A=
    },=0A=
=0A=
    =0A=
    getTopToolbar : function(){=0A=
        return this.topToolbar;=0A=
    },=0A=
=0A=
    =0A=
    getBottomToolbar : function(){=0A=
        return this.bottomToolbar;=0A=
    },=0A=
=0A=
    =0A=
    addButton : function(config, handler, scope){=0A=
        var bc =3D {=0A=
            handler: handler,=0A=
            scope: scope,=0A=
            minWidth: this.minButtonWidth,=0A=
            hideParent:true=0A=
        };=0A=
        if(typeof config =3D=3D "string"){=0A=
            bc.text =3D config;=0A=
        }else{=0A=
            Ext.apply(bc, config);=0A=
        }=0A=
        var btn =3D new Ext.Button(bc);=0A=
        btn.ownerCt =3D this;=0A=
        if(!this.buttons){=0A=
            this.buttons =3D [];=0A=
        }=0A=
        this.buttons.push(btn);=0A=
        return btn;=0A=
    },=0A=
=0A=
        addTool : function(){=0A=
        if(!this[this.toolTarget]) {             return;=0A=
        }=0A=
        if(!this.toolTemplate){=0A=
                        var tt =3D new Ext.Template(=0A=
                 '<div class=3D"x-tool x-tool-{id}">&#160;</div>'=0A=
            );=0A=
            tt.disableFormats =3D true;=0A=
            tt.compile();=0A=
            Ext.Panel.prototype.toolTemplate =3D tt;=0A=
        }=0A=
        for(var i =3D 0, a =3D arguments, len =3D a.length; i < len; =
i++) {=0A=
            var tc =3D a[i], overCls =3D 'x-tool-'+tc.id+'-over';=0A=
            var t =3D this.toolTemplate.insertFirst((tc.align !=3D=3D =
'left') ? this[this.toolTarget] : this[this.toolTarget].child('span'), =
tc, true);=0A=
            this.tools[tc.id] =3D t;=0A=
            t.enableDisplayMode('block');=0A=
            t.on('click', this.createToolHandler(t, tc, overCls, this));=0A=
            if(tc.on){=0A=
                t.on(tc.on);=0A=
            }=0A=
            if(tc.hidden){=0A=
                t.hide();=0A=
            }=0A=
            if(tc.qtip){=0A=
                if(typeof tc.qtip =3D=3D 'object'){=0A=
                    Ext.QuickTips.register(Ext.apply({=0A=
                          target: t.id=0A=
                    }, tc.qtip));=0A=
                } else {=0A=
                    t.dom.qtip =3D tc.qtip;=0A=
                }=0A=
            }=0A=
            t.addClassOnOver(overCls);=0A=
        }=0A=
    },=0A=
=0A=
        onShow : function(){=0A=
        if(this.floating){=0A=
            return this.el.show();=0A=
        }=0A=
        Ext.Panel.superclass.onShow.call(this);=0A=
    },=0A=
=0A=
        onHide : function(){=0A=
        if(this.floating){=0A=
            return this.el.hide();=0A=
        }=0A=
        Ext.Panel.superclass.onHide.call(this);=0A=
    },=0A=
=0A=
        createToolHandler : function(t, tc, overCls, panel){=0A=
        return function(e){=0A=
            t.removeClass(overCls);=0A=
            e.stopEvent();=0A=
            if(tc.handler){=0A=
                tc.handler.call(tc.scope || t, e, t, panel);=0A=
            }=0A=
        };=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        if(this.fromMarkup && this.height =3D=3D=3D undefined && =
!this.autoHeight){=0A=
            this.height =3D this.el.getHeight();=0A=
        }=0A=
        if(this.floating && !this.hidden && !this.initHidden){=0A=
            this.el.show();=0A=
        }=0A=
        if(this.title){=0A=
            this.setTitle(this.title);=0A=
        }=0A=
        this.setAutoScroll();=0A=
        if(this.html){=0A=
            this.body.update(typeof this.html =3D=3D 'object' ?=0A=
                             Ext.DomHelper.markup(this.html) :=0A=
                             this.html);=0A=
            delete this.html;=0A=
        }=0A=
        if(this.contentEl){=0A=
            var ce =3D Ext.getDom(this.contentEl);=0A=
            Ext.fly(ce).removeClass(['x-hidden', 'x-hide-display']);=0A=
            this.body.dom.appendChild(ce);=0A=
        }=0A=
        if(this.collapsed){=0A=
            this.collapsed =3D false;=0A=
            this.collapse(false);=0A=
        }=0A=
        Ext.Panel.superclass.afterRender.call(this);         =
this.initEvents();=0A=
    },=0A=
    =0A=
        setAutoScroll : function(){=0A=
        if(this.rendered && this.autoScroll){=0A=
            this.body.setOverflow('auto');=0A=
        }=0A=
    },=0A=
=0A=
        getKeyMap : function(){=0A=
        if(!this.keyMap){=0A=
            this.keyMap =3D new Ext.KeyMap(this.el, this.keys);=0A=
        }=0A=
        return this.keyMap;=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        if(this.keys){=0A=
            this.getKeyMap();=0A=
        }=0A=
        if(this.draggable){=0A=
            this.initDraggable();=0A=
        }=0A=
    },=0A=
=0A=
        initDraggable : function(){=0A=
        =0A=
        this.dd =3D new Ext.Panel.DD(this, typeof this.draggable =3D=3D =
'boolean' ? null : this.draggable);=0A=
    },=0A=
=0A=
        beforeEffect : function(){=0A=
        if(this.floating){=0A=
            this.el.beforeAction();=0A=
        }=0A=
        this.el.addClass('x-panel-animated');=0A=
    },=0A=
=0A=
        afterEffect : function(){=0A=
        this.syncShadow();=0A=
        this.el.removeClass('x-panel-animated');=0A=
    },=0A=
=0A=
        createEffect : function(a, cb, scope){=0A=
        var o =3D {=0A=
            scope:scope,=0A=
            block:true=0A=
        };=0A=
        if(a =3D=3D=3D true){=0A=
            o.callback =3D cb;=0A=
            return o;=0A=
        }else if(!a.callback){=0A=
            o.callback =3D cb;=0A=
        }else {             o.callback =3D function(){=0A=
                cb.call(scope);=0A=
                Ext.callback(a.callback, a.scope);=0A=
            };=0A=
        }=0A=
        return Ext.applyIf(o, a);=0A=
    },=0A=
=0A=
    =0A=
    collapse : function(animate){=0A=
        if(this.collapsed || this.el.hasFxBlock() || =
this.fireEvent('beforecollapse', this, animate) =3D=3D=3D false){=0A=
            return;=0A=
        }=0A=
        var doAnim =3D animate =3D=3D=3D true || (animate !=3D=3D false =
&& this.animCollapse);=0A=
        this.beforeEffect();=0A=
        this.onCollapse(doAnim, animate);=0A=
        return this;=0A=
    },=0A=
=0A=
        onCollapse : function(doAnim, animArg){=0A=
        if(doAnim){=0A=
            this[this.collapseEl].slideOut(this.slideAnchor,=0A=
                    Ext.apply(this.createEffect(animArg||true, =
this.afterCollapse, this),=0A=
                        this.collapseDefaults));=0A=
        }else{=0A=
            this[this.collapseEl].hide();=0A=
            this.afterCollapse();=0A=
        }=0A=
    },=0A=
=0A=
        afterCollapse : function(){=0A=
        this.collapsed =3D true;=0A=
        this.el.addClass(this.collapsedCls);=0A=
        this.afterEffect();=0A=
        this.fireEvent('collapse', this);=0A=
    },=0A=
=0A=
    =0A=
    expand : function(animate){=0A=
        if(!this.collapsed || this.el.hasFxBlock() || =
this.fireEvent('beforeexpand', this, animate) =3D=3D=3D false){=0A=
            return;=0A=
        }=0A=
        var doAnim =3D animate =3D=3D=3D true || (animate !=3D=3D false =
&& this.animCollapse);=0A=
        this.el.removeClass(this.collapsedCls);=0A=
        this.beforeEffect();=0A=
        this.onExpand(doAnim, animate);=0A=
        return this;=0A=
    },=0A=
=0A=
        onExpand : function(doAnim, animArg){=0A=
        if(doAnim){=0A=
            this[this.collapseEl].slideIn(this.slideAnchor,=0A=
                    Ext.apply(this.createEffect(animArg||true, =
this.afterExpand, this),=0A=
                        this.expandDefaults));=0A=
        }else{=0A=
            this[this.collapseEl].show();=0A=
            this.afterExpand();=0A=
        }=0A=
    },=0A=
=0A=
        afterExpand : function(){=0A=
        this.collapsed =3D false;=0A=
        this.afterEffect();=0A=
        this.fireEvent('expand', this);=0A=
    },=0A=
=0A=
    =0A=
    toggleCollapse : function(animate){=0A=
        this[this.collapsed ? 'expand' : 'collapse'](animate);=0A=
        return this;=0A=
    },=0A=
=0A=
        onDisable : function(){=0A=
        if(this.rendered && this.maskDisabled){=0A=
            this.el.mask();=0A=
        }=0A=
        Ext.Panel.superclass.onDisable.call(this);=0A=
    },=0A=
=0A=
        onEnable : function(){=0A=
        if(this.rendered && this.maskDisabled){=0A=
            this.el.unmask();=0A=
        }=0A=
        Ext.Panel.superclass.onEnable.call(this);=0A=
    },=0A=
=0A=
        onResize : function(w, h){=0A=
        if(w !=3D=3D undefined || h !=3D=3D undefined){=0A=
            if(!this.collapsed){=0A=
                if(typeof w =3D=3D 'number'){=0A=
                    this.body.setWidth(=0A=
                            this.adjustBodyWidth(w - =
this.getFrameWidth()));=0A=
                }else if(w =3D=3D 'auto'){=0A=
                    this.body.setWidth(w);=0A=
                }=0A=
=0A=
                if(typeof h =3D=3D 'number'){=0A=
                    this.body.setHeight(=0A=
                            this.adjustBodyHeight(h - =
this.getFrameHeight()));=0A=
                }else if(h =3D=3D 'auto'){=0A=
                    this.body.setHeight(h);=0A=
                }=0A=
            }else{=0A=
                this.queuedBodySize =3D {width: w, height: h};=0A=
                if(!this.queuedExpand && this.allowQueuedExpand !=3D=3D =
false){=0A=
                    this.queuedExpand =3D true;=0A=
                    this.on('expand', function(){=0A=
                        delete this.queuedExpand;=0A=
                        this.onResize(this.queuedBodySize.width, =
this.queuedBodySize.height);=0A=
                        this.doLayout();=0A=
                    }, this, {single:true});=0A=
                }=0A=
            }=0A=
            this.fireEvent('bodyresize', this, w, h);=0A=
        }=0A=
        this.syncShadow();=0A=
    },=0A=
=0A=
        adjustBodyHeight : function(h){=0A=
        return h;=0A=
    },=0A=
=0A=
        adjustBodyWidth : function(w){=0A=
        return w;=0A=
    },=0A=
=0A=
        onPosition : function(){=0A=
        this.syncShadow();=0A=
    },=0A=
=0A=
        onDestroy : function(){=0A=
        if(this.tools){=0A=
            for(var k in this.tools){=0A=
                Ext.destroy(this.tools[k]);=0A=
            }=0A=
        }=0A=
        if(this.buttons){=0A=
            for(var b in this.buttons){=0A=
                Ext.destroy(this.buttons[b]);=0A=
            }=0A=
        }=0A=
        Ext.destroy(=0A=
            this.topToolbar,=0A=
            this.bottomToolbar=0A=
        );=0A=
        Ext.Panel.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
    =0A=
    getFrameWidth : function(){=0A=
        var w =3D this.el.getFrameWidth('lr');=0A=
=0A=
        if(this.frame){=0A=
            var l =3D this.bwrap.dom.firstChild;=0A=
            w +=3D (Ext.fly(l).getFrameWidth('l') + =
Ext.fly(l.firstChild).getFrameWidth('r'));=0A=
            var mc =3D this.bwrap.dom.firstChild.firstChild.firstChild;=0A=
            w +=3D Ext.fly(mc).getFrameWidth('lr');=0A=
        }=0A=
        return w;=0A=
    },=0A=
=0A=
    =0A=
    getFrameHeight : function(){=0A=
        var h  =3D this.el.getFrameWidth('tb');=0A=
        h +=3D (this.tbar ? this.tbar.getHeight() : 0) +=0A=
             (this.bbar ? this.bbar.getHeight() : 0);=0A=
=0A=
        if(this.frame){=0A=
            var hd =3D this.el.dom.firstChild;=0A=
            var ft =3D this.bwrap.dom.lastChild;=0A=
            h +=3D (hd.offsetHeight + ft.offsetHeight);=0A=
            var mc =3D this.bwrap.dom.firstChild.firstChild.firstChild;=0A=
            h +=3D Ext.fly(mc).getFrameWidth('tb');=0A=
        }else{=0A=
            h +=3D (this.header ? this.header.getHeight() : 0) +=0A=
                (this.footer ? this.footer.getHeight() : 0);=0A=
        }=0A=
        return h;=0A=
    },=0A=
=0A=
    =0A=
    getInnerWidth : function(){=0A=
        return this.getSize().width - this.getFrameWidth();=0A=
    },=0A=
=0A=
    =0A=
    getInnerHeight : function(){=0A=
        return this.getSize().height - this.getFrameHeight();=0A=
    },=0A=
=0A=
        syncShadow : function(){=0A=
        if(this.floating){=0A=
            this.el.sync(true);=0A=
        }=0A=
    },=0A=
=0A=
        getLayoutTarget : function(){=0A=
        return this.body;=0A=
    },=0A=
=0A=
    =0A=
    setTitle : function(title, iconCls){=0A=
        this.title =3D title;=0A=
        if(this.header && this.headerAsText){=0A=
            this.header.child('span').update(title);=0A=
        }=0A=
        if(iconCls){=0A=
            this.setIconClass(iconCls);=0A=
        }=0A=
        this.fireEvent('titlechange', this, title);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getUpdater : function(){=0A=
        return this.body.getUpdater();=0A=
    },=0A=
=0A=
     =0A=
    load : function(){=0A=
        var um =3D this.body.getUpdater();=0A=
        um.update.apply(um, arguments);=0A=
        return this;=0A=
    },=0A=
=0A=
        beforeDestroy : function(){=0A=
        Ext.Element.uncache(=0A=
            this.header,=0A=
            this.tbar,=0A=
            this.bbar,=0A=
            this.footer,=0A=
            this.body=0A=
        );=0A=
    },=0A=
=0A=
        createClasses : function(){=0A=
        this.headerCls =3D this.baseCls + '-header';=0A=
        this.headerTextCls =3D this.baseCls + '-header-text';=0A=
        this.bwrapCls =3D this.baseCls + '-bwrap';=0A=
        this.tbarCls =3D this.baseCls + '-tbar';=0A=
        this.bodyCls =3D this.baseCls + '-body';=0A=
        this.bbarCls =3D this.baseCls + '-bbar';=0A=
        this.footerCls =3D this.baseCls + '-footer';=0A=
    },=0A=
=0A=
        createGhost : function(cls, useShim, appendTo){=0A=
        var el =3D document.createElement('div');=0A=
        el.className =3D 'x-panel-ghost ' + (cls ? cls : '');=0A=
        if(this.header){=0A=
            el.appendChild(this.el.dom.firstChild.cloneNode(true));=0A=
        }=0A=
        =
Ext.fly(el.appendChild(document.createElement('ul'))).setHeight(this.bwra=
p.getHeight());=0A=
        el.style.width =3D this.el.dom.offsetWidth + 'px';;=0A=
        if(!appendTo){=0A=
            this.container.dom.appendChild(el);=0A=
        }else{=0A=
            Ext.getDom(appendTo).appendChild(el);=0A=
        }=0A=
        if(useShim !=3D=3D false && this.el.useShim !=3D=3D false){=0A=
            var layer =3D new Ext.Layer({shadow:false, useDisplay:true, =
constrain:false}, el);=0A=
            layer.show();=0A=
            return layer;=0A=
        }else{=0A=
            return new Ext.Element(el);=0A=
        }=0A=
    },=0A=
=0A=
        doAutoLoad : function(){=0A=
        this.body.load(=0A=
            typeof this.autoLoad =3D=3D 'object' ?=0A=
                this.autoLoad : {url: this.autoLoad});=0A=
    }=0A=
=0A=
=0A=
});=0A=
Ext.reg('panel', Ext.Panel);=0A=
=0A=
=0A=
Ext.Window =3D Ext.extend(Ext.Panel, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    baseCls : 'x-window',=0A=
    =0A=
    resizable:true,=0A=
    =0A=
    draggable:true,=0A=
    =0A=
    closable : true,=0A=
    =0A=
    constrain:false,=0A=
    =0A=
    constrainHeader:false,=0A=
    =0A=
    plain:false,=0A=
    =0A=
    minimizable : false,=0A=
    =0A=
    maximizable : false,=0A=
    =0A=
    minHeight: 100,=0A=
    =0A=
    minWidth: 200,=0A=
    =0A=
    expandOnShow: true,=0A=
    =0A=
    closeAction: 'close',=0A=
    =0A=
    elements: 'header,body',=0A=
=0A=
        collapsible:false,=0A=
=0A=
        initHidden : true,=0A=
    =0A=
    monitorResize : true,=0A=
    =0A=
    frame:true,=0A=
    =0A=
    floating:true,=0A=
=0A=
        initComponent : function(){=0A=
        Ext.Window.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            =0A=
            =0A=
            'resize',=0A=
            =0A=
            'maximize',=0A=
            =0A=
            'minimize',=0A=
            =0A=
            'restore'=0A=
        );=0A=
    },=0A=
=0A=
        getState : function(){=0A=
        return Ext.apply(Ext.Window.superclass.getState.call(this) || =
{}, this.getBox());=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.Window.superclass.onRender.call(this, ct, position);=0A=
=0A=
        if(this.plain){=0A=
            this.el.addClass('x-window-plain');=0A=
        }=0A=
=0A=
                this.focusEl =3D this.el.createChild({=0A=
                    tag: "a", href:"#", cls:"x-dlg-focus",=0A=
                    tabIndex:"-1", html: "&#160;"});=0A=
        this.focusEl.swallowEvent('click', true);=0A=
=0A=
        this.proxy =3D this.el.createProxy("x-window-proxy");=0A=
        this.proxy.enableDisplayMode('block');=0A=
=0A=
        if(this.modal){=0A=
            this.mask =3D =
this.container.createChild({cls:"ext-el-mask"}, this.el.dom);=0A=
            this.mask.enableDisplayMode("block");=0A=
            this.mask.hide();=0A=
        }=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        Ext.Window.superclass.initEvents.call(this);=0A=
        if(this.animateTarget){=0A=
            this.setAnimateTarget(this.animateTarget);=0A=
        }=0A=
=0A=
        if(this.resizable){=0A=
            this.resizer =3D new Ext.Resizable(this.el, {=0A=
                minWidth: this.minWidth,=0A=
                minHeight:this.minHeight,=0A=
                handles: this.resizeHandles || "all",=0A=
                pinned: true,=0A=
                resizeElement : this.resizerAction=0A=
            });=0A=
            this.resizer.window =3D this;=0A=
            this.resizer.on("beforeresize", this.beforeResize, this);=0A=
        }=0A=
=0A=
        if(this.draggable){=0A=
            this.header.addClass("x-window-draggable");=0A=
        }=0A=
        this.initTools();=0A=
=0A=
        this.el.on("mousedown", this.toFront, this);=0A=
        this.manager =3D this.manager || Ext.WindowMgr;=0A=
        this.manager.register(this);=0A=
        this.hidden =3D true;=0A=
        if(this.maximized){=0A=
            this.maximized =3D false;=0A=
            this.maximize();=0A=
        }=0A=
        if(this.closable){=0A=
            var km =3D this.getKeyMap();=0A=
            km.on(27, this.onEsc, this);=0A=
            km.disable();=0A=
        }=0A=
    },=0A=
=0A=
    initDraggable : function(){=0A=
        =0A=
        this.dd =3D new Ext.Window.DD(this);  =0A=
    },=0A=
=0A=
       onEsc : function(){=0A=
        this[this.closeAction]();  =0A=
    },=0A=
=0A=
        beforeDestroy : function(){=0A=
        Ext.destroy(=0A=
            this.resizer,=0A=
            this.dd,=0A=
            this.proxy,=0A=
            this.mask=0A=
        );=0A=
        Ext.Window.superclass.beforeDestroy.call(this);=0A=
    },=0A=
    =0A=
        onDestroy : function(){=0A=
        if(this.manager){=0A=
            this.manager.unregister(this);=0A=
        }=0A=
        Ext.Window.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
        initTools : function(){=0A=
        if(this.minimizable){=0A=
            this.addTool({=0A=
                id: 'minimize',=0A=
                handler: this.minimize.createDelegate(this, [])=0A=
            });=0A=
        }=0A=
        if(this.maximizable){=0A=
            this.addTool({=0A=
                id: 'maximize',=0A=
                handler: this.maximize.createDelegate(this, [])=0A=
            });=0A=
            this.addTool({=0A=
                id: 'restore',=0A=
                handler: this.restore.createDelegate(this, []),=0A=
                hidden:true=0A=
            });=0A=
            this.header.on('dblclick', this.toggleMaximize, this);=0A=
        }=0A=
        if(this.closable){=0A=
            this.addTool({=0A=
                id: 'close',=0A=
                handler: this[this.closeAction].createDelegate(this, [])=0A=
            });=0A=
        }=0A=
    },=0A=
=0A=
        resizerAction : function(){=0A=
        var box =3D this.proxy.getBox();=0A=
        this.proxy.hide();=0A=
        this.window.handleResize(box);=0A=
        return box;=0A=
    },=0A=
=0A=
        beforeResize : function(){=0A=
        this.resizer.minHeight =3D Math.max(this.minHeight, =
this.getFrameHeight() + 40);         this.resizer.minWidth =3D =
Math.max(this.minWidth, this.getFrameWidth() + 40);=0A=
        this.resizeBox =3D this.el.getBox();=0A=
    },=0A=
=0A=
        updateHandles : function(){=0A=
        if(Ext.isIE && this.resizer){=0A=
            this.resizer.syncHandleHeight();=0A=
            this.el.repaint();=0A=
        }=0A=
    },=0A=
=0A=
        handleResize : function(box){=0A=
        var rz =3D this.resizeBox;=0A=
        if(rz.x !=3D box.x || rz.y !=3D box.y){=0A=
            this.updateBox(box);=0A=
        }else{=0A=
            this.setSize(box);=0A=
        }=0A=
        this.focus();=0A=
        this.updateHandles();=0A=
        this.saveState();=0A=
        this.fireEvent("resize", this, box.width, box.height);=0A=
    },=0A=
=0A=
    =0A=
    focus : function(){=0A=
        var f =3D this.focusEl, db =3D this.defaultButton, t =3D typeof =
db;=0A=
        if(t !=3D 'undefined'){=0A=
            if(t =3D=3D 'number'){=0A=
                f =3D this.buttons[db];=0A=
            }else if(t =3D=3D 'string'){=0A=
                f =3D Ext.getCmp(db);=0A=
            }else{=0A=
                f =3D db;=0A=
            }=0A=
        }=0A=
        f.focus.defer(10, f);=0A=
    },=0A=
=0A=
    =0A=
    setAnimateTarget : function(el){=0A=
        el =3D Ext.get(el);=0A=
        this.animateTarget =3D el;=0A=
    },=0A=
=0A=
        beforeShow : function(){=0A=
        delete this.el.lastXY;=0A=
        delete this.el.lastLT;=0A=
        if(this.x =3D=3D=3D undefined || this.y =3D=3D=3D undefined){=0A=
            var xy =3D this.el.getAlignToXY(this.container, 'c-c');=0A=
            var pos =3D this.el.translatePoints(xy[0], xy[1]);=0A=
            this.x =3D this.x =3D=3D=3D undefined? pos.left : this.x;=0A=
            this.y =3D this.y =3D=3D=3D undefined? pos.top : this.y;=0A=
        }=0A=
        this.el.setLeftTop(this.x, this.y);=0A=
=0A=
        if(this.expandOnShow){=0A=
            this.expand(false);=0A=
        }=0A=
=0A=
        if(this.modal){=0A=
            Ext.getBody().addClass("x-body-masked");=0A=
            this.mask.setSize(Ext.lib.Dom.getViewWidth(true), =
Ext.lib.Dom.getViewHeight(true));=0A=
            this.mask.show();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    show : function(animateTarget, cb, scope){=0A=
        if(!this.rendered){=0A=
            this.render(Ext.getBody());=0A=
        }=0A=
        if(this.hidden =3D=3D=3D false){=0A=
            this.toFront();=0A=
            return;=0A=
        }=0A=
        if(this.fireEvent("beforeshow", this) =3D=3D=3D false){=0A=
            return;=0A=
        }=0A=
        if(cb){=0A=
            this.on('show', cb, scope, {single:true});=0A=
        }=0A=
        this.hidden =3D false;=0A=
        if(animateTarget !=3D=3D undefined){=0A=
            this.setAnimateTarget(animateTarget);=0A=
        }=0A=
        this.beforeShow();=0A=
        if(this.animateTarget){=0A=
            this.animShow();=0A=
        }else{=0A=
            this.afterShow();=0A=
        }=0A=
    },=0A=
=0A=
        afterShow : function(){=0A=
        this.proxy.hide();=0A=
        this.el.setStyle('display', 'block');=0A=
        this.el.show();=0A=
        if(this.maximized){=0A=
            this.fitContainer();=0A=
        }=0A=
        if(Ext.isMac && Ext.isGecko){         	=
this.cascade(this.setAutoScroll);=0A=
        }=0A=
=0A=
        if(this.monitorResize || this.modal || this.constrain || =
this.constrainHeader){=0A=
            Ext.EventManager.onWindowResize(this.onWindowResize, this);=0A=
        }=0A=
        this.doConstrain();=0A=
        if(this.layout){=0A=
            this.doLayout();=0A=
        }=0A=
        if(this.keyMap){=0A=
            this.keyMap.enable();=0A=
        }=0A=
        this.toFront();=0A=
        this.updateHandles();=0A=
        this.fireEvent("show", this);=0A=
    },=0A=
=0A=
        animShow : function(){=0A=
        this.proxy.show();=0A=
        this.proxy.setBox(this.animateTarget.getBox());=0A=
        this.proxy.setOpacity(0);=0A=
        var b =3D this.getBox(false);=0A=
        b.callback =3D this.afterShow;=0A=
        b.scope =3D this;=0A=
        b.duration =3D .25;=0A=
        b.easing =3D 'easeNone';=0A=
        b.opacity =3D .5;=0A=
        b.block =3D true;=0A=
        this.el.setStyle('display', 'none');=0A=
        this.proxy.shift(b);=0A=
    },=0A=
=0A=
    =0A=
    hide : function(animateTarget, cb, scope){=0A=
        if(this.hidden || this.fireEvent("beforehide", this) =3D=3D=3D =
false){=0A=
            return;=0A=
        }=0A=
        if(cb){=0A=
            this.on('hide', cb, scope, {single:true});=0A=
        }=0A=
        this.hidden =3D true;=0A=
        if(animateTarget !=3D=3D undefined){=0A=
            this.setAnimateTarget(animateTarget);=0A=
        }=0A=
        if(this.animateTarget){=0A=
            this.animHide();=0A=
        }else{=0A=
            this.el.hide();=0A=
            this.afterHide();=0A=
        }=0A=
    },=0A=
=0A=
        afterHide : function(){=0A=
        this.proxy.hide();=0A=
        if(this.monitorResize || this.modal || this.constrain || =
this.constrainHeader){=0A=
            Ext.EventManager.removeResizeListener(this.onWindowResize, =
this);=0A=
        }=0A=
        if(this.modal){=0A=
            this.mask.hide();=0A=
            Ext.getBody().removeClass("x-body-masked");=0A=
        }=0A=
        if(this.keyMap){=0A=
            this.keyMap.disable();=0A=
        }=0A=
        this.fireEvent("hide", this);=0A=
    },=0A=
=0A=
        animHide : function(){=0A=
        this.proxy.setOpacity(.5);=0A=
        this.proxy.show();=0A=
        var tb =3D this.getBox(false);=0A=
        this.proxy.setBox(tb);=0A=
        this.el.hide();=0A=
        var b =3D this.animateTarget.getBox();=0A=
        b.callback =3D this.afterHide;=0A=
        b.scope =3D this;=0A=
        b.duration =3D .25;=0A=
        b.easing =3D 'easeNone';=0A=
        b.block =3D true;=0A=
        b.opacity =3D 0;=0A=
        this.proxy.shift(b);=0A=
    },=0A=
=0A=
        onWindowResize : function(){=0A=
        if(this.maximized){=0A=
            this.fitContainer();=0A=
        }=0A=
        if(this.modal){=0A=
            this.mask.setSize('100%', '100%');=0A=
            var force =3D this.mask.dom.offsetHeight;=0A=
            this.mask.setSize(Ext.lib.Dom.getViewWidth(true), =
Ext.lib.Dom.getViewHeight(true));=0A=
        }=0A=
        this.doConstrain();=0A=
    },=0A=
=0A=
        doConstrain : function(){=0A=
        if(this.constrain || this.constrainHeader){=0A=
            var offsets;=0A=
            if(this.constrain){=0A=
                offsets =3D {=0A=
                    right:this.el.shadowOffset,=0A=
                    left:this.el.shadowOffset,=0A=
                    bottom:this.el.shadowOffset=0A=
                };=0A=
            }else {=0A=
                var s =3D this.getSize();=0A=
                offsets =3D {=0A=
                    right:-(s.width - 100),=0A=
                    bottom:-(s.height - 25)=0A=
                };=0A=
            }=0A=
=0A=
            var xy =3D this.el.getConstrainToXY(this.container, true, =
offsets);=0A=
            if(xy){=0A=
                this.setPosition(xy[0], xy[1]);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        ghost : function(cls){=0A=
        var ghost =3D this.createGhost(cls);=0A=
        var box =3D this.getBox(true);=0A=
        ghost.setLeftTop(box.x, box.y);=0A=
        ghost.setWidth(box.width);=0A=
        this.el.hide();=0A=
        this.activeGhost =3D ghost;=0A=
        return ghost;=0A=
    },=0A=
=0A=
        unghost : function(show, matchPosition){=0A=
        if(show !=3D=3D false){=0A=
            this.el.show();=0A=
            this.focus();=0A=
	        if(Ext.isMac && Ext.isGecko){ 	        	=
this.cascade(this.setAutoScroll);=0A=
	        }=0A=
        }=0A=
        if(matchPosition !=3D=3D false){=0A=
            this.setPosition(this.activeGhost.getLeft(true), =
this.activeGhost.getTop(true));=0A=
        }=0A=
        this.activeGhost.hide();=0A=
        this.activeGhost.remove();=0A=
        delete this.activeGhost;=0A=
    },=0A=
=0A=
    =0A=
    minimize : function(){=0A=
        this.fireEvent('minimize', this);=0A=
    },=0A=
=0A=
    =0A=
    close : function(){=0A=
        if(this.fireEvent("beforeclose", this) !=3D=3D false){=0A=
            this.hide(null, function(){=0A=
                this.fireEvent('close', this);=0A=
                this.destroy();=0A=
            }, this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    maximize : function(){=0A=
        if(!this.maximized){=0A=
            this.expand(false);=0A=
            this.restoreSize =3D this.getSize();=0A=
            this.restorePos =3D this.getPosition(true);=0A=
            if (this.maximizable){=0A=
                this.tools.maximize.hide();=0A=
                this.tools.restore.show();=0A=
            }=0A=
            this.maximized =3D true;=0A=
            this.el.disableShadow();=0A=
=0A=
            if(this.dd){=0A=
                this.dd.lock();=0A=
            }=0A=
            if(this.collapsible){=0A=
                this.tools.toggle.hide();=0A=
            }=0A=
            this.el.addClass('x-window-maximized');=0A=
            this.container.addClass('x-window-maximized-ct');=0A=
=0A=
            this.setPosition(0, 0);=0A=
            this.fitContainer();=0A=
            this.fireEvent('maximize', this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    restore : function(){=0A=
        if(this.maximized){=0A=
            this.el.removeClass('x-window-maximized');=0A=
            this.tools.restore.hide();=0A=
            this.tools.maximize.show();=0A=
            this.setPosition(this.restorePos[0], this.restorePos[1]);=0A=
            this.setSize(this.restoreSize.width, =
this.restoreSize.height);=0A=
            delete this.restorePos;=0A=
            delete this.restoreSize;=0A=
            this.maximized =3D false;=0A=
            this.el.enableShadow(true);=0A=
=0A=
            if(this.dd){=0A=
                this.dd.unlock();=0A=
            }=0A=
            if(this.collapsible){=0A=
                this.tools.toggle.show();=0A=
            }=0A=
            this.container.removeClass('x-window-maximized-ct');=0A=
=0A=
            this.doConstrain();=0A=
            this.fireEvent('restore', this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    toggleMaximize : function(){=0A=
        this[this.maximized ? 'restore' : 'maximize']();=0A=
    },=0A=
=0A=
        fitContainer : function(){=0A=
        var vs =3D this.container.getViewSize();=0A=
        this.setSize(vs.width, vs.height);=0A=
    },=0A=
=0A=
            setZIndex : function(index){=0A=
        if(this.modal){=0A=
            this.mask.setStyle("z-index", index);=0A=
        }=0A=
        this.el.setZIndex(++index);=0A=
        index +=3D 5;=0A=
=0A=
        if(this.resizer){=0A=
            this.resizer.proxy.setStyle("z-index", ++index);=0A=
        }=0A=
=0A=
        this.lastZIndex =3D index;=0A=
    },=0A=
=0A=
    =0A=
    alignTo : function(element, position, offsets){=0A=
        var xy =3D this.el.getAlignToXY(element, position, offsets);=0A=
        this.setPagePosition(xy[0], xy[1]);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    anchorTo : function(el, alignment, offsets, monitorScroll, _pname){=0A=
        var action =3D function(){=0A=
            this.alignTo(el, alignment, offsets);=0A=
        };=0A=
        Ext.EventManager.onWindowResize(action, this);=0A=
        var tm =3D typeof monitorScroll;=0A=
        if(tm !=3D 'undefined'){=0A=
            Ext.EventManager.on(window, 'scroll', action, this,=0A=
                {buffer: tm =3D=3D 'number' ? monitorScroll : 50});=0A=
        }=0A=
        action.call(this);=0A=
        this[_pname] =3D action;=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    toFront : function(){=0A=
        if(this.manager.bringToFront(this)){=0A=
            this.focus();=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setActive : function(active){=0A=
        if(active){=0A=
            if(!this.maximized){=0A=
                this.el.enableShadow(true);=0A=
            }=0A=
            this.fireEvent('activate', this);=0A=
        }else{=0A=
            this.el.disableShadow();=0A=
            this.fireEvent('deactivate', this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    toBack : function(){=0A=
        this.manager.sendToBack(this);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    center : function(){=0A=
        var xy =3D this.el.getAlignToXY(this.container, 'c-c');=0A=
        this.setPagePosition(xy[0], xy[1]);=0A=
        return this;=0A=
    }=0A=
});=0A=
Ext.reg('window', Ext.Window);=0A=
=0A=
Ext.Window.DD =3D function(win){=0A=
    this.win =3D win;=0A=
    Ext.Window.DD.superclass.constructor.call(this, win.el.id, =
'WindowDD-'+win.id);=0A=
    this.setHandleElId(win.header.id);=0A=
    this.scroll =3D false;=0A=
};=0A=
=0A=
Ext.extend(Ext.Window.DD, Ext.dd.DD, {=0A=
    moveOnly:true,=0A=
    headerOffsets:[100, 25],=0A=
    startDrag : function(){=0A=
        var w =3D this.win;=0A=
        this.proxy =3D w.ghost();=0A=
        if(w.constrain !=3D=3D false){=0A=
            var so =3D w.el.shadowOffset;=0A=
            this.constrainTo(w.container, {right: so, left: so, bottom: =
so});=0A=
        }else if(w.constrainHeader !=3D=3D false){=0A=
            var s =3D this.proxy.getSize();=0A=
            this.constrainTo(w.container, {right: =
-(s.width-this.headerOffsets[0]), bottom: =
-(s.height-this.headerOffsets[1])});=0A=
        }=0A=
    },=0A=
    b4Drag : Ext.emptyFn,=0A=
=0A=
    onDrag : function(e){=0A=
        this.alignElWithMouse(this.proxy, e.getPageX(), e.getPageY());=0A=
    },=0A=
=0A=
    endDrag : function(e){=0A=
        this.win.unghost();=0A=
        this.win.saveState();=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.WindowGroup =3D function(){=0A=
    var list =3D {};=0A=
    var accessList =3D [];=0A=
    var front =3D null;=0A=
=0A=
        var sortWindows =3D function(d1, d2){=0A=
        return (!d1._lastAccess || d1._lastAccess < d2._lastAccess) ? -1 =
: 1;=0A=
    };=0A=
=0A=
        var orderWindows =3D function(){=0A=
        var a =3D accessList, len =3D a.length;=0A=
        if(len > 0){=0A=
            a.sort(sortWindows);=0A=
            var seed =3D a[0].manager.zseed;=0A=
            for(var i =3D 0; i < len; i++){=0A=
                var win =3D a[i];=0A=
                if(win && !win.hidden){=0A=
                    win.setZIndex(seed + (i*10));=0A=
                }=0A=
            }=0A=
        }=0A=
        activateLast();=0A=
    };=0A=
=0A=
        var setActiveWin =3D function(win){=0A=
        if(win !=3D front){=0A=
            if(front){=0A=
                front.setActive(false);=0A=
            }=0A=
            front =3D win;=0A=
            if(win){=0A=
                win.setActive(true);=0A=
            }=0A=
        }=0A=
    };=0A=
=0A=
        var activateLast =3D function(){=0A=
        for(var i =3D accessList.length-1; i >=3D0; --i) {=0A=
            if(!accessList[i].hidden){=0A=
                setActiveWin(accessList[i]);=0A=
                return;=0A=
            }=0A=
        }=0A=
                setActiveWin(null);=0A=
    };=0A=
=0A=
    return {=0A=
        =0A=
        zseed : 9000,=0A=
=0A=
                register : function(win){=0A=
            list[win.id] =3D win;=0A=
            accessList.push(win);=0A=
            win.on('hide', activateLast);=0A=
        },=0A=
=0A=
                unregister : function(win){=0A=
            delete list[win.id];=0A=
            win.un('hide', activateLast);=0A=
            accessList.remove(win);=0A=
        },=0A=
=0A=
        =0A=
        get : function(id){=0A=
            return typeof id =3D=3D "object" ? id : list[id];=0A=
        },=0A=
=0A=
        =0A=
        bringToFront : function(win){=0A=
            win =3D this.get(win);=0A=
            if(win !=3D front){=0A=
                win._lastAccess =3D new Date().getTime();=0A=
                orderWindows();=0A=
                return true;=0A=
            }=0A=
            return false;=0A=
        },=0A=
=0A=
        =0A=
        sendToBack : function(win){=0A=
            win =3D this.get(win);=0A=
            win._lastAccess =3D -(new Date().getTime());=0A=
            orderWindows();=0A=
            return win;=0A=
        },=0A=
=0A=
        =0A=
        hideAll : function(){=0A=
            for(var id in list){=0A=
                if(list[id] && typeof list[id] !=3D "function" && =
list[id].isVisible()){=0A=
                    list[id].hide();=0A=
                }=0A=
            }=0A=
        },=0A=
=0A=
        =0A=
        getActive : function(){=0A=
            return front;=0A=
        },=0A=
=0A=
        =0A=
        getBy : function(fn, scope){=0A=
            var r =3D [];=0A=
            for(var i =3D accessList.length-1; i >=3D0; --i) {=0A=
                var win =3D accessList[i];=0A=
                if(fn.call(scope||win, win) !=3D=3D false){=0A=
                    r.push(win);=0A=
                }=0A=
            }=0A=
            return r;=0A=
        },=0A=
=0A=
        =0A=
        each : function(fn, scope){=0A=
            for(var id in list){=0A=
                if(list[id] && typeof list[id] !=3D "function"){=0A=
                    if(fn.call(scope || list[id], list[id]) =3D=3D=3D =
false){=0A=
                        return;=0A=
                    }=0A=
                }=0A=
            }=0A=
        }=0A=
    };=0A=
};=0A=
=0A=
=0A=
=0A=
Ext.WindowMgr =3D new Ext.WindowGroup();=0A=

Ext.dd.PanelProxy =3D function(panel, config){
    this.panel =3D panel;
    this.id =3D this.panel.id +'-ddproxy';
    Ext.apply(this, config);
};

Ext.dd.PanelProxy.prototype =3D {
   =20
    insertProxy : true,

    =0A=
    setStatus : Ext.emptyFn,
    reset : Ext.emptyFn,
    update : Ext.emptyFn,
    stop : Ext.emptyFn,
    sync: Ext.emptyFn,

   =20
    getEl : function(){
        return this.ghost;
    },

   =20
    getGhost : function(){
        return this.ghost;
    },

   =20
    getProxy : function(){
        return this.proxy;
    },

   =20
    hide : function(){
        if(this.ghost){
            if(this.proxy){
                this.proxy.remove();
                delete this.proxy;
            }
            this.panel.el.dom.style.display =3D '';
            this.ghost.remove();
            delete this.ghost;
        }
    },

   =20
    show : function(){
        if(!this.ghost){
            this.ghost =3D this.panel.createGhost(undefined, undefined, =
Ext.getBody());
            this.ghost.setXY(this.panel.el.getXY())
            if(this.insertProxy){
                this.proxy =3D =
this.panel.el.insertSibling({cls:'x-panel-dd-spacer'});
                this.proxy.setSize(this.panel.getSize());
            }
            this.panel.el.dom.style.display =3D 'none';
        }
    },

    =0A=
    repair : function(xy, callback, scope){
        this.hide();
        if(typeof callback =3D=3D "function"){
            callback.call(scope || this);
        }
    },

   =20
    moveProxy : function(parentNode, before){
        if(this.proxy){
            parentNode.insertBefore(this.proxy.dom, before);
        }
    }
};

=0A=
Ext.Panel.DD =3D function(panel, cfg){
    this.panel =3D panel;
    this.dragData =3D {panel: panel};
    this.proxy =3D new Ext.dd.PanelProxy(panel, cfg);
    Ext.Panel.DD.superclass.constructor.call(this, panel.el, cfg);
    var h =3D panel.header;
    if(h){
        this.setHandleElId(h.id);
    }
    (h ? h : this.panel.body).setStyle('cursor', 'move');
    this.scroll =3D false;
};

Ext.extend(Ext.Panel.DD, Ext.dd.DragSource, {
    showFrame: Ext.emptyFn,
    startDrag: Ext.emptyFn,
    b4StartDrag: function(x, y) {
        this.proxy.show();
    },
    b4MouseDown: function(e) {
        var x =3D e.getPageX();
        var y =3D e.getPageY();
        this.autoOffset(x, y);
    },
    onInitDrag : function(x, y){
        this.onStartDrag(x, y);
        return true;
    },
    createFrame : Ext.emptyFn,
    getDragEl : function(e){
        return this.proxy.ghost.dom;
    },
    endDrag : function(e){
        this.proxy.hide();
        this.panel.saveState();
    },

    autoOffset : function(x, y) {
        x -=3D this.startPageX;
        y -=3D this.startPageY;
        this.setDelta(x, y);
    }
});=0A=

Ext.state.Provider =3D function(){
   =20
    this.addEvents("statechange");
    this.state =3D {};
    Ext.state.Provider.superclass.constructor.call(this);
};
Ext.extend(Ext.state.Provider, Ext.util.Observable, {
   =20
    get : function(name, defaultValue){
        return typeof this.state[name] =3D=3D "undefined" ?
            defaultValue : this.state[name];
    },
   =20
   =20
    clear : function(name){
        delete this.state[name];
        this.fireEvent("statechange", this, name, null);
    },
   =20
   =20
    set : function(name, value){
        this.state[name] =3D value;
        this.fireEvent("statechange", this, name, value);
    },
   =20
   =20
    decodeValue : function(cookie){
        var re =3D /^(a|n|d|b|s|o)\:(.*)$/;
        var matches =3D re.exec(unescape(cookie));
        if(!matches || !matches[1]) return; =0A=
        var type =3D matches[1];
        var v =3D matches[2];
        switch(type){
            case "n":
                return parseFloat(v);
            case "d":
                return new Date(Date.parse(v));
            case "b":
                return (v =3D=3D "1");
            case "a":
                var all =3D [];
                var values =3D v.split("^");
                for(var i =3D 0, len =3D values.length; i < len; i++){
                    all.push(this.decodeValue(values[i]));
                }
                return all;
           case "o":
                var all =3D {};
                var values =3D v.split("^");
                for(var i =3D 0, len =3D values.length; i < len; i++){
                    var kv =3D values[i].split("=3D");
                    all[kv[0]] =3D this.decodeValue(kv[1]);
                }
                return all;
           default:
                return v;
        }
    },
   =20
   =20
    encodeValue : function(v){
        var enc;
        if(typeof v =3D=3D "number"){
            enc =3D "n:" + v;
        }else if(typeof v =3D=3D "boolean"){
            enc =3D "b:" + (v ? "1" : "0");
        }else if(Ext.isDate(v)){
            enc =3D "d:" + v.toGMTString();
        }else if(Ext.isArray(v)){
            var flat =3D "";
            for(var i =3D 0, len =3D v.length; i < len; i++){
                flat +=3D this.encodeValue(v[i]);
                if(i !=3D len-1) flat +=3D "^";
            }
            enc =3D "a:" + flat;
        }else if(typeof v =3D=3D "object"){
            var flat =3D "";
            for(var key in v){
                if(typeof v[key] !=3D "function" && v[key] !=3D=3D =
undefined){
                    flat +=3D key + "=3D" + this.encodeValue(v[key]) + =
"^";
                }
            }
            enc =3D "o:" + flat.substring(0, flat.length-1);
        }else{
            enc =3D "s:" + v;
        }
        return escape(enc);       =20
    }
});
=0A=

Ext.state.Manager =3D function(){
    var provider =3D new Ext.state.Provider();

    return {
       =20
        setProvider : function(stateProvider){
            provider =3D stateProvider;
        },

       =20
        get : function(key, defaultValue){
            return provider.get(key, defaultValue);
        },

       =20
         set : function(key, value){
            provider.set(key, value);
        },

       =20
        clear : function(key){
            provider.clear(key);
        },

       =20
        getProvider : function(){
            return provider;
        }
    };
}();=0A=


Ext.state.CookieProvider =3D function(config){
    Ext.state.CookieProvider.superclass.constructor.call(this);
    this.path =3D "/";
    this.expires =3D new Date(new Date().getTime()+(1000*60*60*24*7)); =0A=
    this.domain =3D null;
    this.secure =3D false;
    Ext.apply(this, config);
    this.state =3D this.readCookies();
};

Ext.extend(Ext.state.CookieProvider, Ext.state.Provider, {
    =0A=
    set : function(name, value){
        if(typeof value =3D=3D "undefined" || value =3D=3D=3D null){
            this.clear(name);
            return;
        }
        this.setCookie(name, value);
        Ext.state.CookieProvider.superclass.set.call(this, name, value);
    },

    =0A=
    clear : function(name){
        this.clearCookie(name);
        Ext.state.CookieProvider.superclass.clear.call(this, name);
    },

    =0A=
    readCookies : function(){
        var cookies =3D {};
        var c =3D document.cookie + ";";
        var re =3D /\s?(.*?)=3D(.*?);/g;
    	var matches;
    	while((matches =3D re.exec(c)) !=3D null){
            var name =3D matches[1];
            var value =3D matches[2];
            if(name && name.substring(0,3) =3D=3D "ys-"){
                cookies[name.substr(3)] =3D this.decodeValue(value);
            }
        }
        return cookies;
    },

    =0A=
    setCookie : function(name, value){
        document.cookie =3D "ys-"+ name + "=3D" + =
this.encodeValue(value) +
           ((this.expires =3D=3D null) ? "" : ("; expires=3D" + =
this.expires.toGMTString())) +
           ((this.path =3D=3D null) ? "" : ("; path=3D" + this.path)) +
           ((this.domain =3D=3D null) ? "" : ("; domain=3D" + =
this.domain)) +
           ((this.secure =3D=3D true) ? "; secure" : "");
    },

    =0A=
    clearCookie : function(name){
        document.cookie =3D "ys-" + name + "=3Dnull; expires=3DThu, =
01-Jan-70 00:00:01 GMT" +
           ((this.path =3D=3D null) ? "" : ("; path=3D" + this.path)) +
           ((this.domain =3D=3D null) ? "" : ("; domain=3D" + =
this.domain)) +
           ((this.secure =3D=3D true) ? "; secure" : "");
    }
});=0A=
=0A=
Ext.DataView =3D Ext.extend(Ext.BoxComponent, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    selectedClass : "x-view-selected",=0A=
    =0A=
    emptyText : "",=0A=
=0A=
    =0A=
    deferEmptyText: true,=0A=
=0A=
        last: false,=0A=
=0A=
        initComponent : function(){=0A=
        Ext.DataView.superclass.initComponent.call(this);=0A=
        if(typeof this.tpl =3D=3D "string"){=0A=
            this.tpl =3D new Ext.XTemplate(this.tpl);=0A=
        }=0A=
=0A=
        this.addEvents(=0A=
            =0A=
            "beforeclick",=0A=
            =0A=
            "click",=0A=
            =0A=
            "containerclick",=0A=
            =0A=
            "dblclick",=0A=
            =0A=
            "contextmenu",=0A=
            =0A=
            "selectionchange",=0A=
=0A=
            =0A=
            "beforeselect"=0A=
        );=0A=
=0A=
        this.all =3D new Ext.CompositeElementLite();=0A=
        this.selected =3D new Ext.CompositeElementLite();=0A=
    },=0A=
=0A=
        onRender : function(){=0A=
        if(!this.el){=0A=
            this.el =3D document.createElement('div');=0A=
            this.el.id =3D this.id;=0A=
        }=0A=
        Ext.DataView.superclass.onRender.apply(this, arguments);=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        Ext.DataView.superclass.afterRender.call(this);=0A=
=0A=
        this.el.on({=0A=
            "click": this.onClick,=0A=
            "dblclick": this.onDblClick,=0A=
            "contextmenu": this.onContextMenu,=0A=
            scope:this=0A=
        });=0A=
=0A=
        if(this.overClass){=0A=
            this.el.on({=0A=
                "mouseover": this.onMouseOver,=0A=
                "mouseout": this.onMouseOut,=0A=
                scope:this=0A=
            });=0A=
        }=0A=
=0A=
        if(this.store){=0A=
            this.setStore(this.store, true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    refresh : function(){=0A=
        this.clearSelections(false, true);=0A=
        this.el.update("");=0A=
        var html =3D [];=0A=
        var records =3D this.store.getRange();=0A=
        if(records.length < 1){=0A=
            if(!this.deferEmptyText || this.hasSkippedEmptyText){=0A=
                this.el.update(this.emptyText);=0A=
            }=0A=
            this.hasSkippedEmptyText =3D true;=0A=
            this.all.clear();=0A=
            return;=0A=
        }=0A=
        this.tpl.overwrite(this.el, this.collectData(records, 0));=0A=
        this.all.fill(Ext.query(this.itemSelector, this.el.dom));=0A=
        this.updateIndexes(0);=0A=
    },=0A=
=0A=
    =0A=
    prepareData : function(data){=0A=
        return data;=0A=
    },=0A=
=0A=
        collectData : function(records, startIndex){=0A=
        var r =3D [];=0A=
        for(var i =3D 0, len =3D records.length; i < len; i++){=0A=
            r[r.length] =3D this.prepareData(records[i].data, =
startIndex+i, records[i]);=0A=
        }=0A=
        return r;=0A=
    },=0A=
=0A=
        bufferRender : function(records){=0A=
        var div =3D document.createElement('div');=0A=
        this.tpl.overwrite(div, this.collectData(records));=0A=
        return Ext.query(this.itemSelector, div);=0A=
    },=0A=
=0A=
        onUpdate : function(ds, record){=0A=
        var index =3D this.store.indexOf(record);=0A=
        var sel =3D this.isSelected(index);=0A=
        var original =3D this.all.elements[index];=0A=
        var node =3D this.bufferRender([record], index)[0];=0A=
=0A=
        this.all.replaceElement(index, node, true);=0A=
        if(sel){=0A=
            this.selected.replaceElement(original, node);=0A=
            this.all.item(index).addClass(this.selectedClass);=0A=
        }=0A=
        this.updateIndexes(index, index);=0A=
    },=0A=
=0A=
        onAdd : function(ds, records, index){=0A=
        if(this.all.getCount() =3D=3D 0){=0A=
            this.refresh();=0A=
            return;=0A=
        }=0A=
        var nodes =3D this.bufferRender(records, index), n, a =3D =
this.all.elements;=0A=
        if(index < this.all.getCount()){=0A=
            n =3D this.all.item(index).insertSibling(nodes, 'before', =
true);=0A=
            a.splice.apply(a, [index, 0].concat(nodes));=0A=
        }else{=0A=
            n =3D this.all.last().insertSibling(nodes, 'after', true);=0A=
            a.push.apply(a, nodes);=0A=
        }=0A=
        this.updateIndexes(index);=0A=
    },=0A=
=0A=
        onRemove : function(ds, record, index){=0A=
        this.deselect(index);=0A=
        this.all.removeElement(index, true);=0A=
        this.updateIndexes(index);=0A=
    },=0A=
=0A=
    =0A=
    refreshNode : function(index){=0A=
        this.onUpdate(this.store, this.store.getAt(index));=0A=
    },=0A=
=0A=
        updateIndexes : function(startIndex, endIndex){=0A=
        var ns =3D this.all.elements;=0A=
        startIndex =3D startIndex || 0;=0A=
        endIndex =3D endIndex || ((endIndex =3D=3D=3D 0) ? 0 : =
(ns.length - 1));=0A=
        for(var i =3D startIndex; i <=3D endIndex; i++){=0A=
            ns[i].viewIndex =3D i;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setStore : function(store, initial){=0A=
        if(!initial && this.store){=0A=
            this.store.un("beforeload", this.onBeforeLoad, this);=0A=
            this.store.un("datachanged", this.refresh, this);=0A=
            this.store.un("add", this.onAdd, this);=0A=
            this.store.un("remove", this.onRemove, this);=0A=
            this.store.un("update", this.onUpdate, this);=0A=
            this.store.un("clear", this.refresh, this);=0A=
        }=0A=
        if(store){=0A=
            store =3D Ext.StoreMgr.lookup(store);=0A=
            store.on("beforeload", this.onBeforeLoad, this);=0A=
            store.on("datachanged", this.refresh, this);=0A=
            store.on("add", this.onAdd, this);=0A=
            store.on("remove", this.onRemove, this);=0A=
            store.on("update", this.onUpdate, this);=0A=
            store.on("clear", this.refresh, this);=0A=
        }=0A=
        this.store =3D store;=0A=
        if(store){=0A=
            this.refresh();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    findItemFromChild : function(node){=0A=
        return Ext.fly(node).findParent(this.itemSelector, this.el);=0A=
    },=0A=
=0A=
        onClick : function(e){=0A=
        var item =3D e.getTarget(this.itemSelector, this.el);=0A=
        if(item){=0A=
            var index =3D this.indexOf(item);=0A=
            if(this.onItemClick(item, index, e) !=3D=3D false){=0A=
                this.fireEvent("click", this, index, item, e);=0A=
            }=0A=
        }else{=0A=
            if(this.fireEvent("containerclick", this, e) !=3D=3D false){=0A=
                this.clearSelections();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onContextMenu : function(e){=0A=
        var item =3D e.getTarget(this.itemSelector, this.el);=0A=
        if(item){=0A=
            this.fireEvent("contextmenu", this, this.indexOf(item), =
item, e);=0A=
        }=0A=
    },=0A=
=0A=
        onDblClick : function(e){=0A=
        var item =3D e.getTarget(this.itemSelector, this.el);=0A=
        if(item){=0A=
            this.fireEvent("dblclick", this, this.indexOf(item), item, =
e);=0A=
        }=0A=
    },=0A=
=0A=
        onMouseOver : function(e){=0A=
        var item =3D e.getTarget(this.itemSelector, this.el);=0A=
        if(item && item !=3D=3D this.lastItem){=0A=
            this.lastItem =3D item;=0A=
            Ext.fly(item).addClass(this.overClass);=0A=
        }=0A=
    },=0A=
=0A=
        onMouseOut : function(e){=0A=
        if(this.lastItem){=0A=
            if(!e.within(this.lastItem, true)){=0A=
                Ext.fly(this.lastItem).removeClass(this.overClass);=0A=
                delete this.lastItem;=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onItemClick : function(item, index, e){=0A=
        if(this.fireEvent("beforeclick", this, index, item, e) =3D=3D=3D =
false){=0A=
            return false;=0A=
        }=0A=
        if(this.multiSelect){=0A=
            this.doMultiSelection(item, index, e);=0A=
            e.preventDefault();=0A=
        }else if(this.singleSelect){=0A=
            this.doSingleSelection(item, index, e);=0A=
            e.preventDefault();=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
        doSingleSelection : function(item, index, e){=0A=
        if(e.ctrlKey && this.isSelected(index)){=0A=
            this.deselect(index);=0A=
        }else{=0A=
            this.select(index, false);=0A=
        }=0A=
    },=0A=
=0A=
        doMultiSelection : function(item, index, e){=0A=
        if(e.shiftKey && this.last !=3D=3D false){=0A=
            var last =3D this.last;=0A=
            this.selectRange(last, index, e.ctrlKey);=0A=
            this.last =3D last;         }else{=0A=
            if((e.ctrlKey||this.simpleSelect) && this.isSelected(index)){=0A=
                this.deselect(index);=0A=
            }else{=0A=
                this.select(index, e.ctrlKey || e.shiftKey || =
this.simpleSelect);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getSelectionCount : function(){=0A=
        return this.selected.getCount()=0A=
    },=0A=
=0A=
    =0A=
    getSelectedNodes : function(){=0A=
        return this.selected.elements;=0A=
    },=0A=
=0A=
    =0A=
    getSelectedIndexes : function(){=0A=
        var indexes =3D [], s =3D this.selected.elements;=0A=
        for(var i =3D 0, len =3D s.length; i < len; i++){=0A=
            indexes.push(s[i].viewIndex);=0A=
        }=0A=
        return indexes;=0A=
    },=0A=
=0A=
    =0A=
    getSelectedRecords : function(){=0A=
        var r =3D [], s =3D this.selected.elements;=0A=
        for(var i =3D 0, len =3D s.length; i < len; i++){=0A=
            r[r.length] =3D this.store.getAt(s[i].viewIndex);=0A=
        }=0A=
        return r;=0A=
    },=0A=
=0A=
    =0A=
    getRecords : function(nodes){=0A=
        var r =3D [], s =3D nodes;=0A=
        for(var i =3D 0, len =3D s.length; i < len; i++){=0A=
            r[r.length] =3D this.store.getAt(s[i].viewIndex);=0A=
        }=0A=
        return r;=0A=
    },=0A=
=0A=
    =0A=
    getRecord : function(node){=0A=
        return this.store.getAt(node.viewIndex);=0A=
    },=0A=
=0A=
    =0A=
    clearSelections : function(suppressEvent, skipUpdate){=0A=
        if((this.multiSelect || this.singleSelect) && =
this.selected.getCount() > 0){=0A=
            if(!skipUpdate){=0A=
                this.selected.removeClass(this.selectedClass);=0A=
            }=0A=
            this.selected.clear();=0A=
            this.last =3D false;=0A=
            if(!suppressEvent){=0A=
                this.fireEvent("selectionchange", this, =
this.selected.elements);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    isSelected : function(node){=0A=
        return this.selected.contains(this.getNode(node));=0A=
    },=0A=
=0A=
    =0A=
    deselect : function(node){=0A=
        if(this.isSelected(node)){=0A=
            var node =3D this.getNode(node);=0A=
            this.selected.removeElement(node);=0A=
            if(this.last =3D=3D node.viewIndex){=0A=
                this.last =3D false;=0A=
            }=0A=
            Ext.fly(node).removeClass(this.selectedClass);=0A=
            this.fireEvent("selectionchange", this, =
this.selected.elements);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    select : function(nodeInfo, keepExisting, suppressEvent){=0A=
        if(Ext.isArray(nodeInfo)){=0A=
            if(!keepExisting){=0A=
                this.clearSelections(true);=0A=
            }=0A=
            for(var i =3D 0, len =3D nodeInfo.length; i < len; i++){=0A=
                this.select(nodeInfo[i], true, true);=0A=
            }=0A=
	        if(!suppressEvent){=0A=
	            this.fireEvent("selectionchange", this, =
this.selected.elements);=0A=
	        }=0A=
        } else{=0A=
            var node =3D this.getNode(nodeInfo);=0A=
            if(!keepExisting){=0A=
                this.clearSelections(true);=0A=
            }=0A=
            if(node && !this.isSelected(node)){=0A=
                if(this.fireEvent("beforeselect", this, node, =
this.selected.elements) !=3D=3D false){=0A=
                    Ext.fly(node).addClass(this.selectedClass);=0A=
                    this.selected.add(node);=0A=
                    this.last =3D node.viewIndex;=0A=
                    if(!suppressEvent){=0A=
                        this.fireEvent("selectionchange", this, =
this.selected.elements);=0A=
                    }=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    selectRange : function(start, end, keepExisting){=0A=
        if(!keepExisting){=0A=
            this.clearSelections(true);=0A=
        }=0A=
        this.select(this.getNodes(start, end), true);=0A=
    },=0A=
=0A=
    =0A=
    getNode : function(nodeInfo){=0A=
        if(typeof nodeInfo =3D=3D "string"){=0A=
            return document.getElementById(nodeInfo);=0A=
        }else if(typeof nodeInfo =3D=3D "number"){=0A=
            return this.all.elements[nodeInfo];=0A=
        }=0A=
        return nodeInfo;=0A=
    },=0A=
=0A=
    =0A=
    getNodes : function(start, end){=0A=
        var ns =3D this.all.elements;=0A=
        start =3D start || 0;=0A=
        end =3D typeof end =3D=3D "undefined" ? ns.length - 1 : end;=0A=
        var nodes =3D [], i;=0A=
        if(start <=3D end){=0A=
            for(i =3D start; i <=3D end; i++){=0A=
                nodes.push(ns[i]);=0A=
            }=0A=
        } else{=0A=
            for(i =3D start; i >=3D end; i--){=0A=
                nodes.push(ns[i]);=0A=
            }=0A=
        }=0A=
        return nodes;=0A=
    },=0A=
=0A=
    =0A=
    indexOf : function(node){=0A=
        node =3D this.getNode(node);=0A=
        if(typeof node.viewIndex =3D=3D "number"){=0A=
            return node.viewIndex;=0A=
        }=0A=
        return this.all.indexOf(node);=0A=
    },=0A=
=0A=
        onBeforeLoad : function(){=0A=
        if(this.loadingText){=0A=
            this.clearSelections(false, true);=0A=
            this.el.update('<div =
class=3D"loading-indicator">'+this.loadingText+'</div>');=0A=
            this.all.clear();=0A=
        }=0A=
    },=0A=
=0A=
    onDestroy : function(){=0A=
        Ext.DataView.superclass.onDestroy.call(this);=0A=
        this.setStore(null);=0A=
    }=0A=
});=0A=
=0A=
Ext.reg('dataview', Ext.DataView);=0A=
=0A=
Ext.ColorPalette =3D function(config){=0A=
    Ext.ColorPalette.superclass.constructor.call(this, config);=0A=
    this.addEvents(=0A=
        =0A=
        'select'=0A=
    );=0A=
=0A=
    if(this.handler){=0A=
        this.on("select", this.handler, this.scope, true);=0A=
    }=0A=
};=0A=
Ext.extend(Ext.ColorPalette, Ext.Component, {=0A=
	=0A=
    =0A=
    itemCls : "x-color-palette",=0A=
    =0A=
    value : null,=0A=
    clickEvent:'click',=0A=
        ctype: "Ext.ColorPalette",=0A=
=0A=
    =0A=
    allowReselect : false,=0A=
=0A=
    =0A=
    colors : [=0A=
        "000000", "993300", "333300", "003300", "003366", "000080", =
"333399", "333333",=0A=
        "800000", "FF6600", "808000", "008000", "008080", "0000FF", =
"666699", "808080",=0A=
        "FF0000", "FF9900", "99CC00", "339966", "33CCCC", "3366FF", =
"800080", "969696",=0A=
        "FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF", =
"993366", "C0C0C0",=0A=
        "FF99CC", "FFCC99", "FFFF99", "CCFFCC", "CCFFFF", "99CCFF", =
"CC99FF", "FFFFFF"=0A=
    ],=0A=
=0A=
        onRender : function(container, position){=0A=
        var t =3D this.tpl || new Ext.XTemplate(=0A=
            '<tpl for=3D"."><a href=3D"#" class=3D"color-{.}" =
hidefocus=3D"on"><em><span style=3D"background:#{.}" =
unselectable=3D"on">&#160;</span></em></a></tpl>'=0A=
        );=0A=
        var el =3D document.createElement("div");=0A=
        el.className =3D this.itemCls;=0A=
        t.overwrite(el, this.colors);=0A=
        container.dom.insertBefore(el, position);=0A=
        this.el =3D Ext.get(el);=0A=
        this.el.on(this.clickEvent, this.handleClick,  this, {delegate: =
"a"});=0A=
        if(this.clickEvent !=3D 'click'){=0A=
            this.el.on('click', Ext.emptyFn,  this, {delegate: "a", =
preventDefault:true});=0A=
        }=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        Ext.ColorPalette.superclass.afterRender.call(this);=0A=
        if(this.value){=0A=
            var s =3D this.value;=0A=
            this.value =3D null;=0A=
            this.select(s);=0A=
        }=0A=
    },=0A=
=0A=
        handleClick : function(e, t){=0A=
        e.preventDefault();=0A=
        if(!this.disabled){=0A=
            var c =3D =
t.className.match(/(?:^|\s)color-(.{6})(?:\s|$)/)[1];=0A=
            this.select(c.toUpperCase());=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    select : function(color){=0A=
        color =3D color.replace("#", "");=0A=
        if(color !=3D this.value || this.allowReselect){=0A=
            var el =3D this.el;=0A=
            if(this.value){=0A=
                =
el.child("a.color-"+this.value).removeClass("x-color-palette-sel");=0A=
            }=0A=
            el.child("a.color-"+color).addClass("x-color-palette-sel");=0A=
            this.value =3D color;=0A=
            this.fireEvent("select", this, color);=0A=
        }=0A=
    }=0A=
=0A=
    =0A=
});=0A=
Ext.reg('colorpalette', Ext.ColorPalette);=0A=

Ext.DatePicker =3D Ext.extend(Ext.Component, {
   =20
    todayText : "Today",
   =20
    okText : "&#160;OK&#160;", =0A=
   =20
    cancelText : "Cancel",
   =20
    todayTip : "{0} (Spacebar)",
   =20
    minDate : null,
   =20
    maxDate : null,
   =20
    minText : "This date is before the minimum date",
   =20
    maxText : "This date is after the maximum date",
   =20
    format : "m/d/y",
   =20
    disabledDays : null,
   =20
    disabledDaysText : "",
   =20
    disabledDatesRE : null,
   =20
    disabledDatesText : "",
   =20
    constrainToViewport : true,
   =20
    monthNames : Date.monthNames,
   =20
    dayNames : Date.dayNames,
   =20
    nextText: 'Next Month (Control+Right)',
   =20
    prevText: 'Previous Month (Control+Left)',
   =20
    monthYearText: 'Choose a month (Control+Up/Down to move years)',
   =20
    startDay : 0,

    initComponent : function(){
        Ext.DatePicker.superclass.initComponent.call(this);

        this.value =3D this.value ?
                 this.value.clearTime() : new Date().clearTime();

        this.addEvents(
           =20
            'select'
        );

        if(this.handler){
            this.on("select", this.handler,  this.scope || this);
        }

        this.initDisabledDays();
    },

    =0A=
    initDisabledDays : function(){
        if(!this.disabledDatesRE && this.disabledDates){
            var dd =3D this.disabledDates;
            var re =3D "(?:";
            for(var i =3D 0; i < dd.length; i++){
                re +=3D dd[i];
                if(i !=3D dd.length-1) re +=3D "|";
            }
            this.disabledDatesRE =3D new RegExp(re + ")");
        }
    },

   =20
    setValue : function(value){
        var old =3D this.value;
        this.value =3D value.clearTime(true);
        if(this.el){
            this.update(this.value);
        }
    },

   =20
    getValue : function(){
        return this.value;
    },

    =0A=
    focus : function(){
        if(this.el){
            this.update(this.activeDate);
        }
    },

    =0A=
    onRender : function(container, position){
        var m =3D [
             '<table cellspacing=3D"0">',
                '<tr><td class=3D"x-date-left"><a href=3D"#" title=3D"', =
this.prevText ,'">&#160;</a></td><td class=3D"x-date-middle" =
align=3D"center"></td><td class=3D"x-date-right"><a href=3D"#" =
title=3D"', this.nextText ,'">&#160;</a></td></tr>',
                '<tr><td colspan=3D"3"><table class=3D"x-date-inner" =
cellspacing=3D"0"><thead><tr>'];
        var dn =3D this.dayNames;
        for(var i =3D 0; i < 7; i++){
            var d =3D this.startDay+i;
            if(d > 6){
                d =3D d-7;
            }
            m.push("<th><span>", dn[d].substr(0,1), "</span></th>");
        }
        m[m.length] =3D "</tr></thead><tbody><tr>";
        for(var i =3D 0; i < 42; i++) {
            if(i % 7 =3D=3D 0 && i !=3D 0){
                m[m.length] =3D "</tr><tr>";
            }
            m[m.length] =3D '<td><a href=3D"#" hidefocus=3D"on" =
class=3D"x-date-date" tabIndex=3D"1"><em><span></span></em></a></td>';
        }
        m[m.length] =3D '</tr></tbody></table></td></tr><tr><td =
colspan=3D"3" class=3D"x-date-bottom" =
align=3D"center"></td></tr></table><div class=3D"x-date-mp"></div>';

        var el =3D document.createElement("div");
        el.className =3D "x-date-picker";
        el.innerHTML =3D m.join("");

        container.dom.insertBefore(el, position);

        this.el =3D Ext.get(el);
        this.eventEl =3D Ext.get(el.firstChild);

        new Ext.util.ClickRepeater(this.el.child("td.x-date-left a"), {
            handler: this.showPrevMonth,
            scope: this,
            preventDefault:true,
            stopDefault:true
        });

        new Ext.util.ClickRepeater(this.el.child("td.x-date-right a"), {
            handler: this.showNextMonth,
            scope: this,
            preventDefault:true,
            stopDefault:true
        });

        this.eventEl.on("mousewheel", this.handleMouseWheel,  this);

        this.monthPicker =3D this.el.down('div.x-date-mp');
        this.monthPicker.enableDisplayMode('block');
       =20
        var kn =3D new Ext.KeyNav(this.eventEl, {
            "left" : function(e){
                e.ctrlKey ?
                    this.showPrevMonth() :
                    this.update(this.activeDate.add("d", -1));
            },

            "right" : function(e){
                e.ctrlKey ?
                    this.showNextMonth() :
                    this.update(this.activeDate.add("d", 1));
            },

            "up" : function(e){
                e.ctrlKey ?
                    this.showNextYear() :
                    this.update(this.activeDate.add("d", -7));
            },

            "down" : function(e){
                e.ctrlKey ?
                    this.showPrevYear() :
                    this.update(this.activeDate.add("d", 7));
            },

            "pageUp" : function(e){
                this.showNextMonth();
            },

            "pageDown" : function(e){
                this.showPrevMonth();
            },

            "enter" : function(e){
                e.stopPropagation();
                return true;
            },

            scope : this
        });

        this.eventEl.on("click", this.handleDateClick,  this, {delegate: =
"a.x-date-date"});

        this.eventEl.addKeyListener(Ext.EventObject.SPACE, =
this.selectToday,  this);

        this.el.unselectable();
       =20
        this.cells =3D this.el.select("table.x-date-inner tbody td");
        this.textNodes =3D this.el.query("table.x-date-inner tbody =
span");

        this.mbtn =3D new Ext.Button({
            text: "&#160;",
            tooltip: this.monthYearText,
            renderTo: this.el.child("td.x-date-middle", true)
        });

        this.mbtn.on('click', this.showMonthPicker, this);
        =
this.mbtn.el.child(this.mbtn.menuClassTarget).addClass("x-btn-with-menu")=
;


        var today =3D (new Date()).dateFormat(this.format);
        this.todayBtn =3D new Ext.Button({
            renderTo: this.el.child("td.x-date-bottom", true),
            text: String.format(this.todayText, today),
            tooltip: String.format(this.todayTip, today),
            handler: this.selectToday,
            scope: this
        });
       =20
        if(Ext.isIE){
            this.el.repaint();
        }
        this.update(this.value);
    },

    createMonthPicker : function(){
        if(!this.monthPicker.dom.firstChild){
            var buf =3D ['<table border=3D"0" cellspacing=3D"0">'];
            for(var i =3D 0; i < 6; i++){
                buf.push(
                    '<tr><td class=3D"x-date-mp-month"><a href=3D"#">', =
this.monthNames[i].substr(0, 3), '</a></td>',
                    '<td class=3D"x-date-mp-month x-date-mp-sep"><a =
href=3D"#">', this.monthNames[i+6].substr(0, 3), '</a></td>',
                    i =3D=3D 0 ?
                    '<td class=3D"x-date-mp-ybtn" align=3D"center"><a =
class=3D"x-date-mp-prev"></a></td><td class=3D"x-date-mp-ybtn" =
align=3D"center"><a class=3D"x-date-mp-next"></a></td></tr>' :
                    '<td class=3D"x-date-mp-year"><a =
href=3D"#"></a></td><td class=3D"x-date-mp-year"><a =
href=3D"#"></a></td></tr>'
                );
            }
            buf.push(
                '<tr class=3D"x-date-mp-btns"><td colspan=3D"4"><button =
type=3D"button" class=3D"x-date-mp-ok">',
                    this.okText,
                    '</button><button type=3D"button" =
class=3D"x-date-mp-cancel">',
                    this.cancelText,
                    '</button></td></tr>',
                '</table>'
            );
            this.monthPicker.update(buf.join(''));
            this.monthPicker.on('click', this.onMonthClick, this);
            this.monthPicker.on('dblclick', this.onMonthDblClick, this);

            this.mpMonths =3D =
this.monthPicker.select('td.x-date-mp-month');
            this.mpYears =3D =
this.monthPicker.select('td.x-date-mp-year');

            this.mpMonths.each(function(m, a, i){
                i +=3D 1;
                if((i%2) =3D=3D 0){
                    m.dom.xmonth =3D 5 + Math.round(i * .5);
                }else{
                    m.dom.xmonth =3D Math.round((i-1) * .5);
                }
            });
        }
    },

    showMonthPicker : function(){
        this.createMonthPicker();
        var size =3D this.el.getSize();
        this.monthPicker.setSize(size);
        this.monthPicker.child('table').setSize(size);

        this.mpSelMonth =3D (this.activeDate || this.value).getMonth();
        this.updateMPMonth(this.mpSelMonth);
        this.mpSelYear =3D (this.activeDate || =
this.value).getFullYear();
        this.updateMPYear(this.mpSelYear);

        this.monthPicker.slideIn('t', {duration:.2});
    },

    updateMPYear : function(y){
        this.mpyear =3D y;
        var ys =3D this.mpYears.elements;
        for(var i =3D 1; i <=3D 10; i++){
            var td =3D ys[i-1], y2;
            if((i%2) =3D=3D 0){
                y2 =3D y + Math.round(i * .5);
                td.firstChild.innerHTML =3D y2;
                td.xyear =3D y2;
            }else{
                y2 =3D y - (5-Math.round(i * .5));
                td.firstChild.innerHTML =3D y2;
                td.xyear =3D y2;
            }
            this.mpYears.item(i-1)[y2 =3D=3D this.mpSelYear ? 'addClass' =
: 'removeClass']('x-date-mp-sel');
        }
    },

    updateMPMonth : function(sm){
        this.mpMonths.each(function(m, a, i){
            m[m.dom.xmonth =3D=3D sm ? 'addClass' : =
'removeClass']('x-date-mp-sel');
        });
    },

    selectMPMonth: function(m){
       =20
    },

    onMonthClick : function(e, t){
        e.stopEvent();
        var el =3D new Ext.Element(t), pn;
        if(el.is('button.x-date-mp-cancel')){
            this.hideMonthPicker();
        }
        else if(el.is('button.x-date-mp-ok')){
            var d =3D new Date(this.mpSelYear, this.mpSelMonth, =
(this.activeDate || this.value).getDate());
            if(d.getMonth() !=3D this.mpSelMonth){
                =0A=
                d =3D new Date(this.mpSelYear, this.mpSelMonth, =
1).getLastDateOfMonth();
            }
            this.update(d);
            this.hideMonthPicker();
        }
        else if(pn =3D el.up('td.x-date-mp-month', 2)){
            this.mpMonths.removeClass('x-date-mp-sel');
            pn.addClass('x-date-mp-sel');
            this.mpSelMonth =3D pn.dom.xmonth;
        }
        else if(pn =3D el.up('td.x-date-mp-year', 2)){
            this.mpYears.removeClass('x-date-mp-sel');
            pn.addClass('x-date-mp-sel');
            this.mpSelYear =3D pn.dom.xyear;
        }
        else if(el.is('a.x-date-mp-prev')){
            this.updateMPYear(this.mpyear-10);
        }
        else if(el.is('a.x-date-mp-next')){
            this.updateMPYear(this.mpyear+10);
        }
    },

    onMonthDblClick : function(e, t){
        e.stopEvent();
        var el =3D new Ext.Element(t), pn;
        if(pn =3D el.up('td.x-date-mp-month', 2)){
            this.update(new Date(this.mpSelYear, pn.dom.xmonth, =
(this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
        else if(pn =3D el.up('td.x-date-mp-year', 2)){
            this.update(new Date(pn.dom.xyear, this.mpSelMonth, =
(this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
    },

    hideMonthPicker : function(disableAnim){
        if(this.monthPicker){
            if(disableAnim =3D=3D=3D true){
                this.monthPicker.hide();
            }else{
                this.monthPicker.slideOut('t', {duration:.2});
            }
        }
    },

    =0A=
    showPrevMonth : function(e){
        this.update(this.activeDate.add("mo", -1));
    },

    =0A=
    showNextMonth : function(e){
        this.update(this.activeDate.add("mo", 1));
    },

    =0A=
    showPrevYear : function(){
        this.update(this.activeDate.add("y", -1));
    },

    =0A=
    showNextYear : function(){
        this.update(this.activeDate.add("y", 1));
    },

    =0A=
    handleMouseWheel : function(e){
        var delta =3D e.getWheelDelta();
        if(delta > 0){
            this.showPrevMonth();
            e.stopEvent();
        } else if(delta < 0){
            this.showNextMonth();
            e.stopEvent();
        }
    },

    =0A=
    handleDateClick : function(e, t){
        e.stopEvent();
        if(t.dateValue && =
!Ext.fly(t.parentNode).hasClass("x-date-disabled")){
            this.setValue(new Date(t.dateValue));
            this.fireEvent("select", this, this.value);
        }
    },

    =0A=
    selectToday : function(){
        this.setValue(new Date().clearTime());
        this.fireEvent("select", this, this.value);
    },

    =0A=
    update : function(date){
        var vd =3D this.activeDate;
        this.activeDate =3D date;
        if(vd && this.el){
            var t =3D date.getTime();
            if(vd.getMonth() =3D=3D date.getMonth() && vd.getFullYear() =
=3D=3D date.getFullYear()){
                this.cells.removeClass("x-date-selected");
                this.cells.each(function(c){
                   if(c.dom.firstChild.dateValue =3D=3D t){
                       c.addClass("x-date-selected");
                       setTimeout(function(){
                            try{c.dom.firstChild.focus();}catch(e){}
                       }, 50);
                       return false;
                   }
                });
                return;
            }
        }
        var days =3D date.getDaysInMonth();
        var firstOfMonth =3D date.getFirstDateOfMonth();
        var startingPos =3D firstOfMonth.getDay()-this.startDay;

        if(startingPos <=3D this.startDay){
            startingPos +=3D 7;
        }

        var pm =3D date.add("mo", -1);
        var prevStart =3D pm.getDaysInMonth()-startingPos;

        var cells =3D this.cells.elements;
        var textEls =3D this.textNodes;
        days +=3D startingPos;

        =0A=
        var day =3D 86400000;
        var d =3D (new Date(pm.getFullYear(), pm.getMonth(), =
prevStart)).clearTime();
        var today =3D new Date().clearTime().getTime();
        var sel =3D date.clearTime().getTime();
        var min =3D this.minDate ? this.minDate.clearTime() : =
Number.NEGATIVE_INFINITY;
        var max =3D this.maxDate ? this.maxDate.clearTime() : =
Number.POSITIVE_INFINITY;
        var ddMatch =3D this.disabledDatesRE;
        var ddText =3D this.disabledDatesText;
        var ddays =3D this.disabledDays ? this.disabledDays.join("") : =
false;
        var ddaysText =3D this.disabledDaysText;
        var format =3D this.format;

        var setCellClass =3D function(cal, cell){
            cell.title =3D "";
            var t =3D d.getTime();
            cell.firstChild.dateValue =3D t;
            if(t =3D=3D today){
                cell.className +=3D " x-date-today";
                cell.title =3D cal.todayText;
            }
            if(t =3D=3D sel){
                cell.className +=3D " x-date-selected";
                setTimeout(function(){
                    try{cell.firstChild.focus();}catch(e){}
                }, 50);
            }
            =0A=
            if(t < min) {
                cell.className =3D " x-date-disabled";
                cell.title =3D cal.minText;
                return;
            }
            if(t > max) {
                cell.className =3D " x-date-disabled";
                cell.title =3D cal.maxText;
                return;
            }
            if(ddays){
                if(ddays.indexOf(d.getDay()) !=3D -1){
                    cell.title =3D ddaysText;
                    cell.className =3D " x-date-disabled";
                }
            }
            if(ddMatch && format){
                var fvalue =3D d.dateFormat(format);
                if(ddMatch.test(fvalue)){
                    cell.title =3D ddText.replace("%0", fvalue);
                    cell.className =3D " x-date-disabled";
                }
            }
        };

        var i =3D 0;
        for(; i < startingPos; i++) {
            textEls[i].innerHTML =3D (++prevStart);
            d.setDate(d.getDate()+1);
            cells[i].className =3D "x-date-prevday";
            setCellClass(this, cells[i]);
        }
        for(; i < days; i++){
            intDay =3D i - startingPos + 1;
            textEls[i].innerHTML =3D (intDay);
            d.setDate(d.getDate()+1);
            cells[i].className =3D "x-date-active";
            setCellClass(this, cells[i]);
        }
        var extraDays =3D 0;
        for(; i < 42; i++) {
             textEls[i].innerHTML =3D (++extraDays);
             d.setDate(d.getDate()+1);
             cells[i].className =3D "x-date-nextday";
             setCellClass(this, cells[i]);
        }

        this.mbtn.setText(this.monthNames[date.getMonth()] + " " + =
date.getFullYear());

        if(!this.internalRender){
            var main =3D this.el.dom.firstChild;
            var w =3D main.offsetWidth;
            this.el.setWidth(w + this.el.getBorderWidth("lr"));
            Ext.fly(main).setWidth(w);
            this.internalRender =3D true;
            =0A=
            =0A=
            =0A=
            if(Ext.isOpera && !this.secondPass){
                main.rows[0].cells[1].style.width =3D (w - =
(main.rows[0].cells[0].offsetWidth+main.rows[0].cells[2].offsetWidth)) + =
"px";
                this.secondPass =3D true;
                this.update.defer(10, this, [date]);
            }
        }
    },

    =0A=
    beforeDestroy : function() {
        if(this.rendered){
	        this.mbtn.destroy();
	        this.todayBtn.destroy();
        }
    }

   =20
});
Ext.reg('datepicker', Ext.DatePicker);=0A=
=0A=
Ext.TabPanel =3D Ext.extend(Ext.Panel,  {=0A=
    =0A=
    =0A=
    monitorResize : true,=0A=
    =0A=
    deferredRender : true,=0A=
    =0A=
    tabWidth: 120,=0A=
    =0A=
    minTabWidth: 30,=0A=
    =0A=
    resizeTabs:false,=0A=
    =0A=
    enableTabScroll: false,=0A=
    =0A=
    scrollIncrement : 0,=0A=
    =0A=
    scrollRepeatInterval : 400,=0A=
    =0A=
    scrollDuration : .35,=0A=
    =0A=
    animScroll : true,=0A=
    =0A=
    tabPosition: 'top',=0A=
    =0A=
    baseCls: 'x-tab-panel',=0A=
    =0A=
    autoTabs : false,=0A=
    =0A=
    autoTabSelector:'div.x-tab',=0A=
    =0A=
    activeTab : null,=0A=
    =0A=
    tabMargin : 2,=0A=
    =0A=
    plain: false,=0A=
    =0A=
    wheelIncrement : 20,=0A=
=0A=
    =0A=
    idDelimiter : '__',=0A=
=0A=
        itemCls : 'x-tab-item',=0A=
=0A=
        elements: 'body',=0A=
    headerAsText: false,=0A=
    frame: false,=0A=
    hideBorders:true,=0A=
=0A=
        initComponent : function(){=0A=
        this.frame =3D false;=0A=
        Ext.TabPanel.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            'beforetabchange',=0A=
            =0A=
            'tabchange',=0A=
            =0A=
            'contextmenu'=0A=
        );=0A=
        this.setLayout(new Ext.layout.CardLayout({=0A=
            deferredRender: this.deferredRender=0A=
        }));=0A=
        if(this.tabPosition =3D=3D 'top'){=0A=
            this.elements +=3D ',header';=0A=
            this.stripTarget =3D 'header';=0A=
        }else {=0A=
            this.elements +=3D ',footer';=0A=
            this.stripTarget =3D 'footer';=0A=
        }=0A=
        if(!this.stack){=0A=
            this.stack =3D Ext.TabPanel.AccessStack();=0A=
        }=0A=
        this.initItems();=0A=
    },=0A=
=0A=
        render : function(){=0A=
        Ext.TabPanel.superclass.render.apply(this, arguments);=0A=
        if(this.activeTab !=3D=3D undefined){=0A=
            var item =3D this.activeTab;=0A=
            delete this.activeTab;=0A=
            this.setActiveTab(item);=0A=
        }=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.TabPanel.superclass.onRender.call(this, ct, position);=0A=
=0A=
        if(this.plain){=0A=
            var pos =3D this.tabPosition =3D=3D 'top' ? 'header' : =
'footer';=0A=
            this[pos].addClass('x-tab-panel-'+pos+'-plain');=0A=
        }=0A=
=0A=
        var st =3D this[this.stripTarget];=0A=
=0A=
        this.stripWrap =3D st.createChild({cls:'x-tab-strip-wrap', cn:{=0A=
            tag:'ul', cls:'x-tab-strip x-tab-strip-'+this.tabPosition}});=0A=
        this.stripSpacer =3D st.createChild({cls:'x-tab-strip-spacer'});=0A=
        this.strip =3D new Ext.Element(this.stripWrap.dom.firstChild);=0A=
=0A=
        this.edge =3D this.strip.createChild({tag:'li', =
cls:'x-tab-edge'});=0A=
        this.strip.createChild({cls:'x-clear'});=0A=
=0A=
        this.body.addClass('x-tab-panel-body-'+this.tabPosition);=0A=
=0A=
        if(!this.itemTpl){=0A=
            var tt =3D new Ext.Template(=0A=
                 '<li class=3D"{cls}" id=3D"{id}"><a =
class=3D"x-tab-strip-close" onclick=3D"return false;"></a>',=0A=
                 '<a class=3D"x-tab-right" href=3D"#" onclick=3D"return =
false;"><em class=3D"x-tab-left">',=0A=
                 '<span class=3D"x-tab-strip-inner"><span =
class=3D"x-tab-strip-text {iconCls}">{text}</span></span>',=0A=
                 '</em></a></li>'=0A=
            );=0A=
            tt.disableFormats =3D true;=0A=
            tt.compile();=0A=
            Ext.TabPanel.prototype.itemTpl =3D tt;=0A=
        }=0A=
=0A=
        this.items.each(this.initTab, this);=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        Ext.TabPanel.superclass.afterRender.call(this);=0A=
        if(this.autoTabs){=0A=
            this.readTabs(false);=0A=
        }=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        Ext.TabPanel.superclass.initEvents.call(this);=0A=
        this.on('add', this.onAdd, this);=0A=
        this.on('remove', this.onRemove, this);=0A=
=0A=
        this.strip.on('mousedown', this.onStripMouseDown, this);=0A=
        this.strip.on('click', this.onStripClick, this);=0A=
        this.strip.on('contextmenu', this.onStripContextMenu, this);=0A=
        if(this.enableTabScroll){=0A=
            this.strip.on('mousewheel', this.onWheel, this);=0A=
        }=0A=
    },=0A=
=0A=
        findTargets : function(e){=0A=
        var item =3D null;=0A=
        var itemEl =3D e.getTarget('li', this.strip);=0A=
        if(itemEl){=0A=
            item =3D =
this.getComponent(itemEl.id.split(this.idDelimiter)[1]);=0A=
            if(item.disabled){=0A=
                return {=0A=
                    close : null,=0A=
                    item : null,=0A=
                    el : null=0A=
                };=0A=
            }=0A=
        }=0A=
        return {=0A=
            close : e.getTarget('.x-tab-strip-close', this.strip),=0A=
            item : item,=0A=
            el : itemEl=0A=
        };=0A=
    },=0A=
=0A=
        onStripMouseDown : function(e){=0A=
        e.preventDefault();=0A=
        if(e.button !=3D 0){=0A=
            return;=0A=
        }=0A=
        var t =3D this.findTargets(e);=0A=
        if(t.close){=0A=
            this.remove(t.item);=0A=
            return;=0A=
        }=0A=
        if(t.item && t.item !=3D this.activeTab){=0A=
            this.setActiveTab(t.item);=0A=
        }=0A=
    },=0A=
=0A=
        onStripClick : function(e){=0A=
        var t =3D this.findTargets(e);=0A=
        if(!t.close && t.item && t.item !=3D this.activeTab){=0A=
            this.setActiveTab(t.item);=0A=
        }=0A=
    },=0A=
=0A=
        onStripContextMenu : function(e){=0A=
        e.preventDefault();=0A=
        var t =3D this.findTargets(e);=0A=
        if(t.item){=0A=
            this.fireEvent('contextmenu', this, t.item, e);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    readTabs : function(removeExisting){=0A=
        if(removeExisting =3D=3D=3D true){=0A=
            this.items.each(function(item){=0A=
                this.remove(item);=0A=
            }, this);=0A=
        }=0A=
        var tabs =3D this.el.query(this.autoTabSelector);=0A=
        for(var i =3D 0, len =3D tabs.length; i < len; i++){=0A=
            var tab =3D tabs[i];=0A=
            var title =3D tab.getAttribute('title');=0A=
            tab.removeAttribute('title');=0A=
            this.add({=0A=
                title: title,=0A=
                el: tab=0A=
            });=0A=
        }=0A=
    },=0A=
=0A=
        initTab : function(item, index){=0A=
        var before =3D this.strip.dom.childNodes[index];=0A=
        var cls =3D item.closable ? 'x-tab-strip-closable' : '';=0A=
        if(item.disabled){=0A=
            cls +=3D ' x-item-disabled';=0A=
        }=0A=
        if(item.iconCls){=0A=
            cls +=3D ' x-tab-with-icon';=0A=
        }=0A=
        if(item.tabCls){=0A=
            cls +=3D ' ' + item.tabCls;=0A=
        }=0A=
        =0A=
        var p =3D {=0A=
            id: this.id + this.idDelimiter + item.getItemId(),=0A=
            text: item.title,=0A=
            cls: cls,=0A=
            iconCls: item.iconCls || ''=0A=
        };=0A=
        var el =3D before ?=0A=
                 this.itemTpl.insertBefore(before, p) :=0A=
                 this.itemTpl.append(this.strip, p);=0A=
=0A=
        Ext.fly(el).addClassOnOver('x-tab-strip-over');=0A=
=0A=
        if(item.tabTip){=0A=
            Ext.fly(el).child('span.x-tab-strip-text', true).qtip =3D =
item.tabTip;=0A=
        }=0A=
        item.on('disable', this.onItemDisabled, this);=0A=
        item.on('enable', this.onItemEnabled, this);=0A=
        item.on('titlechange', this.onItemTitleChanged, this);=0A=
        item.on('beforeshow', this.onBeforeShowItem, this);=0A=
    },=0A=
=0A=
        onAdd : function(tp, item, index){=0A=
        this.initTab(item, index);=0A=
        if(this.items.getCount() =3D=3D 1){=0A=
            this.syncSize();=0A=
        }=0A=
        this.delegateUpdates();=0A=
    },=0A=
=0A=
        onBeforeAdd : function(item){=0A=
        var existing =3D item.events ? =
(this.items.containsKey(item.getItemId()) ? item : null) : =
this.items.get(item);=0A=
        if(existing){=0A=
            this.setActiveTab(item);=0A=
            return false;=0A=
        }=0A=
        Ext.TabPanel.superclass.onBeforeAdd.apply(this, arguments);=0A=
        var es =3D item.elements;=0A=
        item.elements =3D es ? es.replace(',header', '') : es;=0A=
        item.border =3D (item.border =3D=3D=3D true);=0A=
    },=0A=
=0A=
        onRemove : function(tp, item){=0A=
        Ext.removeNode(this.getTabEl(item));=0A=
        this.stack.remove(item);=0A=
        item.un('disable', this.onItemDisabled, this);=0A=
        item.un('enable', this.onItemEnabled, this);=0A=
        item.un('titlechange', this.onItemTitleChanged, this);=0A=
        item.un('beforeshow', this.onBeforeShowItem, this);=0A=
        if(item =3D=3D this.activeTab){=0A=
            var next =3D this.stack.next();=0A=
            if(next){=0A=
                this.setActiveTab(next);=0A=
            }else{=0A=
                this.setActiveTab(0);=0A=
            }=0A=
        }=0A=
        this.delegateUpdates();=0A=
    },=0A=
=0A=
        onBeforeShowItem : function(item){=0A=
        if(item !=3D this.activeTab){=0A=
            this.setActiveTab(item);=0A=
            return false;=0A=
        }=0A=
    },=0A=
=0A=
        onItemDisabled : function(item){=0A=
        var el =3D this.getTabEl(item);=0A=
        if(el){=0A=
            Ext.fly(el).addClass('x-item-disabled');=0A=
        }=0A=
        this.stack.remove(item);=0A=
    },=0A=
=0A=
        onItemEnabled : function(item){=0A=
        var el =3D this.getTabEl(item);=0A=
        if(el){=0A=
            Ext.fly(el).removeClass('x-item-disabled');=0A=
        }=0A=
    },=0A=
=0A=
        onItemTitleChanged : function(item){=0A=
        var el =3D this.getTabEl(item);=0A=
        if(el){=0A=
            Ext.fly(el).child('span.x-tab-strip-text', true).innerHTML =
=3D item.title;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getTabEl : function(item){=0A=
        var itemId =3D (typeof item =3D=3D=3D =
'number')?this.items.items[item].getItemId() : item.getItemId();=0A=
        return document.getElementById(this.id+this.idDelimiter+itemId);=0A=
    },=0A=
=0A=
        onResize : function(){=0A=
        Ext.TabPanel.superclass.onResize.apply(this, arguments);=0A=
        this.delegateUpdates();=0A=
    },=0A=
=0A=
    =0A=
    beginUpdate : function(){=0A=
        this.suspendUpdates =3D true;=0A=
    },=0A=
=0A=
    =0A=
    endUpdate : function(){=0A=
        this.suspendUpdates =3D false;=0A=
        this.delegateUpdates();=0A=
    },=0A=
=0A=
    =0A=
    hideTabStripItem : function(item){=0A=
        item =3D this.getComponent(item);=0A=
        var el =3D this.getTabEl(item);=0A=
        if(el){=0A=
            el.style.display =3D 'none';=0A=
            this.delegateUpdates();=0A=
        }=0A=
        this.stack.remove(item);=0A=
    },=0A=
=0A=
    =0A=
    unhideTabStripItem : function(item){=0A=
        item =3D this.getComponent(item);=0A=
        var el =3D this.getTabEl(item);=0A=
        if(el){=0A=
            el.style.display =3D '';=0A=
            this.delegateUpdates();=0A=
        }=0A=
    },=0A=
=0A=
        delegateUpdates : function(){=0A=
        if(this.suspendUpdates){=0A=
            return;=0A=
        }=0A=
        if(this.resizeTabs && this.rendered){=0A=
            this.autoSizeTabs();=0A=
        }=0A=
        if(this.enableTabScroll && this.rendered){=0A=
            this.autoScrollTabs();=0A=
        }=0A=
    },=0A=
=0A=
        autoSizeTabs : function(){=0A=
        var count =3D this.items.length;=0A=
        var ce =3D this.tabPosition !=3D 'bottom' ? 'header' : 'footer';=0A=
        var ow =3D this[ce].dom.offsetWidth;=0A=
        var aw =3D this[ce].dom.clientWidth;=0A=
=0A=
        if(!this.resizeTabs || count < 1 || !aw){             return;=0A=
        }=0A=
=0A=
        var each =3D Math.max(Math.min(Math.floor((aw-4) / count) - =
this.tabMargin, this.tabWidth), this.minTabWidth);         =
this.lastTabWidth =3D each;=0A=
        var lis =3D this.stripWrap.dom.getElementsByTagName('li');=0A=
        for(var i =3D 0, len =3D lis.length-1; i < len; i++) {           =
  var li =3D lis[i];=0A=
            var inner =3D li.childNodes[1].firstChild.firstChild;=0A=
            var tw =3D li.offsetWidth;=0A=
            var iw =3D inner.offsetWidth;=0A=
            inner.style.width =3D (each - (tw-iw)) + 'px';=0A=
        }=0A=
    },=0A=
=0A=
        adjustBodyWidth : function(w){=0A=
        if(this.header){=0A=
            this.header.setWidth(w);=0A=
        }=0A=
        if(this.footer){=0A=
            this.footer.setWidth(w);=0A=
        }=0A=
        return w;=0A=
    },=0A=
=0A=
    =0A=
    setActiveTab : function(item){=0A=
        item =3D this.getComponent(item);=0A=
        if(!item || this.fireEvent('beforetabchange', this, item, =
this.activeTab) =3D=3D=3D false){=0A=
            return;=0A=
        }=0A=
        if(!this.rendered){=0A=
            this.activeTab =3D item;=0A=
            return;=0A=
        }=0A=
        if(this.activeTab !=3D item){=0A=
            if(this.activeTab){=0A=
                var oldEl =3D this.getTabEl(this.activeTab);=0A=
                if(oldEl){=0A=
                    Ext.fly(oldEl).removeClass('x-tab-strip-active');=0A=
                }=0A=
                this.activeTab.fireEvent('deactivate', this.activeTab);=0A=
            }=0A=
            var el =3D this.getTabEl(item);=0A=
            Ext.fly(el).addClass('x-tab-strip-active');=0A=
            this.activeTab =3D item;=0A=
            this.stack.add(item);=0A=
=0A=
            this.layout.setActiveItem(item);=0A=
            if(this.layoutOnTabChange && item.doLayout){=0A=
                item.doLayout();=0A=
            }=0A=
            if(this.scrolling){=0A=
                this.scrollToTab(item, this.animScroll);=0A=
            }=0A=
=0A=
            item.fireEvent('activate', item);=0A=
            this.fireEvent('tabchange', this, item);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getActiveTab : function(){=0A=
        return this.activeTab || null;=0A=
    },=0A=
=0A=
    =0A=
    getItem : function(item){=0A=
        return this.getComponent(item);=0A=
    },=0A=
=0A=
        autoScrollTabs : function(){=0A=
        var count =3D this.items.length;=0A=
        var ow =3D this.header.dom.offsetWidth;=0A=
        var tw =3D this.header.dom.clientWidth;=0A=
=0A=
        var wrap =3D this.stripWrap;=0A=
        var wd =3D wrap.dom;=0A=
        var cw =3D wd.offsetWidth;=0A=
        var pos =3D this.getScrollPos();=0A=
        var l =3D this.edge.getOffsetsTo(this.stripWrap)[0] + pos;=0A=
=0A=
        if(!this.enableTabScroll || count < 1 || cw < 20){             =
return;=0A=
        }=0A=
        if(l <=3D tw){=0A=
            wd.scrollLeft =3D 0;=0A=
            wrap.setWidth(tw);=0A=
            if(this.scrolling){=0A=
                this.scrolling =3D false;=0A=
                this.header.removeClass('x-tab-scrolling');=0A=
                this.scrollLeft.hide();=0A=
                this.scrollRight.hide();=0A=
                if(Ext.isAir){=0A=
                    wd.style.marginLeft =3D '';=0A=
                    wd.style.marginRight =3D '';=0A=
                }=0A=
            }=0A=
        }else{=0A=
            if(!this.scrolling){=0A=
                this.header.addClass('x-tab-scrolling');=0A=
                if(Ext.isAir){=0A=
                    wd.style.marginLeft =3D '18px';=0A=
                    wd.style.marginRight =3D '18px';=0A=
                }=0A=
            }=0A=
            tw -=3D wrap.getMargins('lr');=0A=
            wrap.setWidth(tw > 20 ? tw : 20);=0A=
            if(!this.scrolling){=0A=
                if(!this.scrollLeft){=0A=
                    this.createScrollers();=0A=
                }else{=0A=
                    this.scrollLeft.show();=0A=
                    this.scrollRight.show();=0A=
                }=0A=
            }=0A=
            this.scrolling =3D true;=0A=
            if(pos > (l-tw)){                 wd.scrollLeft =3D l-tw;=0A=
            }else{                 this.scrollToTab(this.activeTab, =
false);=0A=
            }=0A=
            this.updateScrollButtons();=0A=
        }=0A=
    },=0A=
=0A=
        createScrollers : function(){=0A=
        var h =3D this.stripWrap.dom.offsetHeight;=0A=
=0A=
                var sl =3D this.header.insertFirst({=0A=
            cls:'x-tab-scroller-left'=0A=
        });=0A=
        sl.setHeight(h);=0A=
        sl.addClassOnOver('x-tab-scroller-left-over');=0A=
        this.leftRepeater =3D new Ext.util.ClickRepeater(sl, {=0A=
            interval : this.scrollRepeatInterval,=0A=
            handler: this.onScrollLeft,=0A=
            scope: this=0A=
        });=0A=
        this.scrollLeft =3D sl;=0A=
=0A=
                var sr =3D this.header.insertFirst({=0A=
            cls:'x-tab-scroller-right'=0A=
        });=0A=
        sr.setHeight(h);=0A=
        sr.addClassOnOver('x-tab-scroller-right-over');=0A=
        this.rightRepeater =3D new Ext.util.ClickRepeater(sr, {=0A=
            interval : this.scrollRepeatInterval,=0A=
            handler: this.onScrollRight,=0A=
            scope: this=0A=
        });=0A=
        this.scrollRight =3D sr;=0A=
    },=0A=
=0A=
        getScrollWidth : function(){=0A=
        return this.edge.getOffsetsTo(this.stripWrap)[0] + =
this.getScrollPos();=0A=
    },=0A=
=0A=
        getScrollPos : function(){=0A=
        return parseInt(this.stripWrap.dom.scrollLeft, 10) || 0;=0A=
    },=0A=
=0A=
        getScrollArea : function(){=0A=
        return parseInt(this.stripWrap.dom.clientWidth, 10) || 0;=0A=
    },=0A=
=0A=
        getScrollAnim : function(){=0A=
        return {duration:this.scrollDuration, callback: =
this.updateScrollButtons, scope: this};=0A=
    },=0A=
=0A=
        getScrollIncrement : function(){=0A=
        return this.scrollIncrement || (this.resizeTabs ? =
this.lastTabWidth+2 : 100);=0A=
    },=0A=
=0A=
    =0A=
=0A=
    scrollToTab : function(item, animate){=0A=
        if(!item){ return; }=0A=
        var el =3D this.getTabEl(item);=0A=
        var pos =3D this.getScrollPos(), area =3D this.getScrollArea();=0A=
        var left =3D Ext.fly(el).getOffsetsTo(this.stripWrap)[0] + pos;=0A=
        var right =3D left + el.offsetWidth;=0A=
        if(left < pos){=0A=
            this.scrollTo(left, animate);=0A=
        }else if(right > (pos + area)){=0A=
            this.scrollTo(right - area, animate);=0A=
        }=0A=
    },=0A=
=0A=
        scrollTo : function(pos, animate){=0A=
        this.stripWrap.scrollTo('left', pos, animate ? =
this.getScrollAnim() : false);=0A=
        if(!animate){=0A=
            this.updateScrollButtons();=0A=
        }=0A=
    },=0A=
=0A=
    onWheel : function(e){=0A=
        var d =3D e.getWheelDelta()*this.wheelIncrement*-1;=0A=
        e.stopEvent();=0A=
=0A=
        var pos =3D this.getScrollPos();=0A=
        var newpos =3D pos + d;=0A=
        var sw =3D this.getScrollWidth()-this.getScrollArea();=0A=
=0A=
        var s =3D Math.max(0, Math.min(sw, newpos));=0A=
        if(s !=3D pos){=0A=
            this.scrollTo(s, false);=0A=
        }=0A=
    },=0A=
=0A=
        onScrollRight : function(){=0A=
        var sw =3D this.getScrollWidth()-this.getScrollArea();=0A=
        var pos =3D this.getScrollPos();=0A=
        var s =3D Math.min(sw, pos + this.getScrollIncrement());=0A=
        if(s !=3D pos){=0A=
            this.scrollTo(s, this.animScroll);=0A=
        }=0A=
    },=0A=
=0A=
        onScrollLeft : function(){=0A=
        var pos =3D this.getScrollPos();=0A=
        var s =3D Math.max(0, pos - this.getScrollIncrement());=0A=
        if(s !=3D pos){=0A=
            this.scrollTo(s, this.animScroll);=0A=
        }=0A=
    },=0A=
=0A=
        updateScrollButtons : function(){=0A=
        var pos =3D this.getScrollPos();=0A=
        this.scrollLeft[pos =3D=3D 0 ? 'addClass' : =
'removeClass']('x-tab-scroller-left-disabled');=0A=
        this.scrollRight[pos >=3D =
(this.getScrollWidth()-this.getScrollArea()) ? 'addClass' : =
'removeClass']('x-tab-scroller-right-disabled');=0A=
    }=0A=
=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
});=0A=
Ext.reg('tabpanel', Ext.TabPanel);=0A=
=0A=
=0A=
Ext.TabPanel.prototype.activate =3D Ext.TabPanel.prototype.setActiveTab;=0A=
=0A=
Ext.TabPanel.AccessStack =3D function(){=0A=
    var items =3D [];=0A=
    return {=0A=
        add : function(item){=0A=
            items.push(item);=0A=
            if(items.length > 10){=0A=
                items.shift();=0A=
            }=0A=
        },=0A=
=0A=
        remove : function(item){=0A=
            var s =3D [];=0A=
            for(var i =3D 0, len =3D items.length; i < len; i++) {=0A=
                if(items[i] !=3D item){=0A=
                    s.push(items[i]);=0A=
                }=0A=
            }=0A=
            items =3D s;=0A=
        },=0A=
=0A=
        next : function(){=0A=
            return items.pop();=0A=
        }=0A=
    };=0A=
};=0A=
=0A=
=0A=
=0A=
=0A=
Ext.Button =3D Ext.extend(Ext.Component, {=0A=
    =0A=
    hidden : false,=0A=
    =0A=
    disabled : false,=0A=
    =0A=
    pressed : false,=0A=
    =0A=
=0A=
    =0A=
=0A=
    =0A=
=0A=
    =0A=
    enableToggle: false,=0A=
    =0A=
    =0A=
    =0A=
    menuAlign : "tl-bl?",=0A=
=0A=
    =0A=
    =0A=
    type : 'button',=0A=
=0A=
        menuClassTarget: 'tr',=0A=
=0A=
    =0A=
    clickEvent : 'click',=0A=
=0A=
    =0A=
    handleMouseEvents : true,=0A=
=0A=
    =0A=
    tooltipType : 'qtip',=0A=
=0A=
    buttonSelector : "button:first",=0A=
=0A=
    =0A=
    =0A=
=0A=
    initComponent : function(){=0A=
        Ext.Button.superclass.initComponent.call(this);=0A=
=0A=
        this.addEvents(=0A=
            =0A=
            "click",=0A=
            =0A=
            "toggle",=0A=
            =0A=
            'mouseover',=0A=
            =0A=
            'mouseout',=0A=
            =0A=
            'menushow',=0A=
            =0A=
            'menuhide',=0A=
            =0A=
            'menutriggerover',=0A=
            =0A=
            'menutriggerout'=0A=
        );=0A=
        if(this.menu){=0A=
            this.menu =3D Ext.menu.MenuMgr.get(this.menu);=0A=
        }=0A=
        if(typeof this.toggleGroup =3D=3D=3D 'string'){=0A=
            this.enableToggle =3D true;=0A=
        }=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        if(!this.template){=0A=
            if(!Ext.Button.buttonTemplate){=0A=
                                Ext.Button.buttonTemplate =3D new =
Ext.Template(=0A=
                    '<table border=3D"0" cellpadding=3D"0" =
cellspacing=3D"0" class=3D"x-btn-wrap"><tbody><tr>',=0A=
                    '<td class=3D"x-btn-left"><i>&#160;</i></td><td =
class=3D"x-btn-center"><em unselectable=3D"on"><button =
class=3D"x-btn-text" type=3D"{1}">{0}</button></em></td><td =
class=3D"x-btn-right"><i>&#160;</i></td>',=0A=
                    "</tr></tbody></table>");=0A=
            }=0A=
            this.template =3D Ext.Button.buttonTemplate;=0A=
        }=0A=
        var btn, targs =3D [this.text || '&#160;', this.type];=0A=
=0A=
        if(position){=0A=
            btn =3D this.template.insertBefore(position, targs, true);=0A=
        }else{=0A=
            btn =3D this.template.append(ct, targs, true);=0A=
        }=0A=
        var btnEl =3D btn.child(this.buttonSelector);=0A=
        btnEl.on('focus', this.onFocus, this);=0A=
        btnEl.on('blur', this.onBlur, this);=0A=
=0A=
        this.initButtonEl(btn, btnEl);=0A=
=0A=
        if(this.menu){=0A=
            =
this.el.child(this.menuClassTarget).addClass("x-btn-with-menu");=0A=
        }=0A=
        Ext.ButtonToggleMgr.register(this);=0A=
    },=0A=
=0A=
        initButtonEl : function(btn, btnEl){=0A=
=0A=
        this.el =3D btn;=0A=
        btn.addClass("x-btn");=0A=
=0A=
        if(this.icon){=0A=
            btnEl.setStyle('background-image', 'url(' +this.icon +')');=0A=
        }=0A=
        if(this.iconCls){=0A=
            btnEl.addClass(this.iconCls);=0A=
            if(!this.cls){=0A=
                btn.addClass(this.text ? 'x-btn-text-icon' : =
'x-btn-icon');=0A=
            }=0A=
        }=0A=
        if(this.tabIndex !=3D=3D undefined){=0A=
            btnEl.dom.tabIndex =3D this.tabIndex;=0A=
        }=0A=
        if(this.tooltip){=0A=
            if(typeof this.tooltip =3D=3D 'object'){=0A=
                Ext.QuickTips.register(Ext.apply({=0A=
                      target: btnEl.id=0A=
                }, this.tooltip));=0A=
            } else {=0A=
                btnEl.dom[this.tooltipType] =3D this.tooltip;=0A=
            }=0A=
        }=0A=
=0A=
        if(this.pressed){=0A=
            this.el.addClass("x-btn-pressed");=0A=
        }=0A=
=0A=
        if(this.handleMouseEvents){=0A=
            btn.on("mouseover", this.onMouseOver, this);=0A=
                                    btn.on("mousedown", =
this.onMouseDown, this);=0A=
        }=0A=
=0A=
        if(this.menu){=0A=
            this.menu.on("show", this.onMenuShow, this);=0A=
            this.menu.on("hide", this.onMenuHide, this);=0A=
        }=0A=
=0A=
        if(this.id){=0A=
            this.el.dom.id =3D this.el.id =3D this.id;=0A=
        }=0A=
=0A=
        if(this.repeat){=0A=
            var repeater =3D new Ext.util.ClickRepeater(btn,=0A=
                typeof this.repeat =3D=3D "object" ? this.repeat : {}=0A=
            );=0A=
            repeater.on("click", this.onClick,  this);=0A=
        }=0A=
=0A=
        btn.on(this.clickEvent, this.onClick, this);=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        Ext.Button.superclass.afterRender.call(this);=0A=
        if(Ext.isIE6){=0A=
            this.autoWidth.defer(1, this);=0A=
        }else{=0A=
            this.autoWidth();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setIconClass : function(cls){=0A=
        if(this.el){=0A=
            =
this.el.child(this.buttonSelector).replaceClass(this.iconCls, cls);=0A=
        }=0A=
        this.iconCls =3D cls;=0A=
    },=0A=
=0A=
        beforeDestroy: function(){=0A=
    	if(this.rendered){=0A=
	        var btn =3D this.el.child(this.buttonSelector);=0A=
	        if(btn){=0A=
	            btn.removeAllListeners();=0A=
	        }=0A=
	    }=0A=
        if(this.menu){=0A=
            Ext.destroy(this.menu);=0A=
        }=0A=
    },=0A=
=0A=
        onDestroy : function(){=0A=
        if(this.rendered){=0A=
            Ext.ButtonToggleMgr.unregister(this);=0A=
        }=0A=
    },=0A=
=0A=
        autoWidth : function(){=0A=
        if(this.el){=0A=
            this.el.setWidth("auto");=0A=
            if(Ext.isIE7 && Ext.isStrict){=0A=
                var ib =3D this.el.child(this.buttonSelector);=0A=
                if(ib && ib.getWidth() > 20){=0A=
                    ib.clip();=0A=
                    ib.setWidth(Ext.util.TextMetrics.measure(ib, =
this.text).width+ib.getFrameWidth('lr'));=0A=
                }=0A=
            }=0A=
            if(this.minWidth){=0A=
                if(this.el.getWidth() < this.minWidth){=0A=
                    this.el.setWidth(this.minWidth);=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setHandler : function(handler, scope){=0A=
        this.handler =3D handler;=0A=
        this.scope =3D scope;=0A=
    },=0A=
=0A=
    =0A=
    setText : function(text){=0A=
        this.text =3D text;=0A=
        if(this.el){=0A=
            this.el.child("td.x-btn-center " + =
this.buttonSelector).update(text);=0A=
        }=0A=
        this.autoWidth();=0A=
    },=0A=
=0A=
    =0A=
    getText : function(){=0A=
        return this.text;=0A=
    },=0A=
=0A=
    =0A=
    toggle : function(state){=0A=
        state =3D state =3D=3D=3D undefined ? !this.pressed : state;=0A=
        if(state !=3D this.pressed){=0A=
            if(state){=0A=
                this.el.addClass("x-btn-pressed");=0A=
                this.pressed =3D true;=0A=
                this.fireEvent("toggle", this, true);=0A=
            }else{=0A=
                this.el.removeClass("x-btn-pressed");=0A=
                this.pressed =3D false;=0A=
                this.fireEvent("toggle", this, false);=0A=
            }=0A=
            if(this.toggleHandler){=0A=
                this.toggleHandler.call(this.scope || this, this, state);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    focus : function(){=0A=
        this.el.child(this.buttonSelector).focus();=0A=
    },=0A=
=0A=
        onDisable : function(){=0A=
        if(this.el){=0A=
            if(!Ext.isIE6 || !this.text){=0A=
                this.el.addClass(this.disabledClass);=0A=
            }=0A=
            this.el.dom.disabled =3D true;=0A=
        }=0A=
        this.disabled =3D true;=0A=
    },=0A=
=0A=
        onEnable : function(){=0A=
        if(this.el){=0A=
            if(!Ext.isIE6 || !this.text){=0A=
                this.el.removeClass(this.disabledClass);=0A=
            }=0A=
            this.el.dom.disabled =3D false;=0A=
        }=0A=
        this.disabled =3D false;=0A=
    },=0A=
=0A=
    =0A=
    showMenu : function(){=0A=
        if(this.menu){=0A=
            this.menu.show(this.el, this.menuAlign);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    hideMenu : function(){=0A=
        if(this.menu){=0A=
            this.menu.hide();=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    hasVisibleMenu : function(){=0A=
        return this.menu && this.menu.isVisible();=0A=
    },=0A=
=0A=
        onClick : function(e){=0A=
        if(e){=0A=
            e.preventDefault();=0A=
        }=0A=
        if(e.button !=3D 0){=0A=
            return;=0A=
        }=0A=
        if(!this.disabled){=0A=
            if(this.enableToggle && (this.allowDepress !=3D=3D false || =
!this.pressed)){=0A=
                this.toggle();=0A=
            }=0A=
            if(this.menu && !this.menu.isVisible() && =
!this.ignoreNextClick){=0A=
                this.showMenu();=0A=
            }=0A=
            this.fireEvent("click", this, e);=0A=
            if(this.handler){=0A=
                                this.handler.call(this.scope || this, =
this, e);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        isMenuTriggerOver : function(e, internal){=0A=
        return this.menu && !internal;=0A=
    },=0A=
=0A=
        isMenuTriggerOut : function(e, internal){=0A=
        return this.menu && !internal;=0A=
    },=0A=
=0A=
        onMouseOver : function(e){=0A=
        if(!this.disabled){=0A=
            var internal =3D e.within(this.el,  true);=0A=
            if(!internal){=0A=
                this.el.addClass("x-btn-over");=0A=
                Ext.getDoc().on('mouseover', this.monitorMouseOver, =
this);=0A=
                this.fireEvent('mouseover', this, e);=0A=
            }=0A=
            if(this.isMenuTriggerOver(e, internal)){=0A=
                this.fireEvent('menutriggerover', this, this.menu, e);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        monitorMouseOver : function(e){=0A=
        if(e.target !=3D this.el.dom && !e.within(this.el)){=0A=
            Ext.getDoc().un('mouseover', this.monitorMouseOver, this);=0A=
            this.onMouseOut(e);=0A=
        }=0A=
    },=0A=
=0A=
        onMouseOut : function(e){=0A=
        var internal =3D e.within(this.el) && e.target !=3D this.el.dom;=0A=
        this.el.removeClass("x-btn-over");=0A=
        this.fireEvent('mouseout', this, e);=0A=
        if(this.isMenuTriggerOut(e, internal)){=0A=
            this.fireEvent('menutriggerout', this, this.menu, e);=0A=
        }=0A=
    },=0A=
        onFocus : function(e){=0A=
        if(!this.disabled){=0A=
            this.el.addClass("x-btn-focus");=0A=
        }=0A=
    },=0A=
        onBlur : function(e){=0A=
        this.el.removeClass("x-btn-focus");=0A=
    },=0A=
=0A=
        getClickEl : function(e, isUp){=0A=
       return this.el;=0A=
    },=0A=
=0A=
        onMouseDown : function(e){=0A=
        if(!this.disabled && e.button =3D=3D 0){=0A=
            this.getClickEl(e).addClass("x-btn-click");=0A=
            Ext.getDoc().on('mouseup', this.onMouseUp, this);=0A=
        }=0A=
    },=0A=
        onMouseUp : function(e){=0A=
        if(e.button =3D=3D 0){=0A=
            this.getClickEl(e, true).removeClass("x-btn-click");=0A=
            Ext.getDoc().un('mouseup', this.onMouseUp, this);=0A=
        }=0A=
    },=0A=
        onMenuShow : function(e){=0A=
        this.ignoreNextClick =3D 0;=0A=
        this.el.addClass("x-btn-menu-active");=0A=
        this.fireEvent('menushow', this, this.menu);=0A=
    },=0A=
        onMenuHide : function(e){=0A=
        this.el.removeClass("x-btn-menu-active");=0A=
        this.ignoreNextClick =3D this.restoreClick.defer(250, this);=0A=
        this.fireEvent('menuhide', this, this.menu);=0A=
    },=0A=
=0A=
        restoreClick : function(){=0A=
        this.ignoreNextClick =3D 0;=0A=
    }=0A=
=0A=
=0A=
=0A=
    =0A=
});=0A=
Ext.reg('button', Ext.Button);=0A=
=0A=
Ext.ButtonToggleMgr =3D function(){=0A=
   var groups =3D {};=0A=
=0A=
   function toggleGroup(btn, state){=0A=
       if(state){=0A=
           var g =3D groups[btn.toggleGroup];=0A=
           for(var i =3D 0, l =3D g.length; i < l; i++){=0A=
               if(g[i] !=3D btn){=0A=
                   g[i].toggle(false);=0A=
               }=0A=
           }=0A=
       }=0A=
   }=0A=
=0A=
   return {=0A=
       register : function(btn){=0A=
           if(!btn.toggleGroup){=0A=
               return;=0A=
           }=0A=
           var g =3D groups[btn.toggleGroup];=0A=
           if(!g){=0A=
               g =3D groups[btn.toggleGroup] =3D [];=0A=
           }=0A=
           g.push(btn);=0A=
           btn.on("toggle", toggleGroup);=0A=
       },=0A=
=0A=
       unregister : function(btn){=0A=
           if(!btn.toggleGroup){=0A=
               return;=0A=
           }=0A=
           var g =3D groups[btn.toggleGroup];=0A=
           if(g){=0A=
               g.remove(btn);=0A=
               btn.un("toggle", toggleGroup);=0A=
           }=0A=
       }=0A=
   };=0A=
}();=0A=

Ext.SplitButton =3D Ext.extend(Ext.Button, {
	=0A=
    arrowSelector : 'button:last',

    =0A=
    initComponent : function(){
        Ext.SplitButton.superclass.initComponent.call(this);
       =20
        this.addEvents("arrowclick");
    },

    =0A=
    onRender : function(ct, position){
        =0A=
        var tpl =3D new Ext.Template(
            '<table cellspacing=3D"0" class=3D"x-btn-menu-wrap =
x-btn"><tr><td>',
            '<table cellspacing=3D"0" class=3D"x-btn-wrap =
x-btn-menu-text-wrap"><tbody>',
            '<tr><td class=3D"x-btn-left"><i>&#160;</i></td><td =
class=3D"x-btn-center"><button class=3D"x-btn-text" =
type=3D"{1}">{0}</button></td></tr>',
            "</tbody></table></td><td>",
            '<table cellspacing=3D"0" class=3D"x-btn-wrap =
x-btn-menu-arrow-wrap"><tbody>',
            '<tr><td class=3D"x-btn-center"><button =
class=3D"x-btn-menu-arrow-el" type=3D"button">&#160;</button></td><td =
class=3D"x-btn-right"><i>&#160;</i></td></tr>',
            "</tbody></table></td></tr></table>"
        );
        var btn, targs =3D [this.text || '&#160;', this.type];
        if(position){
            btn =3D tpl.insertBefore(position, targs, true);
        }else{
            btn =3D tpl.append(ct, targs, true);
        }
        var btnEl =3D btn.child(this.buttonSelector);

        this.initButtonEl(btn, btnEl);
        this.arrowBtnTable =3D btn.child("table:last");
        if(this.arrowTooltip){
            btn.child(this.arrowSelector).dom[this.tooltipType] =3D =
this.arrowTooltip;
        }
    },

    =0A=
    autoWidth : function(){
        if(this.el){
            var tbl =3D this.el.child("table:first");
            var tbl2 =3D this.el.child("table:last");
            this.el.setWidth("auto");
            tbl.setWidth("auto");
            if(Ext.isIE7 && Ext.isStrict){
                var ib =3D this.el.child(this.buttonSelector);
                if(ib && ib.getWidth() > 20){
                    ib.clip();
                    ib.setWidth(Ext.util.TextMetrics.measure(ib, =
this.text).width+ib.getFrameWidth('lr'));
                }
            }
            if(this.minWidth){
                if((tbl.getWidth()+tbl2.getWidth()) < this.minWidth){
                    tbl.setWidth(this.minWidth-tbl2.getWidth());
                }
            }
            this.el.setWidth(tbl.getWidth()+tbl2.getWidth());
        }=20
    },

   =20
    setArrowHandler : function(handler, scope){
        this.arrowHandler =3D handler;
        this.scope =3D scope; =20
    },

    =0A=
    onClick : function(e){
        e.preventDefault();
        if(!this.disabled){
            if(e.getTarget(".x-btn-menu-arrow-wrap")){
                if(this.menu && !this.menu.isVisible() && =
!this.ignoreNextClick){
                    this.showMenu();
                }
                this.fireEvent("arrowclick", this, e);
                if(this.arrowHandler){
                    this.arrowHandler.call(this.scope || this, this, e);
                }
            }else{
                if(this.enableToggle){
                    this.toggle();
                }
                this.fireEvent("click", this, e);
                if(this.handler){
                    this.handler.call(this.scope || this, this, e);
                }
            }
        }
    },

    =0A=
    getClickEl : function(e, isUp){
        if(!isUp){
            return (this.lastClickEl =3D e.getTarget("table", 10, =
true));
        }
        return this.lastClickEl;
    },

    =0A=
    onDisable : function(){
        if(this.el){
            if(!Ext.isIE6){
                this.el.addClass("x-item-disabled");
            }
            this.el.child(this.buttonSelector).dom.disabled =3D true;
            this.el.child(this.arrowSelector).dom.disabled =3D true;
        }
        this.disabled =3D true;
    },

    =0A=
    onEnable : function(){
        if(this.el){
            if(!Ext.isIE6){
                this.el.removeClass("x-item-disabled");
            }
            this.el.child(this.buttonSelector).dom.disabled =3D false;
            this.el.child(this.arrowSelector).dom.disabled =3D false;
        }
        this.disabled =3D false;
    },

    =0A=
    isMenuTriggerOver : function(e){
        return this.menu && e.within(this.arrowBtnTable) && =
!e.within(this.arrowBtnTable, true);
    },

    =0A=
    isMenuTriggerOut : function(e, internal){
        return this.menu && !e.within(this.arrowBtnTable);
    },

    =0A=
    onDestroy : function(){
        Ext.destroy(this.arrowBtnTable);
        Ext.SplitButton.superclass.onDestroy.call(this);
    }
});

=0A=
Ext.MenuButton =3D Ext.SplitButton;


Ext.reg('splitbutton', Ext.SplitButton);=0A=

Ext.CycleButton =3D Ext.extend(Ext.SplitButton, {
   =20
   =20
   =20
   =20
=09

    =0A=
    getItemText : function(item){
        if(item && this.showText =3D=3D=3D true){
            var text =3D '';
            if(this.prependText){
                text +=3D this.prependText;
            }
            text +=3D item.text;
            return text;
        }
        return undefined;
    },

   =20
    setActiveItem : function(item, suppressEvent){
        if(typeof item !=3D 'object'){
            item =3D this.menu.items.get(item);
        }
        if(item){
            if(!this.rendered){
                this.text =3D this.getItemText(item);
                this.iconCls =3D item.iconCls;
            }else{
                var t =3D this.getItemText(item);
                if(t){
                    this.setText(t);
                }
                this.setIconClass(item.iconCls);
            }
            this.activeItem =3D item;
            if(!item.checked){
                item.setChecked(true, true);
            }
            if(this.forceIcon){
                this.setIconClass(this.forceIcon);
            }
            if(!suppressEvent){
                this.fireEvent('change', this, item);
            }
        }
    },

   =20
    getActiveItem : function(){
        return this.activeItem;
    },

    =0A=
    initComponent : function(){
        this.addEvents(
           =20
            "change"
        );

        if(this.changeHandler){
            this.on('change', this.changeHandler, this.scope||this);
            delete this.changeHandler;
        }

        this.itemCount =3D this.items.length;

        this.menu =3D {cls:'x-cycle-menu', items:[]};
        var checked;
        for(var i =3D 0, len =3D this.itemCount; i < len; i++){
            var item =3D this.items[i];
            item.group =3D item.group || this.id;
            item.itemIndex =3D i;
            item.checkHandler =3D this.checkHandler;
            item.scope =3D this;
            item.checked =3D item.checked || false;
            this.menu.items.push(item);
            if(item.checked){
                checked =3D item;
            }
        }
        this.setActiveItem(checked, true);
        Ext.CycleButton.superclass.initComponent.call(this);

        this.on('click', this.toggleSelected, this);
    },

    =0A=
    checkHandler : function(item, pressed){
        if(pressed){
            this.setActiveItem(item);
        }
    },

   =20
    toggleSelected : function(){
        this.menu.render();
	=09
		var nextIdx, checkItem;
		for (var i =3D 1; i < this.itemCount; i++) {
			nextIdx =3D (this.activeItem.itemIndex + i) % this.itemCount;
			=0A=
			checkItem =3D this.menu.items.itemAt(nextIdx);
			=0A=
			if (!checkItem.disabled) {
				checkItem.setChecked(true);
				break;
			}
		}
    }
});
Ext.reg('cycle', Ext.CycleButton);=0A=
=20
 Ext.Toolbar =3D function(config){
    if(Ext.isArray(config)){
        config =3D {buttons:config};
    }
    Ext.Toolbar.superclass.constructor.call(this, config);
};

(function(){

var T =3D Ext.Toolbar;

Ext.extend(T, Ext.BoxComponent, {

    trackMenus : true,

    =0A=
    initComponent : function(){
        T.superclass.initComponent.call(this);

        if(this.items){
            this.buttons =3D this.items;
        }
       =20
        this.items =3D new Ext.util.MixedCollection(false, function(o){
            return o.itemId || o.id || Ext.id();
        });
    },

    =0A=
    autoCreate: {
        cls:'x-toolbar x-small-editor',
        html:'<table cellspacing=3D"0"><tr></tr></table>'
    },

    =0A=
    onRender : function(ct, position){
        this.el =3D ct.createChild(Ext.apply({ id: this.id =
},this.autoCreate), position);
        this.tr =3D this.el.child("tr", true);
    },

    =0A=
    afterRender : function(){
        T.superclass.afterRender.call(this);
        if(this.buttons){
            this.add.apply(this, this.buttons);
            delete this.buttons;
        }
    },

   =20
    add : function(){
        var a =3D arguments, l =3D a.length;
        for(var i =3D 0; i < l; i++){
            var el =3D a[i];
            if(el.isFormField){ =0A=
                this.addField(el);
            }else if(el.render){ =0A=
                this.addItem(el);
            }else if(typeof el =3D=3D "string"){ =0A=
                if(el =3D=3D "separator" || el =3D=3D "-"){
                    this.addSeparator();
                }else if(el =3D=3D " "){
                    this.addSpacer();
                }else if(el =3D=3D "->"){
                    this.addFill();
                }else{
                    this.addText(el);
                }
            }else if(el.tagName){ =0A=
                this.addElement(el);
            }else if(typeof el =3D=3D "object"){ =0A=
                if(el.xtype){
                    this.addField(Ext.ComponentMgr.create(el, =
'button'));
                }else{
                    this.addButton(el);
                }
            }
        }
    },
   =20
   =20
    addSeparator : function(){
        return this.addItem(new T.Separator());
    },

   =20
    addSpacer : function(){
        return this.addItem(new T.Spacer());
    },

   =20
    addFill : function(){
        return this.addItem(new T.Fill());
    },

   =20
    addElement : function(el){
        return this.addItem(new T.Item(el));
    },
   =20
   =20
    addItem : function(item){
        var td =3D this.nextBlock();
        this.initMenuTracking(item);
        item.render(td);
        this.items.add(item);
        return item;
    },
   =20
   =20
    addButton : function(config){
        if(Ext.isArray(config)){
            var buttons =3D [];
            for(var i =3D 0, len =3D config.length; i < len; i++) {
                buttons.push(this.addButton(config[i]));
            }
            return buttons;
        }
        var b =3D config;
        if(!(config instanceof T.Button)){
            b =3D config.split ?=20
                new T.SplitButton(config) :
                new T.Button(config);
        }
        var td =3D this.nextBlock();
        this.initMenuTracking(b);
        b.render(td);
        this.items.add(b);
        return b;
    },

    =0A=
    initMenuTracking : function(item){
        if(this.trackMenus && item.menu){
            item.on({
                'menutriggerover' : this.onButtonTriggerOver,
                'menushow' : this.onButtonMenuShow,
                'menuhide' : this.onButtonMenuHide,
                scope: this
            })
        }
    },

   =20
    addText : function(text){
        return this.addItem(new T.TextItem(text));
    },
   =20
   =20
    insertButton : function(index, item){
        if(Ext.isArray(item)){
            var buttons =3D [];
            for(var i =3D 0, len =3D item.length; i < len; i++) {
               buttons.push(this.insertButton(index + i, item[i]));
            }
            return buttons;
        }
        if (!(item instanceof T.Button)){
           item =3D new T.Button(item);
        }
        var td =3D document.createElement("td");
        this.tr.insertBefore(td, this.tr.childNodes[index]);
        this.initMenuTracking(item);
        item.render(td);
        this.items.insert(index, item);
        return item;
    },
   =20
   =20
    addDom : function(config, returnEl){
        var td =3D this.nextBlock();
        Ext.DomHelper.overwrite(td, config);
        var ti =3D new T.Item(td.firstChild);
        ti.render(td);
        this.items.add(ti);
        return ti;
    },

   =20
    addField : function(field){
        var td =3D this.nextBlock();
        field.render(td);
        var ti =3D new T.Item(td.firstChild);
        ti.render(td);
        this.items.add(ti);
        return ti;
    },

    =0A=
    nextBlock : function(){
        var td =3D document.createElement("td");
        this.tr.appendChild(td);
        return td;
    },

    =0A=
    onDestroy : function(){
        Ext.Toolbar.superclass.onDestroy.call(this);
        if(this.rendered){
            if(this.items){ =0A=
                Ext.destroy.apply(Ext, this.items.items);
            }
            Ext.Element.uncache(this.tr);
        }
    },

    =0A=
    onDisable : function(){
        this.items.each(function(item){
             if(item.disable){
                 item.disable();
             }
        });
    },

    =0A=
    onEnable : function(){
        this.items.each(function(item){
             if(item.enable){
                 item.enable();
             }
        });
    },

    =0A=
    onButtonTriggerOver : function(btn){
        if(this.activeMenuBtn && this.activeMenuBtn !=3D btn){
            this.activeMenuBtn.hideMenu();
            btn.showMenu();
            this.activeMenuBtn =3D btn;
        }
    },

    =0A=
    onButtonMenuShow : function(btn){
        this.activeMenuBtn =3D btn;
    },

    =0A=
    onButtonMenuHide : function(btn){
        delete this.activeMenuBtn;
    }

   =20
});
Ext.reg('toolbar', Ext.Toolbar);


T.Item =3D function(el){
    this.el =3D Ext.getDom(el);
    this.id =3D Ext.id(this.el);
    this.hidden =3D false;
};

T.Item.prototype =3D {
   =20
   =20
    getEl : function(){
       return this.el; =20
    },

    =0A=
    render : function(td){
        this.td =3D td;
        td.appendChild(this.el);
    },
   =20
   =20
    destroy : function(){
        if(this.td && this.td.parentNode){
            this.td.parentNode.removeChild(this.td);
        }
    },
   =20
   =20
    show: function(){
        this.hidden =3D false;
        this.td.style.display =3D "";
    },
   =20
   =20
    hide: function(){
        this.hidden =3D true;
        this.td.style.display =3D "none";
    },
   =20
   =20
    setVisible: function(visible){
        if(visible) {
            this.show();
        }else{
            this.hide();
        }
    },
   =20
   =20
    focus : function(){
        Ext.fly(this.el).focus();
    },
   =20
   =20
    disable : function(){
        Ext.fly(this.td).addClass("x-item-disabled");
        this.disabled =3D true;
        this.el.disabled =3D true;
    },
   =20
   =20
    enable : function(){
        Ext.fly(this.td).removeClass("x-item-disabled");
        this.disabled =3D false;
        this.el.disabled =3D false;
    }
};
Ext.reg('tbitem', T.Item);



T.Separator =3D function(){
    var s =3D document.createElement("span");
    s.className =3D "ytb-sep";
    T.Separator.superclass.constructor.call(this, s);
};
Ext.extend(T.Separator, T.Item, {
    enable:Ext.emptyFn,
    disable:Ext.emptyFn,
    focus:Ext.emptyFn
});
Ext.reg('tbseparator', T.Separator);


T.Spacer =3D function(){
    var s =3D document.createElement("div");
    s.className =3D "ytb-spacer";
    T.Spacer.superclass.constructor.call(this, s);
};
Ext.extend(T.Spacer, T.Item, {
    enable:Ext.emptyFn,
    disable:Ext.emptyFn,
    focus:Ext.emptyFn
});

Ext.reg('tbspacer', T.Spacer);


T.Fill =3D Ext.extend(T.Spacer, {
    =0A=
    render : function(td){
        td.style.width =3D '100%';
        T.Fill.superclass.render.call(this, td);
    }
});
Ext.reg('tbfill', T.Fill);


T.TextItem =3D function(t){
    var s =3D document.createElement("span");
    s.className =3D "ytb-text";
    s.innerHTML =3D t.text ? t.text : t;
    T.TextItem.superclass.constructor.call(this, s);
};
Ext.extend(T.TextItem, T.Item, {
    enable:Ext.emptyFn,
    disable:Ext.emptyFn,
    focus:Ext.emptyFn
});
Ext.reg('tbtext', T.TextItem);



T.Button =3D Ext.extend(Ext.Button, {
    hideParent : true,

    onDestroy : function(){
        T.Button.superclass.onDestroy.call(this);
        if(this.container){
            this.container.remove();
        }
    }
});
Ext.reg('tbbutton', T.Button);


T.SplitButton =3D Ext.extend(Ext.SplitButton, {
    hideParent : true,

    onDestroy : function(){
        T.SplitButton.superclass.onDestroy.call(this);
        if(this.container){
            this.container.remove();
        }
    }
});

Ext.reg('tbsplit', T.SplitButton);
=0A=
T.MenuButton =3D T.SplitButton;

})();
=0A=
=0A=
Ext.PagingToolbar =3D Ext.extend(Ext.Toolbar, {=0A=
    =0A=
    =0A=
    =0A=
    pageSize: 20,=0A=
    =0A=
    displayMsg : 'Displaying {0} - {1} of {2}',=0A=
    =0A=
    emptyMsg : 'No data to display',=0A=
    =0A=
    beforePageText : "Page",=0A=
    =0A=
    afterPageText : "of {0}",=0A=
    =0A=
    firstText : "First Page",=0A=
    =0A=
    prevText : "Previous Page",=0A=
    =0A=
    nextText : "Next Page",=0A=
    =0A=
    lastText : "Last Page",=0A=
    =0A=
    refreshText : "Refresh",=0A=
=0A=
    =0A=
    paramNames : {start: 'start', limit: 'limit'},=0A=
=0A=
    initComponent : function(){=0A=
        Ext.PagingToolbar.superclass.initComponent.call(this);=0A=
        this.cursor =3D 0;=0A=
        this.bind(this.store);=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.PagingToolbar.superclass.onRender.call(this, ct, position);=0A=
        this.first =3D this.addButton({=0A=
            tooltip: this.firstText,=0A=
            iconCls: "x-tbar-page-first",=0A=
            disabled: true,=0A=
            handler: this.onClick.createDelegate(this, ["first"])=0A=
        });=0A=
        this.prev =3D this.addButton({=0A=
            tooltip: this.prevText,=0A=
            iconCls: "x-tbar-page-prev",=0A=
            disabled: true,=0A=
            handler: this.onClick.createDelegate(this, ["prev"])=0A=
        });=0A=
        this.addSeparator();=0A=
        this.add(this.beforePageText);=0A=
        this.field =3D Ext.get(this.addDom({=0A=
           tag: "input",=0A=
           type: "text",=0A=
           size: "3",=0A=
           value: "1",=0A=
           cls: "x-tbar-page-number"=0A=
        }).el);=0A=
        this.field.on("keydown", this.onPagingKeydown, this);=0A=
        this.field.on("focus", function(){this.dom.select();});=0A=
        this.afterTextEl =3D =
this.addText(String.format(this.afterPageText, 1));=0A=
        this.field.setHeight(18);=0A=
        this.addSeparator();=0A=
        this.next =3D this.addButton({=0A=
            tooltip: this.nextText,=0A=
            iconCls: "x-tbar-page-next",=0A=
            disabled: true,=0A=
            handler: this.onClick.createDelegate(this, ["next"])=0A=
        });=0A=
        this.last =3D this.addButton({=0A=
            tooltip: this.lastText,=0A=
            iconCls: "x-tbar-page-last",=0A=
            disabled: true,=0A=
            handler: this.onClick.createDelegate(this, ["last"])=0A=
        });=0A=
        this.addSeparator();=0A=
        this.loading =3D this.addButton({=0A=
            tooltip: this.refreshText,=0A=
            iconCls: "x-tbar-loading",=0A=
            handler: this.onClick.createDelegate(this, ["refresh"])=0A=
        });=0A=
=0A=
        if(this.displayInfo){=0A=
            this.displayEl =3D =
Ext.fly(this.el.dom).createChild({cls:'x-paging-info'});=0A=
        }=0A=
        if(this.dsLoaded){=0A=
            this.onLoad.apply(this, this.dsLoaded);=0A=
        }=0A=
    },=0A=
=0A=
        updateInfo : function(){=0A=
        if(this.displayEl){=0A=
            var count =3D this.store.getCount();=0A=
            var msg =3D count =3D=3D 0 ?=0A=
                this.emptyMsg :=0A=
                String.format(=0A=
                    this.displayMsg,=0A=
                    this.cursor+1, this.cursor+count, =
this.store.getTotalCount()=0A=
                );=0A=
            this.displayEl.update(msg);=0A=
        }=0A=
    },=0A=
=0A=
        onLoad : function(store, r, o){=0A=
        if(!this.rendered){=0A=
            this.dsLoaded =3D [store, r, o];=0A=
            return;=0A=
        }=0A=
       this.cursor =3D o.params ? o.params[this.paramNames.start] : 0;=0A=
       var d =3D this.getPageData(), ap =3D d.activePage, ps =3D d.pages;=0A=
=0A=
       this.afterTextEl.el.innerHTML =3D =
String.format(this.afterPageText, d.pages);=0A=
       this.field.dom.value =3D ap;=0A=
       this.first.setDisabled(ap =3D=3D 1);=0A=
       this.prev.setDisabled(ap =3D=3D 1);=0A=
       this.next.setDisabled(ap =3D=3D ps);=0A=
       this.last.setDisabled(ap =3D=3D ps);=0A=
       this.loading.enable();=0A=
       this.updateInfo();=0A=
    },=0A=
=0A=
        getPageData : function(){=0A=
        var total =3D this.store.getTotalCount();=0A=
        return {=0A=
            total : total,=0A=
            activePage : =
Math.ceil((this.cursor+this.pageSize)/this.pageSize),=0A=
            pages :  total < this.pageSize ? 1 : =
Math.ceil(total/this.pageSize)=0A=
        };=0A=
    },=0A=
=0A=
        onLoadError : function(){=0A=
        if(!this.rendered){=0A=
            return;=0A=
        }=0A=
        this.loading.enable();=0A=
    },=0A=
=0A=
    readPage : function(d){=0A=
        var v =3D this.field.dom.value, pageNum;=0A=
        if (!v || isNaN(pageNum =3D parseInt(v, 10))) {=0A=
            this.field.dom.value =3D d.activePage;=0A=
            return false;=0A=
        }=0A=
        return pageNum;=0A=
    },=0A=
=0A=
        onPagingKeydown : function(e){=0A=
        var k =3D e.getKey(), d =3D this.getPageData(), pageNum;=0A=
        if (k =3D=3D e.RETURN) {=0A=
            e.stopEvent();=0A=
            if(pageNum =3D this.readPage(d)){=0A=
                pageNum =3D Math.min(Math.max(1, pageNum), d.pages) - 1;=0A=
                this.doLoad(pageNum * this.pageSize);=0A=
            }=0A=
        }else if (k =3D=3D e.HOME || k =3D=3D e.END){=0A=
            e.stopEvent();=0A=
            pageNum =3D k =3D=3D e.HOME ? 1 : d.pages;=0A=
            this.field.dom.value =3D pageNum;=0A=
        }else if (k =3D=3D e.UP || k =3D=3D e.PAGEUP || k =3D=3D e.DOWN =
|| k =3D=3D e.PAGEDOWN){=0A=
            e.stopEvent();=0A=
            if(pageNum =3D this.readPage(d)){=0A=
                var increment =3D e.shiftKey ? 10 : 1;=0A=
                if(k =3D=3D e.DOWN || k =3D=3D e.PAGEDOWN){=0A=
                    increment *=3D -1;=0A=
                }=0A=
                pageNum +=3D increment;=0A=
                if(pageNum >=3D 1 & pageNum <=3D d.pages){=0A=
                    this.field.dom.value =3D pageNum;=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        beforeLoad : function(){=0A=
        if(this.rendered && this.loading){=0A=
            this.loading.disable();=0A=
        }=0A=
    },=0A=
=0A=
    doLoad : function(start){=0A=
        var o =3D {}, pn =3D this.paramNames;=0A=
        o[pn.start] =3D start;=0A=
        o[pn.limit] =3D this.pageSize;=0A=
        this.store.load({params:o});=0A=
    },=0A=
=0A=
        onClick : function(which){=0A=
        var store =3D this.store;=0A=
        switch(which){=0A=
            case "first":=0A=
                this.doLoad(0);=0A=
            break;=0A=
            case "prev":=0A=
                this.doLoad(Math.max(0, this.cursor-this.pageSize));=0A=
            break;=0A=
            case "next":=0A=
                this.doLoad(this.cursor+this.pageSize);=0A=
            break;=0A=
            case "last":=0A=
                var total =3D store.getTotalCount();=0A=
                var extra =3D total % this.pageSize;=0A=
                var lastStart =3D extra ? (total - extra) : =
total-this.pageSize;=0A=
                this.doLoad(lastStart);=0A=
            break;=0A=
            case "refresh":=0A=
                this.doLoad(this.cursor);=0A=
            break;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    unbind : function(store){=0A=
        store =3D Ext.StoreMgr.lookup(store);=0A=
        store.un("beforeload", this.beforeLoad, this);=0A=
        store.un("load", this.onLoad, this);=0A=
        store.un("loadexception", this.onLoadError, this);=0A=
        this.store =3D undefined;=0A=
    },=0A=
=0A=
    =0A=
    bind : function(store){=0A=
        store =3D Ext.StoreMgr.lookup(store);=0A=
        store.on("beforeload", this.beforeLoad, this);=0A=
        store.on("load", this.onLoad, this);=0A=
        store.on("loadexception", this.onLoadError, this);=0A=
        this.store =3D store;=0A=
    }=0A=
});=0A=
Ext.reg('paging', Ext.PagingToolbar);=0A=

Ext.Resizable =3D function(el, config){
    this.el =3D Ext.get(el);
   =20
    if(config && config.wrap){
        config.resizeChild =3D this.el;
        this.el =3D this.el.wrap(typeof config.wrap =3D=3D "object" ? =
config.wrap : {cls:"xresizable-wrap"});
        this.el.id =3D this.el.dom.id =3D config.resizeChild.id + =
"-rzwrap";
        this.el.setStyle("overflow", "hidden");
        this.el.setPositioning(config.resizeChild.getPositioning());
        config.resizeChild.clearPositioning();
        if(!config.width || !config.height){
            var csize =3D config.resizeChild.getSize();
            this.el.setSize(csize.width, csize.height);
        }
        if(config.pinned && !config.adjustments){
            config.adjustments =3D "auto";
        }
    }

   =20
    this.proxy =3D this.el.createProxy({tag: "div", cls: =
"x-resizable-proxy", id: this.el.id + "-rzproxy"});
    this.proxy.unselectable();
    this.proxy.enableDisplayMode('block');

    Ext.apply(this, config);
   =20
    if(this.pinned){
        this.disableTrackOver =3D true;
        this.el.addClass("x-resizable-pinned");
    }
    =0A=
    var position =3D this.el.getStyle("position");
    if(position !=3D "absolute" && position !=3D "fixed"){
        this.el.setStyle("position", "relative");
    }
    if(!this.handles){ =0A=
        this.handles =3D 's,e,se';
        if(this.multiDirectional){
            this.handles +=3D ',n,w';
        }
    }
    if(this.handles =3D=3D "all"){
        this.handles =3D "n s e w ne nw se sw";
    }
    var hs =3D this.handles.split(/\s*?[,;]\s*?| /);
    var ps =3D Ext.Resizable.positions;
    for(var i =3D 0, len =3D hs.length; i < len; i++){
        if(hs[i] && ps[hs[i]]){
            var pos =3D ps[hs[i]];
            this[pos] =3D new Ext.Resizable.Handle(this, pos, =
this.disableTrackOver, this.transparent);
        }
    }
    =0A=
    this.corner =3D this.southeast;
   =20
    if(this.handles.indexOf("n") !=3D -1 || this.handles.indexOf("w") =
!=3D -1){
        this.updateBox =3D true;
    }  =20
  =20
    this.activeHandle =3D null;
   =20
    if(this.resizeChild){
        if(typeof this.resizeChild =3D=3D "boolean"){
            this.resizeChild =3D Ext.get(this.el.dom.firstChild, true);
        }else{
            this.resizeChild =3D Ext.get(this.resizeChild, true);
        }
    }
   =20
    if(this.adjustments =3D=3D "auto"){
        var rc =3D this.resizeChild;
        var hw =3D this.west, he =3D this.east, hn =3D this.north, hs =
=3D this.south;
        if(rc && (hw || hn)){
            rc.position("relative");
            rc.setLeft(hw ? hw.el.getWidth() : 0);
            rc.setTop(hn ? hn.el.getHeight() : 0);
        }
        this.adjustments =3D [
            (he ? -he.el.getWidth() : 0) + (hw ? -hw.el.getWidth() : 0),
            (hn ? -hn.el.getHeight() : 0) + (hs ? -hs.el.getHeight() : =
0) -1=20
        ];
    }
   =20
    if(this.draggable){
        this.dd =3D this.dynamic ?=20
            this.el.initDD(null) : this.el.initDDProxy(null, {dragElId: =
this.proxy.id});
        this.dd.setHandleElId(this.resizeChild ? this.resizeChild.id : =
this.el.id);
    }
   =20
    =0A=
    this.addEvents(
        "beforeresize",
        "resize"
    );
   =20
    if(this.width !=3D=3D null && this.height !=3D=3D null){
        this.resizeTo(this.width, this.height);
    }else{
        this.updateChildSize();
    }
    if(Ext.isIE){
        this.el.dom.style.zoom =3D 1;
    }
    Ext.Resizable.superclass.constructor.call(this);
};

Ext.extend(Ext.Resizable, Ext.util.Observable, {
        resizeChild : false,
        adjustments : [0, 0],
        minWidth : 5,
        minHeight : 5,
        maxWidth : 10000,
        maxHeight : 10000,
        enabled : true,
        animate : false,
        duration : .35,
        dynamic : false,
        handles : false,
        multiDirectional : false,
        disableTrackOver : false,
        easing : 'easeOutStrong',
        widthIncrement : 0,
        heightIncrement : 0,
        pinned : false,
        width : null,
        height : null,
        preserveRatio : false,
        transparent: false,
        minX: 0,
        minY: 0,
        draggable: false,

       =20
       =20

       =20
       =20
   =20
   =20
    resizeTo : function(width, height){
        this.el.setSize(width, height);
        this.updateChildSize();
        this.fireEvent("resize", this, width, height, null);
    },

    =0A=
    startSizing : function(e, handle){
        this.fireEvent("beforeresize", this, e);
        if(this.enabled){ =0A=

            if(!this.overlay){
                this.overlay =3D this.el.createProxy({tag: "div", cls: =
"x-resizable-overlay", html: "&#160;"}, Ext.getBody());
                this.overlay.unselectable();
                this.overlay.enableDisplayMode("block");
                this.overlay.on("mousemove", this.onMouseMove, this);
                this.overlay.on("mouseup", this.onMouseUp, this);
            }
            this.overlay.setStyle("cursor", =
handle.el.getStyle("cursor"));

            this.resizing =3D true;
            this.startBox =3D this.el.getBox();
            this.startPoint =3D e.getXY();
            this.offsets =3D [(this.startBox.x + this.startBox.width) - =
this.startPoint[0],
                            (this.startBox.y + this.startBox.height) - =
this.startPoint[1]];

            this.overlay.setSize(Ext.lib.Dom.getViewWidth(true), =
Ext.lib.Dom.getViewHeight(true));
            this.overlay.show();

            if(this.constrainTo) {
                var ct =3D Ext.get(this.constrainTo);
                this.resizeRegion =3D ct.getRegion().adjust(
                    ct.getFrameWidth('t'),
                    ct.getFrameWidth('l'),
                    -ct.getFrameWidth('b'),
                    -ct.getFrameWidth('r')
                );
            }

            this.proxy.setStyle('visibility', 'hidden'); =0A=
            this.proxy.show();
            this.proxy.setBox(this.startBox);
            if(!this.dynamic){
                this.proxy.setStyle('visibility', 'visible');
            }
        }
    },

    =0A=
    onMouseDown : function(handle, e){
        if(this.enabled){
            e.stopEvent();
            this.activeHandle =3D handle;
            this.startSizing(e, handle);
        }         =20
    },

    =0A=
    onMouseUp : function(e){
        var size =3D this.resizeElement();
        this.resizing =3D false;
        this.handleOut();
        this.overlay.hide();
        this.proxy.hide();
        this.fireEvent("resize", this, size.width, size.height, e);
    },

    =0A=
    updateChildSize : function(){
        if(this.resizeChild){
            var el =3D this.el;
            var child =3D this.resizeChild;
            var adj =3D this.adjustments;
            if(el.dom.offsetWidth){
                var b =3D el.getSize(true);
                child.setSize(b.width+adj[0], b.height+adj[1]);
            }
            =0A=
            =0A=
            =0A=
            =0A=
            if(Ext.isIE){
                setTimeout(function(){
                    if(el.dom.offsetWidth){
                        var b =3D el.getSize(true);
                        child.setSize(b.width+adj[0], b.height+adj[1]);
                    }
                }, 10);
            }
        }
    },

    =0A=
    snap : function(value, inc, min){
        if(!inc || !value) return value;
        var newValue =3D value;
        var m =3D value % inc;
        if(m > 0){
            if(m > (inc/2)){
                newValue =3D value + (inc-m);
            }else{
                newValue =3D value - m;
            }
        }
        return Math.max(min, newValue);
    },

   =20
    resizeElement : function(){
        var box =3D this.proxy.getBox();
        if(this.updateBox){
            this.el.setBox(box, false, this.animate, this.duration, =
null, this.easing);
        }else{
            this.el.setSize(box.width, box.height, this.animate, =
this.duration, null, this.easing);
        }
        this.updateChildSize();
        if(!this.dynamic){
            this.proxy.hide();
        }
        return box;
    },

    =0A=
    constrain : function(v, diff, m, mx){
        if(v - diff < m){
            diff =3D v - m;   =20
        }else if(v - diff > mx){
            diff =3D mx - v;=20
        }
        return diff;               =20
    },

    =0A=
    onMouseMove : function(e){
        if(this.enabled){
            try{=0A=

            if(this.resizeRegion && =
!this.resizeRegion.contains(e.getPoint())) {
                return;
            }

            =0A=
            var curSize =3D this.curSize || this.startBox;
            var x =3D this.startBox.x, y =3D this.startBox.y;
            var ox =3D x, oy =3D y;
            var w =3D curSize.width, h =3D curSize.height;
            var ow =3D w, oh =3D h;
            var mw =3D this.minWidth, mh =3D this.minHeight;
            var mxw =3D this.maxWidth, mxh =3D this.maxHeight;
            var wi =3D this.widthIncrement;
            var hi =3D this.heightIncrement;
           =20
            var eventXY =3D e.getXY();
            var diffX =3D -(this.startPoint[0] - Math.max(this.minX, =
eventXY[0]));
            var diffY =3D -(this.startPoint[1] - Math.max(this.minY, =
eventXY[1]));
           =20
            var pos =3D this.activeHandle.position;
           =20
            switch(pos){
                case "east":
                    w +=3D diffX;=20
                    w =3D Math.min(Math.max(mw, w), mxw);
                    break;
                case "south":
                    h +=3D diffY;
                    h =3D Math.min(Math.max(mh, h), mxh);
                    break;
                case "southeast":
                    w +=3D diffX;=20
                    h +=3D diffY;
                    w =3D Math.min(Math.max(mw, w), mxw);
                    h =3D Math.min(Math.max(mh, h), mxh);
                    break;
                case "north":
                    diffY =3D this.constrain(h, diffY, mh, mxh);
                    y +=3D diffY;
                    h -=3D diffY;
                    break;
                case "west":
                    diffX =3D this.constrain(w, diffX, mw, mxw);
                    x +=3D diffX;
                    w -=3D diffX;
                    break;
                case "northeast":
                    w +=3D diffX;=20
                    w =3D Math.min(Math.max(mw, w), mxw);
                    diffY =3D this.constrain(h, diffY, mh, mxh);
                    y +=3D diffY;
                    h -=3D diffY;
                    break;
                case "northwest":
                    diffX =3D this.constrain(w, diffX, mw, mxw);
                    diffY =3D this.constrain(h, diffY, mh, mxh);
                    y +=3D diffY;
                    h -=3D diffY;
                    x +=3D diffX;
                    w -=3D diffX;
                    break;
               case "southwest":
                    diffX =3D this.constrain(w, diffX, mw, mxw);
                    h +=3D diffY;
                    h =3D Math.min(Math.max(mh, h), mxh);
                    x +=3D diffX;
                    w -=3D diffX;
                    break;
            }
           =20
            var sw =3D this.snap(w, wi, mw);
            var sh =3D this.snap(h, hi, mh);
            if(sw !=3D w || sh !=3D h){
                switch(pos){
                    case "northeast":
                        y -=3D sh - h;
                    break;
                    case "north":
                        y -=3D sh - h;
                        break;
                    case "southwest":
                        x -=3D sw - w;
                    break;
                    case "west":
                        x -=3D sw - w;
                        break;
                    case "northwest":
                        x -=3D sw - w;
                        y -=3D sh - h;
                    break;
                }
                w =3D sw;
                h =3D sh;
            }
           =20
            if(this.preserveRatio){
                switch(pos){
                    case "southeast":
                    case "east":
                        h =3D oh * (w/ow);
                        h =3D Math.min(Math.max(mh, h), mxh);
                        w =3D ow * (h/oh);
                       break;
                    case "south":
                        w =3D ow * (h/oh);
                        w =3D Math.min(Math.max(mw, w), mxw);
                        h =3D oh * (w/ow);
                        break;
                    case "northeast":
                        w =3D ow * (h/oh);
                        w =3D Math.min(Math.max(mw, w), mxw);
                        h =3D oh * (w/ow);
                    break;
                    case "north":
                        var tw =3D w;
                        w =3D ow * (h/oh);
                        w =3D Math.min(Math.max(mw, w), mxw);
                        h =3D oh * (w/ow);
                        x +=3D (tw - w) / 2;
                        break;
                    case "southwest":
                        h =3D oh * (w/ow);
                        h =3D Math.min(Math.max(mh, h), mxh);
                        var tw =3D w;
                        w =3D ow * (h/oh);
                        x +=3D tw - w;
                        break;
                    case "west":
                        var th =3D h;
                        h =3D oh * (w/ow);
                        h =3D Math.min(Math.max(mh, h), mxh);
                        y +=3D (th - h) / 2;
                        var tw =3D w;
                        w =3D ow * (h/oh);
                        x +=3D tw - w;
                       break;
                    case "northwest":
                        var tw =3D w;
                        var th =3D h;
                        h =3D oh * (w/ow);
                        h =3D Math.min(Math.max(mh, h), mxh);
                        w =3D ow * (h/oh);
                        y +=3D th - h;
                         x +=3D tw - w;
                       break;
                       =20
                }
            }
            this.proxy.setBounds(x, y, w, h);
            if(this.dynamic){
                this.resizeElement();
            }
            }catch(e){}
        }
    },

    =0A=
    handleOver : function(){
        if(this.enabled){
            this.el.addClass("x-resizable-over");
        }
    },

    =0A=
    handleOut : function(){
        if(!this.resizing){
            this.el.removeClass("x-resizable-over");
        }
    },
   =20
   =20
    getEl : function(){
        return this.el;
    },
   =20
   =20
    getResizeChild : function(){
        return this.resizeChild;
    },
   =20
   =20
    destroy : function(removeEl){
        this.proxy.remove();
        if(this.overlay){
            this.overlay.removeAllListeners();
            this.overlay.remove();
        }
        var ps =3D Ext.Resizable.positions;
        for(var k in ps){
            if(typeof ps[k] !=3D "function" && this[ps[k]]){
                var h =3D this[ps[k]];
                h.el.removeAllListeners();
                h.el.remove();
            }
        }
        if(removeEl){
            this.el.update("");
            this.el.remove();
        }
    },

    syncHandleHeight : function(){
        var h =3D this.el.getHeight(true);
        if(this.west){
            this.west.el.setHeight(h);
        }
        if(this.east){
            this.east.el.setHeight(h);
        }
    }
});

=0A=
=0A=
Ext.Resizable.positions =3D {
    n: "north", s: "south", e: "east", w: "west", se: "southeast", sw: =
"southwest", nw: "northwest", ne: "northeast"
};

=0A=
Ext.Resizable.Handle =3D function(rz, pos, disableTrackOver, =
transparent){
    if(!this.tpl){
        =0A=
        var tpl =3D Ext.DomHelper.createTemplate(
            {tag: "div", cls: "x-resizable-handle =
x-resizable-handle-{0}"}
        );
        tpl.compile();
        Ext.Resizable.Handle.prototype.tpl =3D tpl;
    }
    this.position =3D pos;
    this.rz =3D rz;
    this.el =3D this.tpl.append(rz.el.dom, [this.position], true);
    this.el.unselectable();
    if(transparent){
        this.el.setOpacity(0);
    }
    this.el.on("mousedown", this.onMouseDown, this);
    if(!disableTrackOver){
        this.el.on("mouseover", this.onMouseOver, this);
        this.el.on("mouseout", this.onMouseOut, this);
    }
};

=0A=
Ext.Resizable.Handle.prototype =3D {
    afterResize : function(rz){
        =0A=
    },
    =0A=
    onMouseDown : function(e){
        this.rz.onMouseDown(this, e);
    },
    =0A=
    onMouseOver : function(e){
        this.rz.handleOver(this, e);
    },
    =0A=
    onMouseOut : function(e){
        this.rz.handleOut(this, e);
    } =20
};



=0A=
=0A=
Ext.Editor =3D function(field, config){=0A=
    this.field =3D field;=0A=
    Ext.Editor.superclass.constructor.call(this, config);=0A=
};=0A=
=0A=
Ext.extend(Ext.Editor, Ext.Component, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    value : "",=0A=
    =0A=
    alignment: "c-c?",=0A=
    =0A=
    shadow : "frame",=0A=
    =0A=
    constrain : false,=0A=
    =0A=
    swallowKeys : true,=0A=
    =0A=
    completeOnEnter : false,=0A=
    =0A=
    cancelOnEsc : false,=0A=
    =0A=
    updateEl : false,=0A=
=0A=
    initComponent : function(){=0A=
        Ext.Editor.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            "beforestartedit",=0A=
            =0A=
            "startedit",=0A=
            =0A=
            "beforecomplete",=0A=
            =0A=
            "complete",=0A=
            =0A=
            "specialkey"=0A=
        );=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        this.el =3D new Ext.Layer({=0A=
            shadow: this.shadow,=0A=
            cls: "x-editor",=0A=
            parentEl : ct,=0A=
            shim : this.shim,=0A=
            shadowOffset:4,=0A=
            id: this.id,=0A=
            constrain: this.constrain=0A=
        });=0A=
        this.el.setStyle("overflow", Ext.isGecko ? "auto" : "hidden");=0A=
        if(this.field.msgTarget !=3D 'title'){=0A=
            this.field.msgTarget =3D 'qtip';=0A=
        }=0A=
        this.field.inEditor =3D true;=0A=
        this.field.render(this.el);=0A=
        if(Ext.isGecko){=0A=
            this.field.el.dom.setAttribute('autocomplete', 'off');=0A=
        }=0A=
        this.field.on("specialkey", this.onSpecialKey, this);=0A=
        if(this.swallowKeys){=0A=
            this.field.el.swallowEvent(['keydown','keypress']);=0A=
        }=0A=
        this.field.show();=0A=
        this.field.on("blur", this.onBlur, this);=0A=
        if(this.field.grow){=0A=
            this.field.on("autosize", this.el.sync,  this.el, {delay:1});=0A=
        }=0A=
    },=0A=
=0A=
    onSpecialKey : function(field, e){=0A=
        if(this.completeOnEnter && e.getKey() =3D=3D e.ENTER){=0A=
            e.stopEvent();=0A=
            this.completeEdit();=0A=
        }else if(this.cancelOnEsc && e.getKey() =3D=3D e.ESC){=0A=
            this.cancelEdit();=0A=
        }else{=0A=
            this.fireEvent('specialkey', field, e);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    startEdit : function(el, value){=0A=
        if(this.editing){=0A=
            this.completeEdit();=0A=
        }=0A=
        this.boundEl =3D Ext.get(el);=0A=
        var v =3D value !=3D=3D undefined ? value : =
this.boundEl.dom.innerHTML;=0A=
        if(!this.rendered){=0A=
            this.render(this.parentEl || document.body);=0A=
        }=0A=
        if(this.fireEvent("beforestartedit", this, this.boundEl, v) =
=3D=3D=3D false){=0A=
            return;=0A=
        }=0A=
        this.startValue =3D v;=0A=
        this.field.setValue(v);=0A=
        this.doAutoSize();=0A=
        this.el.alignTo(this.boundEl, this.alignment);=0A=
        this.editing =3D true;=0A=
        this.show();=0A=
    },=0A=
=0A=
        doAutoSize : function(){=0A=
        if(this.autoSize){=0A=
            var sz =3D this.boundEl.getSize();=0A=
            switch(this.autoSize){=0A=
                case "width":=0A=
                    this.setSize(sz.width,  "");=0A=
                break;=0A=
                case "height":=0A=
                    this.setSize("",  sz.height);=0A=
                break;=0A=
                default:=0A=
                    this.setSize(sz.width,  sz.height);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setSize : function(w, h){=0A=
        delete this.field.lastSize;=0A=
        this.field.setSize(w, h);=0A=
        if(this.el){=0A=
            this.el.sync();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    realign : function(){=0A=
        this.el.alignTo(this.boundEl, this.alignment);=0A=
    },=0A=
=0A=
    =0A=
    completeEdit : function(remainVisible){=0A=
        if(!this.editing){=0A=
            return;=0A=
        }=0A=
        var v =3D this.getValue();=0A=
        if(this.revertInvalid !=3D=3D false && !this.field.isValid()){=0A=
            v =3D this.startValue;=0A=
            this.cancelEdit(true);=0A=
        }=0A=
        if(String(v) =3D=3D=3D String(this.startValue) && =
this.ignoreNoChange){=0A=
            this.editing =3D false;=0A=
            this.hide();=0A=
            return;=0A=
        }=0A=
        if(this.fireEvent("beforecomplete", this, v, this.startValue) =
!=3D=3D false){=0A=
            this.editing =3D false;=0A=
            if(this.updateEl && this.boundEl){=0A=
                this.boundEl.update(v);=0A=
            }=0A=
            if(remainVisible !=3D=3D true){=0A=
                this.hide();=0A=
            }=0A=
            this.fireEvent("complete", this, v, this.startValue);=0A=
        }=0A=
    },=0A=
=0A=
        onShow : function(){=0A=
        this.el.show();=0A=
        if(this.hideEl !=3D=3D false){=0A=
            this.boundEl.hide();=0A=
        }=0A=
        this.field.show();=0A=
        if(Ext.isIE && !this.fixIEFocus){             this.fixIEFocus =
=3D true;=0A=
            this.deferredFocus.defer(50, this);=0A=
        }else{=0A=
            this.field.focus();=0A=
        }=0A=
        this.fireEvent("startedit", this.boundEl, this.startValue);=0A=
    },=0A=
=0A=
    deferredFocus : function(){=0A=
        if(this.editing){=0A=
            this.field.focus();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    cancelEdit : function(remainVisible){=0A=
        if(this.editing){=0A=
            this.setValue(this.startValue);=0A=
            if(remainVisible !=3D=3D true){=0A=
                this.hide();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onBlur : function(){=0A=
        if(this.allowBlur !=3D=3D true && this.editing){=0A=
            this.completeEdit();=0A=
        }=0A=
    },=0A=
=0A=
        onHide : function(){=0A=
        if(this.editing){=0A=
            this.completeEdit();=0A=
            return;=0A=
        }=0A=
        this.field.blur();=0A=
        if(this.field.collapse){=0A=
            this.field.collapse();=0A=
        }=0A=
        this.el.hide();=0A=
        if(this.hideEl !=3D=3D false){=0A=
            this.boundEl.show();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setValue : function(v){=0A=
        this.field.setValue(v);=0A=
    },=0A=
=0A=
    =0A=
    getValue : function(){=0A=
        return this.field.getValue();=0A=
    },=0A=
=0A=
    beforeDestroy : function(){=0A=
        this.field.destroy();=0A=
        this.field =3D null;=0A=
    }=0A=
});=0A=
Ext.reg('editor', Ext.Editor);=0A=

Ext.MessageBox =3D function(){
    var dlg, opt, mask, waitTimer;
    var bodyEl, msgEl, textboxEl, textareaEl, progressBar, pp, iconEl, =
spacerEl;
    var buttons, activeTextEl, bwidth, iconCls =3D '';

    =0A=
    var handleButton =3D function(button){
        if(dlg.isVisible()){
            dlg.hide();
            Ext.callback(opt.fn, opt.scope||window, [button, =
activeTextEl.dom.value], 1);
        }
    };

    =0A=
    var handleHide =3D function(){
        if(opt && opt.cls){
            dlg.el.removeClass(opt.cls);
        }
        progressBar.reset();
    };

    =0A=
    var handleEsc =3D function(d, k, e){
        if(opt && opt.closable !=3D=3D false){
            dlg.hide();
        }
        if(e){
            e.stopEvent();
        }
    };

    =0A=
    var updateButtons =3D function(b){
        var width =3D 0;
        if(!b){
            buttons["ok"].hide();
            buttons["cancel"].hide();
            buttons["yes"].hide();
            buttons["no"].hide();
            return width;
        }
        dlg.footer.dom.style.display =3D '';
        for(var k in buttons){
            if(typeof buttons[k] !=3D "function"){
                if(b[k]){
                    buttons[k].show();
                    buttons[k].setText(typeof b[k] =3D=3D "string" ? =
b[k] : Ext.MessageBox.buttonText[k]);
                    width +=3D buttons[k].el.getWidth()+15;
                }else{
                    buttons[k].hide();
                }
            }
        }
        return width;
    };

    return {
       =20
        getDialog : function(titleText){
           if(!dlg){
                dlg =3D new Ext.Window({
                    autoCreate : true,
                    title:titleText,
                    resizable:false,
                    constrain:true,
                    constrainHeader:true,
                    minimizable : false,
                    maximizable : false,
                    stateful: false,
                    modal: true,
                    shim:true,
                    buttonAlign:"center",
                    width:400,
                    height:100,
                    minHeight: 80,
                    plain:true,
                    footer:true,
                    closable:true,
                    close : function(){
                        if(opt && opt.buttons && opt.buttons.no && =
!opt.buttons.cancel){
                            handleButton("no");
                        }else{
                            handleButton("cancel");
                        }
                    }
                });
                buttons =3D {};
                var bt =3D this.buttonText;
                =0A=
                buttons["ok"] =3D dlg.addButton(bt["ok"], =
handleButton.createCallback("ok"));
                buttons["yes"] =3D dlg.addButton(bt["yes"], =
handleButton.createCallback("yes"));
                buttons["no"] =3D dlg.addButton(bt["no"], =
handleButton.createCallback("no"));
                buttons["cancel"] =3D dlg.addButton(bt["cancel"], =
handleButton.createCallback("cancel"));
                buttons["ok"].hideMode =3D buttons["yes"].hideMode =3D =
buttons["no"].hideMode =3D buttons["cancel"].hideMode =3D 'offsets';
                dlg.render(document.body);
                dlg.getEl().addClass('x-window-dlg');
                mask =3D dlg.mask;
                bodyEl =3D dlg.body.createChild({
                    html:'<div class=3D"ext-mb-icon"></div><div =
class=3D"ext-mb-content"><span class=3D"ext-mb-text"></span><br /><div =
class=3D"ext-mb-fix-cursor"><input type=3D"text" class=3D"ext-mb-input" =
/><textarea class=3D"ext-mb-textarea"></textarea></div></div>'
                });
                iconEl =3D Ext.get(bodyEl.dom.firstChild);
                var contentEl =3D bodyEl.dom.childNodes[1];
                msgEl =3D Ext.get(contentEl.firstChild);
                textboxEl =3D =
Ext.get(contentEl.childNodes[2].firstChild);
                textboxEl.enableDisplayMode();
                textboxEl.addKeyListener([10,13], function(){
                    if(dlg.isVisible() && opt && opt.buttons){
                        if(opt.buttons.ok){
                            handleButton("ok");
                        }else if(opt.buttons.yes){
                            handleButton("yes");
                        }
                    }
                });
                textareaEl =3D =
Ext.get(contentEl.childNodes[2].childNodes[1]);
                textareaEl.enableDisplayMode();
                progressBar =3D new Ext.ProgressBar({
                    renderTo:bodyEl
                });
               bodyEl.createChild({cls:'x-clear'});
            }
            return dlg;
        },

       =20
        updateText : function(text){
            if(!dlg.isVisible() && !opt.width){
                dlg.setSize(this.maxWidth, 100); =0A=
            }
            msgEl.update(text || '&#160;');

            var iw =3D iconCls !=3D '' ? (iconEl.getWidth() + =
iconEl.getMargins('lr')) : 0;
            var mw =3D msgEl.getWidth() + msgEl.getMargins('lr');
            var fw =3D dlg.getFrameWidth('lr');
            var bw =3D dlg.body.getFrameWidth('lr');
            if (Ext.isIE && iw > 0){
                =0A=
                =0A=
                iw +=3D 3;
            }
            var w =3D Math.max(Math.min(opt.width || iw+mw+fw+bw, =
this.maxWidth),
                        Math.max(opt.minWidth || this.minWidth, bwidth =
|| 0));

            if(opt.prompt =3D=3D=3D true){
                activeTextEl.setWidth(w-iw-fw-bw);
            }
            if(opt.progress =3D=3D=3D true || opt.wait =3D=3D=3D true){
                progressBar.setSize(w-iw-fw-bw);
            }
            dlg.setSize(w, 'auto').center();
            return this;
        },

       =20
        updateProgress : function(value, progressText, msg){
            progressBar.updateProgress(value, progressText);
            if(msg){
                this.updateText(msg);
            }
            return this;
        },

       =20
        isVisible : function(){
            return dlg && dlg.isVisible();
        },

       =20
        hide : function(){
            if(this.isVisible()){
                dlg.hide();
                handleHide();
            }
            return this;
        },

       =20
        show : function(options){
            if(this.isVisible()){
                this.hide();
            }
            opt =3D options;
            var d =3D this.getDialog(opt.title || "&#160;");

            d.setTitle(opt.title || "&#160;");
            var allowClose =3D (opt.closable !=3D=3D false && =
opt.progress !=3D=3D true && opt.wait !=3D=3D true);
            d.tools.close.setDisplayed(allowClose);
            activeTextEl =3D textboxEl;
            opt.prompt =3D opt.prompt || (opt.multiline ? true : false);
            if(opt.prompt){
                if(opt.multiline){
                    textboxEl.hide();
                    textareaEl.show();
                    textareaEl.setHeight(typeof opt.multiline =3D=3D =
"number" ?
                        opt.multiline : this.defaultTextHeight);
                    activeTextEl =3D textareaEl;
                }else{
                    textboxEl.show();
                    textareaEl.hide();
                }
            }else{
                textboxEl.hide();
                textareaEl.hide();
            }
            activeTextEl.dom.value =3D opt.value || "";
            if(opt.prompt){
                d.focusEl =3D activeTextEl;
            }else{
                var bs =3D opt.buttons;
                var db =3D null;
                if(bs && bs.ok){
                    db =3D buttons["ok"];
                }else if(bs && bs.yes){
                    db =3D buttons["yes"];
                }
                if (db){
                    d.focusEl =3D db;
                }
            }
            if(opt.iconCls){
            	d.setIconClass(opt.iconCls);
            }
            this.setIcon(opt.icon);
            bwidth =3D updateButtons(opt.buttons);
            progressBar.setVisible(opt.progress =3D=3D=3D true || =
opt.wait =3D=3D=3D true);
            this.updateProgress(0, opt.progressText);
            this.updateText(opt.msg);
            if(opt.cls){
                d.el.addClass(opt.cls);
            }
            d.proxyDrag =3D opt.proxyDrag =3D=3D=3D true;
            d.modal =3D opt.modal !=3D=3D false;
            d.mask =3D opt.modal !=3D=3D false ? mask : false;
            if(!d.isVisible()){
                =0A=
                document.body.appendChild(dlg.el.dom);
                d.setAnimateTarget(opt.animEl);
                d.show(opt.animEl);
            }

            =0A=
            d.on('show', function(){
                if(allowClose =3D=3D=3D true){
                    d.keyMap.enable();
                }else{
                    d.keyMap.disable();
                }
            }, this, {single:true});

            if(opt.wait =3D=3D=3D true){
                progressBar.wait(opt.waitConfig);
            }
            return this;
        },

       =20
        setIcon : function(icon){
            if(icon && icon !=3D ''){
                iconEl.removeClass('x-hidden');
                iconEl.replaceClass(iconCls, icon);
                iconCls =3D icon;
            }else{
                iconEl.replaceClass(iconCls, 'x-hidden');
                iconCls =3D '';
            }
            return this;
        },

       =20
        progress : function(title, msg, progressText){
            this.show({
                title : title,
                msg : msg,
                buttons: false,
                progress:true,
                closable:false,
                minWidth: this.minProgressWidth,
                progressText: progressText
            });
            return this;
        },

       =20
        wait : function(msg, title, config){
            this.show({
                title : title,
                msg : msg,
                buttons: false,
                closable:false,
                wait:true,
                modal:true,
                minWidth: this.minProgressWidth,
                waitConfig: config
            });
            return this;
        },

       =20
        alert : function(title, msg, fn, scope){
            this.show({
                title : title,
                msg : msg,
                buttons: this.OK,
                fn: fn,
                scope : scope
            });
            return this;
        },

       =20
        confirm : function(title, msg, fn, scope){
            this.show({
                title : title,
                msg : msg,
                buttons: this.YESNO,
                fn: fn,
                scope : scope,
                icon: this.QUESTION
            });
            return this;
        },

       =20
        prompt : function(title, msg, fn, scope, multiline, value){
            this.show({
                title : title,
                msg : msg,
                buttons: this.OKCANCEL,
                fn: fn,
                minWidth:250,
                scope : scope,
                prompt:true,
                multiline: multiline,
                value: value
            });
            return this;
        },

       =20
        OK : {ok:true},
       =20
        CANCEL : {cancel:true},
       =20
        OKCANCEL : {ok:true, cancel:true},
       =20
        YESNO : {yes:true, no:true},
       =20
        YESNOCANCEL : {yes:true, no:true, cancel:true},
       =20
        INFO : 'ext-mb-info',
       =20
        WARNING : 'ext-mb-warning',
       =20
        QUESTION : 'ext-mb-question',
       =20
        ERROR : 'ext-mb-error',

       =20
        defaultTextHeight : 75,
       =20
        maxWidth : 600,
       =20
        minWidth : 100,
       =20
        minProgressWidth : 250,
       =20
        buttonText : {
            ok : "OK",
            cancel : "Cancel",
            yes : "Yes",
            no : "No"
        }
    };
}();


Ext.Msg =3D Ext.MessageBox;=0A=

Ext.Tip =3D Ext.extend(Ext.Panel, {
   =20
   =20
   =20
    minWidth : 40,
   =20
    maxWidth : 300,
   =20
    shadow : "sides",
   =20
    defaultAlign : "tl-bl?",
    autoRender: true,
    quickShowInterval : 250,

    =0A=
    frame:true,
    hidden:true,
    baseCls: 'x-tip',
    floating:{shadow:true,shim:true,useDisplay:true,constrain:false},
    autoHeight:true,

    =0A=
    initComponent : function(){
        Ext.Tip.superclass.initComponent.call(this);
        if(this.closable && !this.title){
            this.elements +=3D ',header';
        }
    },

    =0A=
    afterRender : function(){
        Ext.Tip.superclass.afterRender.call(this);
        if(this.closable){
            this.addTool({
                id: 'close',
                handler: this.hide,
                scope: this
            });
        }
    },

   =20
    showAt : function(xy){
        Ext.Tip.superclass.show.call(this);
        if(this.measureWidth !=3D=3D false && (!this.initialConfig || =
typeof this.initialConfig.width !=3D 'number')){
            this.doAutoWidth();
        }
        if(this.constrainPosition){
            xy =3D this.el.adjustForConstraints(xy);
        }
        this.setPagePosition(xy[0], xy[1]);
    },

    =0A=
    doAutoWidth : function(){
        var bw =3D this.body.getTextWidth();
        if(this.title){
            bw =3D Math.max(bw, =
this.header.child('span').getTextWidth(this.title));
        }
        bw +=3D this.getFrameWidth() + (this.closable ? 20 : 0) + =
this.body.getPadding("lr");
        this.setWidth(bw.constrain(this.minWidth, this.maxWidth));
    },

   =20
    showBy : function(el, pos){
        if(!this.rendered){
            this.render(Ext.getBody());
        }
        this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign));
    },

    initDraggable : function(){
        this.dd =3D new Ext.Tip.DD(this, typeof this.draggable =3D=3D =
'boolean' ? null : this.draggable);
        this.header.addClass('x-tip-draggable');
    }
});

=0A=
Ext.Tip.DD =3D function(tip, config){
    Ext.apply(this, config);
    this.tip =3D tip;
    Ext.Tip.DD.superclass.constructor.call(this, tip.el.id, =
'WindowDD-'+tip.id);
    this.setHandleElId(tip.header.id);
    this.scroll =3D false;
};

Ext.extend(Ext.Tip.DD, Ext.dd.DD, {
    moveOnly:true,
    scroll:false,
    headerOffsets:[100, 25],
    startDrag : function(){
        this.tip.el.disableShadow();
    },
    endDrag : function(e){
        this.tip.el.enableShadow(true);
    }
});=0A=

Ext.ToolTip =3D Ext.extend(Ext.Tip, {
   =20
   =20
   =20
    showDelay: 500,
   =20
    hideDelay: 200,
   =20
    dismissDelay: 5000,
   =20
    mouseOffset: [15,18],
   =20
    trackMouse : false,
    constrainPosition: true,

    =0A=
    initComponent: function(){
        Ext.ToolTip.superclass.initComponent.call(this);
        this.lastActive =3D new Date();
        this.initTarget();
    },

    =0A=
    initTarget : function(){
        if(this.target){
            this.target =3D Ext.get(this.target);
            this.target.on('mouseover', this.onTargetOver, this);
            this.target.on('mouseout', this.onTargetOut, this);
            this.target.on('mousemove', this.onMouseMove, this);
        }
    },

    =0A=
    onMouseMove : function(e){
        this.targetXY =3D e.getXY();
        if(!this.hidden && this.trackMouse){
            this.setPagePosition(this.getTargetXY());
        }
    },

    =0A=
    getTargetXY : function(){
        return [this.targetXY[0]+this.mouseOffset[0], =
this.targetXY[1]+this.mouseOffset[1]];
    },

    =0A=
    onTargetOver : function(e){
        if(this.disabled || e.within(this.target.dom, true)){
            return;
        }
        this.clearTimer('hide');
        this.targetXY =3D e.getXY();
        this.delayShow();
    },

    =0A=
    delayShow : function(){
        if(this.hidden && !this.showTimer){
            if(this.lastActive.getElapsed() < this.quickShowInterval){
                this.show();
            }else{
                this.showTimer =3D this.show.defer(this.showDelay, =
this);
            }
        }else if(!this.hidden && this.autoHide !=3D=3D false){
            this.show();
        }
    },

    =0A=
    onTargetOut : function(e){
        if(this.disabled || e.within(this.target.dom, true)){
            return;
        }
        this.clearTimer('show');
        if(this.autoHide !=3D=3D false){
            this.delayHide();
        }
    },

    =0A=
    delayHide : function(){
        if(!this.hidden && !this.hideTimer){
            this.hideTimer =3D this.hide.defer(this.hideDelay, this);
        }
    },

   =20
    hide: function(){
        this.clearTimer('dismiss');
        this.lastActive =3D new Date();
        Ext.ToolTip.superclass.hide.call(this);
    },

   =20
    show : function(){
        this.showAt(this.getTargetXY());
    },

    =0A=
    showAt : function(xy){
        this.lastActive =3D new Date();
        this.clearTimers();
        Ext.ToolTip.superclass.showAt.call(this, xy);
        if(this.dismissDelay && this.autoHide !=3D=3D false){
            this.dismissTimer =3D this.hide.defer(this.dismissDelay, =
this);
        }
    },

    =0A=
    clearTimer : function(name){
        name =3D name + 'Timer';
        clearTimeout(this[name]);
        delete this[name];
    },

    =0A=
    clearTimers : function(){
        this.clearTimer('show');
        this.clearTimer('dismiss');
        this.clearTimer('hide');
    },

    =0A=
    onShow : function(){
        Ext.ToolTip.superclass.onShow.call(this);
        Ext.getDoc().on('mousedown', this.onDocMouseDown, this);
    },

    =0A=
    onHide : function(){
        Ext.ToolTip.superclass.onHide.call(this);
        Ext.getDoc().un('mousedown', this.onDocMouseDown, this);
    },

    =0A=
    onDocMouseDown : function(e){
        if(this.autoHide !=3D=3D false && !e.within(this.el.dom)){
            this.disable();
            this.enable.defer(100, this);
        }
    },

    =0A=
    onDisable : function(){
        this.clearTimers();
        this.hide();
    },

    =0A=
    adjustPosition : function(x, y){
        =0A=
        var ay =3D this.targetXY[1], h =3D this.getSize().height;
        if(this.constrainPosition && y <=3D ay && (y+h) >=3D ay){
            y =3D ay-h-5;
        }
        return {x : x, y: y};
    },

    =0A=
    onDestroy : function(){
        Ext.ToolTip.superclass.onDestroy.call(this);
        if(this.target){
            this.target.un('mouseover', this.onTargetOver, this);
            this.target.un('mouseout', this.onTargetOut, this);
            this.target.un('mousemove', this.onMouseMove, this);
        }
    }
});=0A=

Ext.QuickTip =3D Ext.extend(Ext.ToolTip, {
   =20
   =20
    interceptTitles : false,

    =0A=
    tagConfig : {
        namespace : "ext",
        attribute : "qtip",
        width : "qwidth",
        target : "target",
        title : "qtitle",
        hide : "hide",
        cls : "qclass",
        align : "qalign"
    },

    =0A=
    initComponent : function(){
        this.target =3D this.target || Ext.getDoc();
        this.targets =3D this.targets || {};
        Ext.QuickTip.superclass.initComponent.call(this);
    },

   =20
    register : function(config){
        var cs =3D Ext.isArray(config) ? config : arguments;
        for(var i =3D 0, len =3D cs.length; i < len; i++){
            var c =3D cs[i];
            var target =3D c.target;
            if(target){
                if(Ext.isArray(target)){
                    for(var j =3D 0, jlen =3D target.length; j < jlen; =
j++){
                        this.targets[Ext.id(target[j])] =3D c;
                    }
                } else{
                    this.targets[Ext.id(target)] =3D c;
                }
            }
        }
    },

   =20
    unregister : function(el){
        delete this.targets[Ext.id(el)];
    },

    =0A=
    onTargetOver : function(e){
        if(this.disabled){
            return;
        }
        this.targetXY =3D e.getXY();
        var t =3D e.getTarget();
        if(!t || t.nodeType !=3D=3D 1 || t =3D=3D document || t =3D=3D =
document.body){
            return;
        }
        if(this.activeTarget && t =3D=3D this.activeTarget.el){
            this.clearTimer('hide');
            this.show();
            return;
        }
        if(t && this.targets[t.id]){
            this.activeTarget =3D this.targets[t.id];
            this.activeTarget.el =3D t;
            this.delayShow();
            return;
        }
        var ttp, et =3D Ext.fly(t), cfg =3D this.tagConfig;
        var ns =3D cfg.namespace;
        if(this.interceptTitles && t.title){
            ttp =3D t.title;
            t.qtip =3D ttp;
            t.removeAttribute("title");
            e.preventDefault();
        } else{
            ttp =3D t.qtip || et.getAttributeNS(ns, cfg.attribute);
        }
        if(ttp){
            var autoHide =3D et.getAttributeNS(ns, cfg.hide);
            this.activeTarget =3D {
                el: t,
                text: ttp,
                width: et.getAttributeNS(ns, cfg.width),
                autoHide: autoHide !=3D "user" && autoHide !=3D=3D =
'false',
                title: et.getAttributeNS(ns, cfg.title),
                cls: et.getAttributeNS(ns, cfg.cls),
                align: et.getAttributeNS(ns, cfg.align)
            };
            this.delayShow();
        }
    },

    =0A=
    onTargetOut : function(e){
        this.clearTimer('show');
        if(this.autoHide !=3D=3D false){
            this.delayHide();
        }
    },

    =0A=
    showAt : function(xy){
        var t =3D this.activeTarget;
        if(t){
            if(!this.rendered){
                this.render(Ext.getBody());
                this.activeTarget =3D t;
            }
            if(t.width){
                this.setWidth(t.width);
                this.body.setWidth(this.adjustBodyWidth(t.width - =
this.getFrameWidth()));
                this.measureWidth =3D false;
            } else{
                this.measureWidth =3D true;
            }
            this.setTitle(t.title || '');
            this.body.update(t.text);
            this.autoHide =3D t.autoHide;
            this.dismissDelay =3D t.dismissDelay || this.dismissDelay;
            if(this.lastCls){
                this.el.removeClass(this.lastCls);
                delete this.lastCls;
            }
            if(t.cls){
                this.el.addClass(t.cls);
                this.lastCls =3D t.cls;
            }
            if(t.align){ =0A=
                xy =3D this.el.getAlignToXY(t.el, t.align);
                this.constrainPosition =3D false;
            } else{
                this.constrainPosition =3D true;
            }
        }
        Ext.QuickTip.superclass.showAt.call(this, xy);
    },

    =0A=
    hide: function(){
        delete this.activeTarget;
        Ext.QuickTip.superclass.hide.call(this);
    }
});=0A=

Ext.QuickTips =3D function(){
    var tip, locks =3D [];
    return {
       =20
        init : function(){
            if(!tip){
                tip =3D new Ext.QuickTip({elements:'header,body'});
            }
        },

       =20
        enable : function(){
            if(tip){
                locks.pop();
                if(locks.length < 1){
                    tip.enable();
                }
            }
        },

       =20
        disable : function(){
            if(tip){
                tip.disable();
            }
            locks.push(1);
        },

       =20
        isEnabled : function(){
            return tip !=3D=3D undefined && !tip.disabled;
        },

       =20
        getQuickTip : function(){
            return tip;
        },

       =20
        register : function(){
            tip.register.apply(tip, arguments);
        },

       =20
        unregister : function(){
            tip.unregister.apply(tip, arguments);
        },

       =20
        tips :function(){
            tip.register.apply(tip, arguments);
        }
    }
}();=0A=

Ext.tree.TreePanel =3D Ext.extend(Ext.Panel, {
    rootVisible : true,
    animate: Ext.enableFx,
    lines : true,
    enableDD : false,
    hlDrop : Ext.enableFx,
    pathSeparator: "/",

    initComponent : function(){
        Ext.tree.TreePanel.superclass.initComponent.call(this);

        if(!this.eventModel){
            this.eventModel =3D new Ext.tree.TreeEventModel(this);
        }
       =20
        this.nodeHash =3D {};

       =20
        if(this.root){
           this.setRootNode(this.root);
        }

        this.addEvents(

           =20
           "append",
          =20
           "remove",
          =20
           "movenode",
          =20
           "insert",
          =20
           "beforeappend",
          =20
           "beforeremove",
          =20
           "beforemovenode",
          =20
            "beforeinsert",

           =20
            "beforeload",
           =20
            "load",
           =20
            "textchange",
           =20
            "beforeexpandnode",
           =20
            "beforecollapsenode",
           =20
            "expandnode",
           =20
            "disabledchange",
           =20
            "collapsenode",
           =20
            "beforeclick",
           =20
            "click",
           =20
            "checkchange",
           =20
            "dblclick",
           =20
            "contextmenu",
           =20
            "beforechildrenrendered",
          =20
            "startdrag",
           =20
            "enddrag",
           =20
            "dragdrop",
           =20
            "beforenodedrop",
           =20
            "nodedrop",
            =20
            "nodedragover"
        );
        if(this.singleExpand){
            this.on("beforeexpandnode", this.restrictExpand, this);
        }
    },

    =0A=
    proxyNodeEvent : function(ename, a1, a2, a3, a4, a5, a6){
        if(ename =3D=3D 'collapse' || ename =3D=3D 'expand' || ename =
=3D=3D 'beforecollapse' || ename =3D=3D 'beforeexpand' || ename =3D=3D =
'move' || ename =3D=3D 'beforemove'){
            ename =3D ename+'node';
        }
        =0A=
        return this.fireEvent(ename, a1, a2, a3, a4, a5, a6);
    },


   =20
    getRootNode : function(){
        return this.root;
    },

   =20
    setRootNode : function(node){
        this.root =3D node;
        node.ownerTree =3D this;
        node.isRoot =3D true;
        this.registerNode(node);
        if(!this.rootVisible){
        	var uiP =3D node.attributes.uiProvider;
        	node.ui =3D uiP ? new uiP(node) : new =
Ext.tree.RootTreeNodeUI(node);=20
        }
        return node;
    },

   =20
    getNodeById : function(id){
        return this.nodeHash[id];
    },

    =0A=
    registerNode : function(node){
        this.nodeHash[node.id] =3D node;
    },

    =0A=
    unregisterNode : function(node){
        delete this.nodeHash[node.id];
    },

    =0A=
    toString : function(){
        return "[Tree"+(this.id?" "+this.id:"")+"]";
    },

    =0A=
    restrictExpand : function(node){
        var p =3D node.parentNode;
        if(p){
            if(p.expandedChild && p.expandedChild.parentNode =3D=3D p){
                p.expandedChild.collapse();
            }
            p.expandedChild =3D node;
        }
    },

   =20
    getChecked : function(a, startNode){
        startNode =3D startNode || this.root;
        var r =3D [];
        var f =3D function(){
            if(this.attributes.checked){
                r.push(!a ? this : (a =3D=3D 'id' ? this.id : =
this.attributes[a]));
            }
        }
        startNode.cascade(f);
        return r;
    },

   =20
    getEl : function(){
        return this.el;
    },

   =20
    getLoader : function(){
        return this.loader;
    },

   =20
    expandAll : function(){
        this.root.expand(true);
    },

   =20
    collapseAll : function(){
        this.root.collapse(true);
    },

   =20
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel =3D new Ext.tree.DefaultSelectionModel();
        }
        return this.selModel;
    },

   =20
    expandPath : function(path, attr, callback){
        attr =3D attr || "id";
        var keys =3D path.split(this.pathSeparator);
        var curNode =3D this.root;
        if(curNode.attributes[attr] !=3D keys[1]){ =0A=
            if(callback){
                callback(false, null);
            }
            return;
        }
        var index =3D 1;
        var f =3D function(){
            if(++index =3D=3D keys.length){
                if(callback){
                    callback(true, curNode);
                }
                return;
            }
            var c =3D curNode.findChild(attr, keys[index]);
            if(!c){
                if(callback){
                    callback(false, curNode);
                }
                return;
            }
            curNode =3D c;
            c.expand(false, false, f);
        };
        curNode.expand(false, false, f);
    },

   =20
    selectPath : function(path, attr, callback){
        attr =3D attr || "id";
        var keys =3D path.split(this.pathSeparator);
        var v =3D keys.pop();
        if(keys.length > 0){
            var f =3D function(success, node){
                if(success && node){
                    var n =3D node.findChild(attr, v);
                    if(n){
                        n.select();
                        if(callback){
                            callback(true, n);
                        }
                    }else if(callback){
                        callback(false, n);
                    }
                }else{
                    if(callback){
                        callback(false, n);
                    }
                }
            };
            this.expandPath(keys.join(this.pathSeparator), attr, f);
        }else{
            this.root.select();
            if(callback){
                callback(true, this.root);
            }
        }
    },

   =20
    getTreeEl : function(){
        return this.body;
    },

    =0A=
    onRender : function(ct, position){
        Ext.tree.TreePanel.superclass.onRender.call(this, ct, position);
        this.el.addClass('x-tree');
        this.innerCt =3D this.body.createChild({tag:"ul",
               cls:"x-tree-root-ct " +
               (this.useArrows ? 'x-tree-arrows' : this.lines ? =
"x-tree-lines" : "x-tree-no-lines")});
    },

    =0A=
    initEvents : function(){
        Ext.tree.TreePanel.superclass.initEvents.call(this);

        if(this.containerScroll){
            Ext.dd.ScrollManager.register(this.body);
        }
        if((this.enableDD || this.enableDrop) && !this.dropZone){
          =20
             this.dropZone =3D new Ext.tree.TreeDropZone(this, =
this.dropConfig || {
               ddGroup: this.ddGroup || "TreeDD", appendOnly: =
this.ddAppendOnly =3D=3D=3D true
           });
        }
        if((this.enableDD || this.enableDrag) && !this.dragZone){
          =20
            this.dragZone =3D new Ext.tree.TreeDragZone(this, =
this.dragConfig || {
               ddGroup: this.ddGroup || "TreeDD",
               scroll: this.ddScroll
           });
        }
        this.getSelectionModel().init(this);
    },

    =0A=
    afterRender : function(){
        Ext.tree.TreePanel.superclass.afterRender.call(this);
        this.root.render();
        if(!this.rootVisible){
            this.root.renderChildren();
        }
    },

    onDestroy : function(){
        if(this.rendered){
            this.body.removeAllListeners();
            Ext.dd.ScrollManager.unregister(this.body);
            if(this.dropZone){
                this.dropZone.unreg();
            }
            if(this.dragZone){
               this.dragZone.unreg();
            }
        }
        this.root.destroy();
        this.nodeHash =3D null;
        Ext.tree.TreePanel.superclass.onDestroy.call(this);
    }
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20



   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
});
Ext.reg('treepanel', Ext.tree.TreePanel);=0A=
Ext.tree.TreeEventModel =3D function(tree){
    this.tree =3D tree;
    this.tree.on('render', this.initEvents, this);
}

Ext.tree.TreeEventModel.prototype =3D {
    initEvents : function(){
        var el =3D this.tree.getTreeEl();
        el.on('click', this.delegateClick, this);
        if(this.tree.trackMouseOver !=3D=3D false){
            el.on('mouseover', this.delegateOver, this);
            el.on('mouseout', this.delegateOut, this);
        }
        el.on('dblclick', this.delegateDblClick, this);
        el.on('contextmenu', this.delegateContextMenu, this);
    },

    getNode : function(e){
        var t;
        if(t =3D e.getTarget('.x-tree-node-el', 10)){
            var id =3D Ext.fly(t, '_treeEvents').getAttributeNS('ext', =
'tree-node-id');
            if(id){
                return this.tree.getNodeById(id);
            }
        }
        return null;
    },

    getNodeTarget : function(e){
        var t =3D e.getTarget('.x-tree-node-icon', 1);
        if(!t){
            t =3D e.getTarget('.x-tree-node-el', 6);
        }
        return t;
    },

    delegateOut : function(e, t){
        if(!this.beforeEvent(e)){
            return;
        }
        if(e.getTarget('.x-tree-ec-icon', 1)){
            var n =3D this.getNode(e);
            this.onIconOut(e, n);
            if(n =3D=3D this.lastEcOver){
                delete this.lastEcOver;
            }
        }
        if((t =3D this.getNodeTarget(e)) && !e.within(t, true)){
            this.onNodeOut(e, this.getNode(e));
        }
    },

    delegateOver : function(e, t){
        if(!this.beforeEvent(e)){
            return;
        }
        if(this.lastEcOver){ =0A=
            this.onIconOut(e, this.lastEcOver);
            delete this.lastEcOver;
        }
        if(e.getTarget('.x-tree-ec-icon', 1)){
            this.lastEcOver =3D this.getNode(e);
            this.onIconOver(e, this.lastEcOver);
        }
        if(t =3D this.getNodeTarget(e)){
            this.onNodeOver(e, this.getNode(e));
        }
    },

    delegateClick : function(e, t){
        if(!this.beforeEvent(e)){
            return;
        }

        if(e.getTarget('input[type=3Dcheckbox]', 1)){
            this.onCheckboxClick(e, this.getNode(e));
        }
        else if(e.getTarget('.x-tree-ec-icon', 1)){
            this.onIconClick(e, this.getNode(e));
        }
        else if(this.getNodeTarget(e)){
            this.onNodeClick(e, this.getNode(e));
        }
    },

    delegateDblClick : function(e, t){
        if(this.beforeEvent(e) && this.getNodeTarget(e)){
            this.onNodeDblClick(e, this.getNode(e));
        }
    },

    delegateContextMenu : function(e, t){
        if(this.beforeEvent(e) && this.getNodeTarget(e)){
            this.onNodeContextMenu(e, this.getNode(e));
        }
    },

    onNodeClick : function(e, node){
        node.ui.onClick(e);
    },

    onNodeOver : function(e, node){
        node.ui.onOver(e);
    },

    onNodeOut : function(e, node){
        node.ui.onOut(e);
    },

    onIconOver : function(e, node){
        node.ui.addClass('x-tree-ec-over');
    },

    onIconOut : function(e, node){
        node.ui.removeClass('x-tree-ec-over');
    },

    onIconClick : function(e, node){
        node.ui.ecClick(e);
    },

    onCheckboxClick : function(e, node){
        node.ui.onCheckChange(e);
    },

    onNodeDblClick : function(e, node){
        node.ui.onDblClick(e);
    },

    onNodeContextMenu : function(e, node){
        node.ui.onContextMenu(e);
    },

    beforeEvent : function(e){
        if(this.disabled){
            e.stopEvent();
            return false;
        }
        return true;
    },

    disable: function(){
        this.disabled =3D true;
    },

    enable: function(){
        this.disabled =3D false;
    }
};=0A=

Ext.tree.DefaultSelectionModel =3D function(config){
   this.selNode =3D null;
  =20
   this.addEvents(
      =20
       "selectionchange",

      =20
       "beforeselect"
   );

    Ext.apply(this, config);
    Ext.tree.DefaultSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.tree.DefaultSelectionModel, Ext.util.Observable, {
    init : function(tree){
        this.tree =3D tree;
        tree.getTreeEl().on("keydown", this.onKeyDown, this);
        tree.on("click", this.onNodeClick, this);
    },
   =20
    onNodeClick : function(node, e){
        this.select(node);
    },
   =20
   =20
    select : function(node){
        var last =3D this.selNode;
        if(last !=3D node && this.fireEvent('beforeselect', this, node, =
last) !=3D=3D false){
            if(last){
                last.ui.onSelectedChange(false);
            }
            this.selNode =3D node;
            node.ui.onSelectedChange(true);
            this.fireEvent("selectionchange", this, node, last);
        }
        return node;
    },
   =20
   =20
    unselect : function(node){
        if(this.selNode =3D=3D node){
            this.clearSelections();
        }   =20
    },
   =20
   =20
    clearSelections : function(){
        var n =3D this.selNode;
        if(n){
            n.ui.onSelectedChange(false);
            this.selNode =3D null;
            this.fireEvent("selectionchange", this, null);
        }
        return n;
    },
   =20
   =20
    getSelectedNode : function(){
        return this.selNode;   =20
    },
   =20
   =20
    isSelected : function(node){
        return this.selNode =3D=3D node; =20
    },

   =20
    selectPrevious : function(){
        var s =3D this.selNode || this.lastSelNode;
        if(!s){
            return null;
        }
        var ps =3D s.previousSibling;
        if(ps){
            if(!ps.isExpanded() || ps.childNodes.length < 1){
                return this.select(ps);
            } else{
                var lc =3D ps.lastChild;
                while(lc && lc.isExpanded() && lc.childNodes.length > =
0){
                    lc =3D lc.lastChild;
                }
                return this.select(lc);
            }
        } else if(s.parentNode && (this.tree.rootVisible || =
!s.parentNode.isRoot)){
            return this.select(s.parentNode);
        }
        return null;
    },

   =20
    selectNext : function(){
        var s =3D this.selNode || this.lastSelNode;
        if(!s){
            return null;
        }
        if(s.firstChild && s.isExpanded()){
             return this.select(s.firstChild);
         }else if(s.nextSibling){
             return this.select(s.nextSibling);
         }else if(s.parentNode){
            var newS =3D null;
            s.parentNode.bubble(function(){
                if(this.nextSibling){
                    newS =3D =
this.getOwnerTree().selModel.select(this.nextSibling);
                    return false;
                }
            });
            return newS;
         }
        return null;
    },

    onKeyDown : function(e){
        var s =3D this.selNode || this.lastSelNode;
        =0A=
        var sm =3D this;
        if(!s){
            return;
        }
        var k =3D e.getKey();
        switch(k){
             case e.DOWN:
                 e.stopEvent();
                 this.selectNext();
             break;
             case e.UP:
                 e.stopEvent();
                 this.selectPrevious();
             break;
             case e.RIGHT:
                 e.preventDefault();
                 if(s.hasChildNodes()){
                     if(!s.isExpanded()){
                         s.expand();
                     }else if(s.firstChild){
                         this.select(s.firstChild, e);
                     }
                 }
             break;
             case e.LEFT:
                 e.preventDefault();
                 if(s.hasChildNodes() && s.isExpanded()){
                     s.collapse();
                 }else if(s.parentNode && (this.tree.rootVisible || =
s.parentNode !=3D this.tree.getRootNode())){
                     this.select(s.parentNode, e);
                 }
             break;
        };
    }
});


Ext.tree.MultiSelectionModel =3D function(config){
   this.selNodes =3D [];
   this.selMap =3D {};
   this.addEvents(
      =20
       "selectionchange"
   );
    Ext.apply(this, config);
    Ext.tree.MultiSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.tree.MultiSelectionModel, Ext.util.Observable, {
    init : function(tree){
        this.tree =3D tree;
        tree.getTreeEl().on("keydown", this.onKeyDown, this);
        tree.on("click", this.onNodeClick, this);
    },
   =20
    onNodeClick : function(node, e){
        this.select(node, e, e.ctrlKey);
    },
   =20
   =20
    select : function(node, e, keepExisting){
        if(keepExisting !=3D=3D true){
            this.clearSelections(true);
        }
        if(this.isSelected(node)){
            this.lastSelNode =3D node;
            return node;
        }
        this.selNodes.push(node);
        this.selMap[node.id] =3D node;
        this.lastSelNode =3D node;
        node.ui.onSelectedChange(true);
        this.fireEvent("selectionchange", this, this.selNodes);
        return node;
    },
   =20
   =20
    unselect : function(node){
        if(this.selMap[node.id]){
            node.ui.onSelectedChange(false);
            var sn =3D this.selNodes;
            var index =3D sn.indexOf(node);
            if(index !=3D -1){
                this.selNodes.splice(index, 1);
            }
            delete this.selMap[node.id];
            this.fireEvent("selectionchange", this, this.selNodes);
        }
    },
   =20
   =20
    clearSelections : function(suppressEvent){
        var sn =3D this.selNodes;
        if(sn.length > 0){
            for(var i =3D 0, len =3D sn.length; i < len; i++){
                sn[i].ui.onSelectedChange(false);
            }
            this.selNodes =3D [];
            this.selMap =3D {};
            if(suppressEvent !=3D=3D true){
                this.fireEvent("selectionchange", this, this.selNodes);
            }
        }
    },
   =20
   =20
    isSelected : function(node){
        return this.selMap[node.id] ? true : false; =20
    },
   =20
   =20
    getSelectedNodes : function(){
        return this.selNodes;   =20
    },

    onKeyDown : Ext.tree.DefaultSelectionModel.prototype.onKeyDown,

    selectNext : Ext.tree.DefaultSelectionModel.prototype.selectNext,

    selectPrevious : =
Ext.tree.DefaultSelectionModel.prototype.selectPrevious
});=0A=

Ext.tree.TreeNode =3D function(attributes){
    attributes =3D attributes || {};
    if(typeof attributes =3D=3D "string"){
        attributes =3D {text: attributes};
    }
    this.childrenRendered =3D false;
    this.rendered =3D false;
    Ext.tree.TreeNode.superclass.constructor.call(this, attributes);
    this.expanded =3D attributes.expanded =3D=3D=3D true;
    this.isTarget =3D attributes.isTarget !=3D=3D false;
    this.draggable =3D attributes.draggable !=3D=3D false && =
attributes.allowDrag !=3D=3D false;
    this.allowChildren =3D attributes.allowChildren !=3D=3D false && =
attributes.allowDrop !=3D=3D false;

   =20
    this.text =3D attributes.text;
   =20
    this.disabled =3D attributes.disabled =3D=3D=3D true;

    this.addEvents(
       =20
        "textchange",
       =20
        "beforeexpand",
       =20
        "beforecollapse",
       =20
        "expand",
       =20
        "disabledchange",
       =20
        "collapse",
       =20
        "beforeclick",
       =20
        "click",
       =20
        "checkchange",
       =20
        "dblclick",
       =20
        "contextmenu",
       =20
        "beforechildrenrendered"
    );

    var uiClass =3D this.attributes.uiProvider || this.defaultUI || =
Ext.tree.TreeNodeUI;

   =20
    this.ui =3D new uiClass(this);
};
Ext.extend(Ext.tree.TreeNode, Ext.data.Node, {
    preventHScroll: true,
   =20
    isExpanded : function(){
        return this.expanded;
    },


    getUI : function(){
        return this.ui;
    },

    =0A=
    setFirstChild : function(node){
        var of =3D this.firstChild;
        Ext.tree.TreeNode.superclass.setFirstChild.call(this, node);
        if(this.childrenRendered && of && node !=3D of){
            of.renderIndent(true, true);
        }
        if(this.rendered){
            this.renderIndent(true, true);
        }
    },

    =0A=
    setLastChild : function(node){
        var ol =3D this.lastChild;
        Ext.tree.TreeNode.superclass.setLastChild.call(this, node);
        if(this.childrenRendered && ol && node !=3D ol){
            ol.renderIndent(true, true);
        }
        if(this.rendered){
            this.renderIndent(true, true);
        }
    },

    =0A=
    =0A=
    appendChild : function(){
        var node =3D =
Ext.tree.TreeNode.superclass.appendChild.apply(this, arguments);
        if(node && this.childrenRendered){
            node.render();
        }
        this.ui.updateExpandIcon();
        return node;
    },

    =0A=
    removeChild : function(node){
        this.ownerTree.getSelectionModel().unselect(node);
        Ext.tree.TreeNode.superclass.removeChild.apply(this, arguments);
        =0A=
        if(this.childrenRendered){
            node.ui.remove();
        }
        if(this.childNodes.length < 1){
            this.collapse(false, false);
        }else{
            this.ui.updateExpandIcon();
        }
        if(!this.firstChild && !this.isHiddenRoot()) {
            this.childrenRendered =3D false;
        }
        return node;
    },

    =0A=
    insertBefore : function(node, refNode){
        var newNode =3D =
Ext.tree.TreeNode.superclass.insertBefore.apply(this, arguments);
        if(newNode && refNode && this.childrenRendered){
            node.render();
        }
        this.ui.updateExpandIcon();
        return newNode;
    },

   =20
    setText : function(text){
        var oldText =3D this.text;
        this.text =3D text;
        this.attributes.text =3D text;
        if(this.rendered){ =0A=
            this.ui.onTextChange(this, text, oldText);
        }
        this.fireEvent("textchange", this, text, oldText);
    },

   =20
    select : function(){
        this.getOwnerTree().getSelectionModel().select(this);
    },

   =20
    unselect : function(){
        this.getOwnerTree().getSelectionModel().unselect(this);
    },

   =20
    isSelected : function(){
        return this.getOwnerTree().getSelectionModel().isSelected(this);
    },

   =20
    expand : function(deep, anim, callback){
        if(!this.expanded){
            if(this.fireEvent("beforeexpand", this, deep, anim) =
=3D=3D=3D false){
                return;
            }
            if(!this.childrenRendered){
                this.renderChildren();
            }
            this.expanded =3D true;
            if(!this.isHiddenRoot() && (this.getOwnerTree().animate && =
anim !=3D=3D false) || anim){
                this.ui.animExpand(function(){
                    this.fireEvent("expand", this);
                    if(typeof callback =3D=3D "function"){
                        callback(this);
                    }
                    if(deep =3D=3D=3D true){
                        this.expandChildNodes(true);
                    }
                }.createDelegate(this));
                return;
            }else{
                this.ui.expand();
                this.fireEvent("expand", this);
                if(typeof callback =3D=3D "function"){
                    callback(this);
                }
            }
        }else{
           if(typeof callback =3D=3D "function"){
               callback(this);
           }
        }
        if(deep =3D=3D=3D true){
            this.expandChildNodes(true);
        }
    },

    isHiddenRoot : function(){
        return this.isRoot && !this.getOwnerTree().rootVisible;
    },

   =20
    collapse : function(deep, anim){
        if(this.expanded && !this.isHiddenRoot()){
            if(this.fireEvent("beforecollapse", this, deep, anim) =
=3D=3D=3D false){
                return;
            }
            this.expanded =3D false;
            if((this.getOwnerTree().animate && anim !=3D=3D false) || =
anim){
                this.ui.animCollapse(function(){
                    this.fireEvent("collapse", this);
                    if(deep =3D=3D=3D true){
                        this.collapseChildNodes(true);
                    }
                }.createDelegate(this));
                return;
            }else{
                this.ui.collapse();
                this.fireEvent("collapse", this);
            }
        }
        if(deep =3D=3D=3D true){
            var cs =3D this.childNodes;
            for(var i =3D 0, len =3D cs.length; i < len; i++) {
            	cs[i].collapse(true, false);
            }
        }
    },

    =0A=
    delayedExpand : function(delay){
        if(!this.expandProcId){
            this.expandProcId =3D this.expand.defer(delay, this);
        }
    },

    =0A=
    cancelExpand : function(){
        if(this.expandProcId){
            clearTimeout(this.expandProcId);
        }
        this.expandProcId =3D false;
    },

   =20
    toggle : function(){
        if(this.expanded){
            this.collapse();
        }else{
            this.expand();
        }
    },

   =20
    ensureVisible : function(callback){
        var tree =3D this.getOwnerTree();
        tree.expandPath(this.parentNode.getPath(), false, function(){
            var node =3D tree.getNodeById(this.id);  =0A=
            tree.getTreeEl().scrollChildIntoView(node.ui.anchor);
            Ext.callback(callback);
        }.createDelegate(this));
    },

   =20
    expandChildNodes : function(deep){
        var cs =3D this.childNodes;
        for(var i =3D 0, len =3D cs.length; i < len; i++) {
        	cs[i].expand(deep);
        }
    },

   =20
    collapseChildNodes : function(deep){
        var cs =3D this.childNodes;
        for(var i =3D 0, len =3D cs.length; i < len; i++) {
        	cs[i].collapse(deep);
        }
    },

   =20
    disable : function(){
        this.disabled =3D true;
        this.unselect();
        if(this.rendered && this.ui.onDisableChange){ =0A=
            this.ui.onDisableChange(this, true);
        }
        this.fireEvent("disabledchange", this, true);
    },

   =20
    enable : function(){
        this.disabled =3D false;
        if(this.rendered && this.ui.onDisableChange){ =0A=
            this.ui.onDisableChange(this, false);
        }
        this.fireEvent("disabledchange", this, false);
    },

    =0A=
    renderChildren : function(suppressEvent){
        if(suppressEvent !=3D=3D false){
            this.fireEvent("beforechildrenrendered", this);
        }
        var cs =3D this.childNodes;
        for(var i =3D 0, len =3D cs.length; i < len; i++){
            cs[i].render(true);
        }
        this.childrenRendered =3D true;
    },

    =0A=
    sort : function(fn, scope){
        Ext.tree.TreeNode.superclass.sort.apply(this, arguments);
        if(this.childrenRendered){
            var cs =3D this.childNodes;
            for(var i =3D 0, len =3D cs.length; i < len; i++){
                cs[i].render(true);
            }
        }
    },

    =0A=
    render : function(bulkRender){
        this.ui.render(bulkRender);
        if(!this.rendered){
            =0A=
            this.getOwnerTree().registerNode(this);
            this.rendered =3D true;
            if(this.expanded){
                this.expanded =3D false;
                this.expand(false, false);
            }
        }
    },

    =0A=
    renderIndent : function(deep, refresh){
        if(refresh){
            this.ui.childIndent =3D null;
        }
        this.ui.renderIndent();
        if(deep =3D=3D=3D true && this.childrenRendered){
            var cs =3D this.childNodes;
            for(var i =3D 0, len =3D cs.length; i < len; i++){
                cs[i].renderIndent(true, refresh);
            }
        }
    },

    beginUpdate : function(){
        this.childrenRendered =3D false;
    },

    endUpdate : function(){
        if(this.expanded && this.rendered){
            this.renderChildren();
        }
    },

    destroy : function(){
        for(var i =3D 0,l =3D this.childNodes.length; i < l; i++){
            this.childNodes[i].destroy();
        }
        this.childNodes =3D null;
        if(this.ui.destroy){
            this.ui.destroy();
        }
    }
});=0A=

 Ext.tree.AsyncTreeNode =3D function(config){
    this.loaded =3D false;
    this.loading =3D false;
    Ext.tree.AsyncTreeNode.superclass.constructor.apply(this, =
arguments);
   =20
    this.addEvents('beforeload', 'load');
   =20
   =20
};
Ext.extend(Ext.tree.AsyncTreeNode, Ext.tree.TreeNode, {
    expand : function(deep, anim, callback){
        if(this.loading){ =0A=
            var timer;
            var f =3D function(){
                if(!this.loading){ =0A=
                    clearInterval(timer);
                    this.expand(deep, anim, callback);
                }
            }.createDelegate(this);
            timer =3D setInterval(f, 200);
            return;
        }
        if(!this.loaded){
            if(this.fireEvent("beforeload", this) =3D=3D=3D false){
                return;
            }
            this.loading =3D true;
            this.ui.beforeLoad(this);
            var loader =3D this.loader || this.attributes.loader || =
this.getOwnerTree().getLoader();
            if(loader){
                loader.load(this, this.loadComplete.createDelegate(this, =
[deep, anim, callback]));
                return;
            }
        }
        Ext.tree.AsyncTreeNode.superclass.expand.call(this, deep, anim, =
callback);
    },
   =20
   =20
    isLoading : function(){
        return this.loading; =20
    },
   =20
    loadComplete : function(deep, anim, callback){
        this.loading =3D false;
        this.loaded =3D true;
        this.ui.afterLoad(this);
        this.fireEvent("load", this);
        this.expand(deep, anim, callback);
    },
   =20
   =20
    isLoaded : function(){
        return this.loaded;
    },
   =20
    hasChildNodes : function(){
        if(!this.isLeaf() && !this.loaded){
            return true;
        }else{
            return =
Ext.tree.AsyncTreeNode.superclass.hasChildNodes.call(this);
        }
    },

   =20
    reload : function(callback){
        this.collapse(false, false);
        while(this.firstChild){
            this.removeChild(this.firstChild);
        }
        this.childrenRendered =3D false;
        this.loaded =3D false;
        if(this.isHiddenRoot()){
            this.expanded =3D false;
        }
        this.expand(false, false, callback);
    }
});=0A=

Ext.tree.TreeNodeUI =3D function(node){
    this.node =3D node;
    this.rendered =3D false;
    this.animating =3D false;
    this.wasLeaf =3D true;
    this.ecc =3D 'x-tree-ec-icon x-tree-elbow';
    this.emptyIcon =3D Ext.BLANK_IMAGE_URL;
};

Ext.tree.TreeNodeUI.prototype =3D {
    =0A=
    removeChild : function(node){
        if(this.rendered){
            this.ctNode.removeChild(node.ui.getEl());
        }=20
    },

    =0A=
    beforeLoad : function(){
         this.addClass("x-tree-node-loading");
    },

    =0A=
    afterLoad : function(){
         this.removeClass("x-tree-node-loading");
    },

    =0A=
    onTextChange : function(node, text, oldText){
        if(this.rendered){
            this.textNode.innerHTML =3D text;
        }
    },

    =0A=
    onDisableChange : function(node, state){
        this.disabled =3D state;
		if (this.checkbox) {
			this.checkbox.disabled =3D state;
		}       =20
        if(state){
            this.addClass("x-tree-node-disabled");
        }else{
            this.removeClass("x-tree-node-disabled");
        }=20
    },

    =0A=
    onSelectedChange : function(state){
        if(state){
            this.focus();
            this.addClass("x-tree-selected");
        }else{
            =0A=
            this.removeClass("x-tree-selected");
        }
    },

    =0A=
    onMove : function(tree, node, oldParent, newParent, index, refNode){
        this.childIndent =3D null;
        if(this.rendered){
            var targetNode =3D newParent.ui.getContainer();
            if(!targetNode){=0A=
                this.holder =3D document.createElement("div");
                this.holder.appendChild(this.wrap);
                return;
            }
            var insertBefore =3D refNode ? refNode.ui.getEl() : null;
            if(insertBefore){
                targetNode.insertBefore(this.wrap, insertBefore);
            }else{
                targetNode.appendChild(this.wrap);
            }
            this.node.renderIndent(true);
        }
    },


    addClass : function(cls){
        if(this.elNode){
            Ext.fly(this.elNode).addClass(cls);
        }
    },


    removeClass : function(cls){
        if(this.elNode){
            Ext.fly(this.elNode).removeClass(cls); =20
        }
    },

    =0A=
    remove : function(){
        if(this.rendered){
            this.holder =3D document.createElement("div");
            this.holder.appendChild(this.wrap);
        } =20
    },

    =0A=
    fireEvent : function(){
        return this.node.fireEvent.apply(this.node, arguments); =20
    },

    =0A=
    initEvents : function(){
        this.node.on("move", this.onMove, this);

        if(this.node.disabled){
            this.addClass("x-tree-node-disabled");
			if (this.checkbox) {
				this.checkbox.disabled =3D true;
			}           =20
        }
        if(this.node.hidden){
            this.hide();
        }
        var ot =3D this.node.getOwnerTree();
        var dd =3D ot.enableDD || ot.enableDrag || ot.enableDrop;
        if(dd && (!this.node.isRoot || ot.rootVisible)){
            Ext.dd.Registry.register(this.elNode, {
                node: this.node,
                handles: this.getDDHandles(),
                isHandle: false
            });
        }
    },

    =0A=
    getDDHandles : function(){
        return [this.iconNode, this.textNode, this.elNode];
    },


    hide : function(){
        this.node.hidden =3D true;
        if(this.wrap){
            this.wrap.style.display =3D "none";
        }
    },


    show : function(){
        this.node.hidden =3D false;
        if(this.wrap){
            this.wrap.style.display =3D "";
        }=20
    },

    =0A=
    onContextMenu : function(e){
        if (this.node.hasListener("contextmenu") || =
this.node.getOwnerTree().hasListener("contextmenu")) {
            e.preventDefault();
            this.focus();
            this.fireEvent("contextmenu", this.node, e);
        }
    },

    =0A=
    onClick : function(e){
        if(this.dropping){
            e.stopEvent();
            return;
        }
        if(this.fireEvent("beforeclick", this.node, e) !=3D=3D false){
            var a =3D e.getTarget('a');
            if(!this.disabled && this.node.attributes.href && a){
                this.fireEvent("click", this.node, e);
                return;
            }else if(a && e.ctrlKey){
                e.stopEvent();
            }
            e.preventDefault();
            if(this.disabled){
                return;
            }

            if(this.node.attributes.singleClickExpand && !this.animating =
&& this.node.hasChildNodes()){
                this.node.toggle();
            }

            this.fireEvent("click", this.node, e);
        }else{
            e.stopEvent();
        }
    },

    =0A=
    onDblClick : function(e){
        e.preventDefault();
        if(this.disabled){
            return;
        }
        if(this.checkbox){
            this.toggleCheck();
        }
        if(!this.animating && this.node.hasChildNodes()){
            this.node.toggle();
        }
        this.fireEvent("dblclick", this.node, e);
    },

    onOver : function(e){
        this.addClass('x-tree-node-over');
    },

    onOut : function(e){
        this.removeClass('x-tree-node-over');
    },

    =0A=
    onCheckChange : function(){
        var checked =3D this.checkbox.checked;
		=0A=
		this.checkbox.defaultChecked =3D checked;
        this.node.attributes.checked =3D checked;
        this.fireEvent('checkchange', this.node, checked);
    },

    =0A=
    ecClick : function(e){
        if(!this.animating && (this.node.hasChildNodes() || =
this.node.attributes.expandable)){
            this.node.toggle();
        }
    },

    =0A=
    startDrop : function(){
        this.dropping =3D true;
    },
   =20
    =0A=
    endDrop : function(){=20
       setTimeout(function(){
           this.dropping =3D false;
       }.createDelegate(this), 50);=20
    },

    =0A=
    expand : function(){
        this.updateExpandIcon();
        this.ctNode.style.display =3D "";
    },

    =0A=
    focus : function(){
        if(!this.node.preventHScroll){
            try{this.anchor.focus();
            }catch(e){}
        }else if(!Ext.isIE){
            try{
                var noscroll =3D =
this.node.getOwnerTree().getTreeEl().dom;
                var l =3D noscroll.scrollLeft;
                this.anchor.focus();
                noscroll.scrollLeft =3D l;
            }catch(e){}
        }
    },


    toggleCheck : function(value){
        var cb =3D this.checkbox;
        if(cb){
            cb.checked =3D (value =3D=3D=3D undefined ? !cb.checked : =
value);
            this.onCheckChange();
        }
    },

    =0A=
    blur : function(){
        try{
            this.anchor.blur();
        }catch(e){}=20
    },

    =0A=
    animExpand : function(callback){
        var ct =3D Ext.get(this.ctNode);
        ct.stopFx();
        if(!this.node.hasChildNodes()){
            this.updateExpandIcon();
            this.ctNode.style.display =3D "";
            Ext.callback(callback);
            return;
        }
        this.animating =3D true;
        this.updateExpandIcon();
       =20
        ct.slideIn('t', {
           callback : function(){
               this.animating =3D false;
               Ext.callback(callback);
            },
            scope: this,
            duration: this.node.ownerTree.duration || .25
        });
    },

    =0A=
    highlight : function(){
        var tree =3D this.node.getOwnerTree();
        Ext.fly(this.wrap).highlight(
            tree.hlColor || "C3DAF9",
            {endColor: tree.hlBaseColor}
        );
    },

    =0A=
    collapse : function(){
        this.updateExpandIcon();
        this.ctNode.style.display =3D "none";
    },

    =0A=
    animCollapse : function(callback){
        var ct =3D Ext.get(this.ctNode);
        ct.enableDisplayMode('block');
        ct.stopFx();

        this.animating =3D true;
        this.updateExpandIcon();

        ct.slideOut('t', {
            callback : function(){
               this.animating =3D false;
               Ext.callback(callback);
            },
            scope: this,
            duration: this.node.ownerTree.duration || .25
        });
    },

    =0A=
    getContainer : function(){
        return this.ctNode; =20
    },

    =0A=
    getEl : function(){
        return this.wrap; =20
    },

    =0A=
    appendDDGhost : function(ghostNode){
        ghostNode.appendChild(this.elNode.cloneNode(true));
    },

    =0A=
    getDDRepairXY : function(){
        return Ext.lib.Dom.getXY(this.iconNode);
    },

    =0A=
    onRender : function(){
        this.render();   =20
    },

    =0A=
    render : function(bulkRender){
        var n =3D this.node, a =3D n.attributes;
        var targetNode =3D n.parentNode ?=20
              n.parentNode.ui.getContainer() : n.ownerTree.innerCt.dom;
       =20
        if(!this.rendered){
            this.rendered =3D true;

            this.renderElements(n, a, targetNode, bulkRender);

            if(a.qtip){
               if(this.textNode.setAttributeNS){
                   this.textNode.setAttributeNS("ext", "qtip", a.qtip);
                   if(a.qtipTitle){
                       this.textNode.setAttributeNS("ext", "qtitle", =
a.qtipTitle);
                   }
               }else{
                   this.textNode.setAttribute("ext:qtip", a.qtip);
                   if(a.qtipTitle){
                       this.textNode.setAttribute("ext:qtitle", =
a.qtipTitle);
                   }
               }=20
            }else if(a.qtipCfg){
                a.qtipCfg.target =3D Ext.id(this.textNode);
                Ext.QuickTips.register(a.qtipCfg);
            }
            this.initEvents();
            if(!this.node.expanded){
                this.updateExpandIcon(true);
            }
        }else{
            if(bulkRender =3D=3D=3D true) {
                targetNode.appendChild(this.wrap);
            }
        }
    },

    =0A=
    renderElements : function(n, a, targetNode, bulkRender){
        =0A=
        this.indentMarkup =3D n.parentNode ? =
n.parentNode.ui.getChildIndent() : '';

        var cb =3D typeof a.checked =3D=3D 'boolean';

        var href =3D a.href ? a.href : Ext.isGecko ? "" : "#";
        var buf =3D ['<li class=3D"x-tree-node"><div =
ext:tree-node-id=3D"',n.id,'" class=3D"x-tree-node-el x-tree-node-leaf =
x-unselectable ', a.cls,'" unselectable=3D"on">',
            '<span =
class=3D"x-tree-node-indent">',this.indentMarkup,"</span>",
            '<img src=3D"', this.emptyIcon, '" class=3D"x-tree-ec-icon =
x-tree-elbow" />',
            '<img src=3D"', a.icon || this.emptyIcon, '" =
class=3D"x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : =
""),(a.iconCls ? " "+a.iconCls : ""),'" unselectable=3D"on" />',
            cb ? ('<input class=3D"x-tree-node-cb" type=3D"checkbox" ' + =
(a.checked ? 'checked=3D"checked" />' : '/>')) : '',
            '<a hidefocus=3D"on" class=3D"x-tree-node-anchor" =
href=3D"',href,'" tabIndex=3D"1" ',
             a.hrefTarget ? ' target=3D"'+a.hrefTarget+'"' : "", '><span =
unselectable=3D"on">',n.text,"</span></a></div>",
            '<ul class=3D"x-tree-node-ct" =
style=3D"display:none;"></ul>',
            "</li>"].join('');

        var nel;
        if(bulkRender !=3D=3D true && n.nextSibling && (nel =3D =
n.nextSibling.ui.getEl())){
            this.wrap =3D Ext.DomHelper.insertHtml("beforeBegin", nel, =
buf);
        }else{
            this.wrap =3D Ext.DomHelper.insertHtml("beforeEnd", =
targetNode, buf);
        }
       =20
        this.elNode =3D this.wrap.childNodes[0];
        this.ctNode =3D this.wrap.childNodes[1];
        var cs =3D this.elNode.childNodes;
        this.indentNode =3D cs[0];
        this.ecNode =3D cs[1];
        this.iconNode =3D cs[2];
        var index =3D 3;
        if(cb){
            this.checkbox =3D cs[3];
			=0A=
			this.checkbox.defaultChecked =3D this.checkbox.checked;		=09
            index++;
        }
        this.anchor =3D cs[index];
        this.textNode =3D cs[index].firstChild;
    },


    getAnchor : function(){
        return this.anchor;
    },
   =20

    getTextEl : function(){
        return this.textNode;
    },
   =20

    getIconEl : function(){
        return this.iconNode;
    },


    isChecked : function(){
        return this.checkbox ? this.checkbox.checked : false;=20
    },

    =0A=
    updateExpandIcon : function(){
        if(this.rendered){
            var n =3D this.node, c1, c2;
            var cls =3D n.isLast() ? "x-tree-elbow-end" : =
"x-tree-elbow";
            var hasChild =3D n.hasChildNodes();
            if(hasChild || n.attributes.expandable){
                if(n.expanded){
                    cls +=3D "-minus";
                    c1 =3D "x-tree-node-collapsed";
                    c2 =3D "x-tree-node-expanded";
                }else{
                    cls +=3D "-plus";
                    c1 =3D "x-tree-node-expanded";
                    c2 =3D "x-tree-node-collapsed";
                }
                if(this.wasLeaf){
                    this.removeClass("x-tree-node-leaf");
                    this.wasLeaf =3D false;
                }
                if(this.c1 !=3D c1 || this.c2 !=3D c2){
                    Ext.fly(this.elNode).replaceClass(c1, c2);
                    this.c1 =3D c1; this.c2 =3D c2;
                }
            }else{
                if(!this.wasLeaf){
                    =
Ext.fly(this.elNode).replaceClass("x-tree-node-expanded", =
"x-tree-node-leaf");
                    delete this.c1;
                    delete this.c2;
                    this.wasLeaf =3D true;
                }
            }
            var ecc =3D "x-tree-ec-icon "+cls;
            if(this.ecc !=3D ecc){
                this.ecNode.className =3D ecc;
                this.ecc =3D ecc;
            }
        }
    },

    =0A=
    getChildIndent : function(){
        if(!this.childIndent){
            var buf =3D [];
            var p =3D this.node;
            while(p){
                if(!p.isRoot || (p.isRoot && p.ownerTree.rootVisible)){
                    if(!p.isLast()) {
                        buf.unshift('<img src=3D"'+this.emptyIcon+'" =
class=3D"x-tree-elbow-line" />');
                    } else {
                        buf.unshift('<img src=3D"'+this.emptyIcon+'" =
class=3D"x-tree-icon" />');
                    }
                }
                p =3D p.parentNode;
            }
            this.childIndent =3D buf.join("");
        }
        return this.childIndent;
    },

    =0A=
    renderIndent : function(){
        if(this.rendered){
            var indent =3D "";
            var p =3D this.node.parentNode;
            if(p){
                indent =3D p.ui.getChildIndent();
            }
            if(this.indentMarkup !=3D indent){ =0A=
                this.indentNode.innerHTML =3D indent;
                this.indentMarkup =3D indent;
            }
            this.updateExpandIcon();
        }
    },

    destroy : function(){
        if(this.elNode){
            Ext.dd.Registry.unregister(this.elNode.id);
        }
        delete this.elNode;
        delete this.ctNode;
        delete this.indentNode;
        delete this.ecNode;
        delete this.iconNode;
        delete this.checkbox;
        delete this.anchor;
        delete this.textNode;
        Ext.removeNode(this.ctNode);
    }
};


Ext.tree.RootTreeNodeUI =3D Ext.extend(Ext.tree.TreeNodeUI, {
    =0A=
    render : function(){
        if(!this.rendered){
            var targetNode =3D this.node.ownerTree.innerCt.dom;
            this.node.expanded =3D true;
            targetNode.innerHTML =3D '<div =
class=3D"x-tree-root-node"></div>';
            this.wrap =3D this.ctNode =3D targetNode.firstChild;
        }
    },
    collapse : Ext.emptyFn,
    expand : Ext.emptyFn
});=0A=

Ext.tree.TreeLoader =3D function(config){
    this.baseParams =3D {};
    Ext.apply(this, config);

    this.addEvents(
       =20
        "beforeload",
       =20
        "load",
       =20
        "loadexception"
    );

    Ext.tree.TreeLoader.superclass.constructor.call(this);
};

Ext.extend(Ext.tree.TreeLoader, Ext.util.Observable, {
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    uiProviders : {},

   =20
    clearOnLoad : true,

   =20
    load : function(node, callback){
        if(this.clearOnLoad){
            while(node.firstChild){
                node.removeChild(node.firstChild);
            }
        }
        if(this.doPreload(node)){ =0A=
            if(typeof callback =3D=3D "function"){
                callback();
            }
        }else if(this.dataUrl||this.url){
            this.requestData(node, callback);
        }
    },

    doPreload : function(node){
        if(node.attributes.children){
            if(node.childNodes.length < 1){ =0A=
                var cs =3D node.attributes.children;
                node.beginUpdate();
                for(var i =3D 0, len =3D cs.length; i < len; i++){
                    var cn =3D node.appendChild(this.createNode(cs[i]));
                    if(this.preloadChildren){
                        this.doPreload(cn);
                    }
                }
                node.endUpdate();
            }
            return true;
        }else {
            return false;
        }
    },

    getParams: function(node){
        var buf =3D [], bp =3D this.baseParams;
        for(var key in bp){
            if(typeof bp[key] !=3D "function"){
                buf.push(encodeURIComponent(key), "=3D", =
encodeURIComponent(bp[key]), "&");
            }
        }
        buf.push("node=3D", encodeURIComponent(node.id));
        return buf.join("");
    },

    requestData : function(node, callback){
        if(this.fireEvent("beforeload", this, node, callback) !=3D=3D =
false){
            this.transId =3D Ext.Ajax.request({
                method:this.requestMethod,
                url: this.dataUrl||this.url,
                success: this.handleResponse,
                failure: this.handleFailure,
                scope: this,
                argument: {callback: callback, node: node},
                params: this.getParams(node)
            });
        }else{
            =0A=
            =0A=
            if(typeof callback =3D=3D "function"){
                callback();
            }
        }
    },

    isLoading : function(){
        return this.transId ? true : false;
    },

    abort : function(){
        if(this.isLoading()){
            Ext.Ajax.abort(this.transId);
        }
    },

   =20
    createNode : function(attr){
        =0A=
        if(this.baseAttrs){
            Ext.applyIf(attr, this.baseAttrs);
        }
        if(this.applyLoader !=3D=3D false){
            attr.loader =3D this;
        }
        if(typeof attr.uiProvider =3D=3D 'string'){
           attr.uiProvider =3D this.uiProviders[attr.uiProvider] || =
eval(attr.uiProvider);
        }
        return(attr.leaf ?
                        new Ext.tree.TreeNode(attr) :
                        new Ext.tree.AsyncTreeNode(attr));
    },

    processResponse : function(response, node, callback){
        var json =3D response.responseText;
        try {
            var o =3D eval("("+json+")");
            node.beginUpdate();
            for(var i =3D 0, len =3D o.length; i < len; i++){
                var n =3D this.createNode(o[i]);
                if(n){
                    node.appendChild(n);
                }
            }
            node.endUpdate();
            if(typeof callback =3D=3D "function"){
                callback(this, node);
            }
        }catch(e){
            this.handleFailure(response);
        }
    },

    handleResponse : function(response){
        this.transId =3D false;
        var a =3D response.argument;
        this.processResponse(response, a.node, a.callback);
        this.fireEvent("load", this, a.node, response);
    },

    handleFailure : function(response){
        this.transId =3D false;
        var a =3D response.argument;
        this.fireEvent("loadexception", this, a.node, response);
        if(typeof a.callback =3D=3D "function"){
            a.callback(this, a.node);
        }
    }
});=0A=

Ext.tree.TreeFilter =3D function(tree, config){
    this.tree =3D tree;
    this.filtered =3D {};
    Ext.apply(this, config);
};

Ext.tree.TreeFilter.prototype =3D {
    clearBlank:false,
    reverse:false,
    autoClear:false,
    remove:false,

    =20
    filter : function(value, attr, startNode){
        attr =3D attr || "text";
        var f;
        if(typeof value =3D=3D "string"){
            var vlen =3D value.length;
            =0A=
            if(vlen =3D=3D 0 && this.clearBlank){
                this.clear();
                return;
            }
            value =3D value.toLowerCase();
            f =3D function(n){
                return n.attributes[attr].substr(0, vlen).toLowerCase() =
=3D=3D value;
            };
        }else if(value.exec){ =0A=
            f =3D function(n){
                return value.test(n.attributes[attr]);
            };
        }else{
            throw 'Illegal filter type, must be string or regex';
        }
        this.filterBy(f, null, startNode);
	},
   =20
   =20
    filterBy : function(fn, scope, startNode){
        startNode =3D startNode || this.tree.root;
        if(this.autoClear){
            this.clear();
        }
        var af =3D this.filtered, rv =3D this.reverse;
        var f =3D function(n){
            if(n =3D=3D startNode){
                return true;
            }
            if(af[n.id]){
                return false;
            }
            var m =3D fn.call(scope || n, n);
            if(!m || rv){
                af[n.id] =3D n;
                n.ui.hide();
                return false;
            }
            return true;
        };
        startNode.cascade(f);
        if(this.remove){
           for(var id in af){
               if(typeof id !=3D "function"){
                   var n =3D af[id];
                   if(n && n.parentNode){
                       n.parentNode.removeChild(n);
                   }
               }
           }=20
        }
    },
   =20
   =20
    clear : function(){
        var t =3D this.tree;
        var af =3D this.filtered;
        for(var id in af){
            if(typeof id !=3D "function"){
                var n =3D af[id];
                if(n){
                    n.ui.show();
                }
            }
        }
        this.filtered =3D {};=20
    }
};
=0A=

Ext.tree.TreeSorter =3D function(tree, config){
   =20
=09
   =20
   =20
   =20
   =20
   =20
    Ext.apply(this, config);
    tree.on("beforechildrenrendered", this.doSort, this);
    tree.on("append", this.updateSort, this);
    tree.on("insert", this.updateSort, this);
    tree.on("textchange", this.updateSortParent, this);
   =20
    var dsc =3D this.dir && this.dir.toLowerCase() =3D=3D "desc";
    var p =3D this.property || "text";
    var sortType =3D this.sortType;
    var fs =3D this.folderSort;
    var cs =3D this.caseSensitive =3D=3D=3D true;
    var leafAttr =3D this.leafAttr || 'leaf';

    this.sortFn =3D function(n1, n2){
        if(fs){
            if(n1.attributes[leafAttr] && !n2.attributes[leafAttr]){
                return 1;
            }
            if(!n1.attributes[leafAttr] && n2.attributes[leafAttr]){
                return -1;
            }
        }
    	var v1 =3D sortType ? sortType(n1) : (cs ? n1.attributes[p] : =
n1.attributes[p].toUpperCase());
    	var v2 =3D sortType ? sortType(n2) : (cs ? n2.attributes[p] : =
n2.attributes[p].toUpperCase());
    	if(v1 < v2){
			return dsc ? +1 : -1;
		}else if(v1 > v2){
			return dsc ? -1 : +1;
        }else{
	    	return 0;
        }
    };
};

Ext.tree.TreeSorter.prototype =3D {
    doSort : function(node){
        node.sort(this.sortFn);
    },
   =20
    compareNodes : function(n1, n2){
        return (n1.text.toUpperCase() > n2.text.toUpperCase() ? 1 : -1);
    },
   =20
    updateSort : function(tree, node){
        if(node.childrenRendered){
            this.doSort.defer(1, this, [node]);
        }
    },
   =20
    updateSortParent : function(node){
		var p =3D node.parentNode;
		if(p && p.childrenRendered){
            this.doSort.defer(1, this, [p]);
        }
    }
};=0A=

if(Ext.dd.DropZone){
   =20
Ext.tree.TreeDropZone =3D function(tree, config){
   =20
    this.allowParentInsert =3D false;
   =20
    this.allowContainerDrop =3D false;
   =20
    this.appendOnly =3D false;
    Ext.tree.TreeDropZone.superclass.constructor.call(this, =
tree.innerCt, config);
   =20
    this.tree =3D tree;
   =20
    this.dragOverData =3D {};
    =0A=
    this.lastInsertClass =3D "x-tree-no-status";
};

Ext.extend(Ext.tree.TreeDropZone, Ext.dd.DropZone, {
   =20
    ddGroup : "TreeDD",

   =20
    expandDelay : 1000,

    =0A=
    expandNode : function(node){
        if(node.hasChildNodes() && !node.isExpanded()){
            node.expand(false, null, =
this.triggerCacheRefresh.createDelegate(this));
        }
    },

    =0A=
    queueExpand : function(node){
        this.expandProcId =3D this.expandNode.defer(this.expandDelay, =
this, [node]);
    },

    =0A=
    cancelExpand : function(){
        if(this.expandProcId){
            clearTimeout(this.expandProcId);
            this.expandProcId =3D false;
        }
    },

    =0A=
    isValidDropPoint : function(n, pt, dd, e, data){
        if(!n || !data){ return false; }
        var targetNode =3D n.node;
        var dropNode =3D data.node;
        =0A=
        if(!(targetNode && targetNode.isTarget && pt)){
            return false;
        }
        if(pt =3D=3D "append" && targetNode.allowChildren =3D=3D=3D =
false){
            return false;
        }
        if((pt =3D=3D "above" || pt =3D=3D "below") && =
(targetNode.parentNode && targetNode.parentNode.allowChildren =3D=3D=3D =
false)){
            return false;
        }
        if(dropNode && (targetNode =3D=3D dropNode || =
dropNode.contains(targetNode))){
            return false;
        }
        =0A=
        var overEvent =3D this.dragOverData;
        overEvent.tree =3D this.tree;
        overEvent.target =3D targetNode;
        overEvent.data =3D data;
        overEvent.point =3D pt;
        overEvent.source =3D dd;
        overEvent.rawEvent =3D e;
        overEvent.dropNode =3D dropNode;
        overEvent.cancel =3D false; =20
        var result =3D this.tree.fireEvent("nodedragover", overEvent);
        return overEvent.cancel =3D=3D=3D false && result !=3D=3D false;
    },

    =0A=
    getDropPoint : function(e, n, dd){
        var tn =3D n.node;
        if(tn.isRoot){
            return tn.allowChildren !=3D=3D false ? "append" : false; =0A=
        }
        var dragEl =3D n.ddel;
        var t =3D Ext.lib.Dom.getY(dragEl), b =3D t + =
dragEl.offsetHeight;
        var y =3D Ext.lib.Event.getPageY(e);
        var noAppend =3D tn.allowChildren =3D=3D=3D false || =
tn.isLeaf();
        if(this.appendOnly || tn.parentNode.allowChildren =3D=3D=3D =
false){
            return noAppend ? false : "append";
        }
        var noBelow =3D false;
        if(!this.allowParentInsert){
            noBelow =3D tn.hasChildNodes() && tn.isExpanded();
        }
        var q =3D (b - t) / (noAppend ? 2 : 3);
        if(y >=3D t && y < (t + q)){
            return "above";
        }else if(!noBelow && (noAppend || y >=3D b-q && y <=3D b)){
            return "below";
        }else{
            return "append";
        }
    },

    =0A=
    onNodeEnter : function(n, dd, e, data){
        this.cancelExpand();
    },

    =0A=
    onNodeOver : function(n, dd, e, data){
        var pt =3D this.getDropPoint(e, n, dd);
        var node =3D n.node;
       =20
        =0A=
        if(!this.expandProcId && pt =3D=3D "append" && =
node.hasChildNodes() && !n.node.isExpanded()){
            this.queueExpand(node);
        }else if(pt !=3D "append"){
            this.cancelExpand();
        }
       =20
        =0A=
        var returnCls =3D this.dropNotAllowed;
        if(this.isValidDropPoint(n, pt, dd, e, data)){
           if(pt){
               var el =3D n.ddel;
               var cls;
               if(pt =3D=3D "above"){
                   returnCls =3D n.node.isFirst() ? =
"x-tree-drop-ok-above" : "x-tree-drop-ok-between";
                   cls =3D "x-tree-drag-insert-above";
               }else if(pt =3D=3D "below"){
                   returnCls =3D n.node.isLast() ? =
"x-tree-drop-ok-below" : "x-tree-drop-ok-between";
                   cls =3D "x-tree-drag-insert-below";
               }else{
                   returnCls =3D "x-tree-drop-ok-append";
                   cls =3D "x-tree-drag-append";
               }
               if(this.lastInsertClass !=3D cls){
                   Ext.fly(el).replaceClass(this.lastInsertClass, cls);
                   this.lastInsertClass =3D cls;
               }
           }
       }
       return returnCls;
    },

    =0A=
    onNodeOut : function(n, dd, e, data){
        this.cancelExpand();
        this.removeDropIndicators(n);
    },

    =0A=
    onNodeDrop : function(n, dd, e, data){
        var point =3D this.getDropPoint(e, n, dd);
        var targetNode =3D n.node;
        targetNode.ui.startDrop();
        if(!this.isValidDropPoint(n, point, dd, e, data)){
            targetNode.ui.endDrop();
            return false;
        }
        =0A=
        var dropNode =3D data.node || (dd.getTreeNode ? =
dd.getTreeNode(data, targetNode, point, e) : null);
        var dropEvent =3D {
            tree : this.tree,
            target: targetNode,
            data: data,
            point: point,
            source: dd,
            rawEvent: e,
            dropNode: dropNode,
            cancel: !dropNode,
            dropStatus: false
        };
        var retval =3D this.tree.fireEvent("beforenodedrop", dropEvent);
        if(retval =3D=3D=3D false || dropEvent.cancel =3D=3D=3D true || =
!dropEvent.dropNode){
            targetNode.ui.endDrop();
            return dropEvent.dropStatus;
        }
        =0A=
        targetNode =3D dropEvent.target;
        if(point =3D=3D "append" && !targetNode.isExpanded()){
            targetNode.expand(false, null, function(){
                this.completeDrop(dropEvent);
            }.createDelegate(this));
        }else{
            this.completeDrop(dropEvent);
        }
        return true;
    },

    =0A=
    completeDrop : function(de){
        var ns =3D de.dropNode, p =3D de.point, t =3D de.target;
        if(!Ext.isArray(ns)){
            ns =3D [ns];
        }
        var n;
        for(var i =3D 0, len =3D ns.length; i < len; i++){
            n =3D ns[i];
            if(p =3D=3D "above"){
                t.parentNode.insertBefore(n, t);
            }else if(p =3D=3D "below"){
                t.parentNode.insertBefore(n, t.nextSibling);
            }else{
                t.appendChild(n);
            }
        }
        n.ui.focus();
        if(this.tree.hlDrop){
            n.ui.highlight();
        }
        t.ui.endDrop();
        this.tree.fireEvent("nodedrop", de);
    },

    =0A=
    afterNodeMoved : function(dd, data, e, targetNode, dropNode){
        if(this.tree.hlDrop){
            dropNode.ui.focus();
            dropNode.ui.highlight();
        }
        this.tree.fireEvent("nodedrop", this.tree, targetNode, data, dd, =
e);
    },

    =0A=
    getTree : function(){
        return this.tree;
    },

    =0A=
    removeDropIndicators : function(n){
        if(n && n.ddel){
            var el =3D n.ddel;
            Ext.fly(el).removeClass([
                    "x-tree-drag-insert-above",
                    "x-tree-drag-insert-below",
                    "x-tree-drag-append"]);
            this.lastInsertClass =3D "_noclass";
        }
    },

    =0A=
    beforeDragDrop : function(target, e, id){
        this.cancelExpand();
        return true;
    },

    =0A=
    afterRepair : function(data){
        if(data && Ext.enableFx){
            data.node.ui.highlight();
        }
        this.hideProxy();
    }   =20
});

}=0A=

if(Ext.dd.DragZone){
Ext.tree.TreeDragZone =3D function(tree, config){
    Ext.tree.TreeDragZone.superclass.constructor.call(this, =
tree.getTreeEl(), config);
   =20
    this.tree =3D tree;
};

Ext.extend(Ext.tree.TreeDragZone, Ext.dd.DragZone, {
   =20
    ddGroup : "TreeDD",

    =0A=
    onBeforeDrag : function(data, e){
        var n =3D data.node;
        return n && n.draggable && !n.disabled;
    },

    =0A=
    onInitDrag : function(e){
        var data =3D this.dragData;
        this.tree.getSelectionModel().select(data.node);
        this.tree.eventModel.disable();
        this.proxy.update("");
        data.node.ui.appendDDGhost(this.proxy.ghost.dom);
        this.tree.fireEvent("startdrag", this.tree, data.node, e);
    },

    =0A=
    getRepairXY : function(e, data){
        return data.node.ui.getDDRepairXY();
    },

    =0A=
    onEndDrag : function(data, e){
        this.tree.eventModel.enable.defer(100, this.tree.eventModel);
        this.tree.fireEvent("enddrag", this.tree, data.node, e);
    },

    =0A=
    onValidDrop : function(dd, e, id){
        this.tree.fireEvent("dragdrop", this.tree, this.dragData.node, =
dd, e);
        this.hideProxy();
    },

    =0A=
    beforeInvalidDrop : function(e, id){
        =0A=
        var sm =3D this.tree.getSelectionModel();
        sm.clearSelections();
        sm.select(this.dragData.node);
    }
});
}=0A=
=0A=
Ext.tree.TreeEditor =3D function(tree, fc, config){=0A=
    fc =3D fc || {};=0A=
    var field =3D fc.events ? fc : new Ext.form.TextField(fc);=0A=
    Ext.tree.TreeEditor.superclass.constructor.call(this, field, config);=0A=
=0A=
    this.tree =3D tree;=0A=
=0A=
    if(!tree.rendered){=0A=
        tree.on('render', this.initEditor, this);=0A=
    }else{=0A=
        this.initEditor(tree);=0A=
    }=0A=
};=0A=
=0A=
Ext.extend(Ext.tree.TreeEditor, Ext.Editor, {=0A=
    =0A=
    alignment: "l-l",=0A=
        autoSize: false,=0A=
    =0A=
    hideEl : false,=0A=
    =0A=
    cls: "x-small-editor x-tree-editor",=0A=
    =0A=
    shim:false,=0A=
        shadow:"frame",=0A=
    =0A=
    maxWidth: 250,=0A=
    =0A=
    editDelay : 350,=0A=
=0A=
    initEditor : function(tree){=0A=
        tree.on('beforeclick', this.beforeNodeClick, this);=0A=
        tree.on('dblclick', this.onNodeDblClick, this);=0A=
        this.on('complete', this.updateNode, this);=0A=
        this.on('beforestartedit', this.fitToTree, this);=0A=
        this.on('startedit', this.bindScroll, this, {delay:10});=0A=
        this.on('specialkey', this.onSpecialKey, this);=0A=
    },=0A=
=0A=
        fitToTree : function(ed, el){=0A=
        var td =3D this.tree.getTreeEl().dom, nd =3D el.dom;=0A=
        if(td.scrollLeft >  nd.offsetLeft){             td.scrollLeft =
=3D nd.offsetLeft;=0A=
        }=0A=
        var w =3D Math.min(=0A=
                this.maxWidth,=0A=
                (td.clientWidth > 20 ? td.clientWidth : td.offsetWidth) =
- Math.max(0, nd.offsetLeft-td.scrollLeft) - 5);=0A=
        this.setSize(w, '');=0A=
    },=0A=
=0A=
        triggerEdit : function(node, defer){=0A=
        this.completeEdit();=0A=
		if(node.attributes.editable !=3D=3D false){=0A=
			this.editNode =3D node;=0A=
            this.autoEditTimer =3D this.startEdit.defer(this.editDelay, =
this, [node.ui.textNode, node.text]);=0A=
            return false;=0A=
        }=0A=
    },=0A=
=0A=
        bindScroll : function(){=0A=
        this.tree.getTreeEl().on('scroll', this.cancelEdit, this);=0A=
    },=0A=
=0A=
        beforeNodeClick : function(node, e){=0A=
        clearTimeout(this.autoEditTimer);=0A=
        if(this.tree.getSelectionModel().isSelected(node)){=0A=
            e.stopEvent();=0A=
            return this.triggerEdit(node);=0A=
        }=0A=
    },=0A=
=0A=
    onNodeDblClick : function(node, e){=0A=
        clearTimeout(this.autoEditTimer);=0A=
    },=0A=
=0A=
        updateNode : function(ed, value){=0A=
        this.tree.getTreeEl().un('scroll', this.cancelEdit, this);=0A=
        this.editNode.setText(value);=0A=
    },=0A=
=0A=
        onHide : function(){=0A=
        Ext.tree.TreeEditor.superclass.onHide.call(this);=0A=
        if(this.editNode){=0A=
            this.editNode.ui.focus.defer(50, this.editNode.ui);=0A=
        }=0A=
    },=0A=
=0A=
        onSpecialKey : function(field, e){=0A=
        var k =3D e.getKey();=0A=
        if(k =3D=3D e.ESC){=0A=
            e.stopEvent();=0A=
            this.cancelEdit();=0A=
        }else if(k =3D=3D e.ENTER && !e.hasModifier()){=0A=
            e.stopEvent();=0A=
            this.completeEdit();=0A=
        }=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.Menu =3D function(config){=0A=
    if(Ext.isArray(config)){=0A=
        config =3D {items:config};=0A=
    }=0A=
    Ext.apply(this, config);=0A=
    this.id =3D this.id || Ext.id();=0A=
    this.addEvents(=0A=
        =0A=
        'beforeshow',=0A=
        =0A=
        'beforehide',=0A=
        =0A=
        'show',=0A=
        =0A=
        'hide',=0A=
        =0A=
        'click',=0A=
        =0A=
        'mouseover',=0A=
        =0A=
        'mouseout',=0A=
        =0A=
        'itemclick'=0A=
    );=0A=
    Ext.menu.MenuMgr.register(this);=0A=
    Ext.menu.Menu.superclass.constructor.call(this);=0A=
    var mis =3D this.items;=0A=
    =0A=
=0A=
    this.items =3D new Ext.util.MixedCollection();=0A=
    if(mis){=0A=
        this.add.apply(this, mis);=0A=
    }=0A=
};=0A=
=0A=
Ext.extend(Ext.menu.Menu, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    minWidth : 120,=0A=
    =0A=
    shadow : "sides",=0A=
    =0A=
    subMenuAlign : "tl-tr?",=0A=
    =0A=
    defaultAlign : "tl-bl?",=0A=
    =0A=
    allowOtherMenus : false,=0A=
=0A=
    hidden:true,=0A=
=0A=
    createEl : function(){=0A=
        return new Ext.Layer({=0A=
            cls: "x-menu",=0A=
            shadow:this.shadow,=0A=
            constrain: false,=0A=
            parentEl: this.parentEl || document.body,=0A=
            zindex:15000=0A=
        });=0A=
    },=0A=
=0A=
        render : function(){=0A=
        if(this.el){=0A=
            return;=0A=
        }=0A=
        var el =3D this.el =3D this.createEl();=0A=
=0A=
        if(!this.keyNav){=0A=
            this.keyNav =3D new Ext.menu.MenuNav(this);=0A=
        }=0A=
        if(this.plain){=0A=
            el.addClass("x-menu-plain");=0A=
        }=0A=
        if(this.cls){=0A=
            el.addClass(this.cls);=0A=
        }=0A=
                this.focusEl =3D el.createChild({=0A=
            tag: "a", cls: "x-menu-focus", href: "#", onclick: "return =
false;", tabIndex:"-1"=0A=
        });=0A=
        var ul =3D el.createChild({tag: "ul", cls: "x-menu-list"});=0A=
        ul.on("click", this.onClick, this);=0A=
        ul.on("mouseover", this.onMouseOver, this);=0A=
        ul.on("mouseout", this.onMouseOut, this);=0A=
        this.items.each(function(item){=0A=
            var li =3D document.createElement("li");=0A=
            li.className =3D "x-menu-list-item";=0A=
            ul.dom.appendChild(li);=0A=
            item.render(li, this);=0A=
        }, this);=0A=
        this.ul =3D ul;=0A=
        this.autoWidth();=0A=
    },=0A=
=0A=
        autoWidth : function(){=0A=
        var el =3D this.el, ul =3D this.ul;=0A=
        if(!el){=0A=
            return;=0A=
        }=0A=
        var w =3D this.width;=0A=
        if(w){=0A=
            el.setWidth(w);=0A=
        }else if(Ext.isIE){=0A=
            el.setWidth(this.minWidth);=0A=
            var t =3D el.dom.offsetWidth;             =
el.setWidth(ul.getWidth()+el.getFrameWidth("lr"));=0A=
        }=0A=
    },=0A=
=0A=
        delayAutoWidth : function(){=0A=
        if(this.el){=0A=
            if(!this.awTask){=0A=
                this.awTask =3D new Ext.util.DelayedTask(this.autoWidth, =
this);=0A=
            }=0A=
            this.awTask.delay(20);=0A=
        }=0A=
    },=0A=
=0A=
        findTargetItem : function(e){=0A=
        var t =3D e.getTarget(".x-menu-list-item", this.ul,  true);=0A=
        if(t && t.menuItemId){=0A=
            return this.items.get(t.menuItemId);=0A=
        }=0A=
    },=0A=
=0A=
        onClick : function(e){=0A=
        var t;=0A=
        if(t =3D this.findTargetItem(e)){=0A=
            t.onClick(e);=0A=
            this.fireEvent("click", this, t, e);=0A=
        }=0A=
    },=0A=
=0A=
        setActiveItem : function(item, autoExpand){=0A=
        if(item !=3D this.activeItem){=0A=
            if(this.activeItem){=0A=
                this.activeItem.deactivate();=0A=
            }=0A=
            this.activeItem =3D item;=0A=
            item.activate(autoExpand);=0A=
        }else if(autoExpand){=0A=
            item.expandMenu();=0A=
        }=0A=
    },=0A=
=0A=
        tryActivate : function(start, step){=0A=
        var items =3D this.items;=0A=
        for(var i =3D start, len =3D items.length; i >=3D 0 && i < len; =
i+=3D step){=0A=
            var item =3D items.get(i);=0A=
            if(!item.disabled && item.canActivate){=0A=
                this.setActiveItem(item, false);=0A=
                return item;=0A=
            }=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
        onMouseOver : function(e){=0A=
        var t;=0A=
        if(t =3D this.findTargetItem(e)){=0A=
            if(t.canActivate && !t.disabled){=0A=
                this.setActiveItem(t, true);=0A=
            }=0A=
        }=0A=
        this.fireEvent("mouseover", this, e, t);=0A=
    },=0A=
=0A=
        onMouseOut : function(e){=0A=
        var t;=0A=
        if(t =3D this.findTargetItem(e)){=0A=
            if(t =3D=3D this.activeItem && t.shouldDeactivate(e)){=0A=
                this.activeItem.deactivate();=0A=
                delete this.activeItem;=0A=
            }=0A=
        }=0A=
        this.fireEvent("mouseout", this, e, t);=0A=
    },=0A=
=0A=
    =0A=
    isVisible : function(){=0A=
        return this.el && !this.hidden;=0A=
    },=0A=
=0A=
    =0A=
    show : function(el, pos, parentMenu){=0A=
        this.parentMenu =3D parentMenu;=0A=
        if(!this.el){=0A=
            this.render();=0A=
        }=0A=
        this.fireEvent("beforeshow", this);=0A=
        this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign), =
parentMenu, false);=0A=
    },=0A=
=0A=
    =0A=
    showAt : function(xy, parentMenu, _e){=0A=
        this.parentMenu =3D parentMenu;=0A=
        if(!this.el){=0A=
            this.render();=0A=
        }=0A=
        if(_e !=3D=3D false){=0A=
            this.fireEvent("beforeshow", this);=0A=
            xy =3D this.el.adjustForConstraints(xy);=0A=
        }=0A=
        this.el.setXY(xy);=0A=
        this.el.show();=0A=
        this.hidden =3D false;=0A=
        this.focus();=0A=
        this.fireEvent("show", this);=0A=
    },=0A=
=0A=
    =0A=
=0A=
    focus : function(){=0A=
        if(!this.hidden){=0A=
            this.doFocus.defer(50, this);=0A=
        }=0A=
    },=0A=
=0A=
    doFocus : function(){=0A=
        if(!this.hidden){=0A=
            this.focusEl.focus();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    hide : function(deep){=0A=
        if(this.el && this.isVisible()){=0A=
            this.fireEvent("beforehide", this);=0A=
            if(this.activeItem){=0A=
                this.activeItem.deactivate();=0A=
                this.activeItem =3D null;=0A=
            }=0A=
            this.el.hide();=0A=
            this.hidden =3D true;=0A=
            this.fireEvent("hide", this);=0A=
        }=0A=
        if(deep =3D=3D=3D true && this.parentMenu){=0A=
            this.parentMenu.hide(true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    add : function(){=0A=
        var a =3D arguments, l =3D a.length, item;=0A=
        for(var i =3D 0; i < l; i++){=0A=
            var el =3D a[i];=0A=
            if(el.render){                 item =3D this.addItem(el);=0A=
            }else if(typeof el =3D=3D "string"){                 if(el =
=3D=3D "separator" || el =3D=3D "-"){=0A=
                    item =3D this.addSeparator();=0A=
                }else{=0A=
                    item =3D this.addText(el);=0A=
                }=0A=
            }else if(el.tagName || el.el){                 item =3D =
this.addElement(el);=0A=
            }else if(typeof el =3D=3D "object"){                 =
Ext.applyIf(el, this.defaults);=0A=
                item =3D this.addMenuItem(el);=0A=
            }=0A=
        }=0A=
        return item;=0A=
    },=0A=
=0A=
    =0A=
    getEl : function(){=0A=
        if(!this.el){=0A=
            this.render();=0A=
        }=0A=
        return this.el;=0A=
    },=0A=
=0A=
    =0A=
    addSeparator : function(){=0A=
        return this.addItem(new Ext.menu.Separator());=0A=
    },=0A=
=0A=
    =0A=
    addElement : function(el){=0A=
        return this.addItem(new Ext.menu.BaseItem(el));=0A=
    },=0A=
=0A=
    =0A=
    addItem : function(item){=0A=
        this.items.add(item);=0A=
        if(this.ul){=0A=
            var li =3D document.createElement("li");=0A=
            li.className =3D "x-menu-list-item";=0A=
            this.ul.dom.appendChild(li);=0A=
            item.render(li, this);=0A=
            this.delayAutoWidth();=0A=
        }=0A=
        return item;=0A=
    },=0A=
=0A=
    =0A=
    addMenuItem : function(config){=0A=
        if(!(config instanceof Ext.menu.Item)){=0A=
            if(typeof config.checked =3D=3D "boolean"){                 =
config =3D new Ext.menu.CheckItem(config);=0A=
            }else{=0A=
                config =3D new Ext.menu.Item(config);=0A=
            }=0A=
        }=0A=
        return this.addItem(config);=0A=
    },=0A=
=0A=
    =0A=
    addText : function(text){=0A=
        return this.addItem(new Ext.menu.TextItem(text));=0A=
    },=0A=
=0A=
    =0A=
    insert : function(index, item){=0A=
        this.items.insert(index, item);=0A=
        if(this.ul){=0A=
            var li =3D document.createElement("li");=0A=
            li.className =3D "x-menu-list-item";=0A=
            this.ul.dom.insertBefore(li, this.ul.dom.childNodes[index]);=0A=
            item.render(li, this);=0A=
            this.delayAutoWidth();=0A=
        }=0A=
        return item;=0A=
    },=0A=
=0A=
    =0A=
    remove : function(item){=0A=
        this.items.removeKey(item.id);=0A=
        item.destroy();=0A=
    },=0A=
=0A=
    =0A=
    removeAll : function(){=0A=
    	if(this.items){=0A=
	        var f;=0A=
	        while(f =3D this.items.first()){=0A=
	            this.remove(f);=0A=
	        }=0A=
    	}=0A=
    },=0A=
=0A=
    =0A=
    destroy : function(){=0A=
        this.beforeDestroy();=0A=
        Ext.menu.MenuMgr.unregister(this);=0A=
        if (this.keyNav) {=0A=
        	this.keyNav.disable();	=0A=
        }=0A=
        this.removeAll();=0A=
        if (this.ul) {=0A=
        	this.ul.removeAllListeners();	=0A=
        }=0A=
        if (this.el) {=0A=
        	this.el.destroy();	=0A=
        }=0A=
    },=0A=
=0A=
	    beforeDestroy : Ext.emptyFn=0A=
=0A=
});=0A=
=0A=
Ext.menu.MenuNav =3D function(menu){=0A=
    Ext.menu.MenuNav.superclass.constructor.call(this, menu.el);=0A=
    this.scope =3D this.menu =3D menu;=0A=
};=0A=
=0A=
Ext.extend(Ext.menu.MenuNav, Ext.KeyNav, {=0A=
    doRelay : function(e, h){=0A=
        var k =3D e.getKey();=0A=
        if(!this.menu.activeItem && e.isNavKeyPress() && k !=3D e.SPACE =
&& k !=3D e.RETURN){=0A=
            this.menu.tryActivate(0, 1);=0A=
            return false;=0A=
        }=0A=
        return h.call(this.scope || this, e, this.menu);=0A=
    },=0A=
=0A=
    up : function(e, m){=0A=
        if(!m.tryActivate(m.items.indexOf(m.activeItem)-1, -1)){=0A=
            m.tryActivate(m.items.length-1, -1);=0A=
        }=0A=
    },=0A=
=0A=
    down : function(e, m){=0A=
        if(!m.tryActivate(m.items.indexOf(m.activeItem)+1, 1)){=0A=
            m.tryActivate(0, 1);=0A=
        }=0A=
    },=0A=
=0A=
    right : function(e, m){=0A=
        if(m.activeItem){=0A=
            m.activeItem.expandMenu(true);=0A=
        }=0A=
    },=0A=
=0A=
    left : function(e, m){=0A=
        m.hide();=0A=
        if(m.parentMenu && m.parentMenu.activeItem){=0A=
            m.parentMenu.activeItem.activate();=0A=
        }=0A=
    },=0A=
=0A=
    enter : function(e, m){=0A=
        if(m.activeItem){=0A=
            e.stopPropagation();=0A=
            m.activeItem.onClick(e);=0A=
            m.fireEvent("click", this, m.activeItem);=0A=
            return true;=0A=
        }=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.MenuMgr =3D function(){=0A=
   var menus, active, groups =3D {}, attached =3D false, lastShow =3D =
new Date();=0A=
=0A=
      function init(){=0A=
       menus =3D {};=0A=
       active =3D new Ext.util.MixedCollection();=0A=
       Ext.getDoc().addKeyListener(27, function(){=0A=
           if(active.length > 0){=0A=
               hideAll();=0A=
           }=0A=
       });=0A=
   }=0A=
=0A=
      function hideAll(){=0A=
       if(active && active.length > 0){=0A=
           var c =3D active.clone();=0A=
           c.each(function(m){=0A=
               m.hide();=0A=
           });=0A=
       }=0A=
   }=0A=
=0A=
      function onHide(m){=0A=
       active.remove(m);=0A=
       if(active.length < 1){=0A=
           Ext.getDoc().un("mousedown", onMouseDown);=0A=
           attached =3D false;=0A=
       }=0A=
   }=0A=
=0A=
      function onShow(m){=0A=
       var last =3D active.last();=0A=
       lastShow =3D new Date();=0A=
       active.add(m);=0A=
       if(!attached){=0A=
           Ext.getDoc().on("mousedown", onMouseDown);=0A=
           attached =3D true;=0A=
       }=0A=
       if(m.parentMenu){=0A=
          =
m.getEl().setZIndex(parseInt(m.parentMenu.getEl().getStyle("z-index"), =
10) + 3);=0A=
          m.parentMenu.activeChild =3D m;=0A=
       }else if(last && last.isVisible()){=0A=
          m.getEl().setZIndex(parseInt(last.getEl().getStyle("z-index"), =
10) + 3);=0A=
       }=0A=
   }=0A=
=0A=
      function onBeforeHide(m){=0A=
       if(m.activeChild){=0A=
           m.activeChild.hide();=0A=
       }=0A=
       if(m.autoHideTimer){=0A=
           clearTimeout(m.autoHideTimer);=0A=
           delete m.autoHideTimer;=0A=
       }=0A=
   }=0A=
=0A=
      function onBeforeShow(m){=0A=
       var pm =3D m.parentMenu;=0A=
       if(!pm && !m.allowOtherMenus){=0A=
           hideAll();=0A=
       }else if(pm && pm.activeChild){=0A=
           pm.activeChild.hide();=0A=
       }=0A=
   }=0A=
=0A=
      function onMouseDown(e){=0A=
       if(lastShow.getElapsed() > 50 && active.length > 0 && =
!e.getTarget(".x-menu")){=0A=
           hideAll();=0A=
       }=0A=
   }=0A=
=0A=
      function onBeforeCheck(mi, state){=0A=
       if(state){=0A=
           var g =3D groups[mi.group];=0A=
           for(var i =3D 0, l =3D g.length; i < l; i++){=0A=
               if(g[i] !=3D mi){=0A=
                   g[i].setChecked(false);=0A=
               }=0A=
           }=0A=
       }=0A=
   }=0A=
=0A=
   return {=0A=
=0A=
       =0A=
       hideAll : function(){=0A=
            hideAll();  =0A=
       },=0A=
=0A=
              register : function(menu){=0A=
           if(!menus){=0A=
               init();=0A=
           }=0A=
           menus[menu.id] =3D menu;=0A=
           menu.on("beforehide", onBeforeHide);=0A=
           menu.on("hide", onHide);=0A=
           menu.on("beforeshow", onBeforeShow);=0A=
           menu.on("show", onShow);=0A=
           var g =3D menu.group;=0A=
           if(g && menu.events["checkchange"]){=0A=
               if(!groups[g]){=0A=
                   groups[g] =3D [];=0A=
               }=0A=
               groups[g].push(menu);=0A=
               menu.on("checkchange", onCheck);=0A=
           }=0A=
       },=0A=
=0A=
        =0A=
       get : function(menu){=0A=
           if(typeof menu =3D=3D "string"){                if(!menus){   =
                  return null;=0A=
               }=0A=
               return menus[menu];=0A=
           }else if(menu.events){                 return menu;=0A=
           }else if(typeof menu.length =3D=3D 'number'){                =
return new Ext.menu.Menu({items:menu});=0A=
           }else{                return new Ext.menu.Menu(menu);=0A=
           }=0A=
       },=0A=
=0A=
              unregister : function(menu){=0A=
           delete menus[menu.id];=0A=
           menu.un("beforehide", onBeforeHide);=0A=
           menu.un("hide", onHide);=0A=
           menu.un("beforeshow", onBeforeShow);=0A=
           menu.un("show", onShow);=0A=
           var g =3D menu.group;=0A=
           if(g && menu.events["checkchange"]){=0A=
               groups[g].remove(menu);=0A=
               menu.un("checkchange", onCheck);=0A=
           }=0A=
       },=0A=
=0A=
              registerCheckable : function(menuItem){=0A=
           var g =3D menuItem.group;=0A=
           if(g){=0A=
               if(!groups[g]){=0A=
                   groups[g] =3D [];=0A=
               }=0A=
               groups[g].push(menuItem);=0A=
               menuItem.on("beforecheckchange", onBeforeCheck);=0A=
           }=0A=
       },=0A=
=0A=
              unregisterCheckable : function(menuItem){=0A=
           var g =3D menuItem.group;=0A=
           if(g){=0A=
               groups[g].remove(menuItem);=0A=
               menuItem.un("beforecheckchange", onBeforeCheck);=0A=
           }=0A=
       },=0A=
=0A=
       getCheckedItem : function(groupId){=0A=
           var g =3D groups[groupId];=0A=
           if(g){=0A=
               for(var i =3D 0, l =3D g.length; i < l; i++){=0A=
                   if(g[i].checked){=0A=
                       return g[i];=0A=
                   }=0A=
               }=0A=
           }=0A=
           return null;=0A=
       },=0A=
=0A=
       setCheckedItem : function(groupId, itemId){=0A=
           var g =3D groups[groupId];=0A=
           if(g){=0A=
               for(var i =3D 0, l =3D g.length; i < l; i++){=0A=
                   if(g[i].id =3D=3D itemId){=0A=
                       g[i].setChecked(true);=0A=
                   }=0A=
               }=0A=
           }=0A=
           return null;=0A=
       }=0A=
   };=0A=
}();=0A=
=0A=
=0A=
Ext.menu.BaseItem =3D function(config){=0A=
    Ext.menu.BaseItem.superclass.constructor.call(this, config);=0A=
=0A=
    this.addEvents(=0A=
        =0A=
        'click',=0A=
        =0A=
        'activate',=0A=
        =0A=
        'deactivate'=0A=
    );=0A=
=0A=
    if(this.handler){=0A=
        this.on("click", this.handler, this.scope);=0A=
    }=0A=
};=0A=
=0A=
Ext.extend(Ext.menu.BaseItem, Ext.Component, {=0A=
    =0A=
    =0A=
    =0A=
    canActivate : false,=0A=
    =0A=
    activeClass : "x-menu-item-active",=0A=
    =0A=
    hideOnClick : true,=0A=
    =0A=
    hideDelay : 100,=0A=
=0A=
        ctype: "Ext.menu.BaseItem",=0A=
=0A=
        actionMode : "container",=0A=
=0A=
        render : function(container, parentMenu){=0A=
        this.parentMenu =3D parentMenu;=0A=
        Ext.menu.BaseItem.superclass.render.call(this, container);=0A=
        this.container.menuItemId =3D this.id;=0A=
    },=0A=
=0A=
        onRender : function(container, position){=0A=
        this.el =3D Ext.get(this.el);=0A=
        container.dom.appendChild(this.el.dom);=0A=
    },=0A=
=0A=
    =0A=
    setHandler : function(handler, scope){=0A=
        if(this.handler){=0A=
            this.un("click", this.handler, this.scope);=0A=
        }=0A=
        this.on("click", this.handler =3D handler, this.scope =3D scope);=0A=
    },=0A=
=0A=
        onClick : function(e){=0A=
        if(!this.disabled && this.fireEvent("click", this, e) !=3D=3D =
false=0A=
                && this.parentMenu.fireEvent("itemclick", this, e) =
!=3D=3D false){=0A=
            this.handleClick(e);=0A=
        }else{=0A=
            e.stopEvent();=0A=
        }=0A=
    },=0A=
=0A=
        activate : function(){=0A=
        if(this.disabled){=0A=
            return false;=0A=
        }=0A=
        var li =3D this.container;=0A=
        li.addClass(this.activeClass);=0A=
        this.region =3D li.getRegion().adjust(2, 2, -2, -2);=0A=
        this.fireEvent("activate", this);=0A=
        return true;=0A=
    },=0A=
=0A=
        deactivate : function(){=0A=
        this.container.removeClass(this.activeClass);=0A=
        this.fireEvent("deactivate", this);=0A=
    },=0A=
=0A=
        shouldDeactivate : function(e){=0A=
        return !this.region || !this.region.contains(e.getPoint());=0A=
    },=0A=
=0A=
        handleClick : function(e){=0A=
        if(this.hideOnClick){=0A=
            this.parentMenu.hide.defer(this.hideDelay, this.parentMenu, =
[true]);=0A=
        }=0A=
    },=0A=
=0A=
        expandMenu : function(autoActivate){=0A=
            },=0A=
=0A=
        hideMenu : function(){=0A=
            }=0A=
});=0A=
=0A=
Ext.menu.TextItem =3D function(text){=0A=
    this.text =3D text;=0A=
    Ext.menu.TextItem.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.menu.TextItem, Ext.menu.BaseItem, {=0A=
    =0A=
    =0A=
    hideOnClick : false,=0A=
    =0A=
    itemCls : "x-menu-text",=0A=
=0A=
        onRender : function(){=0A=
        var s =3D document.createElement("span");=0A=
        s.className =3D this.itemCls;=0A=
        s.innerHTML =3D this.text;=0A=
        this.el =3D s;=0A=
        Ext.menu.TextItem.superclass.onRender.apply(this, arguments);=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.Separator =3D function(config){=0A=
    Ext.menu.Separator.superclass.constructor.call(this, config);=0A=
};=0A=
=0A=
Ext.extend(Ext.menu.Separator, Ext.menu.BaseItem, {=0A=
    =0A=
    itemCls : "x-menu-sep",=0A=
    =0A=
    hideOnClick : false,=0A=
=0A=
        onRender : function(li){=0A=
        var s =3D document.createElement("span");=0A=
        s.className =3D this.itemCls;=0A=
        s.innerHTML =3D "&#160;";=0A=
        this.el =3D s;=0A=
        li.addClass("x-menu-sep-li");=0A=
        Ext.menu.Separator.superclass.onRender.apply(this, arguments);=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.Item =3D function(config){=0A=
    Ext.menu.Item.superclass.constructor.call(this, config);=0A=
    if(this.menu){=0A=
        this.menu =3D Ext.menu.MenuMgr.get(this.menu);=0A=
    }=0A=
};=0A=
Ext.extend(Ext.menu.Item, Ext.menu.BaseItem, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    itemCls : "x-menu-item",=0A=
    =0A=
    canActivate : true,=0A=
    =0A=
    showDelay: 200,=0A=
        hideDelay: 200,=0A=
=0A=
        ctype: "Ext.menu.Item",=0A=
=0A=
        onRender : function(container, position){=0A=
        var el =3D document.createElement("a");=0A=
        el.hideFocus =3D true;=0A=
        el.unselectable =3D "on";=0A=
        el.href =3D this.href || "#";=0A=
        if(this.hrefTarget){=0A=
            el.target =3D this.hrefTarget;=0A=
        }=0A=
        el.className =3D this.itemCls + (this.menu ?  " =
x-menu-item-arrow" : "") + (this.cls ?  " " + this.cls : "");=0A=
        el.innerHTML =3D String.format(=0A=
                '<img src=3D"{0}" class=3D"x-menu-item-icon {2}" />{1}',=0A=
                this.icon || Ext.BLANK_IMAGE_URL, =
this.itemText||this.text, this.iconCls || '');=0A=
        this.el =3D el;=0A=
        Ext.menu.Item.superclass.onRender.call(this, container, =
position);=0A=
    },=0A=
=0A=
    =0A=
    setText : function(text){=0A=
        this.text =3D text;=0A=
        if(this.rendered){=0A=
            this.el.update(String.format(=0A=
                '<img src=3D"{0}" class=3D"x-menu-item-icon {2}">{1}',=0A=
                this.icon || Ext.BLANK_IMAGE_URL, this.text, =
this.iconCls || ''));=0A=
            this.parentMenu.autoWidth();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setIconClass : function(cls){=0A=
        var oldCls =3D this.iconCls;=0A=
        this.iconCls =3D cls;=0A=
        if(this.rendered){=0A=
            this.el.child('img.x-menu-item-icon').replaceClass(oldCls, =
this.iconCls);=0A=
        }=0A=
    },=0A=
=0A=
        handleClick : function(e){=0A=
        if(!this.href){             e.stopEvent();=0A=
        }=0A=
        Ext.menu.Item.superclass.handleClick.apply(this, arguments);=0A=
    },=0A=
=0A=
        activate : function(autoExpand){=0A=
        if(Ext.menu.Item.superclass.activate.apply(this, arguments)){=0A=
            this.focus();=0A=
            if(autoExpand){=0A=
                this.expandMenu();=0A=
            }=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
        shouldDeactivate : function(e){=0A=
        if(Ext.menu.Item.superclass.shouldDeactivate.call(this, e)){=0A=
            if(this.menu && this.menu.isVisible()){=0A=
                return =
!this.menu.getEl().getRegion().contains(e.getPoint());=0A=
            }=0A=
            return true;=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
        deactivate : function(){=0A=
        Ext.menu.Item.superclass.deactivate.apply(this, arguments);=0A=
        this.hideMenu();=0A=
    },=0A=
=0A=
        expandMenu : function(autoActivate){=0A=
        if(!this.disabled && this.menu){=0A=
            clearTimeout(this.hideTimer);=0A=
            delete this.hideTimer;=0A=
            if(!this.menu.isVisible() && !this.showTimer){=0A=
                this.showTimer =3D =
this.deferExpand.defer(this.showDelay, this, [autoActivate]);=0A=
            }else if (this.menu.isVisible() && autoActivate){=0A=
                this.menu.tryActivate(0, 1);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        deferExpand : function(autoActivate){=0A=
        delete this.showTimer;=0A=
        this.menu.show(this.container, this.parentMenu.subMenuAlign || =
"tl-tr?", this.parentMenu);=0A=
        if(autoActivate){=0A=
            this.menu.tryActivate(0, 1);=0A=
        }=0A=
    },=0A=
=0A=
        hideMenu : function(){=0A=
        clearTimeout(this.showTimer);=0A=
        delete this.showTimer;=0A=
        if(!this.hideTimer && this.menu && this.menu.isVisible()){=0A=
            this.hideTimer =3D this.deferHide.defer(this.hideDelay, =
this);=0A=
        }=0A=
    },=0A=
=0A=
        deferHide : function(){=0A=
        delete this.hideTimer;=0A=
        this.menu.hide();=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.CheckItem =3D function(config){=0A=
    Ext.menu.CheckItem.superclass.constructor.call(this, config);=0A=
    this.addEvents(=0A=
        =0A=
        "beforecheckchange" ,=0A=
        =0A=
        "checkchange"=0A=
    );=0A=
    =0A=
    if(this.checkHandler){=0A=
        this.on('checkchange', this.checkHandler, this.scope);=0A=
    }=0A=
    Ext.menu.MenuMgr.registerCheckable(this);=0A=
};=0A=
Ext.extend(Ext.menu.CheckItem, Ext.menu.Item, {=0A=
    =0A=
    =0A=
    itemCls : "x-menu-item x-menu-check-item",=0A=
    =0A=
    groupClass : "x-menu-group-item",=0A=
=0A=
    =0A=
    checked: false,=0A=
=0A=
        ctype: "Ext.menu.CheckItem",=0A=
=0A=
        onRender : function(c){=0A=
        Ext.menu.CheckItem.superclass.onRender.apply(this, arguments);=0A=
        if(this.group){=0A=
            this.el.addClass(this.groupClass);=0A=
        }=0A=
        if(this.checked){=0A=
            this.checked =3D false;=0A=
            this.setChecked(true, true);=0A=
        }=0A=
    },=0A=
=0A=
        destroy : function(){=0A=
        Ext.menu.MenuMgr.unregisterCheckable(this);=0A=
        Ext.menu.CheckItem.superclass.destroy.apply(this, arguments);=0A=
    },=0A=
=0A=
    =0A=
    setChecked : function(state, suppressEvent){=0A=
        if(this.checked !=3D state && =
this.fireEvent("beforecheckchange", this, state) !=3D=3D false){=0A=
            if(this.container){=0A=
                this.container[state ? "addClass" : =
"removeClass"]("x-menu-item-checked");=0A=
            }=0A=
            this.checked =3D state;=0A=
            if(suppressEvent !=3D=3D true){=0A=
                this.fireEvent("checkchange", this, state);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        handleClick : function(e){=0A=
       if(!this.disabled && !(this.checked && this.group)){           =
this.setChecked(!this.checked);=0A=
       }=0A=
       Ext.menu.CheckItem.superclass.handleClick.apply(this, arguments);=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.Adapter =3D function(component, config){=0A=
    Ext.menu.Adapter.superclass.constructor.call(this, config);=0A=
    this.component =3D component;=0A=
};=0A=
Ext.extend(Ext.menu.Adapter, Ext.menu.BaseItem, {=0A=
        canActivate : true,=0A=
=0A=
        onRender : function(container, position){=0A=
        this.component.render(container);=0A=
        this.el =3D this.component.getEl();=0A=
    },=0A=
=0A=
        activate : function(){=0A=
        if(this.disabled){=0A=
            return false;=0A=
        }=0A=
        this.component.focus();=0A=
        this.fireEvent("activate", this);=0A=
        return true;=0A=
    },=0A=
=0A=
        deactivate : function(){=0A=
        this.fireEvent("deactivate", this);=0A=
    },=0A=
=0A=
        disable : function(){=0A=
        this.component.disable();=0A=
        Ext.menu.Adapter.superclass.disable.call(this);=0A=
    },=0A=
=0A=
        enable : function(){=0A=
        this.component.enable();=0A=
        Ext.menu.Adapter.superclass.enable.call(this);=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.DateItem =3D function(config){=0A=
    Ext.menu.DateItem.superclass.constructor.call(this, new =
Ext.DatePicker(config), config);=0A=
    =0A=
    this.picker =3D this.component;=0A=
    this.addEvents('select');=0A=
    =0A=
    this.picker.on("render", function(picker){=0A=
        picker.getEl().swallowEvent("click");=0A=
        picker.container.addClass("x-menu-date-item");=0A=
    });=0A=
=0A=
    this.picker.on("select", this.onSelect, this);=0A=
};=0A=
=0A=
Ext.extend(Ext.menu.DateItem, Ext.menu.Adapter, {=0A=
        onSelect : function(picker, date){=0A=
        this.fireEvent("select", this, date, picker);=0A=
        Ext.menu.DateItem.superclass.handleClick.call(this);=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.ColorItem =3D function(config){=0A=
    Ext.menu.ColorItem.superclass.constructor.call(this, new =
Ext.ColorPalette(config), config);=0A=
    =0A=
    this.palette =3D this.component;=0A=
    this.relayEvents(this.palette, ["select"]);=0A=
    if(this.selectHandler){=0A=
        this.on('select', this.selectHandler, this.scope);=0A=
    }=0A=
};=0A=
Ext.extend(Ext.menu.ColorItem, Ext.menu.Adapter);=0A=
=0A=
Ext.menu.DateMenu =3D function(config){=0A=
    Ext.menu.DateMenu.superclass.constructor.call(this, config);=0A=
    this.plain =3D true;=0A=
    var di =3D new Ext.menu.DateItem(config);=0A=
    this.add(di);=0A=
    =0A=
    this.picker =3D di.picker;=0A=
    =0A=
    this.relayEvents(di, ["select"]);=0A=
=0A=
    this.on('beforeshow', function(){=0A=
        if(this.picker){=0A=
            this.picker.hideMonthPicker(true);=0A=
        }=0A=
    }, this);=0A=
};=0A=
Ext.extend(Ext.menu.DateMenu, Ext.menu.Menu, {=0A=
    cls:'x-date-menu',=0A=
=0A=
        beforeDestroy : function() {=0A=
        this.picker.destroy();=0A=
    }=0A=
});=0A=
=0A=
Ext.menu.ColorMenu =3D function(config){=0A=
    Ext.menu.ColorMenu.superclass.constructor.call(this, config);=0A=
    this.plain =3D true;=0A=
    var ci =3D new Ext.menu.ColorItem(config);=0A=
    this.add(ci);=0A=
    =0A=
    this.palette =3D ci.palette;=0A=
    =0A=
    this.relayEvents(ci, ["select"]);=0A=
};=0A=
Ext.extend(Ext.menu.ColorMenu, Ext.menu.Menu);=0A=
=0A=
Ext.form.Field =3D Ext.extend(Ext.BoxComponent,  {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    invalidClass : "x-form-invalid",=0A=
    =0A=
    invalidText : "The value in this field is invalid",=0A=
    =0A=
    focusClass : "x-form-focus",=0A=
    =0A=
    validationEvent : "keyup",=0A=
    =0A=
    validateOnBlur : true,=0A=
    =0A=
    validationDelay : 250,=0A=
    =0A=
    defaultAutoCreate : {tag: "input", type: "text", size: "20", =
autocomplete: "off"},=0A=
    =0A=
    fieldClass : "x-form-field",=0A=
    =0A=
    msgTarget : 'qtip',=0A=
    =0A=
    msgFx : 'normal',=0A=
    =0A=
    readOnly : false,=0A=
    =0A=
    disabled : false,=0A=
    =0A=
        isFormField : true,=0A=
    =0A=
        hasFocus : false,=0A=
=0A=
		initComponent : function(){=0A=
        Ext.form.Field.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            'focus',=0A=
            =0A=
            'blur',=0A=
            =0A=
            'specialkey',=0A=
            =0A=
            'change',=0A=
            =0A=
            'invalid',=0A=
            =0A=
            'valid'=0A=
        );=0A=
    },=0A=
=0A=
    =0A=
    getName: function(){=0A=
         return this.rendered && this.el.dom.name ? this.el.dom.name : =
(this.hiddenName || '');=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.form.Field.superclass.onRender.call(this, ct, position);=0A=
        if(!this.el){=0A=
            var cfg =3D this.getAutoCreate();=0A=
            if(!cfg.name){=0A=
                cfg.name =3D this.name || this.id;=0A=
            }=0A=
            if(this.inputType){=0A=
                cfg.type =3D this.inputType;=0A=
            }=0A=
            this.el =3D ct.createChild(cfg, position);=0A=
        }=0A=
        var type =3D this.el.dom.type;=0A=
        if(type){=0A=
            if(type =3D=3D 'password'){=0A=
                type =3D 'text';=0A=
            }=0A=
            this.el.addClass('x-form-'+type);=0A=
        }=0A=
        if(this.readOnly){=0A=
            this.el.dom.readOnly =3D true;=0A=
        }=0A=
        if(this.tabIndex !=3D=3D undefined){=0A=
            this.el.dom.setAttribute('tabIndex', this.tabIndex);=0A=
        }=0A=
=0A=
        this.el.addClass([this.fieldClass, this.cls]);=0A=
        this.initValue();=0A=
    },=0A=
=0A=
        initValue : function(){=0A=
        if(this.value !=3D=3D undefined){=0A=
            this.setValue(this.value);=0A=
        }else if(this.el.dom.value.length > 0){=0A=
            this.setValue(this.el.dom.value);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    isDirty : function() {=0A=
        if(this.disabled) {=0A=
            return false;=0A=
        }=0A=
        return String(this.getValue()) !=3D=3D =
String(this.originalValue);=0A=
    },=0A=
=0A=
        afterRender : function(){=0A=
        Ext.form.Field.superclass.afterRender.call(this);=0A=
        this.initEvents();=0A=
    },=0A=
=0A=
        fireKey : function(e){=0A=
        if(e.isSpecialKey()){=0A=
            this.fireEvent("specialkey", this, e);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    reset : function(){=0A=
        this.setValue(this.originalValue);=0A=
        this.clearInvalid();=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        this.el.on(Ext.isIE || Ext.isSafari3 ? "keydown" : "keypress", =
this.fireKey,  this);=0A=
        this.el.on("focus", this.onFocus,  this);=0A=
        this.el.on("blur", this.onBlur,  this);=0A=
=0A=
                this.originalValue =3D this.getValue();=0A=
    },=0A=
=0A=
        onFocus : function(){=0A=
        if(!Ext.isOpera && this.focusClass){             =
this.el.addClass(this.focusClass);=0A=
        }=0A=
        if(!this.hasFocus){=0A=
            this.hasFocus =3D true;=0A=
            this.startValue =3D this.getValue();=0A=
            this.fireEvent("focus", this);=0A=
        }=0A=
    },=0A=
=0A=
    beforeBlur : Ext.emptyFn,=0A=
=0A=
        onBlur : function(){=0A=
        this.beforeBlur();=0A=
        if(!Ext.isOpera && this.focusClass){             =
this.el.removeClass(this.focusClass);=0A=
        }=0A=
        this.hasFocus =3D false;=0A=
        if(this.validationEvent !=3D=3D false && this.validateOnBlur && =
this.validationEvent !=3D "blur"){=0A=
            this.validate();=0A=
        }=0A=
        var v =3D this.getValue();=0A=
        if(String(v) !=3D=3D String(this.startValue)){=0A=
            this.fireEvent('change', this, v, this.startValue);=0A=
        }=0A=
        this.fireEvent("blur", this);=0A=
    },=0A=
=0A=
    =0A=
    isValid : function(preventMark){=0A=
        if(this.disabled){=0A=
            return true;=0A=
        }=0A=
        var restore =3D this.preventMark;=0A=
        this.preventMark =3D preventMark =3D=3D=3D true;=0A=
        var v =3D =
this.validateValue(this.processValue(this.getRawValue()));=0A=
        this.preventMark =3D restore;=0A=
        return v;=0A=
    },=0A=
=0A=
    =0A=
    validate : function(){=0A=
        if(this.disabled || =
this.validateValue(this.processValue(this.getRawValue()))){=0A=
            this.clearInvalid();=0A=
            return true;=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
        processValue : function(value){=0A=
        return value;=0A=
    },=0A=
=0A=
            validateValue : function(value){=0A=
        return true;=0A=
    },=0A=
=0A=
    =0A=
    markInvalid : function(msg){=0A=
        if(!this.rendered || this.preventMark){             return;=0A=
        }=0A=
        this.el.addClass(this.invalidClass);=0A=
        msg =3D msg || this.invalidText;=0A=
        switch(this.msgTarget){=0A=
            case 'qtip':=0A=
                this.el.dom.qtip =3D msg;=0A=
                this.el.dom.qclass =3D 'x-form-invalid-tip';=0A=
                if(Ext.QuickTips){                     =
Ext.QuickTips.enable();=0A=
                }=0A=
                break;=0A=
            case 'title':=0A=
                this.el.dom.title =3D msg;=0A=
                break;=0A=
            case 'under':=0A=
                if(!this.errorEl){=0A=
                    var elp =3D this.getErrorCt();=0A=
                    this.errorEl =3D =
elp.createChild({cls:'x-form-invalid-msg'});=0A=
                    this.errorEl.setWidth(elp.getWidth(true)-20);=0A=
                }=0A=
                this.errorEl.update(msg);=0A=
                Ext.form.Field.msgFx[this.msgFx].show(this.errorEl, =
this);=0A=
                break;=0A=
            case 'side':=0A=
                if(!this.errorIcon){=0A=
                    var elp =3D this.getErrorCt();=0A=
                    this.errorIcon =3D =
elp.createChild({cls:'x-form-invalid-icon'});=0A=
                }=0A=
                this.alignErrorIcon();=0A=
                this.errorIcon.dom.qtip =3D msg;=0A=
                this.errorIcon.dom.qclass =3D 'x-form-invalid-tip';=0A=
                this.errorIcon.show();=0A=
                this.on('resize', this.alignErrorIcon, this);=0A=
                break;=0A=
            default:=0A=
                var t =3D Ext.getDom(this.msgTarget);=0A=
                t.innerHTML =3D msg;=0A=
                t.style.display =3D this.msgDisplay;=0A=
                break;=0A=
        }=0A=
        this.fireEvent('invalid', this, msg);=0A=
    },=0A=
    =0A=
        getErrorCt : function(){=0A=
        return this.el.findParent('.x-form-element', 5, true) ||         =
    this.el.findParent('.x-form-field-wrap', 5, true);       },=0A=
=0A=
        alignErrorIcon : function(){=0A=
        this.errorIcon.alignTo(this.el, 'tl-tr', [2, 0]);=0A=
    },=0A=
=0A=
    =0A=
    clearInvalid : function(){=0A=
        if(!this.rendered || this.preventMark){             return;=0A=
        }=0A=
        this.el.removeClass(this.invalidClass);=0A=
        switch(this.msgTarget){=0A=
            case 'qtip':=0A=
                this.el.dom.qtip =3D '';=0A=
                break;=0A=
            case 'title':=0A=
                this.el.dom.title =3D '';=0A=
                break;=0A=
            case 'under':=0A=
                if(this.errorEl){=0A=
                    Ext.form.Field.msgFx[this.msgFx].hide(this.errorEl, =
this);=0A=
                }=0A=
                break;=0A=
            case 'side':=0A=
                if(this.errorIcon){=0A=
                    this.errorIcon.dom.qtip =3D '';=0A=
                    this.errorIcon.hide();=0A=
                    this.un('resize', this.alignErrorIcon, this);=0A=
                }=0A=
                break;=0A=
            default:=0A=
                var t =3D Ext.getDom(this.msgTarget);=0A=
                t.innerHTML =3D '';=0A=
                t.style.display =3D 'none';=0A=
                break;=0A=
        }=0A=
        this.fireEvent('valid', this);=0A=
    },=0A=
=0A=
    =0A=
    getRawValue : function(){=0A=
        var v =3D this.rendered ? this.el.getValue() : =
Ext.value(this.value, '');=0A=
        if(v =3D=3D=3D this.emptyText){=0A=
            v =3D '';=0A=
        }=0A=
        return v;=0A=
    },=0A=
=0A=
    =0A=
    getValue : function(){=0A=
        if(!this.rendered) {=0A=
            return this.value;=0A=
        }=0A=
        var v =3D this.el.getValue();=0A=
        if(v =3D=3D=3D this.emptyText || v =3D=3D=3D undefined){=0A=
            v =3D '';=0A=
        }=0A=
        return v;=0A=
    },=0A=
=0A=
    =0A=
    setRawValue : function(v){=0A=
        return this.el.dom.value =3D (v =3D=3D=3D null || v =3D=3D=3D =
undefined ? '' : v);=0A=
    },=0A=
=0A=
    =0A=
    setValue : function(v){=0A=
        this.value =3D v;=0A=
        if(this.rendered){=0A=
            this.el.dom.value =3D (v =3D=3D=3D null || v =3D=3D=3D =
undefined ? '' : v);=0A=
            this.validate();=0A=
        }=0A=
    },=0A=
=0A=
    adjustSize : function(w, h){=0A=
        var s =3D Ext.form.Field.superclass.adjustSize.call(this, w, h);=0A=
        s.width =3D this.adjustWidth(this.el.dom.tagName, s.width);=0A=
        return s;=0A=
    },=0A=
=0A=
    adjustWidth : function(tag, w){=0A=
        tag =3D tag.toLowerCase();=0A=
        if(typeof w =3D=3D 'number' && !Ext.isSafari){=0A=
            if(Ext.isIE && (tag =3D=3D 'input' || tag =3D=3D =
'textarea')){=0A=
                if(tag =3D=3D 'input' && !Ext.isStrict){=0A=
                    return this.inEditor ? w : w - 3;=0A=
                }=0A=
                if(tag =3D=3D 'input' && Ext.isStrict){=0A=
                    return w - (Ext.isIE6 ? 4 : 1);=0A=
                }=0A=
                if(tag =3D=3D 'textarea' && Ext.isStrict){=0A=
                    return w-2;=0A=
                }=0A=
            }else if(Ext.isOpera && Ext.isStrict){=0A=
                if(tag =3D=3D 'input'){=0A=
                    return w + 2;=0A=
                }=0A=
                if(tag =3D=3D 'textarea'){=0A=
                    return w-2;=0A=
                }=0A=
            }=0A=
        }=0A=
        return w;=0A=
    }=0A=
=0A=
    =0A=
    =0A=
=0A=
    =0A=
});=0A=
=0A=
=0A=
Ext.form.Field.msgFx =3D {=0A=
    normal : {=0A=
        show: function(msgEl, f){=0A=
            msgEl.setDisplayed('block');=0A=
        },=0A=
=0A=
        hide : function(msgEl, f){=0A=
            msgEl.setDisplayed(false).update('');=0A=
        }=0A=
    },=0A=
=0A=
    slide : {=0A=
        show: function(msgEl, f){=0A=
            msgEl.slideIn('t', {stopFx:true});=0A=
        },=0A=
=0A=
        hide : function(msgEl, f){=0A=
            msgEl.slideOut('t', {stopFx:true,useDisplay:true});=0A=
        }=0A=
    },=0A=
=0A=
    slideRight : {=0A=
        show: function(msgEl, f){=0A=
            msgEl.fixDisplay();=0A=
            msgEl.alignTo(f.el, 'tl-tr');=0A=
            msgEl.slideIn('l', {stopFx:true});=0A=
        },=0A=
=0A=
        hide : function(msgEl, f){=0A=
            msgEl.slideOut('l', {stopFx:true,useDisplay:true});=0A=
        }=0A=
    }=0A=
};=0A=
Ext.reg('field', Ext.form.Field);=0A=
=0A=
=0A=
Ext.form.TextField =3D Ext.extend(Ext.form.Field,  {=0A=
    =0A=
    =0A=
    grow : false,=0A=
    =0A=
    growMin : 30,=0A=
    =0A=
    growMax : 800,=0A=
    =0A=
    vtype : null,=0A=
    =0A=
    maskRe : null,=0A=
    =0A=
    disableKeyFilter : false,=0A=
    =0A=
    allowBlank : true,=0A=
    =0A=
    minLength : 0,=0A=
    =0A=
    maxLength : Number.MAX_VALUE,=0A=
    =0A=
    minLengthText : "The minimum length for this field is {0}",=0A=
    =0A=
    maxLengthText : "The maximum length for this field is {0}",=0A=
    =0A=
    selectOnFocus : false,=0A=
    =0A=
    blankText : "This field is required",=0A=
    =0A=
    validator : null,=0A=
    =0A=
    regex : null,=0A=
    =0A=
    regexText : "",=0A=
    =0A=
    emptyText : null,=0A=
    =0A=
    emptyClass : 'x-form-empty-field',=0A=
=0A=
    =0A=
=0A=
    initComponent : function(){=0A=
        Ext.form.TextField.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            'autosize',=0A=
=0A=
            =0A=
            'keydown',=0A=
            =0A=
            'keyup',=0A=
            =0A=
            'keypress'=0A=
        );=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        Ext.form.TextField.superclass.initEvents.call(this);=0A=
        if(this.validationEvent =3D=3D 'keyup'){=0A=
            this.validationTask =3D new =
Ext.util.DelayedTask(this.validate, this);=0A=
            this.el.on('keyup', this.filterValidation, this);=0A=
        }=0A=
        else if(this.validationEvent !=3D=3D false){=0A=
            this.el.on(this.validationEvent, this.validate, this, =
{buffer: this.validationDelay});=0A=
        }=0A=
        if(this.selectOnFocus || this.emptyText){=0A=
            this.on("focus", this.preFocus, this);=0A=
            if(this.emptyText){=0A=
                this.on('blur', this.postBlur, this);=0A=
                this.applyEmptyText();=0A=
            }=0A=
        }=0A=
        if(this.maskRe || (this.vtype && this.disableKeyFilter !=3D=3D =
true && (this.maskRe =3D Ext.form.VTypes[this.vtype+'Mask']))){=0A=
            this.el.on("keypress", this.filterKeys, this);=0A=
        }=0A=
        if(this.grow){=0A=
            this.el.on("keyup", this.onKeyUpBuffered,  this, =
{buffer:50});=0A=
            this.el.on("click", this.autoSize,  this);=0A=
        }=0A=
=0A=
        if(this.enableKeyEvents){=0A=
            this.el.on("keyup", this.onKeyUp, this);=0A=
            this.el.on("keydown", this.onKeyDown, this);=0A=
            this.el.on("keypress", this.onKeyPress, this);=0A=
        }=0A=
    },=0A=
=0A=
    processValue : function(value){=0A=
        if(this.stripCharsRe){=0A=
            var newValue =3D value.replace(this.stripCharsRe, '');=0A=
            if(newValue !=3D=3D value){=0A=
                this.setRawValue(newValue);=0A=
                return newValue;=0A=
            }=0A=
        }=0A=
        return value;=0A=
    },=0A=
=0A=
    filterValidation : function(e){=0A=
        if(!e.isNavKeyPress()){=0A=
            this.validationTask.delay(this.validationDelay);=0A=
        }=0A=
    },=0A=
=0A=
        onKeyUpBuffered : function(e){=0A=
        if(!e.isNavKeyPress()){=0A=
            this.autoSize();=0A=
        }=0A=
    },=0A=
=0A=
        onKeyUp : function(e){=0A=
        this.fireEvent('keyup', this, e);=0A=
    },=0A=
=0A=
        onKeyDown : function(e){=0A=
        this.fireEvent('keydown', this, e);=0A=
    },=0A=
=0A=
        onKeyPress : function(e){=0A=
        this.fireEvent('keypress', this, e);=0A=
    },=0A=
=0A=
    =0A=
    reset : function(){=0A=
        Ext.form.TextField.superclass.reset.call(this);=0A=
        this.applyEmptyText();=0A=
    },=0A=
=0A=
    applyEmptyText : function(){=0A=
        if(this.rendered && this.emptyText && this.getRawValue().length =
< 1){=0A=
            this.setRawValue(this.emptyText);=0A=
            this.el.addClass(this.emptyClass);=0A=
        }=0A=
    },=0A=
=0A=
        preFocus : function(){=0A=
        if(this.emptyText){=0A=
            if(this.el.dom.value =3D=3D this.emptyText){=0A=
                this.setRawValue('');=0A=
            }=0A=
            this.el.removeClass(this.emptyClass);=0A=
        }=0A=
        if(this.selectOnFocus){=0A=
            this.el.dom.select();=0A=
        }=0A=
    },=0A=
=0A=
        postBlur : function(){=0A=
        this.applyEmptyText();=0A=
    },=0A=
=0A=
        filterKeys : function(e){=0A=
        var k =3D e.getKey();=0A=
        if(!Ext.isIE && (e.isNavKeyPress() || k =3D=3D e.BACKSPACE || (k =
=3D=3D e.DELETE && e.button =3D=3D -1))){=0A=
            return;=0A=
        }=0A=
        var c =3D e.getCharCode(), cc =3D String.fromCharCode(c);=0A=
        if(Ext.isIE && (e.isSpecialKey() || !cc)){=0A=
            return;=0A=
        }=0A=
        if(!this.maskRe.test(cc)){=0A=
            e.stopEvent();=0A=
        }=0A=
    },=0A=
=0A=
    setValue : function(v){=0A=
        if(this.emptyText && this.el && v !=3D=3D undefined && v !=3D=3D =
null && v !=3D=3D ''){=0A=
            this.el.removeClass(this.emptyClass);=0A=
        }=0A=
        Ext.form.TextField.superclass.setValue.apply(this, arguments);=0A=
        this.applyEmptyText();=0A=
        this.autoSize();=0A=
    },=0A=
=0A=
    =0A=
    validateValue : function(value){=0A=
        if(value.length < 1 || value =3D=3D=3D this.emptyText){          =
    if(this.allowBlank){=0A=
                 this.clearInvalid();=0A=
                 return true;=0A=
             }else{=0A=
                 this.markInvalid(this.blankText);=0A=
                 return false;=0A=
             }=0A=
        }=0A=
        if(value.length < this.minLength){=0A=
            this.markInvalid(String.format(this.minLengthText, =
this.minLength));=0A=
            return false;=0A=
        }=0A=
        if(value.length > this.maxLength){=0A=
            this.markInvalid(String.format(this.maxLengthText, =
this.maxLength));=0A=
            return false;=0A=
        }=0A=
        if(this.vtype){=0A=
            var vt =3D Ext.form.VTypes;=0A=
            if(!vt[this.vtype](value, this)){=0A=
                this.markInvalid(this.vtypeText || vt[this.vtype =
+'Text']);=0A=
                return false;=0A=
            }=0A=
        }=0A=
        if(typeof this.validator =3D=3D "function"){=0A=
            var msg =3D this.validator(value);=0A=
            if(msg !=3D=3D true){=0A=
                this.markInvalid(msg);=0A=
                return false;=0A=
            }=0A=
        }=0A=
        if(this.regex && !this.regex.test(value)){=0A=
            this.markInvalid(this.regexText);=0A=
            return false;=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
    =0A=
    selectText : function(start, end){=0A=
        var v =3D this.getRawValue();=0A=
        if(v.length > 0){=0A=
            start =3D start =3D=3D=3D undefined ? 0 : start;=0A=
            end =3D end =3D=3D=3D undefined ? v.length : end;=0A=
            var d =3D this.el.dom;=0A=
            if(d.setSelectionRange){=0A=
                d.setSelectionRange(start, end);=0A=
            }else if(d.createTextRange){=0A=
                var range =3D d.createTextRange();=0A=
                range.moveStart("character", start);=0A=
                range.moveEnd("character", end-v.length);=0A=
                range.select();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    autoSize : function(){=0A=
        if(!this.grow || !this.rendered){=0A=
            return;=0A=
        }=0A=
        if(!this.metrics){=0A=
            this.metrics =3D =
Ext.util.TextMetrics.createInstance(this.el);=0A=
        }=0A=
        var el =3D this.el;=0A=
        var v =3D el.dom.value;=0A=
        var d =3D document.createElement('div');=0A=
        d.appendChild(document.createTextNode(v));=0A=
        v =3D d.innerHTML;=0A=
        d =3D null;=0A=
        v +=3D "&#160;";=0A=
        var w =3D Math.min(this.growMax, =
Math.max(this.metrics.getWidth(v) +  10, this.growMin));=0A=
        this.el.setWidth(w);=0A=
        this.fireEvent("autosize", this, w);=0A=
    }=0A=
});=0A=
Ext.reg('textfield', Ext.form.TextField);=0A=
=0A=
=0A=
Ext.form.TriggerField =3D Ext.extend(Ext.form.TextField,  {=0A=
    =0A=
    =0A=
    defaultAutoCreate : {tag: "input", type: "text", size: "16", =
autocomplete: "off"},=0A=
    =0A=
    hideTrigger:false,=0A=
=0A=
    =0A=
    autoSize: Ext.emptyFn,=0A=
        monitorTab : true,=0A=
        deferHeight : true,=0A=
        mimicing : false,=0A=
=0A=
        onResize : function(w, h){=0A=
        Ext.form.TriggerField.superclass.onResize.call(this, w, h);=0A=
        if(typeof w =3D=3D 'number'){=0A=
            this.el.setWidth(this.adjustWidth('input', w - =
this.trigger.getWidth()));=0A=
        }=0A=
        this.wrap.setWidth(this.el.getWidth()+this.trigger.getWidth());=0A=
    },=0A=
=0A=
        adjustSize : Ext.BoxComponent.prototype.adjustSize,=0A=
=0A=
        getResizeEl : function(){=0A=
        return this.wrap;=0A=
    },=0A=
=0A=
        getPositionEl : function(){=0A=
        return this.wrap;=0A=
    },=0A=
=0A=
        alignErrorIcon : function(){=0A=
        this.errorIcon.alignTo(this.wrap, 'tl-tr', [2, 0]);=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.form.TriggerField.superclass.onRender.call(this, ct, =
position);=0A=
        this.wrap =3D this.el.wrap({cls: "x-form-field-wrap"});=0A=
        this.trigger =3D this.wrap.createChild(this.triggerConfig ||=0A=
                {tag: "img", src: Ext.BLANK_IMAGE_URL, cls: =
"x-form-trigger " + this.triggerClass});=0A=
        if(this.hideTrigger){=0A=
            this.trigger.setDisplayed(false);=0A=
        }=0A=
        this.initTrigger();=0A=
        if(!this.width){=0A=
            =
this.wrap.setWidth(this.el.getWidth()+this.trigger.getWidth());=0A=
        }=0A=
    },=0A=
=0A=
        initTrigger : function(){=0A=
        this.trigger.on("click", this.onTriggerClick, this, =
{preventDefault:true});=0A=
        this.trigger.addClassOnOver('x-form-trigger-over');=0A=
        this.trigger.addClassOnClick('x-form-trigger-click');=0A=
    },=0A=
=0A=
        onDestroy : function(){=0A=
        if(this.trigger){=0A=
            this.trigger.removeAllListeners();=0A=
            this.trigger.remove();=0A=
        }=0A=
        if(this.wrap){=0A=
            this.wrap.remove();=0A=
        }=0A=
        Ext.form.TriggerField.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
        onFocus : function(){=0A=
        Ext.form.TriggerField.superclass.onFocus.call(this);=0A=
        if(!this.mimicing){=0A=
            this.wrap.addClass('x-trigger-wrap-focus');=0A=
            this.mimicing =3D true;=0A=
            Ext.get(Ext.isIE ? document.body : document).on("mousedown", =
this.mimicBlur, this, {delay: 10});=0A=
            if(this.monitorTab){=0A=
                this.el.on("keydown", this.checkTab, this);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        checkTab : function(e){=0A=
        if(e.getKey() =3D=3D e.TAB){=0A=
            this.triggerBlur();=0A=
        }=0A=
    },=0A=
=0A=
        onBlur : function(){=0A=
            },=0A=
=0A=
        mimicBlur : function(e){=0A=
        if(!this.wrap.contains(e.target) && this.validateBlur(e)){=0A=
            this.triggerBlur();=0A=
        }=0A=
    },=0A=
=0A=
        triggerBlur : function(){=0A=
        this.mimicing =3D false;=0A=
        Ext.get(Ext.isIE ? document.body : document).un("mousedown", =
this.mimicBlur);=0A=
        if(this.monitorTab){=0A=
            this.el.un("keydown", this.checkTab, this);=0A=
        }=0A=
        this.beforeBlur();=0A=
        this.wrap.removeClass('x-trigger-wrap-focus');=0A=
        Ext.form.TriggerField.superclass.onBlur.call(this);=0A=
    },=0A=
=0A=
    beforeBlur : Ext.emptyFn, =0A=
=0A=
            validateBlur : function(e){=0A=
        return true;=0A=
    },=0A=
=0A=
        onDisable : function(){=0A=
        Ext.form.TriggerField.superclass.onDisable.call(this);=0A=
        if(this.wrap){=0A=
            this.wrap.addClass('x-item-disabled');=0A=
        }=0A=
    },=0A=
=0A=
        onEnable : function(){=0A=
        Ext.form.TriggerField.superclass.onEnable.call(this);=0A=
        if(this.wrap){=0A=
            this.wrap.removeClass('x-item-disabled');=0A=
        }=0A=
    },=0A=
=0A=
=0A=
        onShow : function(){=0A=
        if(this.wrap){=0A=
            this.wrap.dom.style.display =3D '';=0A=
            this.wrap.dom.style.visibility =3D 'visible';=0A=
        }=0A=
    },=0A=
=0A=
        onHide : function(){=0A=
        this.wrap.dom.style.display =3D 'none';=0A=
    },=0A=
=0A=
    =0A=
    onTriggerClick : Ext.emptyFn=0A=
=0A=
    =0A=
    =0A=
    =0A=
});=0A=
=0A=
Ext.form.TwinTriggerField =3D Ext.extend(Ext.form.TriggerField, {=0A=
    initComponent : function(){=0A=
        Ext.form.TwinTriggerField.superclass.initComponent.call(this);=0A=
=0A=
        this.triggerConfig =3D {=0A=
            tag:'span', cls:'x-form-twin-triggers', cn:[=0A=
            {tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger =
" + this.trigger1Class},=0A=
            {tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger =
" + this.trigger2Class}=0A=
        ]};=0A=
    },=0A=
=0A=
    getTrigger : function(index){=0A=
        return this.triggers[index];=0A=
    },=0A=
=0A=
    initTrigger : function(){=0A=
        var ts =3D this.trigger.select('.x-form-trigger', true);=0A=
        this.wrap.setStyle('overflow', 'hidden');=0A=
        var triggerField =3D this;=0A=
        ts.each(function(t, all, index){=0A=
            t.hide =3D function(){=0A=
                var w =3D triggerField.wrap.getWidth();=0A=
                this.dom.style.display =3D 'none';=0A=
                =
triggerField.el.setWidth(w-triggerField.trigger.getWidth());=0A=
            };=0A=
            t.show =3D function(){=0A=
                var w =3D triggerField.wrap.getWidth();=0A=
                this.dom.style.display =3D '';=0A=
                =
triggerField.el.setWidth(w-triggerField.trigger.getWidth());=0A=
            };=0A=
            var triggerIndex =3D 'Trigger'+(index+1);=0A=
=0A=
            if(this['hide'+triggerIndex]){=0A=
                t.dom.style.display =3D 'none';=0A=
            }=0A=
            t.on("click", this['on'+triggerIndex+'Click'], this, =
{preventDefault:true});=0A=
            t.addClassOnOver('x-form-trigger-over');=0A=
            t.addClassOnClick('x-form-trigger-click');=0A=
        }, this);=0A=
        this.triggers =3D ts.elements;=0A=
    },=0A=
=0A=
    onTrigger1Click : Ext.emptyFn,=0A=
    onTrigger2Click : Ext.emptyFn=0A=
});=0A=
Ext.reg('trigger', Ext.form.TriggerField);=0A=
=0A=
Ext.form.TextArea =3D Ext.extend(Ext.form.TextField,  {=0A=
    =0A=
    growMin : 60,=0A=
    =0A=
    growMax: 1000,=0A=
    growAppend : '&#160;\n&#160;',=0A=
    growPad : 0,=0A=
=0A=
    enterIsSpecial : false,=0A=
=0A=
    =0A=
    preventScrollbars: false,=0A=
    =0A=
=0A=
        onRender : function(ct, position){=0A=
        if(!this.el){=0A=
            this.defaultAutoCreate =3D {=0A=
                tag: "textarea",=0A=
                style:"width:100px;height:60px;",=0A=
                autocomplete: "off"=0A=
            };=0A=
        }=0A=
        Ext.form.TextArea.superclass.onRender.call(this, ct, position);=0A=
        if(this.grow){=0A=
            this.textSizeEl =3D Ext.DomHelper.append(document.body, {=0A=
                tag: "pre", cls: "x-form-grow-sizer"=0A=
            });=0A=
            if(this.preventScrollbars){=0A=
                this.el.setStyle("overflow", "hidden");=0A=
            }=0A=
            this.el.setHeight(this.growMin);=0A=
        }=0A=
    },=0A=
=0A=
    onDestroy : function(){=0A=
        if(this.textSizeEl){=0A=
            Ext.removeNode(this.textSizeEl);=0A=
        }=0A=
        Ext.form.TextArea.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
    fireKey : function(e){=0A=
        if(e.isSpecialKey() && (this.enterIsSpecial || (e.getKey() !=3D =
e.ENTER || e.hasModifier()))){=0A=
            this.fireEvent("specialkey", this, e);=0A=
        }=0A=
    },=0A=
=0A=
        onKeyUp : function(e){=0A=
        if(!e.isNavKeyPress() || e.getKey() =3D=3D e.ENTER){=0A=
            this.autoSize();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    autoSize : function(){=0A=
        if(!this.grow || !this.textSizeEl){=0A=
            return;=0A=
        }=0A=
        var el =3D this.el;=0A=
        var v =3D el.dom.value;=0A=
        var ts =3D this.textSizeEl;=0A=
        ts.innerHTML =3D '';=0A=
        ts.appendChild(document.createTextNode(v));=0A=
        v =3D ts.innerHTML;=0A=
=0A=
        Ext.fly(ts).setWidth(this.el.getWidth());=0A=
        if(v.length < 1){=0A=
            v =3D "&#160;&#160;";=0A=
        }else{=0A=
            if(Ext.isIE){=0A=
                v =3D v.replace(/\n/g, '<p>&#160;</p>');=0A=
            }=0A=
            v +=3D this.growAppend;=0A=
        }=0A=
        ts.innerHTML =3D v;=0A=
        var h =3D Math.min(this.growMax, Math.max(ts.offsetHeight, =
this.growMin)+this.growPad);=0A=
        if(h !=3D this.lastHeight){=0A=
            this.lastHeight =3D h;=0A=
            this.el.setHeight(h);=0A=
            this.fireEvent("autosize", this, h);=0A=
        }=0A=
    }=0A=
});=0A=
Ext.reg('textarea', Ext.form.TextArea);=0A=
=0A=
Ext.form.NumberField =3D Ext.extend(Ext.form.TextField,  {=0A=
    =0A=
    fieldClass: "x-form-field x-form-num-field",=0A=
    =0A=
    allowDecimals : true,=0A=
    =0A=
    decimalSeparator : ".",=0A=
    =0A=
    decimalPrecision : 2,=0A=
    =0A=
    allowNegative : true,=0A=
    =0A=
    minValue : Number.NEGATIVE_INFINITY,=0A=
    =0A=
    maxValue : Number.MAX_VALUE,=0A=
    =0A=
    minText : "The minimum value for this field is {0}",=0A=
    =0A=
    maxText : "The maximum value for this field is {0}",=0A=
    =0A=
    nanText : "{0} is not a valid number",=0A=
    =0A=
    baseChars : "0123456789",=0A=
=0A=
        initEvents : function(){=0A=
        Ext.form.NumberField.superclass.initEvents.call(this);=0A=
        var allowed =3D this.baseChars+'';=0A=
        if(this.allowDecimals){=0A=
            allowed +=3D this.decimalSeparator;=0A=
        }=0A=
        if(this.allowNegative){=0A=
            allowed +=3D "-";=0A=
        }=0A=
        this.stripCharsRe =3D new RegExp('[^'+allowed+']', 'gi');=0A=
        var keyPress =3D function(e){=0A=
            var k =3D e.getKey();=0A=
            if(!Ext.isIE && (e.isSpecialKey() || k =3D=3D e.BACKSPACE || =
k =3D=3D e.DELETE)){=0A=
                return;=0A=
            }=0A=
            var c =3D e.getCharCode();=0A=
            if(allowed.indexOf(String.fromCharCode(c)) =3D=3D=3D -1){=0A=
                e.stopEvent();=0A=
            }=0A=
        };=0A=
        this.el.on("keypress", keyPress, this);=0A=
    },=0A=
=0A=
        validateValue : function(value){=0A=
        if(!Ext.form.NumberField.superclass.validateValue.call(this, =
value)){=0A=
            return false;=0A=
        }=0A=
        if(value.length < 1){              return true;=0A=
        }=0A=
        value =3D String(value).replace(this.decimalSeparator, ".");=0A=
        if(isNaN(value)){=0A=
            this.markInvalid(String.format(this.nanText, value));=0A=
            return false;=0A=
        }=0A=
        var num =3D this.parseValue(value);=0A=
        if(num < this.minValue){=0A=
            this.markInvalid(String.format(this.minText, this.minValue));=0A=
            return false;=0A=
        }=0A=
        if(num > this.maxValue){=0A=
            this.markInvalid(String.format(this.maxText, this.maxValue));=0A=
            return false;=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
    getValue : function(){=0A=
        return =
this.fixPrecision(this.parseValue(Ext.form.NumberField.superclass.getValu=
e.call(this)));=0A=
    },=0A=
=0A=
    setValue : function(v){=0A=
    	v =3D typeof v =3D=3D 'number' ? v : =
parseFloat(String(v).replace(this.decimalSeparator, "."));=0A=
        v =3D isNaN(v) ? '' : String(v).replace(".", =
this.decimalSeparator);=0A=
        Ext.form.NumberField.superclass.setValue.call(this, v);=0A=
    },=0A=
=0A=
        parseValue : function(value){=0A=
        value =3D =
parseFloat(String(value).replace(this.decimalSeparator, "."));=0A=
        return isNaN(value) ? '' : value;=0A=
    },=0A=
=0A=
        fixPrecision : function(value){=0A=
        var nan =3D isNaN(value);=0A=
        if(!this.allowDecimals || this.decimalPrecision =3D=3D -1 || nan =
|| !value){=0A=
           return nan ? '' : value;=0A=
        }=0A=
        return =
parseFloat(parseFloat(value).toFixed(this.decimalPrecision));=0A=
    },=0A=
=0A=
    beforeBlur : function(){=0A=
        var v =3D this.parseValue(this.getRawValue());=0A=
        if(v){=0A=
            this.setValue(this.fixPrecision(v));=0A=
        }=0A=
    }=0A=
});=0A=
Ext.reg('numberfield', Ext.form.NumberField);=0A=
=0A=
Ext.form.DateField =3D Ext.extend(Ext.form.TriggerField,  {=0A=
    =0A=
    format : "m/d/Y",=0A=
    =0A=
    altFormats : =
"m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY=
|d|Y-m-d",=0A=
    =0A=
    disabledDays : null,=0A=
    =0A=
    disabledDaysText : "Disabled",=0A=
    =0A=
    disabledDates : null,=0A=
    =0A=
    disabledDatesText : "Disabled",=0A=
    =0A=
    minValue : null,=0A=
    =0A=
    maxValue : null,=0A=
    =0A=
    minText : "The date in this field must be equal to or after {0}",=0A=
    =0A=
    maxText : "The date in this field must be equal to or before {0}",=0A=
    =0A=
    invalidText : "{0} is not a valid date - it must be in the format =
{1}",=0A=
    =0A=
    triggerClass : 'x-form-date-trigger',=0A=
    =0A=
=0A=
        defaultAutoCreate : {tag: "input", type: "text", size: "10", =
autocomplete: "off"},=0A=
=0A=
    initComponent : function(){=0A=
        Ext.form.DateField.superclass.initComponent.call(this);=0A=
        if(typeof this.minValue =3D=3D "string"){=0A=
            this.minValue =3D this.parseDate(this.minValue);=0A=
        }=0A=
        if(typeof this.maxValue =3D=3D "string"){=0A=
            this.maxValue =3D this.parseDate(this.maxValue);=0A=
        }=0A=
        this.ddMatch =3D null;=0A=
        if(this.disabledDates){=0A=
            var dd =3D this.disabledDates;=0A=
            var re =3D "(?:";=0A=
            for(var i =3D 0; i < dd.length; i++){=0A=
                re +=3D dd[i];=0A=
                if(i !=3D dd.length-1) re +=3D "|";=0A=
            }=0A=
            this.ddMatch =3D new RegExp(re + ")");=0A=
        }=0A=
    },=0A=
=0A=
        validateValue : function(value){=0A=
        value =3D this.formatDate(value);=0A=
        if(!Ext.form.DateField.superclass.validateValue.call(this, =
value)){=0A=
            return false;=0A=
        }=0A=
        if(value.length < 1){              return true;=0A=
        }=0A=
        var svalue =3D value;=0A=
        value =3D this.parseDate(value);=0A=
        if(!value){=0A=
            this.markInvalid(String.format(this.invalidText, svalue, =
this.format));=0A=
            return false;=0A=
        }=0A=
        var time =3D value.getTime();=0A=
        if(this.minValue && time < this.minValue.getTime()){=0A=
            this.markInvalid(String.format(this.minText, =
this.formatDate(this.minValue)));=0A=
            return false;=0A=
        }=0A=
        if(this.maxValue && time > this.maxValue.getTime()){=0A=
            this.markInvalid(String.format(this.maxText, =
this.formatDate(this.maxValue)));=0A=
            return false;=0A=
        }=0A=
        if(this.disabledDays){=0A=
            var day =3D value.getDay();=0A=
            for(var i =3D 0; i < this.disabledDays.length; i++) {=0A=
            	if(day =3D=3D=3D this.disabledDays[i]){=0A=
            	    this.markInvalid(this.disabledDaysText);=0A=
                    return false;=0A=
            	}=0A=
            }=0A=
        }=0A=
        var fvalue =3D this.formatDate(value);=0A=
        if(this.ddMatch && this.ddMatch.test(fvalue)){=0A=
            this.markInvalid(String.format(this.disabledDatesText, =
fvalue));=0A=
            return false;=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
            validateBlur : function(){=0A=
        return !this.menu || !this.menu.isVisible();=0A=
    },=0A=
=0A=
    =0A=
    getValue : function(){=0A=
        return =
this.parseDate(Ext.form.DateField.superclass.getValue.call(this)) || "";=0A=
    },=0A=
=0A=
    =0A=
    setValue : function(date){=0A=
        Ext.form.DateField.superclass.setValue.call(this, =
this.formatDate(this.parseDate(date)));=0A=
    },=0A=
=0A=
        parseDate : function(value){=0A=
        if(!value || Ext.isDate(value)){=0A=
            return value;=0A=
        }=0A=
        var v =3D Date.parseDate(value, this.format);=0A=
        if(!v && this.altFormats){=0A=
            if(!this.altFormatsArray){=0A=
                this.altFormatsArray =3D this.altFormats.split("|");=0A=
            }=0A=
            for(var i =3D 0, len =3D this.altFormatsArray.length; i < =
len && !v; i++){=0A=
                v =3D Date.parseDate(value, this.altFormatsArray[i]);=0A=
            }=0A=
        }=0A=
        return v;=0A=
    },=0A=
=0A=
        onDestroy : function(){=0A=
        if(this.menu) {=0A=
            this.menu.destroy();=0A=
        }=0A=
        if(this.wrap){=0A=
            this.wrap.remove();=0A=
        }=0A=
        Ext.form.DateField.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
        formatDate : function(date){=0A=
        return Ext.isDate(date) ? date.dateFormat(this.format) : date;=0A=
    },=0A=
=0A=
        menuListeners : {=0A=
        select: function(m, d){=0A=
            this.setValue(d);=0A=
        },=0A=
        show : function(){             this.onFocus();=0A=
        },=0A=
        hide : function(){=0A=
            this.focus.defer(10, this);=0A=
            var ml =3D this.menuListeners;=0A=
            this.menu.un("select", ml.select,  this);=0A=
            this.menu.un("show", ml.show,  this);=0A=
            this.menu.un("hide", ml.hide,  this);=0A=
        }=0A=
    },=0A=
=0A=
            onTriggerClick : function(){=0A=
        if(this.disabled){=0A=
            return;=0A=
        }=0A=
        if(this.menu =3D=3D null){=0A=
            this.menu =3D new Ext.menu.DateMenu();=0A=
        }=0A=
        Ext.apply(this.menu.picker,  {=0A=
            minDate : this.minValue,=0A=
            maxDate : this.maxValue,=0A=
            disabledDatesRE : this.ddMatch,=0A=
            disabledDatesText : this.disabledDatesText,=0A=
            disabledDays : this.disabledDays,=0A=
            disabledDaysText : this.disabledDaysText,=0A=
            format : this.format,=0A=
            minText : String.format(this.minText, =
this.formatDate(this.minValue)),=0A=
            maxText : String.format(this.maxText, =
this.formatDate(this.maxValue))=0A=
        });=0A=
        this.menu.on(Ext.apply({}, this.menuListeners, {=0A=
            scope:this=0A=
        }));=0A=
        this.menu.picker.setValue(this.getValue() || new Date());=0A=
        this.menu.show(this.el, "tl-bl?");=0A=
    },=0A=
=0A=
    beforeBlur : function(){=0A=
        var v =3D this.parseDate(this.getRawValue());=0A=
        if(v){=0A=
            this.setValue(v);=0A=
        }=0A=
    }=0A=
=0A=
    =0A=
    =0A=
    =0A=
    =0A=
});=0A=
Ext.reg('datefield', Ext.form.DateField);=0A=
=0A=
Ext.form.ComboBox =3D Ext.extend(Ext.form.TriggerField, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
        defaultAutoCreate : {tag: "input", type: "text", size: "24", =
autocomplete: "off"},=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    listClass: '',=0A=
    =0A=
    selectedClass: 'x-combo-selected',=0A=
    =0A=
    triggerClass : 'x-form-arrow-trigger',=0A=
    =0A=
    shadow:'sides',=0A=
    =0A=
    listAlign: 'tl-bl?',=0A=
    =0A=
    maxHeight: 300,=0A=
    =0A=
    minHeight: 90,=0A=
    =0A=
    triggerAction: 'query',=0A=
    =0A=
    minChars : 4,=0A=
    =0A=
    typeAhead: false,=0A=
    =0A=
    queryDelay: 500,=0A=
    =0A=
    pageSize: 0,=0A=
    =0A=
    selectOnFocus:false,=0A=
    =0A=
    queryParam: 'query',=0A=
    =0A=
    loadingText: 'Loading...',=0A=
    =0A=
    resizable: false,=0A=
    =0A=
    handleHeight : 8,=0A=
    =0A=
    editable: true,=0A=
    =0A=
    allQuery: '',=0A=
    =0A=
    mode: 'remote',=0A=
    =0A=
    minListWidth : 70,=0A=
    =0A=
    forceSelection:false,=0A=
    =0A=
    typeAheadDelay : 250,=0A=
    =0A=
=0A=
    =0A=
    lazyInit : true,=0A=
=0A=
    initComponent : function(){=0A=
        Ext.form.ComboBox.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            'expand',=0A=
            =0A=
            'collapse',=0A=
            =0A=
            'beforeselect',=0A=
            =0A=
            'select',=0A=
            =0A=
            'beforequery'=0A=
        );=0A=
        if(this.transform){=0A=
            this.allowDomMove =3D false;=0A=
            var s =3D Ext.getDom(this.transform);=0A=
            if(!this.hiddenName){=0A=
                this.hiddenName =3D s.name;=0A=
            }=0A=
            if(!this.store){=0A=
                this.mode =3D 'local';=0A=
                var d =3D [], opts =3D s.options;=0A=
                for(var i =3D 0, len =3D opts.length;i < len; i++){=0A=
                    var o =3D opts[i];=0A=
                    var value =3D (Ext.isIE ? =
o.getAttributeNode('value').specified : o.hasAttribute('value')) ? =
o.value : o.text;=0A=
                    if(o.selected) {=0A=
                        this.value =3D value;=0A=
                    }=0A=
                    d.push([value, o.text]);=0A=
                }=0A=
                this.store =3D new Ext.data.SimpleStore({=0A=
                    'id': 0,=0A=
                    fields: ['value', 'text'],=0A=
                    data : d=0A=
                });=0A=
                this.valueField =3D 'value';=0A=
                this.displayField =3D 'text';=0A=
            }=0A=
            s.name =3D Ext.id();             if(!this.lazyRender){=0A=
                this.target =3D true;=0A=
                this.el =3D Ext.DomHelper.insertBefore(s, =
this.autoCreate || this.defaultAutoCreate);=0A=
                Ext.removeNode(s);                 =
this.render(this.el.parentNode);=0A=
            }else{=0A=
                Ext.removeNode(s);             }=0A=
        }=0A=
                else if(Ext.isArray(this.store)){=0A=
			if (Ext.isArray(this.store[0])){=0A=
				this.store =3D new Ext.data.SimpleStore({=0A=
				    fields: ['value','text'],=0A=
				    data: this.store=0A=
				});=0A=
		        this.valueField =3D 'value';=0A=
			}else{=0A=
				this.store =3D new Ext.data.SimpleStore({=0A=
				    fields: ['text'],=0A=
				    data: this.store,=0A=
				    expandData: true=0A=
				});=0A=
		        this.valueField =3D 'text';=0A=
			}=0A=
			this.displayField =3D 'text';=0A=
			this.mode =3D 'local';=0A=
		}=0A=
		=0A=
        this.selectedIndex =3D -1;=0A=
        if(this.mode =3D=3D 'local'){=0A=
            if(this.initialConfig.queryDelay =3D=3D=3D undefined){=0A=
                this.queryDelay =3D 10;=0A=
            }=0A=
            if(this.initialConfig.minChars =3D=3D=3D undefined){=0A=
                this.minChars =3D 0;=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.form.ComboBox.superclass.onRender.call(this, ct, position);=0A=
        if(this.hiddenName){=0A=
            this.hiddenField =3D this.el.insertSibling({tag:'input', =
type:'hidden', name: this.hiddenName, id: =
(this.hiddenId||this.hiddenName)},=0A=
                    'before', true);=0A=
            this.hiddenField.value =3D=0A=
                this.hiddenValue !=3D=3D undefined ? this.hiddenValue :=0A=
                this.value !=3D=3D undefined ? this.value : '';=0A=
=0A=
                        this.el.dom.removeAttribute('name');=0A=
        }=0A=
        if(Ext.isGecko){=0A=
            this.el.dom.setAttribute('autocomplete', 'off');=0A=
        }=0A=
=0A=
        if(!this.lazyInit){=0A=
            this.initList();=0A=
        }else{=0A=
            this.on('focus', this.initList, this, {single: true});=0A=
        }=0A=
=0A=
        if(!this.editable){=0A=
            this.editable =3D true;=0A=
            this.setEditable(false);=0A=
        }=0A=
    },=0A=
=0A=
    initList : function(){=0A=
        if(!this.list){=0A=
            var cls =3D 'x-combo-list';=0A=
=0A=
            this.list =3D new Ext.Layer({=0A=
                shadow: this.shadow, cls: [cls, this.listClass].join(' =
'), constrain:false=0A=
            });=0A=
=0A=
            var lw =3D this.listWidth || Math.max(this.wrap.getWidth(), =
this.minListWidth);=0A=
            this.list.setWidth(lw);=0A=
            this.list.swallowEvent('mousewheel');=0A=
            this.assetHeight =3D 0;=0A=
=0A=
            if(this.title){=0A=
                this.header =3D this.list.createChild({cls:cls+'-hd', =
html: this.title});=0A=
                this.assetHeight +=3D this.header.getHeight();=0A=
            }=0A=
=0A=
            this.innerList =3D this.list.createChild({cls:cls+'-inner'});=0A=
            this.innerList.on('mouseover', this.onViewOver, this);=0A=
            this.innerList.on('mousemove', this.onViewMove, this);=0A=
            this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));=0A=
=0A=
            if(this.pageSize){=0A=
                this.footer =3D this.list.createChild({cls:cls+'-ft'});=0A=
                this.pageTb =3D new Ext.PagingToolbar({=0A=
                    store:this.store,=0A=
                    pageSize: this.pageSize,=0A=
                    renderTo:this.footer=0A=
                });=0A=
                this.assetHeight +=3D this.footer.getHeight();=0A=
            }=0A=
=0A=
            if(!this.tpl){=0A=
                =0A=
                this.tpl =3D '<tpl for=3D"."><div =
class=3D"'+cls+'-item">{' + this.displayField + '}</div></tpl>';=0A=
                =0A=
            }=0A=
=0A=
            =0A=
            this.view =3D new Ext.DataView({=0A=
                applyTo: this.innerList,=0A=
                tpl: this.tpl,=0A=
                singleSelect: true,=0A=
                selectedClass: this.selectedClass,=0A=
                itemSelector: this.itemSelector || '.' + cls + '-item'=0A=
            });=0A=
=0A=
            this.view.on('click', this.onViewClick, this);=0A=
=0A=
            this.bindStore(this.store, true);=0A=
=0A=
            if(this.resizable){=0A=
                this.resizer =3D new Ext.Resizable(this.list,  {=0A=
                   pinned:true, handles:'se'=0A=
                });=0A=
                this.resizer.on('resize', function(r, w, h){=0A=
                    this.maxHeight =3D =
h-this.handleHeight-this.list.getFrameWidth('tb')-this.assetHeight;=0A=
                    this.listWidth =3D w;=0A=
                    this.innerList.setWidth(w - =
this.list.getFrameWidth('lr'));=0A=
                    this.restrictHeight();=0A=
                }, this);=0A=
                =
this[this.pageSize?'footer':'innerList'].setStyle('margin-bottom', =
this.handleHeight+'px');=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
=0A=
        bindStore : function(store, initial){=0A=
        if(this.store && !initial){=0A=
            this.store.un('beforeload', this.onBeforeLoad, this);=0A=
            this.store.un('load', this.onLoad, this);=0A=
            this.store.un('loadexception', this.collapse, this);=0A=
            if(!store){=0A=
                this.store =3D null;=0A=
                if(this.view){=0A=
                    this.view.setStore(null);=0A=
                }=0A=
            }=0A=
        }=0A=
        if(store){=0A=
            this.store =3D Ext.StoreMgr.lookup(store);=0A=
=0A=
            this.store.on('beforeload', this.onBeforeLoad, this);=0A=
            this.store.on('load', this.onLoad, this);=0A=
            this.store.on('loadexception', this.collapse, this);=0A=
=0A=
            if(this.view){=0A=
                this.view.setStore(store);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        Ext.form.ComboBox.superclass.initEvents.call(this);=0A=
=0A=
        this.keyNav =3D new Ext.KeyNav(this.el, {=0A=
            "up" : function(e){=0A=
                this.inKeyMode =3D true;=0A=
                this.selectPrev();=0A=
            },=0A=
=0A=
            "down" : function(e){=0A=
                if(!this.isExpanded()){=0A=
                    this.onTriggerClick();=0A=
                }else{=0A=
                    this.inKeyMode =3D true;=0A=
                    this.selectNext();=0A=
                }=0A=
            },=0A=
=0A=
            "enter" : function(e){=0A=
                this.onViewClick();=0A=
                this.delayedCheck =3D true;=0A=
                this.unsetDelayCheck.defer(10, this);=0A=
            },=0A=
=0A=
            "esc" : function(e){=0A=
                this.collapse();=0A=
            },=0A=
=0A=
            "tab" : function(e){=0A=
                this.onViewClick(false);=0A=
                return true;=0A=
            },=0A=
=0A=
            scope : this,=0A=
=0A=
            doRelay : function(foo, bar, hname){=0A=
                if(hname =3D=3D 'down' || this.scope.isExpanded()){=0A=
                   return Ext.KeyNav.prototype.doRelay.apply(this, =
arguments);=0A=
                }=0A=
                return true;=0A=
            },=0A=
=0A=
            forceKeyDown : true=0A=
        });=0A=
        this.queryDelay =3D Math.max(this.queryDelay || 10,=0A=
                this.mode =3D=3D 'local' ? 10 : 250);=0A=
        this.dqTask =3D new Ext.util.DelayedTask(this.initQuery, this);=0A=
        if(this.typeAhead){=0A=
            this.taTask =3D new Ext.util.DelayedTask(this.onTypeAhead, =
this);=0A=
        }=0A=
        if(this.editable !=3D=3D false){=0A=
            this.el.on("keyup", this.onKeyUp, this);=0A=
        }=0A=
        if(this.forceSelection){=0A=
            this.on('blur', this.doForce, this);=0A=
        }=0A=
    },=0A=
=0A=
    onDestroy : function(){=0A=
        if(this.view){=0A=
            this.view.el.removeAllListeners();=0A=
            this.view.el.remove();=0A=
            this.view.purgeListeners();=0A=
        }=0A=
        if(this.list){=0A=
            this.list.destroy();=0A=
        }=0A=
        this.bindStore(null);=0A=
        Ext.form.ComboBox.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
    unsetDelayCheck : function(){=0A=
        delete this.delayedCheck;=0A=
    },=0A=
        fireKey : function(e){=0A=
        if(e.isNavKeyPress() && !this.isExpanded() && =
!this.delayedCheck){=0A=
            this.fireEvent("specialkey", this, e);=0A=
        }=0A=
    },=0A=
=0A=
        onResize: function(w, h){=0A=
        Ext.form.ComboBox.superclass.onResize.apply(this, arguments);=0A=
        if(this.list && this.listWidth =3D=3D=3D undefined){=0A=
            var lw =3D Math.max(w, this.minListWidth);=0A=
            this.list.setWidth(lw);=0A=
            this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));=0A=
        }=0A=
    },=0A=
=0A=
        onEnable: function(){=0A=
        Ext.form.ComboBox.superclass.onEnable.apply(this, arguments);=0A=
        if(this.hiddenField){=0A=
            this.hiddenField.disabled =3D false;=0A=
        }=0A=
    },=0A=
=0A=
        onDisable: function(){=0A=
        Ext.form.ComboBox.superclass.onDisable.apply(this, arguments);=0A=
        if(this.hiddenField){=0A=
            this.hiddenField.disabled =3D true;=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setEditable : function(value){=0A=
        if(value =3D=3D this.editable){=0A=
            return;=0A=
        }=0A=
        this.editable =3D value;=0A=
        if(!value){=0A=
            this.el.dom.setAttribute('readOnly', true);=0A=
            this.el.on('mousedown', this.onTriggerClick,  this);=0A=
            this.el.addClass('x-combo-noedit');=0A=
        }else{=0A=
            this.el.dom.setAttribute('readOnly', false);=0A=
            this.el.un('mousedown', this.onTriggerClick,  this);=0A=
            this.el.removeClass('x-combo-noedit');=0A=
        }=0A=
    },=0A=
=0A=
        onBeforeLoad : function(){=0A=
        if(!this.hasFocus){=0A=
            return;=0A=
        }=0A=
        this.innerList.update(this.loadingText ?=0A=
               '<div =
class=3D"loading-indicator">'+this.loadingText+'</div>' : '');=0A=
        this.restrictHeight();=0A=
        this.selectedIndex =3D -1;=0A=
    },=0A=
=0A=
        onLoad : function(){=0A=
        if(!this.hasFocus){=0A=
            return;=0A=
        }=0A=
        if(this.store.getCount() > 0){=0A=
            this.expand();=0A=
            this.restrictHeight();=0A=
            if(this.lastQuery =3D=3D this.allQuery){=0A=
                if(this.editable){=0A=
                    this.el.dom.select();=0A=
                }=0A=
                if(!this.selectByValue(this.value, true)){=0A=
                    this.select(0, true);=0A=
                }=0A=
            }else{=0A=
                this.selectNext();=0A=
                if(this.typeAhead && this.lastKey !=3D =
Ext.EventObject.BACKSPACE && this.lastKey !=3D Ext.EventObject.DELETE){=0A=
                    this.taTask.delay(this.typeAheadDelay);=0A=
                }=0A=
            }=0A=
        }else{=0A=
            this.onEmptyResults();=0A=
        }=0A=
            },=0A=
=0A=
        onTypeAhead : function(){=0A=
        if(this.store.getCount() > 0){=0A=
            var r =3D this.store.getAt(0);=0A=
            var newValue =3D r.data[this.displayField];=0A=
            var len =3D newValue.length;=0A=
            var selStart =3D this.getRawValue().length;=0A=
            if(selStart !=3D len){=0A=
                this.setRawValue(newValue);=0A=
                this.selectText(selStart, newValue.length);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onSelect : function(record, index){=0A=
        if(this.fireEvent('beforeselect', this, record, index) !=3D=3D =
false){=0A=
            this.setValue(record.data[this.valueField || =
this.displayField]);=0A=
            this.collapse();=0A=
            this.fireEvent('select', this, record, index);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getValue : function(){=0A=
        if(this.valueField){=0A=
            return typeof this.value !=3D 'undefined' ? this.value : '';=0A=
        }else{=0A=
            return Ext.form.ComboBox.superclass.getValue.call(this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    clearValue : function(){=0A=
        if(this.hiddenField){=0A=
            this.hiddenField.value =3D '';=0A=
        }=0A=
        this.setRawValue('');=0A=
        this.lastSelectionText =3D '';=0A=
        this.applyEmptyText();=0A=
        this.value =3D '';=0A=
    },=0A=
=0A=
    =0A=
    setValue : function(v){=0A=
        var text =3D v;=0A=
        if(this.valueField){=0A=
            var r =3D this.findRecord(this.valueField, v);=0A=
            if(r){=0A=
                text =3D r.data[this.displayField];=0A=
            }else if(this.valueNotFoundText !=3D=3D undefined){=0A=
                text =3D this.valueNotFoundText;=0A=
            }=0A=
        }=0A=
        this.lastSelectionText =3D text;=0A=
        if(this.hiddenField){=0A=
            this.hiddenField.value =3D v;=0A=
        }=0A=
        Ext.form.ComboBox.superclass.setValue.call(this, text);=0A=
        this.value =3D v;=0A=
    },=0A=
=0A=
        findRecord : function(prop, value){=0A=
        var record;=0A=
        if(this.store.getCount() > 0){=0A=
            this.store.each(function(r){=0A=
                if(r.data[prop] =3D=3D value){=0A=
                    record =3D r;=0A=
                    return false;=0A=
                }=0A=
            });=0A=
        }=0A=
        return record;=0A=
    },=0A=
=0A=
        onViewMove : function(e, t){=0A=
        this.inKeyMode =3D false;=0A=
    },=0A=
=0A=
        onViewOver : function(e, t){=0A=
        if(this.inKeyMode){             return;=0A=
        }=0A=
        var item =3D this.view.findItemFromChild(t);=0A=
        if(item){=0A=
            var index =3D this.view.indexOf(item);=0A=
            this.select(index, false);=0A=
        }=0A=
    },=0A=
=0A=
        onViewClick : function(doFocus){=0A=
        var index =3D this.view.getSelectedIndexes()[0];=0A=
        var r =3D this.store.getAt(index);=0A=
        if(r){=0A=
            this.onSelect(r, index);=0A=
        }=0A=
        if(doFocus !=3D=3D false){=0A=
            this.el.focus();=0A=
        }=0A=
    },=0A=
=0A=
        restrictHeight : function(){=0A=
        this.innerList.dom.style.height =3D '';=0A=
        var inner =3D this.innerList.dom;=0A=
        var pad =3D =
this.list.getFrameWidth('tb')+(this.resizable?this.handleHeight:0)+this.a=
ssetHeight;=0A=
        var h =3D Math.max(inner.clientHeight, inner.offsetHeight, =
inner.scrollHeight);=0A=
        var ha =3D this.getPosition()[1]-Ext.getBody().getScroll().top;=0A=
        var hb =3D Ext.lib.Dom.getViewHeight()-ha-this.getSize().height;=0A=
        var space =3D Math.max(ha, hb, this.minHeight || =
0)-this.list.shadowOffset-pad-5;=0A=
        h =3D Math.min(h, space, this.maxHeight);=0A=
        =0A=
        this.innerList.setHeight(h);=0A=
        this.list.beginUpdate();=0A=
        this.list.setHeight(h+pad);=0A=
        this.list.alignTo(this.wrap, this.listAlign);=0A=
        this.list.endUpdate();=0A=
    },=0A=
=0A=
        onEmptyResults : function(){=0A=
        this.collapse();=0A=
    },=0A=
=0A=
    =0A=
    isExpanded : function(){=0A=
        return this.list && this.list.isVisible();=0A=
    },=0A=
=0A=
    =0A=
    selectByValue : function(v, scrollIntoView){=0A=
        if(v !=3D=3D undefined && v !=3D=3D null){=0A=
            var r =3D this.findRecord(this.valueField || =
this.displayField, v);=0A=
            if(r){=0A=
                this.select(this.store.indexOf(r), scrollIntoView);=0A=
                return true;=0A=
            }=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
    =0A=
    select : function(index, scrollIntoView){=0A=
        this.selectedIndex =3D index;=0A=
        this.view.select(index);=0A=
        if(scrollIntoView !=3D=3D false){=0A=
            var el =3D this.view.getNode(index);=0A=
            if(el){=0A=
                this.innerList.scrollChildIntoView(el, false);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        selectNext : function(){=0A=
        var ct =3D this.store.getCount();=0A=
        if(ct > 0){=0A=
            if(this.selectedIndex =3D=3D -1){=0A=
                this.select(0);=0A=
            }else if(this.selectedIndex < ct-1){=0A=
                this.select(this.selectedIndex+1);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        selectPrev : function(){=0A=
        var ct =3D this.store.getCount();=0A=
        if(ct > 0){=0A=
            if(this.selectedIndex =3D=3D -1){=0A=
                this.select(0);=0A=
            }else if(this.selectedIndex !=3D 0){=0A=
                this.select(this.selectedIndex-1);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onKeyUp : function(e){=0A=
        if(this.editable !=3D=3D false && !e.isSpecialKey()){=0A=
            this.lastKey =3D e.getKey();=0A=
            this.dqTask.delay(this.queryDelay);=0A=
        }=0A=
    },=0A=
=0A=
        validateBlur : function(){=0A=
        return !this.list || !this.list.isVisible();=0A=
    },=0A=
=0A=
        initQuery : function(){=0A=
        this.doQuery(this.getRawValue());=0A=
    },=0A=
=0A=
        doForce : function(){=0A=
        if(this.el.dom.value.length > 0){=0A=
            this.el.dom.value =3D=0A=
                this.lastSelectionText =3D=3D=3D undefined ? '' : =
this.lastSelectionText;=0A=
            this.applyEmptyText();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    doQuery : function(q, forceAll){=0A=
        if(q =3D=3D=3D undefined || q =3D=3D=3D null){=0A=
            q =3D '';=0A=
        }=0A=
        var qe =3D {=0A=
            query: q,=0A=
            forceAll: forceAll,=0A=
            combo: this,=0A=
            cancel:false=0A=
        };=0A=
        if(this.fireEvent('beforequery', qe)=3D=3D=3Dfalse || qe.cancel){=0A=
            return false;=0A=
        }=0A=
        q =3D qe.query;=0A=
        forceAll =3D qe.forceAll;=0A=
        if(forceAll =3D=3D=3D true || (q.length >=3D this.minChars)){=0A=
            if(this.lastQuery !=3D=3D q){=0A=
                this.lastQuery =3D q;=0A=
                if(this.mode =3D=3D 'local'){=0A=
                    this.selectedIndex =3D -1;=0A=
                    if(forceAll){=0A=
                        this.store.clearFilter();=0A=
                    }else{=0A=
                        this.store.filter(this.displayField, q);=0A=
                    }=0A=
                    this.onLoad();=0A=
                }else{=0A=
                    this.store.baseParams[this.queryParam] =3D q;=0A=
                    this.store.load({=0A=
                        params: this.getParams(q)=0A=
                    });=0A=
                    this.expand();=0A=
                }=0A=
            }else{=0A=
                this.selectedIndex =3D -1;=0A=
                this.onLoad();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        getParams : function(q){=0A=
        var p =3D {};=0A=
                if(this.pageSize){=0A=
            p.start =3D 0;=0A=
            p.limit =3D this.pageSize;=0A=
        }=0A=
        return p;=0A=
    },=0A=
=0A=
    =0A=
    collapse : function(){=0A=
        if(!this.isExpanded()){=0A=
            return;=0A=
        }=0A=
        this.list.hide();=0A=
        Ext.getDoc().un('mousewheel', this.collapseIf, this);=0A=
        Ext.getDoc().un('mousedown', this.collapseIf, this);=0A=
        this.fireEvent('collapse', this);=0A=
    },=0A=
=0A=
        collapseIf : function(e){=0A=
        if(!e.within(this.wrap) && !e.within(this.list)){=0A=
            this.collapse();=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    expand : function(){=0A=
        if(this.isExpanded() || !this.hasFocus){=0A=
            return;=0A=
        }=0A=
        this.list.alignTo(this.wrap, this.listAlign);=0A=
        this.list.show();=0A=
        this.innerList.setOverflow('auto');         =
Ext.getDoc().on('mousewheel', this.collapseIf, this);=0A=
        Ext.getDoc().on('mousedown', this.collapseIf, this);=0A=
        this.fireEvent('expand', this);=0A=
    },=0A=
=0A=
            onTriggerClick : function(){=0A=
        if(this.disabled){=0A=
            return;=0A=
        }=0A=
        if(this.isExpanded()){=0A=
            this.collapse();=0A=
            this.el.focus();=0A=
        }else {=0A=
            this.onFocus({});=0A=
            if(this.triggerAction =3D=3D 'all') {=0A=
                this.doQuery(this.allQuery, true);=0A=
            } else {=0A=
                this.doQuery(this.getRawValue());=0A=
            }=0A=
            this.el.focus();=0A=
        }=0A=
    }=0A=
=0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
});=0A=
Ext.reg('combo', Ext.form.ComboBox);=0A=
=0A=
Ext.form.Checkbox =3D Ext.extend(Ext.form.Field,  {=0A=
    =0A=
    focusClass : undefined,=0A=
    =0A=
    fieldClass: "x-form-field",=0A=
    =0A=
    checked: false,=0A=
    =0A=
    defaultAutoCreate : { tag: "input", type: 'checkbox', autocomplete: =
"off"},=0A=
    =0A=
    =0A=
=0A=
	    initComponent : function(){=0A=
        Ext.form.Checkbox.superclass.initComponent.call(this);=0A=
        this.addEvents(=0A=
            =0A=
            'check'=0A=
        );=0A=
    },=0A=
=0A=
        onResize : function(){=0A=
        Ext.form.Checkbox.superclass.onResize.apply(this, arguments);=0A=
        if(!this.boxLabel){=0A=
            this.el.alignTo(this.wrap, 'c-c');=0A=
        }=0A=
    },=0A=
    =0A=
        initEvents : function(){=0A=
        Ext.form.Checkbox.superclass.initEvents.call(this);=0A=
        this.el.on("click", this.onClick,  this);=0A=
        this.el.on("change", this.onClick,  this);=0A=
    },=0A=
=0A=
	    getResizeEl : function(){=0A=
        return this.wrap;=0A=
    },=0A=
=0A=
        getPositionEl : function(){=0A=
        return this.wrap;=0A=
    },=0A=
=0A=
    =0A=
    markInvalid : Ext.emptyFn,=0A=
    =0A=
    clearInvalid : Ext.emptyFn,=0A=
=0A=
        onRender : function(ct, position){=0A=
        Ext.form.Checkbox.superclass.onRender.call(this, ct, position);=0A=
        if(this.inputValue !=3D=3D undefined){=0A=
            this.el.dom.value =3D this.inputValue;=0A=
        }=0A=
        this.wrap =3D this.el.wrap({cls: "x-form-check-wrap"});=0A=
        if(this.boxLabel){=0A=
            this.wrap.createChild({tag: 'label', htmlFor: this.el.id, =
cls: 'x-form-cb-label', html: this.boxLabel});=0A=
        }=0A=
        if(this.checked){=0A=
            this.setValue(true);=0A=
        }else{=0A=
            this.checked =3D this.el.dom.checked;=0A=
        }=0A=
    },=0A=
    =0A=
        onDestroy : function(){=0A=
        if(this.wrap){=0A=
            this.wrap.remove();=0A=
        }=0A=
        Ext.form.Checkbox.superclass.onDestroy.call(this);=0A=
    },=0A=
=0A=
        initValue : Ext.emptyFn,=0A=
=0A=
    =0A=
    getValue : function(){=0A=
        if(this.rendered){=0A=
            return this.el.dom.checked;=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
	    onClick : function(){=0A=
        if(this.el.dom.checked !=3D this.checked){=0A=
            this.setValue(this.el.dom.checked);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setValue : function(v){=0A=
        this.checked =3D (v =3D=3D=3D true || v =3D=3D=3D 'true' || v =
=3D=3D '1' || String(v).toLowerCase() =3D=3D 'on');=0A=
        if(this.el && this.el.dom){=0A=
            this.el.dom.checked =3D this.checked;=0A=
            this.el.dom.defaultChecked =3D this.checked;=0A=
        }=0A=
        this.fireEvent("check", this, this.checked);=0A=
    }=0A=
});=0A=
Ext.reg('checkbox', Ext.form.Checkbox);=0A=
=0A=
Ext.form.Radio =3D Ext.extend(Ext.form.Checkbox, {=0A=
    inputType: 'radio',=0A=
=0A=
    =0A=
    markInvalid : Ext.emptyFn,=0A=
    =0A=
    clearInvalid : Ext.emptyFn,=0A=
=0A=
    =0A=
    getGroupValue : function(){=0A=
    	var p =3D this.el.up('form') || Ext.getBody();=0A=
        var c =3D p.child('input[name=3D'+this.el.dom.name+']:checked', =
true);=0A=
        return c ? c.value : null;=0A=
    },=0A=
    =0A=
        onClick : function(){=0A=
    	if(this.el.dom.checked !=3D this.checked){=0A=
    		var p =3D this.el.up('form') || Ext.getBody();=0A=
			var els =3D p.select('input[name=3D'+this.el.dom.name+']');=0A=
			els.each(function(el){=0A=
				if(el.dom.id =3D=3D this.id){=0A=
					this.setValue(true);=0A=
				}else{=0A=
					Ext.getCmp(el.dom.id).setValue(false);=0A=
				}=0A=
			}, this);=0A=
		}=0A=
    },=0A=
=0A=
    =0A=
    setValue : function(v){=0A=
    	if (typeof v =3D=3D 'boolean') {=0A=
            Ext.form.Radio.superclass.setValue.call(this, v);=0A=
        } else {=0A=
            var r =3D =
this.el.up('form').child('input[name=3D'+this.el.dom.name+'][value=3D'+v+=
']', true);=0A=
            if (r){=0A=
                r.checked =3D true;=0A=
            };=0A=
        }=0A=
    }=0A=
});=0A=
Ext.reg('radio', Ext.form.Radio);=0A=

Ext.form.Hidden =3D Ext.extend(Ext.form.Field, {
    =0A=
    inputType : 'hidden',

    =0A=
    onRender : function(){
        Ext.form.Hidden.superclass.onRender.apply(this, arguments);
    },

    =0A=
    initEvents : function(){
        this.originalValue =3D this.getValue();
    },

    =0A=
    setSize : Ext.emptyFn,
    setWidth : Ext.emptyFn,
    setHeight : Ext.emptyFn,
    setPosition : Ext.emptyFn,
    setPagePosition : Ext.emptyFn,
    markInvalid : Ext.emptyFn,
    clearInvalid : Ext.emptyFn
});
Ext.reg('hidden', Ext.form.Hidden);=0A=
=0A=
Ext.form.BasicForm =3D function(el, config){=0A=
    Ext.apply(this, config);=0A=
    =0A=
    this.items =3D new Ext.util.MixedCollection(false, function(o){=0A=
        return o.id || (o.id =3D Ext.id());=0A=
    });=0A=
    this.addEvents(=0A=
        =0A=
        'beforeaction',=0A=
        =0A=
        'actionfailed',=0A=
        =0A=
        'actioncomplete'=0A=
    );=0A=
    =0A=
    if(el){=0A=
        this.initEl(el);=0A=
    }=0A=
    Ext.form.BasicForm.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.form.BasicForm, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    timeout: 30,=0A=
=0A=
        activeAction : null,=0A=
=0A=
    =0A=
    trackResetOnLoad : false,=0A=
=0A=
    =0A=
    =0A=
    =0A=
        initEl : function(el){=0A=
        this.el =3D Ext.get(el);=0A=
        this.id =3D this.el.id || Ext.id();=0A=
        if(!this.standardSubmit){=0A=
            this.el.on('submit', this.onSubmit, this);=0A=
        }=0A=
        this.el.addClass('x-form');=0A=
    },=0A=
=0A=
    =0A=
    getEl: function(){=0A=
        return this.el;=0A=
    },=0A=
=0A=
        onSubmit : function(e){=0A=
        e.stopEvent();=0A=
    },=0A=
    =0A=
    	destroy: function() {=0A=
        this.items.each(function(f){=0A=
            Ext.destroy(f);=0A=
        });=0A=
        if(this.el){=0A=
			this.el.removeAllListeners();=0A=
			this.el.remove();=0A=
        }=0A=
		this.purgeListeners();=0A=
	},=0A=
=0A=
    =0A=
    isValid : function(){=0A=
        var valid =3D true;=0A=
        this.items.each(function(f){=0A=
           if(!f.validate()){=0A=
               valid =3D false;=0A=
           }=0A=
        });=0A=
        return valid;=0A=
    },=0A=
=0A=
    =0A=
    isDirty : function(){=0A=
        var dirty =3D false;=0A=
        this.items.each(function(f){=0A=
           if(f.isDirty()){=0A=
               dirty =3D true;=0A=
               return false;=0A=
           }=0A=
        });=0A=
        return dirty;=0A=
    },=0A=
=0A=
    =0A=
    doAction : function(action, options){=0A=
        if(typeof action =3D=3D 'string'){=0A=
            action =3D new Ext.form.Action.ACTION_TYPES[action](this, =
options);=0A=
        }=0A=
        if(this.fireEvent('beforeaction', this, action) !=3D=3D false){=0A=
            this.beforeAction(action);=0A=
            action.run.defer(100, action);=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    submit : function(options){=0A=
        if(this.standardSubmit){=0A=
            var v =3D this.isValid();=0A=
            if(v){=0A=
                this.el.dom.submit();=0A=
            }=0A=
            return v;=0A=
        }=0A=
        this.doAction('submit', options);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    load : function(options){=0A=
        this.doAction('load', options);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    updateRecord : function(record){=0A=
        record.beginEdit();=0A=
        var fs =3D record.fields;=0A=
        fs.each(function(f){=0A=
            var field =3D this.findField(f.name);=0A=
            if(field){=0A=
                record.set(f.name, field.getValue());=0A=
            }=0A=
        }, this);=0A=
        record.endEdit();=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    loadRecord : function(record){=0A=
        this.setValues(record.data);=0A=
        return this;=0A=
    },=0A=
=0A=
        beforeAction : function(action){=0A=
        var o =3D action.options;=0A=
        if(o.waitMsg){=0A=
            if(this.waitMsgTarget =3D=3D=3D true){=0A=
                this.el.mask(o.waitMsg, 'x-mask-loading');=0A=
            }else if(this.waitMsgTarget){=0A=
                this.waitMsgTarget =3D Ext.get(this.waitMsgTarget);=0A=
                this.waitMsgTarget.mask(o.waitMsg, 'x-mask-loading');=0A=
            }else{=0A=
                Ext.MessageBox.wait(o.waitMsg, o.waitTitle || =
this.waitTitle || 'Please Wait...');=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        afterAction : function(action, success){=0A=
        this.activeAction =3D null;=0A=
        var o =3D action.options;=0A=
        if(o.waitMsg){=0A=
            if(this.waitMsgTarget =3D=3D=3D true){=0A=
                this.el.unmask();=0A=
            }else if(this.waitMsgTarget){=0A=
                this.waitMsgTarget.unmask();=0A=
            }else{=0A=
                Ext.MessageBox.updateProgress(1);=0A=
                Ext.MessageBox.hide();=0A=
            }=0A=
        }=0A=
        if(success){=0A=
            if(o.reset){=0A=
                this.reset();=0A=
            }=0A=
            Ext.callback(o.success, o.scope, [this, action]);=0A=
            this.fireEvent('actioncomplete', this, action);=0A=
        }else{=0A=
            Ext.callback(o.failure, o.scope, [this, action]);=0A=
            this.fireEvent('actionfailed', this, action);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    findField : function(id){=0A=
        var field =3D this.items.get(id);=0A=
        if(!field){=0A=
            this.items.each(function(f){=0A=
                if(f.isFormField && (f.dataIndex =3D=3D id || f.id =
=3D=3D id || f.getName() =3D=3D id)){=0A=
                    field =3D f;=0A=
                    return false;=0A=
                }=0A=
            });=0A=
        }=0A=
        return field || null;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    markInvalid : function(errors){=0A=
        if(Ext.isArray(errors)){=0A=
            for(var i =3D 0, len =3D errors.length; i < len; i++){=0A=
                var fieldError =3D errors[i];=0A=
                var f =3D this.findField(fieldError.id);=0A=
                if(f){=0A=
                    f.markInvalid(fieldError.msg);=0A=
                }=0A=
            }=0A=
        }else{=0A=
            var field, id;=0A=
            for(id in errors){=0A=
                if(typeof errors[id] !=3D 'function' && (field =3D =
this.findField(id))){=0A=
                    field.markInvalid(errors[id]);=0A=
                }=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    setValues : function(values){=0A=
        if(Ext.isArray(values)){             for(var i =3D 0, len =3D =
values.length; i < len; i++){=0A=
                var v =3D values[i];=0A=
                var f =3D this.findField(v.id);=0A=
                if(f){=0A=
                    f.setValue(v.value);=0A=
                    if(this.trackResetOnLoad){=0A=
                        f.originalValue =3D f.getValue();=0A=
                    }=0A=
                }=0A=
            }=0A=
        }else{             var field, id;=0A=
            for(id in values){=0A=
                if(typeof values[id] !=3D 'function' && (field =3D =
this.findField(id))){=0A=
                    field.setValue(values[id]);=0A=
                    if(this.trackResetOnLoad){=0A=
                        field.originalValue =3D field.getValue();=0A=
                    }=0A=
                }=0A=
            }=0A=
        }=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    getValues : function(asString){=0A=
        var fs =3D Ext.lib.Ajax.serializeForm(this.el.dom);=0A=
        if(asString =3D=3D=3D true){=0A=
            return fs;=0A=
        }=0A=
        return Ext.urlDecode(fs);=0A=
    },=0A=
=0A=
    =0A=
    clearInvalid : function(){=0A=
        this.items.each(function(f){=0A=
           f.clearInvalid();=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    reset : function(){=0A=
        this.items.each(function(f){=0A=
            f.reset();=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    add : function(){=0A=
        this.items.addAll(Array.prototype.slice.call(arguments, 0));=0A=
        return this;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    remove : function(field){=0A=
        this.items.remove(field);=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    render : function(){=0A=
        this.items.each(function(f){=0A=
            if(f.isFormField && !f.rendered && =
document.getElementById(f.id)){                 f.applyToMarkup(f.id);=0A=
            }=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    applyToFields : function(o){=0A=
        this.items.each(function(f){=0A=
           Ext.apply(f, o);=0A=
        });=0A=
        return this;=0A=
    },=0A=
=0A=
    =0A=
    applyIfToFields : function(o){=0A=
        this.items.each(function(f){=0A=
           Ext.applyIf(f, o);=0A=
        });=0A=
        return this;=0A=
    }=0A=
});=0A=
=0A=
Ext.BasicForm =3D Ext.form.BasicForm;=0A=
=0A=
Ext.FormPanel =3D Ext.extend(Ext.Panel, {=0A=
	=0A=
    =0A=
    =0A=
    =0A=
    buttonAlign:'center',=0A=
=0A=
    =0A=
    minButtonWidth:75,=0A=
=0A=
    =0A=
    labelAlign:'left',=0A=
=0A=
    =0A=
    monitorValid : false,=0A=
=0A=
    =0A=
    monitorPoll : 200,=0A=
=0A=
    =0A=
    layout: 'form',=0A=
=0A=
        initComponent :function(){=0A=
        this.form =3D this.createForm();=0A=
        =0A=
        Ext.FormPanel.superclass.initComponent.call(this);=0A=
=0A=
        this.addEvents(=0A=
            =0A=
            'clientvalidation'=0A=
        );=0A=
=0A=
        this.relayEvents(this.form, ['beforeaction', 'actionfailed', =
'actioncomplete']);=0A=
    },=0A=
=0A=
        createForm: function(){=0A=
        delete this.initialConfig.listeners;=0A=
        return new Ext.form.BasicForm(null, this.initialConfig);=0A=
    },=0A=
=0A=
        initFields : function(){=0A=
        var f =3D this.form;=0A=
        var formPanel =3D this;=0A=
        var fn =3D function(c){=0A=
            if(c.doLayout && c !=3D formPanel){=0A=
                Ext.applyIf(c, {=0A=
                    labelAlign: c.ownerCt.labelAlign,=0A=
                    labelWidth: c.ownerCt.labelWidth,=0A=
                    itemCls: c.ownerCt.itemCls=0A=
                });=0A=
                if(c.items){=0A=
                    c.items.each(fn);=0A=
                }=0A=
            }else if(c.isFormField){=0A=
                f.add(c);=0A=
            }=0A=
        }=0A=
        this.items.each(fn);=0A=
    },=0A=
=0A=
        getLayoutTarget : function(){=0A=
        return this.form.el;=0A=
    },=0A=
=0A=
    =0A=
    getForm : function(){=0A=
        return this.form;=0A=
    },=0A=
=0A=
        onRender : function(ct, position){=0A=
        this.initFields();=0A=
=0A=
        Ext.FormPanel.superclass.onRender.call(this, ct, position);=0A=
        var o =3D {=0A=
            tag: 'form',=0A=
            method : this.method || 'POST',=0A=
            id : this.formId || Ext.id()=0A=
        };=0A=
        if(this.fileUpload) {=0A=
            o.enctype =3D 'multipart/form-data';=0A=
        }=0A=
        this.form.initEl(this.body.createChild(o));=0A=
    },=0A=
    =0A=
        beforeDestroy: function(){=0A=
        Ext.FormPanel.superclass.beforeDestroy.call(this);=0A=
        Ext.destroy(this.form);=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        Ext.FormPanel.superclass.initEvents.call(this);=0A=
		this.items.on('remove', this.onRemove, this);=0A=
		this.items.on('add', this.onAdd, this);=0A=
        if(this.monitorValid){             this.startMonitoring();=0A=
        }=0A=
    },=0A=
    =0A=
    	onAdd : function(ct, c) {=0A=
		if (c.isFormField) {=0A=
			this.form.add(c);=0A=
		}=0A=
	},=0A=
	=0A=
		onRemove : function(c) {=0A=
		if (c.isFormField) {=0A=
			Ext.destroy(c.container.up('.x-form-item'));=0A=
			this.form.remove(c);=0A=
		}=0A=
	},=0A=
=0A=
    =0A=
    startMonitoring : function(){=0A=
        if(!this.bound){=0A=
            this.bound =3D true;=0A=
            Ext.TaskMgr.start({=0A=
                run : this.bindHandler,=0A=
                interval : this.monitorPoll || 200,=0A=
                scope: this=0A=
            });=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    stopMonitoring : function(){=0A=
        this.bound =3D false;=0A=
    },=0A=
=0A=
    =0A=
    load : function(){=0A=
        this.form.load.apply(this.form, arguments);  =0A=
    },=0A=
=0A=
        onDisable : function(){=0A=
        Ext.FormPanel.superclass.onDisable.call(this);=0A=
        if(this.form){=0A=
            this.form.items.each(function(){=0A=
                 this.disable();=0A=
            });=0A=
        }=0A=
    },=0A=
=0A=
        onEnable : function(){=0A=
        Ext.FormPanel.superclass.onEnable.call(this);=0A=
        if(this.form){=0A=
            this.form.items.each(function(){=0A=
                 this.enable();=0A=
            });=0A=
        }=0A=
    },=0A=
=0A=
        bindHandler : function(){=0A=
        if(!this.bound){=0A=
            return false;         }=0A=
        var valid =3D true;=0A=
        this.form.items.each(function(f){=0A=
            if(!f.isValid(true)){=0A=
                valid =3D false;=0A=
                return false;=0A=
            }=0A=
        });=0A=
        if(this.buttons){=0A=
            for(var i =3D 0, len =3D this.buttons.length; i < len; i++){=0A=
                var btn =3D this.buttons[i];=0A=
                if(btn.formBind =3D=3D=3D true && btn.disabled =3D=3D=3D =
valid){=0A=
                    btn.setDisabled(!valid);=0A=
                }=0A=
            }=0A=
        }=0A=
        this.fireEvent('clientvalidation', this, valid);=0A=
    }=0A=
});=0A=
Ext.reg('form', Ext.FormPanel);=0A=
=0A=
Ext.form.FormPanel =3D Ext.FormPanel;=0A=
=0A=
=0A=

Ext.form.FieldSet =3D Ext.extend(Ext.Panel, {
   =20
   =20
   =20
   =20
   =20
    baseCls:'x-fieldset',
   =20
    layout: 'form',

    =0A=
    onRender : function(ct, position){
        if(!this.el){
            this.el =3D document.createElement('fieldset');
            this.el.id =3D this.id;
            if (this.title || this.header || this.checkboxToggle) {
                =
this.el.appendChild(document.createElement('legend')).className =3D =
'x-fieldset-header';
            }
        }

        Ext.form.FieldSet.superclass.onRender.call(this, ct, position);

        if(this.checkboxToggle){
            var o =3D typeof this.checkboxToggle =3D=3D 'object' ?
                    this.checkboxToggle :
                    {tag: 'input', type: 'checkbox', name: =
this.checkboxName || this.id+'-checkbox'};
            this.checkbox =3D this.header.insertFirst(o);
            this.checkbox.dom.checked =3D !this.collapsed;
            this.checkbox.on('click', this.onCheckClick, this);
        }
    },

    =0A=
    onCollapse : function(doAnim, animArg){
        if(this.checkbox){
            this.checkbox.dom.checked =3D false;
        }
        this.afterCollapse();

    },

    =0A=
    onExpand : function(doAnim, animArg){
        if(this.checkbox){
            this.checkbox.dom.checked =3D true;
        }
        this.afterExpand();
    },

   =20
    onCheckClick : function(){
        this[this.checkbox.dom.checked ? 'expand' : 'collapse']();
    }

   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
});
Ext.reg('fieldset', Ext.form.FieldSet);

=0A=


Ext.form.HtmlEditor =3D Ext.extend(Ext.form.Field, {
   =20
    enableFormat : true,
   =20
    enableFontSize : true,
   =20
    enableColors : true,
   =20
    enableAlignments : true,
   =20
    enableLists : true,
   =20
    enableSourceEdit : true,
   =20
    enableLinks : true,
   =20
    enableFont : true,
   =20
    createLinkText : 'Please enter the URL for the link:',
   =20
    defaultLinkValue : 'http:/'+'/',
   =20
    fontFamilies : [
        'Arial',
        'Courier New',
        'Tahoma',
        'Times New Roman',
        'Verdana'
    ],
    defaultFont: 'tahoma',

    =0A=
    validationEvent : false,
    deferHeight: true,
    initialized : false,
    activated : false,
    sourceEditMode : false,
    onFocus : Ext.emptyFn,
    iframePad:3,
    hideMode:'offsets',
    defaultAutoCreate : {
        tag: "textarea",
        style:"width:500px;height:300px;",
        autocomplete: "off"
    },

    =0A=
    initComponent : function(){
        this.addEvents(
           =20
            'initialize',
           =20
            'activate',
            =20
            'beforesync',
            =20
            'beforepush',
            =20
            'sync',
            =20
            'push',
            =20
            'editmodechange'
        )
    },

    =0A=
    createFontOptions : function(){
        var buf =3D [], fs =3D this.fontFamilies, ff, lc;
        for(var i =3D 0, len =3D fs.length; i< len; i++){
            ff =3D fs[i];
            lc =3D ff.toLowerCase();
            buf.push(
                '<option value=3D"',lc,'" =
style=3D"font-family:',ff,';"',
                    (this.defaultFont =3D=3D lc ? ' selected=3D"true">' =
: '>'),
                    ff,
                '</option>'
            );
        }
        return buf.join('');
    },
   =20
   =20
    createToolbar : function(editor){
       =20
        var tipsEnabled =3D Ext.QuickTips && Ext.QuickTips.isEnabled();
       =20
        function btn(id, toggle, handler){
            return {
                itemId : id,
                cls : 'x-btn-icon x-edit-'+id,
                enableToggle:toggle !=3D=3D false,
                scope: editor,
                handler:handler||editor.relayBtnCmd,
                clickEvent:'mousedown',
                tooltip: tipsEnabled ? editor.buttonTips[id] || =
undefined : undefined,
                tabIndex:-1
            };
        }

        =0A=
        var tb =3D new Ext.Toolbar({
            renderTo:this.wrap.dom.firstChild
        });

        =0A=
        tb.el.on('click', function(e){
            e.preventDefault();
        });

        if(this.enableFont && !Ext.isSafari){
            this.fontSelect =3D tb.el.createChild({
                tag:'select',
                cls:'x-font-select',
                html: this.createFontOptions()
            });
            this.fontSelect.on('change', function(){
                var font =3D this.fontSelect.dom.value;
                this.relayCmd('fontname', font);
                this.deferFocus();
            }, this);
            tb.add(
                this.fontSelect.dom,
                '-'
            );
        };

        if(this.enableFormat){
            tb.add(
                btn('bold'),
                btn('italic'),
                btn('underline')
            );
        };

        if(this.enableFontSize){
            tb.add(
                '-',
                btn('increasefontsize', false, this.adjustFont),
                btn('decreasefontsize', false, this.adjustFont)
            );
        };

        if(this.enableColors){
            tb.add(
                '-', {
                    itemId:'forecolor',
                    cls:'x-btn-icon x-edit-forecolor',
                    clickEvent:'mousedown',
                    tooltip: tipsEnabled ? =
editor.buttonTips['forecolor'] || undefined : undefined,
                    tabIndex:-1,
                    menu : new Ext.menu.ColorMenu({
                        allowReselect: true,
                        focus: Ext.emptyFn,
                        value:'000000',
                        plain:true,
                        selectHandler: function(cp, color){
                            this.execCmd('forecolor', Ext.isSafari || =
Ext.isIE ? '#'+color : color);
                            this.deferFocus();
                        },
                        scope: this,
                        clickEvent:'mousedown'
                    })
                }, {
                    itemId:'backcolor',
                    cls:'x-btn-icon x-edit-backcolor',
                    clickEvent:'mousedown',
                    tooltip: tipsEnabled ? =
editor.buttonTips['backcolor'] || undefined : undefined,
                    tabIndex:-1,
                    menu : new Ext.menu.ColorMenu({
                        focus: Ext.emptyFn,
                        value:'FFFFFF',
                        plain:true,
                        allowReselect: true,
                        selectHandler: function(cp, color){
                            if(Ext.isGecko){
                                this.execCmd('useCSS', false);
                                this.execCmd('hilitecolor', color);
                                this.execCmd('useCSS', true);
                                this.deferFocus();
                            }else{
                                this.execCmd(Ext.isOpera ? 'hilitecolor' =
: 'backcolor', Ext.isSafari || Ext.isIE ? '#'+color : color);
                                this.deferFocus();
                            }
                        },
                        scope:this,
                        clickEvent:'mousedown'
                    })
                }
            );
        };

        if(this.enableAlignments){
            tb.add(
                '-',
                btn('justifyleft'),
                btn('justifycenter'),
                btn('justifyright')
            );
        };

        if(!Ext.isSafari){
            if(this.enableLinks){
                tb.add(
                    '-',
                    btn('createlink', false, this.createLink)
                );
            };

            if(this.enableLists){
                tb.add(
                    '-',
                    btn('insertorderedlist'),
                    btn('insertunorderedlist')
                );
            }
            if(this.enableSourceEdit){
                tb.add(
                    '-',
                    btn('sourceedit', true, function(btn){
                        this.toggleSourceEdit(btn.pressed);
                    })
                );
            }
        }

        this.tb =3D tb;
    },

   =20
    getDocMarkup : function(){
        return '<html><head><style =
type=3D"text/css">body{border:0;margin:0;padding:3px;height:98%;cursor:te=
xt;}</style></head><body></body></html>';
    },

    =0A=
    getEditorBody : function(){
        return this.doc.body || this.doc.documentElement;
    },

    =0A=
    onRender : function(ct, position){
        Ext.form.HtmlEditor.superclass.onRender.call(this, ct, =
position);
        this.el.dom.style.border =3D '0 none';
        this.el.dom.setAttribute('tabIndex', -1);
        this.el.addClass('x-hidden');
        if(Ext.isIE){ =0A=
            this.el.applyStyles('margin-top:-1px;margin-bottom:-1px;')
        }
        this.wrap =3D this.el.wrap({
            cls:'x-html-editor-wrap', cn:{cls:'x-html-editor-tb'}
        });

        this.createToolbar(this);

        this.tb.items.each(function(item){
           if(item.itemId !=3D 'sourceedit'){
                item.disable();
            }
        });

        var iframe =3D document.createElement('iframe');
        iframe.name =3D Ext.id();
        iframe.frameBorder =3D 'no';

        iframe.src=3D(Ext.SSL_SECURE_URL || "javascript:false");

        this.wrap.dom.appendChild(iframe);

        this.iframe =3D iframe;

        if(Ext.isIE){
            iframe.contentWindow.document.designMode =3D 'on';
            this.doc =3D iframe.contentWindow.document;
            this.win =3D iframe.contentWindow;
        } else {
            this.doc =3D (iframe.contentDocument || =
window.frames[iframe.name].document);
            this.win =3D window.frames[iframe.name];
            this.doc.designMode =3D 'on';
        }
        this.doc.open();
        this.doc.write(this.getDocMarkup())
        this.doc.close();

        var task =3D { =0A=
            run : function(){
                if(this.doc.body || this.doc.readyState =3D=3D =
'complete'){
                    Ext.TaskMgr.stop(task);
                    this.doc.designMode=3D"on";
                    this.initEditor.defer(10, this);
                }
            },
            interval : 10,
            duration:10000,
            scope: this
        };
        Ext.TaskMgr.start(task);

        if(!this.width){
            this.setSize(this.el.getSize());
        }
    },

    =0A=
    onResize : function(w, h){
        Ext.form.HtmlEditor.superclass.onResize.apply(this, arguments);
        if(this.el && this.iframe){
            if(typeof w =3D=3D 'number'){
                var aw =3D w - this.wrap.getFrameWidth('lr');
                this.el.setWidth(this.adjustWidth('textarea', aw));
                this.iframe.style.width =3D aw + 'px';
            }
            if(typeof h =3D=3D 'number'){
                var ah =3D h - this.wrap.getFrameWidth('tb') - =
this.tb.el.getHeight();
                this.el.setHeight(this.adjustWidth('textarea', ah));
                this.iframe.style.height =3D ah + 'px';
                if(this.doc){
                    this.getEditorBody().style.height =3D (ah - =
(this.iframePad*2)) + 'px';
                }
            }
        }
    },

   =20
    toggleSourceEdit : function(sourceEditMode){
        if(sourceEditMode =3D=3D=3D undefined){
            sourceEditMode =3D !this.sourceEditMode;
        }
        this.sourceEditMode =3D sourceEditMode =3D=3D=3D true;
        var btn =3D this.tb.items.get('sourceedit');
        if(btn.pressed !=3D=3D this.sourceEditMode){
            btn.toggle(this.sourceEditMode);
            return;
        }
        if(this.sourceEditMode){
            this.tb.items.each(function(item){
                if(item.itemId !=3D 'sourceedit'){
                    item.disable();
                }
            });
            this.syncValue();
            this.iframe.className =3D 'x-hidden';
            this.el.removeClass('x-hidden');
            this.el.dom.removeAttribute('tabIndex');
            this.el.focus();
        }else{
            if(this.initialized){
                this.tb.items.each(function(item){
                    item.enable();
                });
            }
            this.pushValue();
            this.iframe.className =3D '';
            this.el.addClass('x-hidden');
            this.el.dom.setAttribute('tabIndex', -1);
            this.deferFocus();
        }
        var lastSize =3D this.lastSize;
        if(lastSize){
            delete this.lastSize;
            this.setSize(lastSize);
        }
        this.fireEvent('editmodechange', this, this.sourceEditMode);
    },

    =0A=
    createLink : function(){
        var url =3D prompt(this.createLinkText, this.defaultLinkValue);
        if(url && url !=3D 'http:/'+'/'){
            this.relayCmd('createlink', url);
        }
    },

    =0A=
    adjustSize : Ext.BoxComponent.prototype.adjustSize,

    =0A=
    getResizeEl : function(){
        return this.wrap;
    },

    =0A=
    getPositionEl : function(){
        return this.wrap;
    },

    =0A=
    initEvents : function(){
        this.originalValue =3D this.getValue();
    },

   =20
    markInvalid : Ext.emptyFn,
   =20
   =20
    clearInvalid : Ext.emptyFn,

    =0A=
    setValue : function(v){
        Ext.form.HtmlEditor.superclass.setValue.call(this, v);
        this.pushValue();
    },

   =20
    cleanHtml : function(html){
        html =3D String(html);
        if(html.length > 5){
            if(Ext.isSafari){ =0A=
                html =3D =
html.replace(/\sclass=3D"(?:Apple-style-span|khtml-block-placeholder)"/gi=
, '');
            }
        }
        if(html =3D=3D '&nbsp;'){
            html =3D '';
        }
        return html;
    },

   =20
    syncValue : function(){
        if(this.initialized){
            var bd =3D this.getEditorBody();
            var html =3D bd.innerHTML;
            if(Ext.isSafari){
                var bs =3D bd.getAttribute('style'); =0A=
                var m =3D bs.match(/text-align:(.*?);/i);
                if(m && m[1]){
                    html =3D '<div style=3D"'+m[0]+'">' + html + =
'</div>';
                }
            }
            html =3D this.cleanHtml(html);
            if(this.fireEvent('beforesync', this, html) !=3D=3D false){
                this.el.dom.value =3D html;
                this.fireEvent('sync', this, html);
            }
        }
    },

   =20
    pushValue : function(){
        if(this.initialized){
            var v =3D this.el.dom.value;
            if(!this.activated && v.length < 1){
                v =3D '&nbsp;';
            }
            if(this.fireEvent('beforepush', this, v) !=3D=3D false){
                this.getEditorBody().innerHTML =3D v;
                this.fireEvent('push', this, v);
            }
        }
    },

    =0A=
    deferFocus : function(){
        this.focus.defer(10, this);
    },

    =0A=
    focus : function(){
        if(this.win && !this.sourceEditMode){
            this.win.focus();
        }else{
            this.el.focus();
        }
    },

    =0A=
    initEditor : function(){
        var dbody =3D this.getEditorBody();
        var ss =3D this.el.getStyles('font-size', 'font-family', =
'background-image', 'background-repeat');
        ss['background-attachment'] =3D 'fixed'; =0A=
        dbody.bgProperties =3D 'fixed'; =0A=
        Ext.DomHelper.applyStyles(dbody, ss);
        Ext.EventManager.on(this.doc, {
            'mousedown': this.onEditorEvent,
            'dblclick': this.onEditorEvent,
            'click': this.onEditorEvent,
            'keyup': this.onEditorEvent,
            buffer:100,
            scope: this
        });
        if(Ext.isGecko){
            Ext.EventManager.on(this.doc, 'keypress', this.applyCommand, =
this);
        }
        if(Ext.isIE || Ext.isSafari || Ext.isOpera){
            Ext.EventManager.on(this.doc, 'keydown', this.fixKeys, =
this);
        }
        this.initialized =3D true;

        this.fireEvent('initialize', this);
        this.pushValue();
    },

    =0A=
    onDestroy : function(){
        if(this.rendered){
            this.tb.items.each(function(item){
                if(item.menu){
                    item.menu.removeAll();
                    if(item.menu.el){
                        item.menu.el.destroy();
                    }
                }
                item.destroy();
            });
            this.wrap.dom.innerHTML =3D '';
            this.wrap.remove();
        }
    },

    =0A=
    onFirstFocus : function(){
        this.activated =3D true;
        this.tb.items.each(function(item){
           item.enable();
        });
        if(Ext.isGecko){ =0A=
            this.win.focus();
            var s =3D this.win.getSelection();
            if(!s.focusNode || s.focusNode.nodeType !=3D 3){
                var r =3D s.getRangeAt(0);
                r.selectNodeContents(this.getEditorBody());
                r.collapse(true);
                this.deferFocus();
            }
            try{
                this.execCmd('useCSS', true);
                this.execCmd('styleWithCSS', false);
            }catch(e){}
        }
        this.fireEvent('activate', this);
    },

    =0A=
    adjustFont: function(btn){
        var adjust =3D btn.itemId =3D=3D 'increasefontsize' ? 1 : -1;

        var v =3D parseInt(this.doc.queryCommandValue('FontSize') || 2, =
10);
        if(Ext.isSafari3 || Ext.isAir){
            =0A=
            =0A=
            if(v <=3D 10){
                v =3D 1 + adjust;
            }else if(v <=3D 13){
                v =3D 2 + adjust;
            }else if(v <=3D 16){
                v =3D 3 + adjust;
            }else if(v <=3D 18){
                v =3D 4 + adjust;
            }else if(v <=3D 24){
                v =3D 5 + adjust;
            }else {
                v =3D 6 + adjust;
            }
            v =3D v.constrain(1, 6);
        }else{
            if(Ext.isSafari){ =0A=
                adjust *=3D 2;
            }
            v =3D Math.max(1, v+adjust) + (Ext.isSafari ? 'px' : 0);
        }
        this.execCmd('FontSize', v);
    },

    =0A=
    onEditorEvent : function(e){
        this.updateToolbar();
    },


   =20
    updateToolbar: function(){

        if(!this.activated){
            this.onFirstFocus();
            return;
        }

        var btns =3D this.tb.items.map, doc =3D this.doc;

        if(this.enableFont && !Ext.isSafari){
            var name =3D =
(this.doc.queryCommandValue('FontName')||this.defaultFont).toLowerCase();=

            if(name !=3D this.fontSelect.dom.value){
                this.fontSelect.dom.value =3D name;
            }
        }
        if(this.enableFormat){
            btns.bold.toggle(doc.queryCommandState('bold'));
            btns.italic.toggle(doc.queryCommandState('italic'));
            btns.underline.toggle(doc.queryCommandState('underline'));
        }
        if(this.enableAlignments){
            =
btns.justifyleft.toggle(doc.queryCommandState('justifyleft'));
            =
btns.justifycenter.toggle(doc.queryCommandState('justifycenter'));
            =
btns.justifyright.toggle(doc.queryCommandState('justifyright'));
        }
        if(!Ext.isSafari && this.enableLists){
            =
btns.insertorderedlist.toggle(doc.queryCommandState('insertorderedlist'))=
;
            =
btns.insertunorderedlist.toggle(doc.queryCommandState('insertunorderedlis=
t'));
        }
       =20
        Ext.menu.MenuMgr.hideAll();

        this.syncValue();
    },

    =0A=
    relayBtnCmd : function(btn){
        this.relayCmd(btn.itemId);
    },

   =20
    relayCmd : function(cmd, value){
        this.win.focus();
        this.execCmd(cmd, value);
        this.updateToolbar();
        this.deferFocus();
    },

   =20
    execCmd : function(cmd, value){
        this.doc.execCommand(cmd, false, value =3D=3D=3D undefined ? =
null : value);
        this.syncValue();
    },

    =0A=
    applyCommand : function(e){
        if(e.ctrlKey){
            var c =3D e.getCharCode(), cmd;
            if(c > 0){
                c =3D String.fromCharCode(c);
                switch(c){
                    case 'b':
                        cmd =3D 'bold';
                    break;
                    case 'i':
                        cmd =3D 'italic';
                    break;
                    case 'u':
                        cmd =3D 'underline';
                    break;
                }
                if(cmd){
                    this.win.focus();
                    this.execCmd(cmd);
                    this.deferFocus();
                    e.preventDefault();
                }
            }
        }
    },

   =20
    insertAtCursor : function(text){
        if(!this.activated){
            return;
        }
        if(Ext.isIE){
            this.win.focus();
            var r =3D this.doc.selection.createRange();
            if(r){
                r.collapse(true);
                r.pasteHTML(text);
                this.syncValue();
                this.deferFocus();
            }
        }else if(Ext.isGecko || Ext.isOpera){
            this.win.focus();
            this.execCmd('InsertHTML', text);
            this.deferFocus();
        }else if(Ext.isSafari){
            this.execCmd('InsertText', text);
            this.deferFocus();
        }
    },

    =0A=
    fixKeys : function(){ =0A=
        if(Ext.isIE){
            return function(e){
                var k =3D e.getKey(), r;
                if(k =3D=3D e.TAB){
                    e.stopEvent();
                    r =3D this.doc.selection.createRange();
                    if(r){
                        r.collapse(true);
                        r.pasteHTML('&nbsp;&nbsp;&nbsp;&nbsp;');
                        this.deferFocus();
                    }
                }else if(k =3D=3D e.ENTER){
                    r =3D this.doc.selection.createRange();
                    if(r){
                        var target =3D r.parentElement();
                        if(!target || target.tagName.toLowerCase() !=3D =
'li'){
                            e.stopEvent();
                            r.pasteHTML('<br />');
                            r.collapse(false);
                            r.select();
                        }
                    }
                }
            };
        }else if(Ext.isOpera){
            return function(e){
                var k =3D e.getKey();
                if(k =3D=3D e.TAB){
                    e.stopEvent();
                    this.win.focus();
                    =
this.execCmd('InsertHTML','&nbsp;&nbsp;&nbsp;&nbsp;');
                    this.deferFocus();
                }
            };
        }else if(Ext.isSafari){
            return function(e){
                var k =3D e.getKey();
                if(k =3D=3D e.TAB){
                    e.stopEvent();
                    this.execCmd('InsertText','\t');
                    this.deferFocus();
                }
             };
        }
    }(),

   =20
    getToolbar : function(){
        return this.tb;
    },

   =20
    buttonTips : {
        bold : {
            title: 'Bold (Ctrl+B)',
            text: 'Make the selected text bold.',
            cls: 'x-html-editor-tip'
        },
        italic : {
            title: 'Italic (Ctrl+I)',
            text: 'Make the selected text italic.',
            cls: 'x-html-editor-tip'
        },
        underline : {
            title: 'Underline (Ctrl+U)',
            text: 'Underline the selected text.',
            cls: 'x-html-editor-tip'
        },
        increasefontsize : {
            title: 'Grow Text',
            text: 'Increase the font size.',
            cls: 'x-html-editor-tip'
        },
        decreasefontsize : {
            title: 'Shrink Text',
            text: 'Decrease the font size.',
            cls: 'x-html-editor-tip'
        },
        backcolor : {
            title: 'Text Highlight Color',
            text: 'Change the background color of the selected text.',
            cls: 'x-html-editor-tip'
        },
        forecolor : {
            title: 'Font Color',
            text: 'Change the color of the selected text.',
            cls: 'x-html-editor-tip'
        },
        justifyleft : {
            title: 'Align Text Left',
            text: 'Align text to the left.',
            cls: 'x-html-editor-tip'
        },
        justifycenter : {
            title: 'Center Text',
            text: 'Center text in the editor.',
            cls: 'x-html-editor-tip'
        },
        justifyright : {
            title: 'Align Text Right',
            text: 'Align text to the right.',
            cls: 'x-html-editor-tip'
        },
        insertunorderedlist : {
            title: 'Bullet List',
            text: 'Start a bulleted list.',
            cls: 'x-html-editor-tip'
        },
        insertorderedlist : {
            title: 'Numbered List',
            text: 'Start a numbered list.',
            cls: 'x-html-editor-tip'
        },
        createlink : {
            title: 'Hyperlink',
            text: 'Make the selected text a hyperlink.',
            cls: 'x-html-editor-tip'
        },
        sourceedit : {
            title: 'Source Edit',
            text: 'Switch to source editing mode.',
            cls: 'x-html-editor-tip'
        }
    }

    =0A=
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
});
Ext.reg('htmleditor', Ext.form.HtmlEditor);=0A=

Ext.form.TimeField =3D Ext.extend(Ext.form.ComboBox, {
   =20
    minValue : null,
   =20
    maxValue : null,
   =20
    minText : "The time in this field must be equal to or after {0}",
   =20
    maxText : "The time in this field must be equal to or before {0}",
   =20
    invalidText : "{0} is not a valid time",
   =20
    format : "g:i A",
   =20
    altFormats : "g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g =
A|gi|hi|gia|hia|g|H",
   =20
    increment: 15,

    =0A=
    mode: 'local',
    =0A=
    triggerAction: 'all',
    =0A=
    typeAhead: false,

    =0A=
    initComponent : function(){
        Ext.form.TimeField.superclass.initComponent.call(this);

        if(typeof this.minValue =3D=3D "string"){
            this.minValue =3D this.parseDate(this.minValue);
        }
        if(typeof this.maxValue =3D=3D "string"){
            this.maxValue =3D this.parseDate(this.maxValue);
        }

        if(!this.store){
            var min =3D this.parseDate(this.minValue);
            if(!min){
                min =3D new Date().clearTime();
            }
            var max =3D this.parseDate(this.maxValue);
            if(!max){
                max =3D new Date().clearTime().add('mi', (24 * 60) - 1);
            }
            var times =3D [];
            while(min <=3D max){
                times.push([min.dateFormat(this.format)]);
                min =3D min.add('mi', this.increment);
            }
            this.store =3D new Ext.data.SimpleStore({
                fields: ['text'],
                data : times
            });
            this.displayField =3D 'text';
        }
    },

    =0A=
    getValue : function(){
        var v =3D Ext.form.TimeField.superclass.getValue.call(this);
        return this.formatDate(this.parseDate(v)) || '';
    },

    =0A=
    setValue : function(value){
        Ext.form.TimeField.superclass.setValue.call(this, =
this.formatDate(this.parseDate(value)));
    },

    =0A=
    validateValue : Ext.form.DateField.prototype.validateValue,
    parseDate : Ext.form.DateField.prototype.parseDate,
    formatDate : Ext.form.DateField.prototype.formatDate,

    =0A=
    beforeBlur : function(){
        var v =3D this.parseDate(this.getRawValue());
        if(v){
            this.setValue(v.dateFormat(this.format));
        }
    }

   =20
   =20
   =20
   =20
});
Ext.reg('timefield', Ext.form.TimeField);=0A=
=0A=
Ext.form.Label =3D Ext.extend(Ext.BoxComponent, {=0A=
    =0A=
    =0A=
=0A=
    onRender : function(ct, position){=0A=
        if(!this.el){=0A=
            this.el =3D document.createElement('label');=0A=
            this.el.id =3D this.getId();=0A=
            this.el.innerHTML =3D this.text ? =
Ext.util.Format.htmlEncode(this.text) : (this.html || '');=0A=
            if(this.forId){=0A=
                this.el.setAttribute('htmlFor', this.forId);=0A=
            }=0A=
        }=0A=
        Ext.form.Label.superclass.onRender.call(this, ct, position);=0A=
    }=0A=
});=0A=
=0A=
Ext.reg('label', Ext.form.Label);=0A=
=0A=
Ext.form.Action =3D function(form, options){=0A=
    this.form =3D form;=0A=
    this.options =3D options || {};=0A=
};=0A=
=0A=
=0A=
Ext.form.Action.CLIENT_INVALID =3D 'client';=0A=
=0A=
Ext.form.Action.SERVER_INVALID =3D 'server';=0A=
=0A=
Ext.form.Action.CONNECT_FAILURE =3D 'connect';=0A=
=0A=
Ext.form.Action.LOAD_FAILURE =3D 'load';=0A=
=0A=
Ext.form.Action.prototype =3D {=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
    type : 'default',=0A=
=0A=
=0A=
        run : function(options){=0A=
=0A=
    },=0A=
=0A=
        success : function(response){=0A=
=0A=
    },=0A=
=0A=
        handleResponse : function(response){=0A=
=0A=
    },=0A=
=0A=
        failure : function(response){=0A=
        this.response =3D response;=0A=
        this.failureType =3D Ext.form.Action.CONNECT_FAILURE;=0A=
        this.form.afterAction(this, false);=0A=
    },=0A=
=0A=
        processResponse : function(response){=0A=
        this.response =3D response;=0A=
        if(!response.responseText){=0A=
            return true;=0A=
        }=0A=
        this.result =3D this.handleResponse(response);=0A=
        return this.result;=0A=
    },=0A=
=0A=
        getUrl : function(appendParams){=0A=
        var url =3D this.options.url || this.form.url || =
this.form.el.dom.action;=0A=
        if(appendParams){=0A=
            var p =3D this.getParams();=0A=
            if(p){=0A=
                url +=3D (url.indexOf('?') !=3D -1 ? '&' : '?') + p;=0A=
            }=0A=
        }=0A=
        return url;=0A=
    },=0A=
=0A=
        getMethod : function(){=0A=
        return (this.options.method || this.form.method || =
this.form.el.dom.method || 'POST').toUpperCase();=0A=
    },=0A=
=0A=
        getParams : function(){=0A=
        var bp =3D this.form.baseParams;=0A=
        var p =3D this.options.params;=0A=
        if(p){=0A=
            if(typeof p =3D=3D "object"){=0A=
                p =3D Ext.urlEncode(Ext.applyIf(p, bp));=0A=
            }else if(typeof p =3D=3D 'string' && bp){=0A=
                p +=3D '&' + Ext.urlEncode(bp);=0A=
            }=0A=
        }else if(bp){=0A=
            p =3D Ext.urlEncode(bp);=0A=
        }=0A=
        return p;=0A=
    },=0A=
=0A=
        createCallback : function(opts){=0A=
		var opts =3D opts || {};=0A=
        return {=0A=
            success: this.success,=0A=
            failure: this.failure,=0A=
            scope: this,=0A=
            timeout: (opts.timeout*1000) || (this.form.timeout*1000),=0A=
            upload: this.form.fileUpload ? this.success : undefined=0A=
        };=0A=
    }=0A=
};=0A=
=0A=
=0A=
Ext.form.Action.Submit =3D function(form, options){=0A=
    Ext.form.Action.Submit.superclass.constructor.call(this, form, =
options);=0A=
};=0A=
=0A=
Ext.extend(Ext.form.Action.Submit, Ext.form.Action, {=0A=
    =0A=
    type : 'submit',=0A=
=0A=
        run : function(){=0A=
        var o =3D this.options;=0A=
        var method =3D this.getMethod();=0A=
        var isGet =3D method =3D=3D 'GET';=0A=
        if(o.clientValidation =3D=3D=3D false || this.form.isValid()){=0A=
            Ext.Ajax.request(Ext.apply(this.createCallback(o), {=0A=
                form:this.form.el.dom,=0A=
                url:this.getUrl(isGet),=0A=
                method: method,=0A=
                headers: o.headers,=0A=
                params:!isGet ? this.getParams() : null,=0A=
                isUpload: this.form.fileUpload=0A=
            }));=0A=
        }else if (o.clientValidation !=3D=3D false){             =
this.failureType =3D Ext.form.Action.CLIENT_INVALID;=0A=
            this.form.afterAction(this, false);=0A=
        }=0A=
    },=0A=
=0A=
        success : function(response){=0A=
        var result =3D this.processResponse(response);=0A=
        if(result =3D=3D=3D true || result.success){=0A=
            this.form.afterAction(this, true);=0A=
            return;=0A=
        }=0A=
        if(result.errors){=0A=
            this.form.markInvalid(result.errors);=0A=
            this.failureType =3D Ext.form.Action.SERVER_INVALID;=0A=
        }=0A=
        this.form.afterAction(this, false);=0A=
    },=0A=
=0A=
        handleResponse : function(response){=0A=
        if(this.form.errorReader){=0A=
            var rs =3D this.form.errorReader.read(response);=0A=
            var errors =3D [];=0A=
            if(rs.records){=0A=
                for(var i =3D 0, len =3D rs.records.length; i < len; =
i++) {=0A=
                    var r =3D rs.records[i];=0A=
                    errors[i] =3D r.data;=0A=
                }=0A=
            }=0A=
            if(errors.length < 1){=0A=
                errors =3D null;=0A=
            }=0A=
            return {=0A=
                success : rs.success,=0A=
                errors : errors=0A=
            };=0A=
        }=0A=
        return Ext.decode(response.responseText);=0A=
    }=0A=
});=0A=
=0A=
=0A=
=0A=
Ext.form.Action.Load =3D function(form, options){=0A=
    Ext.form.Action.Load.superclass.constructor.call(this, form, =
options);=0A=
    this.reader =3D this.form.reader;=0A=
};=0A=
=0A=
Ext.extend(Ext.form.Action.Load, Ext.form.Action, {=0A=
        type : 'load',=0A=
=0A=
        run : function(){=0A=
        Ext.Ajax.request(Ext.apply(=0A=
                this.createCallback(this.options), {=0A=
                    method:this.getMethod(),=0A=
                    url:this.getUrl(false),=0A=
                    headers: this.options.headers,=0A=
                    params:this.getParams()=0A=
        }));=0A=
    },=0A=
=0A=
        success : function(response){=0A=
        var result =3D this.processResponse(response);=0A=
        if(result =3D=3D=3D true || !result.success || !result.data){=0A=
            this.failureType =3D Ext.form.Action.LOAD_FAILURE;=0A=
            this.form.afterAction(this, false);=0A=
            return;=0A=
        }=0A=
        this.form.clearInvalid();=0A=
        this.form.setValues(result.data);=0A=
        this.form.afterAction(this, true);=0A=
    },=0A=
=0A=
        handleResponse : function(response){=0A=
        if(this.form.reader){=0A=
            var rs =3D this.form.reader.read(response);=0A=
            var data =3D rs.records && rs.records[0] ? =
rs.records[0].data : null;=0A=
            return {=0A=
                success : rs.success,=0A=
                data : data=0A=
            };=0A=
        }=0A=
        return Ext.decode(response.responseText);=0A=
    }=0A=
});=0A=
=0A=
Ext.form.Action.ACTION_TYPES =3D {=0A=
    'load' : Ext.form.Action.Load,=0A=
    'submit' : Ext.form.Action.Submit=0A=
};=0A=
=0A=
=0A=
Ext.form.VTypes =3D function(){=0A=
        var alpha =3D /^[a-zA-Z_]+$/;=0A=
    var alphanum =3D /^[a-zA-Z0-9_]+$/;=0A=
    var email =3D /^([\w]+)(.[\w]+)*@([\w-]+\.){1,5}([A-Za-z]){2,4}$/;=0A=
    var url =3D =
/(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-=
\.\?\\\/+@&#;`~=3D%!]*)(\.\w{2,})?)*\/?)/i;=0A=
=0A=
        return {=0A=
        =0A=
        'email' : function(v){=0A=
            return email.test(v);=0A=
        },=0A=
        =0A=
        'emailText' : 'This field should be an e-mail address in the =
format "user@domain.com"',=0A=
        =0A=
        'emailMask' : /[a-z0-9_\.\-@]/i,=0A=
=0A=
        =0A=
        'url' : function(v){=0A=
            return url.test(v);=0A=
        },=0A=
        =0A=
        'urlText' : 'This field should be a URL in the format =
"http:/'+'/www.domain.com"',=0A=
        =0A=
        =0A=
        'alpha' : function(v){=0A=
            return alpha.test(v);=0A=
        },=0A=
        =0A=
        'alphaText' : 'This field should only contain letters and _',=0A=
        =0A=
        'alphaMask' : /[a-z_]/i,=0A=
=0A=
        =0A=
        'alphanum' : function(v){=0A=
            return alphanum.test(v);=0A=
        },=0A=
        =0A=
        'alphanumText' : 'This field should only contain letters, =
numbers and _',=0A=
        =0A=
        'alphanumMask' : /[a-z0-9_]/i=0A=
    };=0A=
}();=0A=

Ext.grid.GridPanel =3D Ext.extend(Ext.Panel, {
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20

   =20
    ddText : "{0} selected row{1}",
   =20
    minColumnWidth : 25,
   =20
    trackMouseOver : true,
   =20
    enableDragDrop : false,
   =20
    enableColumnMove : true,
   =20
    enableColumnHide : true,
   =20
    enableHdMenu : true,
   =20
    stripeRows : false,
   =20
    autoExpandColumn : false,
   =20
    autoExpandMin : 50,
   =20
    autoExpandMax : 1000,
   =20
    view : null,
   =20
    loadMask : false,

    =0A=
    rendered : false,
    =0A=
    viewReady: false,
    =0A=
    stateEvents: ["columnmove", "columnresize", "sortchange"],

    =0A=
    initComponent : function(){
        Ext.grid.GridPanel.superclass.initComponent.call(this);

        =0A=
        =0A=
        this.autoScroll =3D false;
        this.autoWidth =3D false;

        if(Ext.isArray(this.columns)){
            this.colModel =3D new Ext.grid.ColumnModel(this.columns);
            delete this.columns;
        }

        =0A=
        if(this.ds){
            this.store =3D this.ds;
            delete this.ds;
        }
        if(this.cm){
            this.colModel =3D this.cm;
            delete this.cm;
        }
        if(this.sm){
            this.selModel =3D this.sm;
            delete this.sm;
        }
        this.store =3D Ext.StoreMgr.lookup(this.store);

        this.addEvents(
            =0A=
           =20
            "click",
           =20
            "dblclick",
           =20
            "contextmenu",
           =20
            "mousedown",
           =20
            "mouseup",
           =20
            "mouseover",
           =20
            "mouseout",
           =20
            "keypress",
           =20
            "keydown",

            =0A=
           =20
            "cellmousedown",
           =20
            "rowmousedown",
           =20
            "headermousedown",

           =20
            "cellclick",
           =20
            "celldblclick",
           =20
            "rowclick",
           =20
            "rowdblclick",
           =20
            "headerclick",
           =20
            "headerdblclick",
           =20
            "rowcontextmenu",
           =20
            "cellcontextmenu",
           =20
            "headercontextmenu",
           =20
            "bodyscroll",
           =20
            "columnresize",
           =20
            "columnmove",
           =20
            "sortchange"
        );
    },

    =0A=
    onRender : function(ct, position){
        Ext.grid.GridPanel.superclass.onRender.apply(this, arguments);

        var c =3D this.body;

        this.el.addClass('x-grid-panel');

        var view =3D this.getView();
        view.init(this);

        c.on("mousedown", this.onMouseDown, this);
        c.on("click", this.onClick, this);
        c.on("dblclick", this.onDblClick, this);
        c.on("contextmenu", this.onContextMenu, this);
        c.on("keydown", this.onKeyDown, this);

        this.relayEvents(c, =
["mousedown","mouseup","mouseover","mouseout","keypress"]);

        this.getSelectionModel().init(this);
        this.view.render();
    },

    =0A=
    initEvents : function(){
        Ext.grid.GridPanel.superclass.initEvents.call(this);

        if(this.loadMask){
            this.loadMask =3D new Ext.LoadMask(this.bwrap,
                    Ext.apply({store:this.store}, this.loadMask));
        }
    },

    initStateEvents : function(){
        Ext.grid.GridPanel.superclass.initStateEvents.call(this);
        this.colModel.on('hiddenchange', this.saveState, this, {delay: =
100});
    },

    applyState : function(state){
        var cm =3D this.colModel;
        var cs =3D state.columns;
        if(cs){
            for(var i =3D 0, len =3D cs.length; i < len; i++){
                var s =3D cs[i];
                var c =3D cm.getColumnById(s.id);
                if(c){
                    c.hidden =3D s.hidden;
                    c.width =3D s.width;
                    var oldIndex =3D cm.getIndexById(s.id);
                    if(oldIndex !=3D i){
                        cm.moveColumn(oldIndex, i);
                    }
                }
            }
        }
        if(state.sort){
            this.store[this.store.remoteSort ? 'setDefaultSort' : =
'sort'](state.sort.field, state.sort.direction);
        }
    },

    getState : function(){
        var o =3D {columns: []};
        for(var i =3D 0, c; c =3D this.colModel.config[i]; i++){
            o.columns[i] =3D {
                id: c.id,
                width: c.width
            };
            if(c.hidden){
                o.columns[i].hidden =3D true;
            }
        }
        var ss =3D this.store.getSortState();
        if(ss){
            o.sort =3D ss;
        }
        return o;
    },

    =0A=
    afterRender : function(){
        Ext.grid.GridPanel.superclass.afterRender.call(this);
        this.view.layout();
        this.viewReady =3D true;
    },

   =20
    reconfigure : function(store, colModel){
        if(this.loadMask){
            this.loadMask.destroy();
            this.loadMask =3D new Ext.LoadMask(this.bwrap,
                    Ext.apply({store:store}, =
this.initialConfig.loadMask));
        }
        this.view.bind(store, colModel);
        this.store =3D store;
        this.colModel =3D colModel;
        if(this.rendered){
            this.view.refresh(true);
        }
    },

    =0A=
    onKeyDown : function(e){
        this.fireEvent("keydown", e);
    },

    =0A=
    onDestroy : function(){
        if(this.rendered){
            if(this.loadMask){
                this.loadMask.destroy();
            }
            var c =3D this.body;
            c.removeAllListeners();
            this.view.destroy();
            c.update("");
        }
        this.colModel.purgeListeners();
        Ext.grid.GridPanel.superclass.onDestroy.call(this);
    },

    =0A=
    processEvent : function(name, e){
        this.fireEvent(name, e);
        var t =3D e.getTarget();
        var v =3D this.view;
        var header =3D v.findHeaderIndex(t);
        if(header !=3D=3D false){
            this.fireEvent("header" + name, this, header, e);
        }else{
            var row =3D v.findRowIndex(t);
            var cell =3D v.findCellIndex(t);
            if(row !=3D=3D false){
                this.fireEvent("row" + name, this, row, e);
                if(cell !=3D=3D false){
                    this.fireEvent("cell" + name, this, row, cell, e);
                }
            }
        }
    },

    =0A=
    onClick : function(e){
        this.processEvent("click", e);
    },

    =0A=
    onMouseDown : function(e){
        this.processEvent("mousedown", e);
    },

    =0A=
    onContextMenu : function(e, t){
        this.processEvent("contextmenu", e);
    },

    =0A=
    onDblClick : function(e){
        this.processEvent("dblclick", e);
    },

    =0A=
    walkCells : function(row, col, step, fn, scope){
        var cm =3D this.colModel, clen =3D cm.getColumnCount();
        var ds =3D this.store, rlen =3D ds.getCount(), first =3D true;
        if(step < 0){
            if(col < 0){
                row--;
                first =3D false;
            }
            while(row >=3D 0){
                if(!first){
                    col =3D clen-1;
                }
                first =3D false;
                while(col >=3D 0){
                    if(fn.call(scope || this, row, col, cm) =3D=3D=3D =
true){
                        return [row, col];
                    }
                    col--;
                }
                row--;
            }
        } else {
            if(col >=3D clen){
                row++;
                first =3D false;
            }
            while(row < rlen){
                if(!first){
                    col =3D 0;
                }
                first =3D false;
                while(col < clen){
                    if(fn.call(scope || this, row, col, cm) =3D=3D=3D =
true){
                        return [row, col];
                    }
                    col++;
                }
                row++;
            }
        }
        return null;
    },

    =0A=
    getSelections : function(){
        return this.selModel.getSelections();
    },

    =0A=
    onResize : function(){
        Ext.grid.GridPanel.superclass.onResize.apply(this, arguments);
        if(this.viewReady){
            this.view.layout();
        }
    },

   =20
    getGridEl : function(){
        return this.body;
    },

    =0A=
    stopEditing : function(){},

   =20
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel =3D new Ext.grid.RowSelectionModel(
                    this.disableSelection ? {selectRow: Ext.emptyFn} : =
null);
        }
        return this.selModel;
    },

   =20
    getStore : function(){
        return this.store;
    },

   =20
    getColumnModel : function(){
        return this.colModel;
    },

   =20
    getView : function(){
        if(!this.view){
            this.view =3D new Ext.grid.GridView(this.viewConfig);
        }
        return this.view;
    },
   =20
    getDragDropText : function(){
        var count =3D this.selModel.getCount();
        return String.format(this.ddText, count, count =3D=3D 1 ? '' : =
's');
    }

   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20



   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
});
Ext.reg('grid', Ext.grid.GridPanel);=0A=
=0A=
Ext.grid.GridView =3D function(config){=0A=
    Ext.apply(this, config);=0A=
        this.addEvents(=0A=
      =0A=
      "beforerowremoved",=0A=
      =0A=
      "beforerowsinserted",=0A=
      =0A=
      "beforerefresh",=0A=
      =0A=
      "rowremoved",=0A=
      =0A=
      "rowsinserted",=0A=
      =0A=
      "rowupdated",=0A=
      =0A=
      "refresh"=0A=
  );=0A=
    Ext.grid.GridView.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.grid.GridView, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    deferEmptyText: true,=0A=
    =0A=
    scrollOffset: 19,=0A=
    =0A=
    autoFill: false,=0A=
    =0A=
    forceFit: false,=0A=
    =0A=
    sortClasses : ["sort-asc", "sort-desc"],=0A=
    =0A=
    sortAscText : "Sort Ascending",=0A=
    =0A=
    sortDescText : "Sort Descending",=0A=
    =0A=
    columnsText : "Columns",=0A=
=0A=
        borderWidth: 2,=0A=
=0A=
    =0A=
=0A=
        initTemplates : function(){=0A=
        var ts =3D this.templates || {};=0A=
        if(!ts.master){=0A=
            ts.master =3D new Ext.Template(=0A=
                    '<div class=3D"x-grid3" hidefocus=3D"true">',=0A=
                        '<div class=3D"x-grid3-viewport">',=0A=
                            '<div class=3D"x-grid3-header"><div =
class=3D"x-grid3-header-inner"><div =
class=3D"x-grid3-header-offset">{header}</div></div><div =
class=3D"x-clear"></div></div>',=0A=
                            '<div class=3D"x-grid3-scroller"><div =
class=3D"x-grid3-body">{body}</div><a href=3D"#" class=3D"x-grid3-focus" =
tabIndex=3D"-1"></a></div>',=0A=
                        "</div>",=0A=
                        '<div =
class=3D"x-grid3-resize-marker">&#160;</div>',=0A=
                        '<div =
class=3D"x-grid3-resize-proxy">&#160;</div>',=0A=
                    "</div>"=0A=
                    );=0A=
        }=0A=
=0A=
        if(!ts.header){=0A=
            ts.header =3D new Ext.Template(=0A=
                    '<table border=3D"0" cellspacing=3D"0" =
cellpadding=3D"0" style=3D"{tstyle}">',=0A=
                    '<thead><tr =
class=3D"x-grid3-hd-row">{cells}</tr></thead>',=0A=
                    "</table>"=0A=
                    );=0A=
        }=0A=
=0A=
        if(!ts.hcell){=0A=
            ts.hcell =3D new Ext.Template(=0A=
                    '<td class=3D"x-grid3-hd x-grid3-cell =
x-grid3-td-{id}" style=3D"{style}"><div {tooltip} {attr} =
class=3D"x-grid3-hd-inner x-grid3-hd-{id}" unselectable=3D"on" =
style=3D"{istyle}">', this.grid.enableHdMenu ? '<a =
class=3D"x-grid3-hd-btn" href=3D"#"></a>' : '',=0A=
                    '{value}<img class=3D"x-grid3-sort-icon" src=3D"', =
Ext.BLANK_IMAGE_URL, '" />',=0A=
                    "</div></td>"=0A=
                    );=0A=
        }=0A=
=0A=
        if(!ts.body){=0A=
            ts.body =3D new Ext.Template('{rows}');=0A=
        }=0A=
=0A=
        if(!ts.row){=0A=
            ts.row =3D new Ext.Template(=0A=
                    '<div class=3D"x-grid3-row {alt}" =
style=3D"{tstyle}"><table class=3D"x-grid3-row-table" border=3D"0" =
cellspacing=3D"0" cellpadding=3D"0" style=3D"{tstyle}">',=0A=
                    '<tbody><tr>{cells}</tr>',=0A=
                    (this.enableRowBody ? '<tr =
class=3D"x-grid3-row-body-tr" style=3D"{bodyStyle}"><td =
colspan=3D"{cols}" class=3D"x-grid3-body-cell" tabIndex=3D"0" =
hidefocus=3D"on"><div class=3D"x-grid3-row-body">{body}</div></td></tr>' =
: ''),=0A=
                    '</tbody></table></div>'=0A=
                    );=0A=
        }=0A=
=0A=
        if(!ts.cell){=0A=
            ts.cell =3D new Ext.Template(=0A=
                    '<td class=3D"x-grid3-col x-grid3-cell =
x-grid3-td-{id} {css}" style=3D"{style}" tabIndex=3D"0" {cellAttr}>',=0A=
                    '<div class=3D"x-grid3-cell-inner x-grid3-col-{id}" =
unselectable=3D"on" {attr}>{value}</div>',=0A=
                    "</td>"=0A=
                    );=0A=
        }=0A=
=0A=
        for(var k in ts){=0A=
            var t =3D ts[k];=0A=
            if(t && typeof t.compile =3D=3D 'function' && !t.compiled){=0A=
                t.disableFormats =3D true;=0A=
                t.compile();=0A=
            }=0A=
        }=0A=
=0A=
        this.templates =3D ts;=0A=
=0A=
        this.tdClass =3D 'x-grid3-cell';=0A=
        this.cellSelector =3D 'td.x-grid3-cell';=0A=
        this.hdCls =3D 'x-grid3-hd';=0A=
        this.rowSelector =3D 'div.x-grid3-row';=0A=
        this.colRe =3D new RegExp("x-grid3-td-([^\\s]+)", "");=0A=
    },=0A=
=0A=
        fly : function(el){=0A=
        if(!this._flyweight){=0A=
            this._flyweight =3D new Ext.Element.Flyweight(document.body);=0A=
        }=0A=
        this._flyweight.dom =3D el;=0A=
        return this._flyweight;=0A=
    },=0A=
=0A=
        getEditorParent : function(ed){=0A=
        return this.scroller.dom;=0A=
    },=0A=
=0A=
        initElements : function(){=0A=
        var E =3D Ext.Element;=0A=
=0A=
        var el =3D this.grid.getGridEl().dom.firstChild;=0A=
        var cs =3D el.childNodes;=0A=
=0A=
        this.el =3D new E(el);=0A=
=0A=
        this.mainWrap =3D new E(cs[0]);=0A=
        this.mainHd =3D new E(this.mainWrap.dom.firstChild);=0A=
=0A=
        if(this.grid.hideHeaders){=0A=
            this.mainHd.setDisplayed(false);=0A=
        }=0A=
=0A=
        this.innerHd =3D this.mainHd.dom.firstChild;=0A=
        this.scroller =3D new E(this.mainWrap.dom.childNodes[1]);=0A=
        if(this.forceFit){=0A=
            this.scroller.setStyle('overflow-x', 'hidden');=0A=
        }=0A=
        this.mainBody =3D new E(this.scroller.dom.firstChild);=0A=
=0A=
        this.focusEl =3D new E(this.scroller.dom.childNodes[1]);=0A=
        this.focusEl.swallowEvent("click", true);=0A=
=0A=
        this.resizeMarker =3D new E(cs[1]);=0A=
        this.resizeProxy =3D new E(cs[2]);=0A=
    },=0A=
=0A=
        getRows : function(){=0A=
        return this.hasRows() ? this.mainBody.dom.childNodes : [];=0A=
    },=0A=
=0A=
    =0A=
        findCell : function(el){=0A=
        if(!el){=0A=
            return false;=0A=
        }=0A=
        return this.fly(el).findParent(this.cellSelector, 3);=0A=
    },=0A=
=0A=
        findCellIndex : function(el, requiredCls){=0A=
        var cell =3D this.findCell(el);=0A=
        if(cell && (!requiredCls || =
this.fly(cell).hasClass(requiredCls))){=0A=
            return this.getCellIndex(cell);=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
        getCellIndex : function(el){=0A=
        if(el){=0A=
            var m =3D el.className.match(this.colRe);=0A=
            if(m && m[1]){=0A=
                return this.cm.getIndexById(m[1]);=0A=
            }=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
        findHeaderCell : function(el){=0A=
        var cell =3D this.findCell(el);=0A=
        return cell && this.fly(cell).hasClass(this.hdCls) ? cell : null;=0A=
    },=0A=
=0A=
        findHeaderIndex : function(el){=0A=
        return this.findCellIndex(el, this.hdCls);=0A=
    },=0A=
=0A=
        findRow : function(el){=0A=
        if(!el){=0A=
            return false;=0A=
        }=0A=
        return this.fly(el).findParent(this.rowSelector, 10);=0A=
    },=0A=
=0A=
        findRowIndex : function(el){=0A=
        var r =3D this.findRow(el);=0A=
        return r ? r.rowIndex : false;=0A=
    },=0A=
=0A=
    =0A=
=0A=
    getRow : function(row){=0A=
        return this.getRows()[row];=0A=
    },=0A=
=0A=
=0A=
    getCell : function(row, col){=0A=
        return this.getRow(row).getElementsByTagName('td')[col];=0A=
    },=0A=
=0A=
=0A=
    getHeaderCell : function(index){=0A=
      return this.mainHd.dom.getElementsByTagName('td')[index];=0A=
    },=0A=
=0A=
    =0A=
        addRowClass : function(row, cls){=0A=
        var r =3D this.getRow(row);=0A=
        if(r){=0A=
            this.fly(r).addClass(cls);=0A=
        }=0A=
    },=0A=
=0A=
        removeRowClass : function(row, cls){=0A=
        var r =3D this.getRow(row);=0A=
        if(r){=0A=
            this.fly(r).removeClass(cls);=0A=
        }=0A=
    },=0A=
=0A=
        removeRow : function(row){=0A=
        Ext.removeNode(this.getRow(row));=0A=
    },=0A=
=0A=
        removeRows : function(firstRow, lastRow){=0A=
        var bd =3D this.mainBody.dom;=0A=
        for(var rowIndex =3D firstRow; rowIndex <=3D lastRow; =
rowIndex++){=0A=
            Ext.removeNode(bd.childNodes[firstRow]);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
        getScrollState : function(){=0A=
        var sb =3D this.scroller.dom;=0A=
        return {left: sb.scrollLeft, top: sb.scrollTop};=0A=
    },=0A=
=0A=
        restoreScroll : function(state){=0A=
        var sb =3D this.scroller.dom;=0A=
        sb.scrollLeft =3D state.left;=0A=
        sb.scrollTop =3D state.top;=0A=
    },=0A=
=0A=
    =0A=
    scrollToTop : function(){=0A=
        this.scroller.dom.scrollTop =3D 0;=0A=
        this.scroller.dom.scrollLeft =3D 0;=0A=
    },=0A=
=0A=
        syncScroll : function(){=0A=
      this.syncHeaderScroll();=0A=
      var mb =3D this.scroller.dom;=0A=
        this.grid.fireEvent("bodyscroll", mb.scrollLeft, mb.scrollTop);=0A=
    },=0A=
=0A=
        syncHeaderScroll : function(){=0A=
        var mb =3D this.scroller.dom;=0A=
        this.innerHd.scrollLeft =3D mb.scrollLeft;=0A=
        this.innerHd.scrollLeft =3D mb.scrollLeft;     },=0A=
=0A=
        updateSortIcon : function(col, dir){=0A=
        var sc =3D this.sortClasses;=0A=
        var hds =3D this.mainHd.select('td').removeClass(sc);=0A=
        hds.item(col).addClass(sc[dir =3D=3D "DESC" ? 1 : 0]);=0A=
    },=0A=
=0A=
        updateAllColumnWidths : function(){=0A=
        var tw =3D this.getTotalWidth();=0A=
        var clen =3D this.cm.getColumnCount();=0A=
        var ws =3D [];=0A=
        for(var i =3D 0; i < clen; i++){=0A=
            ws[i] =3D this.getColumnWidth(i);=0A=
        }=0A=
=0A=
        this.innerHd.firstChild.firstChild.style.width =3D tw;=0A=
=0A=
        for(var i =3D 0; i < clen; i++){=0A=
            var hd =3D this.getHeaderCell(i);=0A=
            hd.style.width =3D ws[i];=0A=
        }=0A=
=0A=
        var ns =3D this.getRows();=0A=
        for(var i =3D 0, len =3D ns.length; i < len; i++){=0A=
            ns[i].style.width =3D tw;=0A=
            ns[i].firstChild.style.width =3D tw;=0A=
            var row =3D ns[i].firstChild.rows[0];=0A=
            for(var j =3D 0; j < clen; j++){=0A=
                row.childNodes[j].style.width =3D ws[j];=0A=
            }=0A=
        }=0A=
=0A=
        this.onAllColumnWidthsUpdated(ws, tw);=0A=
    },=0A=
=0A=
        updateColumnWidth : function(col, width){=0A=
        var w =3D this.getColumnWidth(col);=0A=
        var tw =3D this.getTotalWidth();=0A=
=0A=
        this.innerHd.firstChild.firstChild.style.width =3D tw;=0A=
        var hd =3D this.getHeaderCell(col);=0A=
        hd.style.width =3D w;=0A=
=0A=
        var ns =3D this.getRows();=0A=
        for(var i =3D 0, len =3D ns.length; i < len; i++){=0A=
            ns[i].style.width =3D tw;=0A=
            ns[i].firstChild.style.width =3D tw;=0A=
            ns[i].firstChild.rows[0].childNodes[col].style.width =3D w;=0A=
        }=0A=
=0A=
        this.onColumnWidthUpdated(col, w, tw);=0A=
    },=0A=
=0A=
        updateColumnHidden : function(col, hidden){=0A=
        var tw =3D this.getTotalWidth();=0A=
=0A=
        this.innerHd.firstChild.firstChild.style.width =3D tw;=0A=
=0A=
        var display =3D hidden ? 'none' : '';=0A=
=0A=
        var hd =3D this.getHeaderCell(col);=0A=
        hd.style.display =3D display;=0A=
=0A=
        var ns =3D this.getRows();=0A=
        for(var i =3D 0, len =3D ns.length; i < len; i++){=0A=
            ns[i].style.width =3D tw;=0A=
            ns[i].firstChild.style.width =3D tw;=0A=
            ns[i].firstChild.rows[0].childNodes[col].style.display =3D =
display;=0A=
        }=0A=
=0A=
        this.onColumnHiddenUpdated(col, hidden, tw);=0A=
=0A=
        delete this.lastViewWidth;         this.layout();=0A=
    },=0A=
=0A=
        doRender : function(cs, rs, ds, startRow, colCount, stripe){=0A=
        var ts =3D this.templates, ct =3D ts.cell, rt =3D ts.row, last =
=3D colCount-1;=0A=
        var tstyle =3D 'width:'+this.getTotalWidth()+';';=0A=
                var buf =3D [], cb, c, p =3D {}, rp =3D {tstyle: =
tstyle}, r;=0A=
        for(var j =3D 0, len =3D rs.length; j < len; j++){=0A=
            r =3D rs[j]; cb =3D [];=0A=
            var rowIndex =3D (j+startRow);=0A=
            for(var i =3D 0; i < colCount; i++){=0A=
                c =3D cs[i];=0A=
                p.id =3D c.id;=0A=
                p.css =3D i =3D=3D 0 ? 'x-grid3-cell-first ' : (i =3D=3D =
last ? 'x-grid3-cell-last ' : '');=0A=
                p.attr =3D p.cellAttr =3D "";=0A=
                p.value =3D c.renderer(r.data[c.name], p, r, rowIndex, =
i, ds);=0A=
                p.style =3D c.style;=0A=
                if(p.value =3D=3D undefined || p.value =3D=3D=3D "") =
p.value =3D "&#160;";=0A=
                if(r.dirty && typeof r.modified[c.name] !=3D=3D =
'undefined'){=0A=
                    p.css +=3D ' x-grid3-dirty-cell';=0A=
                }=0A=
                cb[cb.length] =3D ct.apply(p);=0A=
            }=0A=
            var alt =3D [];=0A=
            if(stripe && ((rowIndex+1) % 2 =3D=3D 0)){=0A=
                alt[0] =3D "x-grid3-row-alt";=0A=
            }=0A=
            if(r.dirty){=0A=
                alt[1] =3D " x-grid3-dirty-row";=0A=
            }=0A=
            rp.cols =3D colCount;=0A=
            if(this.getRowClass){=0A=
                alt[2] =3D this.getRowClass(r, rowIndex, rp, ds);=0A=
            }=0A=
            rp.alt =3D alt.join(" ");=0A=
            rp.cells =3D cb.join("");=0A=
            buf[buf.length] =3D  rt.apply(rp);=0A=
        }=0A=
        return buf.join("");=0A=
    },=0A=
=0A=
        processRows : function(startRow, skipStripe){=0A=
        if(this.ds.getCount() < 1){=0A=
            return;=0A=
        }=0A=
        skipStripe =3D skipStripe || !this.grid.stripeRows;=0A=
        startRow =3D startRow || 0;=0A=
        var rows =3D this.getRows();=0A=
        var cls =3D ' x-grid3-row-alt ';=0A=
        for(var i =3D startRow, len =3D rows.length; i < len; i++){=0A=
            var row =3D rows[i];=0A=
            row.rowIndex =3D i;=0A=
            if(!skipStripe){=0A=
                var isAlt =3D ((i+1) % 2 =3D=3D 0);=0A=
                var hasAlt =3D (' '+row.className + ' ').indexOf(cls) =
!=3D -1;=0A=
                if(isAlt =3D=3D hasAlt){=0A=
                    continue;=0A=
                }=0A=
                if(isAlt){=0A=
                    row.className +=3D " x-grid3-row-alt";=0A=
                }else{=0A=
                    row.className =3D =
row.className.replace("x-grid3-row-alt", "");=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        renderUI : function(){=0A=
=0A=
        var header =3D this.renderHeaders();=0A=
        var body =3D this.templates.body.apply({rows:''});=0A=
=0A=
=0A=
        var html =3D this.templates.master.apply({=0A=
            body: body,=0A=
            header: header=0A=
        });=0A=
=0A=
        var g =3D this.grid;=0A=
=0A=
        g.getGridEl().dom.innerHTML =3D html;=0A=
=0A=
        this.initElements();=0A=
=0A=
=0A=
        this.mainBody.dom.innerHTML =3D this.renderRows();=0A=
        this.processRows(0, true);=0A=
=0A=
        if(this.deferEmptyText !=3D=3D true){=0A=
            this.applyEmptyText();=0A=
        }=0A=
=0A=
                Ext.fly(this.innerHd).on("click", this.handleHdDown, =
this);=0A=
        this.mainHd.on("mouseover", this.handleHdOver, this);=0A=
        this.mainHd.on("mouseout", this.handleHdOut, this);=0A=
        this.mainHd.on("mousemove", this.handleHdMove, this);=0A=
=0A=
        this.scroller.on('scroll', this.syncScroll,  this);=0A=
        if(g.enableColumnResize !=3D=3D false){=0A=
            this.splitone =3D new Ext.grid.GridView.SplitDragZone(g, =
this.mainHd.dom);=0A=
        }=0A=
=0A=
        if(g.enableColumnMove){=0A=
            this.columnDrag =3D new Ext.grid.GridView.ColumnDragZone(g, =
this.innerHd);=0A=
            this.columnDrop =3D new Ext.grid.HeaderDropZone(g, =
this.mainHd.dom);=0A=
        }=0A=
=0A=
        if(g.enableHdMenu !=3D=3D false){=0A=
            if(g.enableColumnHide !=3D=3D false){=0A=
                this.colMenu =3D new Ext.menu.Menu({id:g.id + =
"-hcols-menu"});=0A=
                this.colMenu.on("beforeshow", this.beforeColMenuShow, =
this);=0A=
                this.colMenu.on("itemclick", this.handleHdMenuClick, =
this);=0A=
            }=0A=
            this.hmenu =3D new Ext.menu.Menu({id: g.id + "-hctx"});=0A=
            this.hmenu.add(=0A=
                {id:"asc", text: this.sortAscText, cls: =
"xg-hmenu-sort-asc"},=0A=
                {id:"desc", text: this.sortDescText, cls: =
"xg-hmenu-sort-desc"}=0A=
            );=0A=
            if(g.enableColumnHide !=3D=3D false){=0A=
                this.hmenu.add('-',=0A=
                    {id:"columns", text: this.columnsText, menu: =
this.colMenu, iconCls: 'x-cols-icon'}=0A=
                );=0A=
            }=0A=
            this.hmenu.on("itemclick", this.handleHdMenuClick, this);=0A=
=0A=
                    }=0A=
=0A=
        if(g.enableDragDrop || g.enableDrag){=0A=
            this.dragZone =3D new Ext.grid.GridDragZone(g, {=0A=
                ddGroup : g.ddGroup || 'GridDD'=0A=
            });=0A=
        }=0A=
=0A=
        this.updateHeaderSortState();=0A=
=0A=
    },=0A=
=0A=
        layout : function(){=0A=
        if(!this.mainBody){=0A=
            return;         }=0A=
        var g =3D this.grid;=0A=
        var c =3D g.getGridEl();=0A=
        var csize =3D c.getSize(true);=0A=
        var vw =3D csize.width;=0A=
=0A=
        if(vw < 20 || csize.height < 20){             return;=0A=
        }=0A=
=0A=
        if(g.autoHeight){=0A=
            this.scroller.dom.style.overflow =3D 'visible';=0A=
        }else{=0A=
            this.el.setSize(csize.width, csize.height);=0A=
=0A=
            var hdHeight =3D this.mainHd.getHeight();=0A=
            var vh =3D csize.height - (hdHeight);=0A=
=0A=
            this.scroller.setSize(vw, vh);=0A=
            if(this.innerHd){=0A=
                this.innerHd.style.width =3D (vw)+'px';=0A=
            }=0A=
        }=0A=
        if(this.forceFit){=0A=
            if(this.lastViewWidth !=3D vw){=0A=
                this.fitColumns(false, false);=0A=
                this.lastViewWidth =3D vw;=0A=
            }=0A=
        }else {=0A=
            this.autoExpand();=0A=
            this.syncHeaderScroll();=0A=
        }=0A=
        this.onLayout(vw, vh);=0A=
    },=0A=
=0A=
            onLayout : function(vw, vh){=0A=
            },=0A=
=0A=
    onColumnWidthUpdated : function(col, w, tw){=0A=
            },=0A=
=0A=
    onAllColumnWidthsUpdated : function(ws, tw){=0A=
            },=0A=
=0A=
    onColumnHiddenUpdated : function(col, hidden, tw){=0A=
            },=0A=
=0A=
    updateColumnText : function(col, text){=0A=
            },=0A=
=0A=
    afterMove : function(colIndex){=0A=
            },=0A=
=0A=
    =0A=
        init: function(grid){=0A=
        this.grid =3D grid;=0A=
=0A=
        this.initTemplates();=0A=
        this.initData(grid.store, grid.colModel);=0A=
        this.initUI(grid);=0A=
    },=0A=
=0A=
        getColumnId : function(index){=0A=
      return this.cm.getColumnId(index);=0A=
    },=0A=
=0A=
        renderHeaders : function(){=0A=
        var cm =3D this.cm, ts =3D this.templates;=0A=
        var ct =3D ts.hcell;=0A=
=0A=
        var cb =3D [], sb =3D [], p =3D {};=0A=
=0A=
        for(var i =3D 0, len =3D cm.getColumnCount(); i < len; i++){=0A=
            p.id =3D cm.getColumnId(i);=0A=
            p.value =3D cm.getColumnHeader(i) || "";=0A=
            p.style =3D this.getColumnStyle(i, true);=0A=
            p.tooltip =3D this.getColumnTooltip(i);=0A=
            if(cm.config[i].align =3D=3D 'right'){=0A=
                p.istyle =3D 'padding-right:16px';=0A=
            } else {=0A=
                delete p.istyle;=0A=
            }=0A=
            cb[cb.length] =3D ct.apply(p);=0A=
        }=0A=
        return ts.header.apply({cells: cb.join(""), =
tstyle:'width:'+this.getTotalWidth()+';'});=0A=
    },=0A=
=0A=
        getColumnTooltip : function(i){=0A=
        var tt =3D this.cm.getColumnTooltip(i);=0A=
        if(tt){=0A=
            if(Ext.QuickTips.isEnabled()){=0A=
                return 'ext:qtip=3D"'+tt+'"';=0A=
            }else{=0A=
                return 'title=3D"'+tt+'"';=0A=
            }=0A=
        }=0A=
        return "";=0A=
    },=0A=
=0A=
        beforeUpdate : function(){=0A=
        this.grid.stopEditing(true);=0A=
    },=0A=
=0A=
        updateHeaders : function(){=0A=
        this.innerHd.firstChild.innerHTML =3D this.renderHeaders();=0A=
    },=0A=
=0A=
    =0A=
    focusRow : function(row){=0A=
        this.focusCell(row, 0, false);=0A=
    },=0A=
=0A=
    =0A=
    focusCell : function(row, col, hscroll){=0A=
        var xy =3D this.ensureVisible(row, col, hscroll);=0A=
        this.focusEl.setXY(xy);=0A=
        if(Ext.isGecko){=0A=
            this.focusEl.focus();=0A=
        }else{=0A=
            this.focusEl.focus.defer(1, this.focusEl);=0A=
        }=0A=
    },=0A=
=0A=
        ensureVisible : function(row, col, hscroll){=0A=
        if(typeof row !=3D "number"){=0A=
            row =3D row.rowIndex;=0A=
        }=0A=
        if(!this.ds){=0A=
            return;=0A=
        }=0A=
        if(row < 0 || row >=3D this.ds.getCount()){=0A=
            return;=0A=
        }=0A=
        col =3D (col !=3D=3D undefined ? col : 0);=0A=
=0A=
        var rowEl =3D this.getRow(row), cellEl;=0A=
        if(!(hscroll =3D=3D=3D false && col =3D=3D=3D 0)){=0A=
            while(this.cm.isHidden(col)){=0A=
                col++;=0A=
            }=0A=
            cellEl =3D this.getCell(row, col);=0A=
        }=0A=
        if(!rowEl){=0A=
            return;=0A=
        }=0A=
=0A=
        var c =3D this.scroller.dom;=0A=
=0A=
        var ctop =3D 0;=0A=
        var p =3D rowEl, stop =3D this.el.dom;=0A=
        while(p && p !=3D stop){=0A=
            ctop +=3D p.offsetTop;=0A=
            p =3D p.offsetParent;=0A=
        }=0A=
        ctop -=3D this.mainHd.dom.offsetHeight;=0A=
=0A=
        var cbot =3D ctop + rowEl.offsetHeight;=0A=
=0A=
        var ch =3D c.clientHeight;=0A=
        var stop =3D parseInt(c.scrollTop, 10);=0A=
        var sbot =3D stop + ch;=0A=
=0A=
        if(ctop < stop){=0A=
          c.scrollTop =3D ctop;=0A=
        }else if(cbot > sbot){=0A=
            c.scrollTop =3D cbot-ch;=0A=
        }=0A=
=0A=
        if(hscroll !=3D=3D false){=0A=
            var cleft =3D parseInt(cellEl.offsetLeft, 10);=0A=
            var cright =3D cleft + cellEl.offsetWidth;=0A=
=0A=
            var sleft =3D parseInt(c.scrollLeft, 10);=0A=
            var sright =3D sleft + c.clientWidth;=0A=
            if(cleft < sleft){=0A=
                c.scrollLeft =3D cleft;=0A=
            }else if(cright > sright){=0A=
                c.scrollLeft =3D cright-c.clientWidth;=0A=
            }=0A=
        }=0A=
        return cellEl ? Ext.fly(cellEl).getXY() : [c.scrollLeft, =
Ext.fly(rowEl).getY()];=0A=
    },=0A=
=0A=
        insertRows : function(dm, firstRow, lastRow, isUpdate){=0A=
        if(!isUpdate && firstRow =3D=3D=3D 0 && lastRow =3D=3D =
dm.getCount()-1){=0A=
            this.refresh();=0A=
        }else{=0A=
            if(!isUpdate){=0A=
                this.fireEvent("beforerowsinserted", this, firstRow, =
lastRow);=0A=
            }=0A=
            var html =3D this.renderRows(firstRow, lastRow);=0A=
            var before =3D this.getRow(firstRow);=0A=
            if(before){=0A=
                Ext.DomHelper.insertHtml('beforeBegin', before, html);=0A=
            }else{=0A=
                Ext.DomHelper.insertHtml('beforeEnd', this.mainBody.dom, =
html);=0A=
            }=0A=
            if(!isUpdate){=0A=
                this.fireEvent("rowsinserted", this, firstRow, lastRow);=0A=
                this.processRows(firstRow);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        deleteRows : function(dm, firstRow, lastRow){=0A=
        if(dm.getRowCount()<1){=0A=
            this.refresh();=0A=
        }else{=0A=
            this.fireEvent("beforerowsdeleted", this, firstRow, lastRow);=0A=
=0A=
            this.removeRows(firstRow, lastRow);=0A=
=0A=
            this.processRows(firstRow);=0A=
            this.fireEvent("rowsdeleted", this, firstRow, lastRow);=0A=
        }=0A=
    },=0A=
=0A=
        getColumnStyle : function(col, isHeader){=0A=
        var style =3D !isHeader ? (this.cm.config[col].css || '') : '';=0A=
        style +=3D 'width:'+this.getColumnWidth(col)+';';=0A=
        if(this.cm.isHidden(col)){=0A=
            style +=3D 'display:none;';=0A=
        }=0A=
        var align =3D this.cm.config[col].align;=0A=
        if(align){=0A=
            style +=3D 'text-align:'+align+';';=0A=
        }=0A=
        return style;=0A=
    },=0A=
=0A=
        getColumnWidth : function(col){=0A=
        var w =3D this.cm.getColumnWidth(col);=0A=
        if(typeof w =3D=3D 'number'){=0A=
            return (Ext.isBorderBox ? w : (w-this.borderWidth > 0 ? =
w-this.borderWidth:0)) + 'px';=0A=
        }=0A=
        return w;=0A=
    },=0A=
=0A=
        getTotalWidth : function(){=0A=
        return this.cm.getTotalWidth()+'px';=0A=
    },=0A=
=0A=
        fitColumns : function(preventRefresh, onlyExpand, omitColumn){=0A=
        var cm =3D this.cm, leftOver, dist, i;=0A=
        var tw =3D cm.getTotalWidth(false);=0A=
        var aw =3D =
this.grid.getGridEl().getWidth(true)-this.scrollOffset;=0A=
=0A=
        if(aw < 20){             return;=0A=
        }=0A=
        var extra =3D aw - tw;=0A=
=0A=
        if(extra =3D=3D=3D 0){=0A=
            return false;=0A=
        }=0A=
=0A=
        var vc =3D cm.getColumnCount(true);=0A=
        var ac =3D vc-(typeof omitColumn =3D=3D 'number' ? 1 : 0);=0A=
        if(ac =3D=3D=3D 0){=0A=
            ac =3D 1;=0A=
            omitColumn =3D undefined;=0A=
        }=0A=
        var colCount =3D cm.getColumnCount();=0A=
        var cols =3D [];=0A=
        var extraCol =3D 0;=0A=
        var width =3D 0;=0A=
        var w;=0A=
        for (i =3D 0; i < colCount; i++){=0A=
            if(!cm.isHidden(i) && !cm.isFixed(i) && i !=3D=3D =
omitColumn){=0A=
                w =3D cm.getColumnWidth(i);=0A=
                cols.push(i);=0A=
                extraCol =3D i;=0A=
                cols.push(w);=0A=
                width +=3D w;=0A=
            }=0A=
        }=0A=
        var frac =3D (aw - cm.getTotalWidth())/width;=0A=
        while (cols.length){=0A=
            w =3D cols.pop();=0A=
            i =3D cols.pop();=0A=
            cm.setColumnWidth(i, Math.max(this.grid.minColumnWidth, =
Math.floor(w + w*frac)), true);=0A=
        }=0A=
=0A=
        if((tw =3D cm.getTotalWidth(false)) > aw){=0A=
            var adjustCol =3D ac !=3D vc ? omitColumn : extraCol;=0A=
             cm.setColumnWidth(adjustCol, Math.max(1,=0A=
                     cm.getColumnWidth(adjustCol)- (tw-aw)), true);=0A=
        }=0A=
=0A=
        if(preventRefresh !=3D=3D true){=0A=
            this.updateAllColumnWidths();=0A=
        }=0A=
=0A=
=0A=
        return true;=0A=
    },=0A=
=0A=
        autoExpand : function(preventUpdate){=0A=
        var g =3D this.grid, cm =3D this.cm;=0A=
        if(!this.userResized && g.autoExpandColumn){=0A=
            var tw =3D cm.getTotalWidth(false);=0A=
            var aw =3D =
this.grid.getGridEl().getWidth(true)-this.scrollOffset;=0A=
            if(tw !=3D aw){=0A=
                var ci =3D cm.getIndexById(g.autoExpandColumn);=0A=
                var currentWidth =3D cm.getColumnWidth(ci);=0A=
                var cw =3D Math.min(Math.max(((aw-tw)+currentWidth), =
g.autoExpandMin), g.autoExpandMax);=0A=
                if(cw !=3D currentWidth){=0A=
                    cm.setColumnWidth(ci, cw, true);=0A=
                    if(preventUpdate !=3D=3D true){=0A=
                        this.updateColumnWidth(ci, cw);=0A=
                    }=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        getColumnData : function(){=0A=
                var cs =3D [], cm =3D this.cm, colCount =3D =
cm.getColumnCount();=0A=
        for(var i =3D 0; i < colCount; i++){=0A=
            var name =3D cm.getDataIndex(i);=0A=
            cs[i] =3D {=0A=
                name : (typeof name =3D=3D 'undefined' ? =
this.ds.fields.get(i).name : name),=0A=
                renderer : cm.getRenderer(i),=0A=
                id : cm.getColumnId(i),=0A=
                style : this.getColumnStyle(i)=0A=
            };=0A=
        }=0A=
        return cs;=0A=
    },=0A=
=0A=
        renderRows : function(startRow, endRow){=0A=
                var g =3D this.grid, cm =3D g.colModel, ds =3D g.store, =
stripe =3D g.stripeRows;=0A=
        var colCount =3D cm.getColumnCount();=0A=
=0A=
        if(ds.getCount() < 1){=0A=
            return "";=0A=
        }=0A=
=0A=
        var cs =3D this.getColumnData();=0A=
=0A=
        startRow =3D startRow || 0;=0A=
        endRow =3D typeof endRow =3D=3D "undefined"? ds.getCount()-1 : =
endRow;=0A=
=0A=
                var rs =3D ds.getRange(startRow, endRow);=0A=
=0A=
        return this.doRender(cs, rs, ds, startRow, colCount, stripe);=0A=
    },=0A=
=0A=
        renderBody : function(){=0A=
        var markup =3D this.renderRows();=0A=
        return this.templates.body.apply({rows: markup});=0A=
    },=0A=
=0A=
        refreshRow : function(record){=0A=
        var ds =3D this.ds, index;=0A=
        if(typeof record =3D=3D 'number'){=0A=
            index =3D record;=0A=
            record =3D ds.getAt(index);=0A=
        }else{=0A=
            index =3D ds.indexOf(record);=0A=
        }=0A=
        var cls =3D [];=0A=
        this.insertRows(ds, index, index, true);=0A=
        this.getRow(index).rowIndex =3D index;=0A=
        this.onRemove(ds, record, index+1, true);=0A=
        this.fireEvent("rowupdated", this, index, record);=0A=
    },=0A=
=0A=
    =0A=
    refresh : function(headersToo){=0A=
        this.fireEvent("beforerefresh", this);=0A=
        this.grid.stopEditing(true);=0A=
=0A=
        var result =3D this.renderBody();=0A=
        this.mainBody.update(result);=0A=
=0A=
        if(headersToo =3D=3D=3D true){=0A=
            this.updateHeaders();=0A=
            this.updateHeaderSortState();=0A=
        }=0A=
        this.processRows(0, true);=0A=
        this.layout();=0A=
        this.applyEmptyText();=0A=
        this.fireEvent("refresh", this);=0A=
    },=0A=
=0A=
        applyEmptyText : function(){=0A=
        if(this.emptyText && !this.hasRows()){=0A=
            this.mainBody.update('<div class=3D"x-grid-empty">' + =
this.emptyText + '</div>');=0A=
        }=0A=
    },=0A=
=0A=
        updateHeaderSortState : function(){=0A=
        var state =3D this.ds.getSortState();=0A=
        if(!state){=0A=
            return;=0A=
        }=0A=
        if(!this.sortState || (this.sortState.field !=3D state.field || =
this.sortState.direction !=3D state.direction)){=0A=
            this.grid.fireEvent('sortchange', this.grid, state);=0A=
        }=0A=
        this.sortState =3D state;=0A=
        var sortColumn =3D this.cm.findColumnIndex(state.field);=0A=
        if(sortColumn !=3D -1){=0A=
            var sortDir =3D state.direction;=0A=
            this.updateSortIcon(sortColumn, sortDir);=0A=
        }=0A=
    },=0A=
=0A=
        destroy : function(){=0A=
        if(this.colMenu){=0A=
            this.colMenu.removeAll();=0A=
            Ext.menu.MenuMgr.unregister(this.colMenu);=0A=
            this.colMenu.getEl().remove();=0A=
            delete this.colMenu;=0A=
        }=0A=
        if(this.hmenu){=0A=
            this.hmenu.removeAll();=0A=
            Ext.menu.MenuMgr.unregister(this.hmenu);=0A=
            this.hmenu.getEl().remove();=0A=
            delete this.hmenu;=0A=
        }=0A=
        if(this.grid.enableColumnMove){=0A=
            var dds =3D Ext.dd.DDM.ids['gridHeader' + =
this.grid.getGridEl().id];=0A=
            if(dds){=0A=
                for(var dd in dds){=0A=
                    if(!dds[dd].config.isTarget && dds[dd].dragElId){=0A=
                        var elid =3D dds[dd].dragElId;=0A=
                        dds[dd].unreg();=0A=
                        Ext.get(elid).remove();=0A=
                    } else if(dds[dd].config.isTarget){=0A=
                        dds[dd].proxyTop.remove();=0A=
                        dds[dd].proxyBottom.remove();=0A=
                        dds[dd].unreg();=0A=
                    }=0A=
                    if(Ext.dd.DDM.locationCache[dd]){=0A=
                        delete Ext.dd.DDM.locationCache[dd];=0A=
                    }=0A=
                }=0A=
                delete Ext.dd.DDM.ids['gridHeader' + =
this.grid.getGridEl().id];=0A=
            }=0A=
        }=0A=
=0A=
        Ext.destroy(this.resizeMarker, this.resizeProxy);=0A=
=0A=
        if(this.dragZone){=0A=
            this.dragZone.unreg();=0A=
        }=0A=
=0A=
        this.initData(null, null);=0A=
        Ext.EventManager.removeResizeListener(this.onWindowResize, this);=0A=
    },=0A=
=0A=
        onDenyColumnHide : function(){=0A=
=0A=
    },=0A=
=0A=
        render : function(){=0A=
=0A=
        var cm =3D this.cm;=0A=
        var colCount =3D cm.getColumnCount();=0A=
=0A=
        if(this.autoFill){=0A=
            this.fitColumns(true, true);=0A=
        }else if(this.forceFit){=0A=
            this.fitColumns(true, false);=0A=
        }else if(this.grid.autoExpandColumn){=0A=
            this.autoExpand(true);=0A=
        }=0A=
=0A=
        this.renderUI();=0A=
    },=0A=
=0A=
    =0A=
        initData : function(ds, cm){=0A=
        if(this.ds){=0A=
            this.ds.un("load", this.onLoad, this);=0A=
            this.ds.un("datachanged", this.onDataChange, this);=0A=
            this.ds.un("add", this.onAdd, this);=0A=
            this.ds.un("remove", this.onRemove, this);=0A=
            this.ds.un("update", this.onUpdate, this);=0A=
            this.ds.un("clear", this.onClear, this);=0A=
        }=0A=
        if(ds){=0A=
            ds.on("load", this.onLoad, this);=0A=
            ds.on("datachanged", this.onDataChange, this);=0A=
            ds.on("add", this.onAdd, this);=0A=
            ds.on("remove", this.onRemove, this);=0A=
            ds.on("update", this.onUpdate, this);=0A=
            ds.on("clear", this.onClear, this);=0A=
        }=0A=
        this.ds =3D ds;=0A=
=0A=
        if(this.cm){=0A=
            this.cm.un("configchange", this.onColConfigChange, this);=0A=
            this.cm.un("widthchange", this.onColWidthChange, this);=0A=
            this.cm.un("headerchange", this.onHeaderChange, this);=0A=
            this.cm.un("hiddenchange", this.onHiddenChange, this);=0A=
            this.cm.un("columnmoved", this.onColumnMove, this);=0A=
            this.cm.un("columnlockchange", this.onColumnLock, this);=0A=
        }=0A=
        if(cm){=0A=
            cm.on("configchange", this.onColConfigChange, this);=0A=
            cm.on("widthchange", this.onColWidthChange, this);=0A=
            cm.on("headerchange", this.onHeaderChange, this);=0A=
            cm.on("hiddenchange", this.onHiddenChange, this);=0A=
            cm.on("columnmoved", this.onColumnMove, this);=0A=
            cm.on("columnlockchange", this.onColumnLock, this);=0A=
        }=0A=
        this.cm =3D cm;=0A=
    },=0A=
=0A=
        onDataChange : function(){=0A=
        this.refresh();=0A=
        this.updateHeaderSortState();=0A=
    },=0A=
=0A=
        onClear : function(){=0A=
        this.refresh();=0A=
    },=0A=
=0A=
        onUpdate : function(ds, record){=0A=
        this.refreshRow(record);=0A=
    },=0A=
=0A=
        onAdd : function(ds, records, index){=0A=
        this.insertRows(ds, index, index + (records.length-1));=0A=
    },=0A=
=0A=
        onRemove : function(ds, record, index, isUpdate){=0A=
        if(isUpdate !=3D=3D true){=0A=
            this.fireEvent("beforerowremoved", this, index, record);=0A=
        }=0A=
        this.removeRow(index);=0A=
        if(isUpdate !=3D=3D true){=0A=
            this.processRows(index);=0A=
            this.applyEmptyText();=0A=
            this.fireEvent("rowremoved", this, index, record);=0A=
        }=0A=
    },=0A=
=0A=
        onLoad : function(){=0A=
        this.scrollToTop();=0A=
    },=0A=
=0A=
        onColWidthChange : function(cm, col, width){=0A=
        this.updateColumnWidth(col, width);=0A=
    },=0A=
=0A=
        onHeaderChange : function(cm, col, text){=0A=
        this.updateHeaders();=0A=
    },=0A=
=0A=
        onHiddenChange : function(cm, col, hidden){=0A=
        this.updateColumnHidden(col, hidden);=0A=
    },=0A=
=0A=
        onColumnMove : function(cm, oldIndex, newIndex){=0A=
        this.indexMap =3D null;=0A=
        var s =3D this.getScrollState();=0A=
        this.refresh(true);=0A=
        this.restoreScroll(s);=0A=
        this.afterMove(newIndex);=0A=
    },=0A=
=0A=
        onColConfigChange : function(){=0A=
        delete this.lastViewWidth;=0A=
        this.indexMap =3D null;=0A=
        this.refresh(true);=0A=
    },=0A=
=0A=
    =0A=
        initUI : function(grid){=0A=
        grid.on("headerclick", this.onHeaderClick, this);=0A=
=0A=
        if(grid.trackMouseOver){=0A=
            grid.on("mouseover", this.onRowOver, this);=0A=
          grid.on("mouseout", this.onRowOut, this);=0A=
      }=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
=0A=
    },=0A=
=0A=
        onHeaderClick : function(g, index){=0A=
        if(this.headersDisabled || !this.cm.isSortable(index)){=0A=
            return;=0A=
        }=0A=
        g.stopEditing(true);=0A=
        g.store.sort(this.cm.getDataIndex(index));=0A=
    },=0A=
=0A=
        onRowOver : function(e, t){=0A=
        var row;=0A=
        if((row =3D this.findRowIndex(t)) !=3D=3D false){=0A=
            this.addRowClass(row, "x-grid3-row-over");=0A=
        }=0A=
    },=0A=
=0A=
        onRowOut : function(e, t){=0A=
        var row;=0A=
        if((row =3D this.findRowIndex(t)) !=3D=3D false && row !=3D=3D =
this.findRowIndex(e.getRelatedTarget())){=0A=
            this.removeRowClass(row, "x-grid3-row-over");=0A=
        }=0A=
    },=0A=
=0A=
        handleWheel : function(e){=0A=
        e.stopPropagation();=0A=
    },=0A=
=0A=
        onRowSelect : function(row){=0A=
        this.addRowClass(row, "x-grid3-row-selected");=0A=
    },=0A=
=0A=
        onRowDeselect : function(row){=0A=
        this.removeRowClass(row, "x-grid3-row-selected");=0A=
    },=0A=
=0A=
        onCellSelect : function(row, col){=0A=
        var cell =3D this.getCell(row, col);=0A=
        if(cell){=0A=
            this.fly(cell).addClass("x-grid3-cell-selected");=0A=
        }=0A=
    },=0A=
=0A=
        onCellDeselect : function(row, col){=0A=
        var cell =3D this.getCell(row, col);=0A=
        if(cell){=0A=
            this.fly(cell).removeClass("x-grid3-cell-selected");=0A=
        }=0A=
    },=0A=
=0A=
        onColumnSplitterMoved : function(i, w){=0A=
        this.userResized =3D true;=0A=
        var cm =3D this.grid.colModel;=0A=
        cm.setColumnWidth(i, w, true);=0A=
=0A=
        if(this.forceFit){=0A=
            this.fitColumns(true, false, i);=0A=
            this.updateAllColumnWidths();=0A=
        }else{=0A=
            this.updateColumnWidth(i, w);=0A=
        }=0A=
=0A=
        this.grid.fireEvent("columnresize", i, w);=0A=
    },=0A=
=0A=
        handleHdMenuClick : function(item){=0A=
        var index =3D this.hdCtxIndex;=0A=
        var cm =3D this.cm, ds =3D this.ds;=0A=
        switch(item.id){=0A=
            case "asc":=0A=
                ds.sort(cm.getDataIndex(index), "ASC");=0A=
                break;=0A=
            case "desc":=0A=
                ds.sort(cm.getDataIndex(index), "DESC");=0A=
                break;=0A=
            default:=0A=
                index =3D cm.getIndexById(item.id.substr(4));=0A=
                if(index !=3D -1){=0A=
                    if(item.checked && =
cm.getColumnsBy(this.isHideableColumn, this).length <=3D 1){=0A=
                        this.onDenyColumnHide();=0A=
                        return false;=0A=
                    }=0A=
                    cm.setHidden(index, item.checked);=0A=
                }=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
        isHideableColumn : function(c){=0A=
        return !c.hidden && !c.fixed;=0A=
    },=0A=
=0A=
        beforeColMenuShow : function(){=0A=
        var cm =3D this.cm,  colCount =3D cm.getColumnCount();=0A=
        this.colMenu.removeAll();=0A=
        for(var i =3D 0; i < colCount; i++){=0A=
            if(cm.config[i].fixed !=3D=3D true && cm.config[i].hideable =
!=3D=3D false){=0A=
                this.colMenu.add(new Ext.menu.CheckItem({=0A=
                    id: "col-"+cm.getColumnId(i),=0A=
                    text: cm.getColumnHeader(i),=0A=
                    checked: !cm.isHidden(i),=0A=
                    hideOnClick:false,=0A=
                    disabled: cm.config[i].hideable =3D=3D=3D false=0A=
                }));=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        handleHdDown : function(e, t){=0A=
        if(Ext.fly(t).hasClass('x-grid3-hd-btn')){=0A=
            e.stopEvent();=0A=
            var hd =3D this.findHeaderCell(t);=0A=
            Ext.fly(hd).addClass('x-grid3-hd-menu-open');=0A=
            var index =3D this.getCellIndex(hd);=0A=
            this.hdCtxIndex =3D index;=0A=
            var ms =3D this.hmenu.items, cm =3D this.cm;=0A=
            ms.get("asc").setDisabled(!cm.isSortable(index));=0A=
            ms.get("desc").setDisabled(!cm.isSortable(index));=0A=
            this.hmenu.on("hide", function(){=0A=
                Ext.fly(hd).removeClass('x-grid3-hd-menu-open');=0A=
            }, this, {single:true});=0A=
            this.hmenu.show(t, "tl-bl?");=0A=
        }=0A=
    },=0A=
=0A=
        handleHdOver : function(e, t){=0A=
        var hd =3D this.findHeaderCell(t);=0A=
        if(hd && !this.headersDisabled){=0A=
            this.activeHd =3D hd;=0A=
            this.activeHdIndex =3D this.getCellIndex(hd);=0A=
            var fly =3D this.fly(hd);=0A=
            this.activeHdRegion =3D fly.getRegion();=0A=
            if(!this.cm.isMenuDisabled(this.activeHdIndex)){=0A=
                fly.addClass("x-grid3-hd-over");=0A=
                this.activeHdBtn =3D fly.child('.x-grid3-hd-btn');=0A=
                if(this.activeHdBtn){=0A=
                    this.activeHdBtn.dom.style.height =3D =
(hd.firstChild.offsetHeight-1)+'px';=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        handleHdMove : function(e, t){=0A=
        if(this.activeHd && !this.headersDisabled){=0A=
            var hw =3D this.splitHandleWidth || 5;=0A=
            var r =3D this.activeHdRegion;=0A=
            var x =3D e.getPageX();=0A=
            var ss =3D this.activeHd.style;=0A=
            if(x - r.left <=3D hw && =
this.cm.isResizable(this.activeHdIndex-1)){=0A=
                ss.cursor =3D Ext.isAir ? 'move' : Ext.isSafari ? =
'e-resize' : 'col-resize';             }else if(r.right - x <=3D =
(!this.activeHdBtn ? hw : 2) && this.cm.isResizable(this.activeHdIndex)){=0A=
                ss.cursor =3D Ext.isAir ? 'move' : Ext.isSafari ? =
'w-resize' : 'col-resize';=0A=
            }else{=0A=
                ss.cursor =3D '';=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        handleHdOut : function(e, t){=0A=
        var hd =3D this.findHeaderCell(t);=0A=
        if(hd && (!Ext.isIE || !e.within(hd, true))){=0A=
            this.activeHd =3D null;=0A=
            this.fly(hd).removeClass("x-grid3-hd-over");=0A=
            hd.style.cursor =3D '';=0A=
        }=0A=
    },=0A=
=0A=
        hasRows : function(){=0A=
        var fc =3D this.mainBody.dom.firstChild;=0A=
        return fc && fc.className !=3D 'x-grid-empty';=0A=
    },=0A=
=0A=
        bind : function(d, c){=0A=
        this.initData(d, c);=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.grid.GridView.SplitDragZone =3D function(grid, hd){=0A=
    this.grid =3D grid;=0A=
    this.view =3D grid.getView();=0A=
    this.marker =3D this.view.resizeMarker;=0A=
    this.proxy =3D this.view.resizeProxy;=0A=
    Ext.grid.GridView.SplitDragZone.superclass.constructor.call(this, hd,=0A=
        "gridSplitters" + this.grid.getGridEl().id, {=0A=
        dragElId : Ext.id(this.proxy.dom), resizeFrame:false=0A=
    });=0A=
    this.scroll =3D false;=0A=
    this.hw =3D this.view.splitHandleWidth || 5;=0A=
};=0A=
Ext.extend(Ext.grid.GridView.SplitDragZone, Ext.dd.DDProxy, {=0A=
=0A=
    b4StartDrag : function(x, y){=0A=
        this.view.headersDisabled =3D true;=0A=
        var h =3D this.view.mainWrap.getHeight();=0A=
        this.marker.setHeight(h);=0A=
        this.marker.show();=0A=
        this.marker.alignTo(this.view.getHeaderCell(this.cellIndex), =
'tl-tl', [-2, 0]);=0A=
        this.proxy.setHeight(h);=0A=
        var w =3D this.cm.getColumnWidth(this.cellIndex);=0A=
        var minw =3D Math.max(w-this.grid.minColumnWidth, 0);=0A=
        this.resetConstraints();=0A=
        this.setXConstraint(minw, 1000);=0A=
        this.setYConstraint(0, 0);=0A=
        this.minX =3D x - minw;=0A=
        this.maxX =3D x + 1000;=0A=
        this.startPos =3D x;=0A=
        Ext.dd.DDProxy.prototype.b4StartDrag.call(this, x, y);=0A=
    },=0A=
=0A=
=0A=
    handleMouseDown : function(e){=0A=
        var t =3D this.view.findHeaderCell(e.getTarget());=0A=
        if(t){=0A=
            var xy =3D this.view.fly(t).getXY(), x =3D xy[0], y =3D =
xy[1];=0A=
            var exy =3D e.getXY(), ex =3D exy[0], ey =3D exy[1];=0A=
            var w =3D t.offsetWidth, adjust =3D false;=0A=
            if((ex - x) <=3D this.hw){=0A=
                adjust =3D -1;=0A=
            }else if((x+w) - ex <=3D this.hw){=0A=
                adjust =3D 0;=0A=
            }=0A=
            if(adjust !=3D=3D false){=0A=
                this.cm =3D this.grid.colModel;=0A=
                var ci =3D this.view.getCellIndex(t);=0A=
                if(adjust =3D=3D -1){=0A=
                  if (ci + adjust < 0) {=0A=
                    return;=0A=
                  }=0A=
                    while(this.cm.isHidden(ci+adjust)){=0A=
                        --adjust;=0A=
                        if(ci+adjust < 0){=0A=
                            return;=0A=
                        }=0A=
                    }=0A=
                }=0A=
                this.cellIndex =3D ci+adjust;=0A=
                this.split =3D t.dom;=0A=
                if(this.cm.isResizable(this.cellIndex) && =
!this.cm.isFixed(this.cellIndex)){=0A=
                    =
Ext.grid.GridView.SplitDragZone.superclass.handleMouseDown.apply(this, =
arguments);=0A=
                }=0A=
            }else if(this.view.columnDrag){=0A=
                this.view.columnDrag.callHandleMouseDown(e);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    endDrag : function(e){=0A=
        this.marker.hide();=0A=
        var v =3D this.view;=0A=
        var endX =3D Math.max(this.minX, e.getPageX());=0A=
        var diff =3D endX - this.startPos;=0A=
        v.onColumnSplitterMoved(this.cellIndex, =
this.cm.getColumnWidth(this.cellIndex)+diff);=0A=
        setTimeout(function(){=0A=
            v.headersDisabled =3D false;=0A=
        }, 50);=0A=
    },=0A=
=0A=
    autoOffset : function(){=0A=
        this.setDelta(0,0);=0A=
    }=0A=
});=0A=
=0A=

Ext.grid.GroupingView =3D Ext.extend(Ext.grid.GridView, {
   =20
    hideGroupedColumn:false,
   =20
    showGroupName:true,
   =20
    startCollapsed:false,
   =20
    enableGrouping:true,
   =20
    enableGroupingMenu:true,
   =20
    enableNoGroups:true,
   =20
    emptyGroupText : '(None)',
   =20
    ignoreAdd: false,
   =20
    groupTextTpl : '{text}',
   =20
   =20

    =0A=
    gidSeed : 1000,

    =0A=
    initTemplates : function(){
        Ext.grid.GroupingView.superclass.initTemplates.call(this);
        this.state =3D {};

        var sm =3D this.grid.getSelectionModel();
        sm.on(sm.selectRow ? 'beforerowselect' : 'beforecellselect',
                this.onBeforeRowSelect, this);

        if(!this.startGroup){
            this.startGroup =3D new Ext.XTemplate(
                '<div id=3D"{groupId}" class=3D"x-grid-group {cls}">',
                    '<div id=3D"{groupId}-hd" class=3D"x-grid-group-hd" =
style=3D"{style}"><div>', this.groupTextTpl ,'</div></div>',
                    '<div id=3D"{groupId}-bd" =
class=3D"x-grid-group-body">'
            );
        }
        this.startGroup.compile();
        this.endGroup =3D '</div></div>';
    },

    =0A=
    findGroup : function(el){
        return Ext.fly(el).up('.x-grid-group', this.mainBody.dom);
    },

    =0A=
    getGroups : function(){
        return this.hasRows() ? this.mainBody.dom.childNodes : [];
    },

    =0A=
    onAdd : function(){
        if(this.enableGrouping && !this.ignoreAdd){
            var ss =3D this.getScrollState();
            this.refresh();
            this.restoreScroll(ss);
        }else if(!this.enableGrouping){
            Ext.grid.GroupingView.superclass.onAdd.apply(this, =
arguments);
        }
    },

    =0A=
    onRemove : function(ds, record, index, isUpdate){
        Ext.grid.GroupingView.superclass.onRemove.apply(this, =
arguments);
        var g =3D document.getElementById(record._groupId);
        if(g && g.childNodes[1].childNodes.length < 1){
            Ext.removeNode(g);
        }
        this.applyEmptyText();
    },

    =0A=
    refreshRow : function(record){
        if(this.ds.getCount()=3D=3D1){
            this.refresh();
        }else{
            this.isUpdating =3D true;
            Ext.grid.GroupingView.superclass.refreshRow.apply(this, =
arguments);
            this.isUpdating =3D false;
        }
    },

    =0A=
    beforeMenuShow : function(){
        var field =3D this.getGroupField();
        var g =3D this.hmenu.items.get('groupBy');
        if(g){
            g.setDisabled(this.cm.config[this.hdCtxIndex].groupable =
=3D=3D=3D false);
        }
        var s =3D this.hmenu.items.get('showGroups');
        if(s){
           s.setDisabled(!field && =
this.cm.config[this.hdCtxIndex].groupable =3D=3D=3D false);
			s.setChecked(!!field, true);
        }
    },

    =0A=
    renderUI : function(){
        Ext.grid.GroupingView.superclass.renderUI.call(this);
        this.mainBody.on('mousedown', this.interceptMouse, this);

        if(this.enableGroupingMenu && this.hmenu){
            this.hmenu.add('-',{
                id:'groupBy',
                text: this.groupByText,
                handler: this.onGroupByClick,
                scope: this,
                iconCls:'x-group-by-icon'
            });
            if(this.enableNoGroups){
                this.hmenu.add({
                    id:'showGroups',
                    text: this.showGroupsText,
                    checked: true,
                    checkHandler: this.onShowGroupsClick,
                    scope: this
                });
            }
            this.hmenu.on('beforeshow', this.beforeMenuShow, this);
        }
    },

    =0A=
    onGroupByClick : function(){
        this.grid.store.groupBy(this.cm.getDataIndex(this.hdCtxIndex));
        this.beforeMenuShow(); =0A=
    },

    =0A=
    onShowGroupsClick : function(mi, checked){
        if(checked){
            this.onGroupByClick();
        }else{
            this.grid.store.clearGrouping();
        }
    },

   =20
    toggleGroup : function(group, expanded){
        this.grid.stopEditing(true);
        group =3D Ext.getDom(group);
        var gel =3D Ext.fly(group);
        expanded =3D expanded !=3D=3D undefined ?
                expanded : gel.hasClass('x-grid-group-collapsed');

        this.state[gel.dom.id] =3D expanded;
        gel[expanded ? 'removeClass' : =
'addClass']('x-grid-group-collapsed');
    },

   =20
    toggleAllGroups : function(expanded){
        var groups =3D this.getGroups();
        for(var i =3D 0, len =3D groups.length; i < len; i++){
            this.toggleGroup(groups[i], expanded);
        }
    },

   =20
    expandAllGroups : function(){
        this.toggleAllGroups(true);
    },

   =20
    collapseAllGroups : function(){
        this.toggleAllGroups(false);
    },

    =0A=
    interceptMouse : function(e){
        var hd =3D e.getTarget('.x-grid-group-hd', this.mainBody);
        if(hd){
            e.stopEvent();
            this.toggleGroup(hd.parentNode);
        }
    },

    =0A=
    getGroup : function(v, r, groupRenderer, rowIndex, colIndex, ds){
        var g =3D groupRenderer ? groupRenderer(v, {}, r, rowIndex, =
colIndex, ds) : String(v);
        if(g =3D=3D=3D ''){
            g =3D this.cm.config[colIndex].emptyGroupText || =
this.emptyGroupText;
        }
        return g;
    },

    =0A=
    getGroupField : function(){
        return this.grid.store.getGroupState();
    },

    =0A=
    renderRows : function(){
        var groupField =3D this.getGroupField();
        var eg =3D !!groupField;
        =0A=
        if(this.hideGroupedColumn) {
            var colIndex =3D this.cm.findColumnIndex(groupField);
            if(!eg && this.lastGroupField !=3D=3D undefined) {
                this.mainBody.update('');
                =
this.cm.setHidden(this.cm.findColumnIndex(this.lastGroupField), false);
                delete this.lastGroupField;
            }else if (eg && this.lastGroupField =3D=3D=3D undefined) {
                this.lastGroupField =3D groupField;
                this.cm.setHidden(colIndex, true);
            }else if (eg && this.lastGroupField !=3D=3D undefined && =
groupField !=3D=3D this.lastGroupField) {
                this.mainBody.update('');
                var oldIndex =3D =
this.cm.findColumnIndex(this.lastGroupField);
                this.cm.setHidden(oldIndex, false);
                this.lastGroupField =3D groupField;
                this.cm.setHidden(colIndex, true);
            }
        }
        return Ext.grid.GroupingView.superclass.renderRows.apply(
                    this, arguments);
    },

    =0A=
    doRender : function(cs, rs, ds, startRow, colCount, stripe){
        if(rs.length < 1){
            return '';
        }
        var groupField =3D this.getGroupField();
        var colIndex =3D this.cm.findColumnIndex(groupField);

        this.enableGrouping =3D !!groupField;

        if(!this.enableGrouping || this.isUpdating){
            return Ext.grid.GroupingView.superclass.doRender.apply(
                    this, arguments);
        }
        var gstyle =3D 'width:'+this.getTotalWidth()+';';

        var gidPrefix =3D this.grid.getGridEl().id;
        var cfg =3D this.cm.config[colIndex];
        var groupRenderer =3D cfg.groupRenderer || cfg.renderer;
        var prefix =3D this.showGroupName ?
                     (cfg.groupName || cfg.header)+': ' : '';

        var groups =3D [], curGroup, i, len, gid;
        for(i =3D 0, len =3D rs.length; i < len; i++){
            var rowIndex =3D startRow + i;
            var r =3D rs[i],
                gvalue =3D r.data[groupField],
                g =3D this.getGroup(gvalue, r, groupRenderer, rowIndex, =
colIndex, ds);
            if(!curGroup || curGroup.group !=3D g){
                gid =3D gidPrefix + '-gp-' + groupField + '-' + =
Ext.util.Format.htmlEncode(g);
               	=0A=
				=0A=
				var isCollapsed  =3D typeof this.state[gid] !=3D=3D 'undefined' ? =
!this.state[gid] : this.startCollapsed;
				var gcls =3D isCollapsed ? 'x-grid-group-collapsed' : '';=09
                curGroup =3D {
                    group: g,
                    gvalue: gvalue,
                    text: prefix + g,
                    groupId: gid,
                    startRow: rowIndex,
                    rs: [r],
                    cls: gcls,
                    style: gstyle
                };
                groups.push(curGroup);
            }else{
                curGroup.rs.push(r);
            }
            r._groupId =3D gid;
        }

        var buf =3D [];
        for(i =3D 0, len =3D groups.length; i < len; i++){
            var g =3D groups[i];
            this.doGroupStart(buf, g, cs, ds, colCount);
            buf[buf.length] =3D =
Ext.grid.GroupingView.superclass.doRender.call(
                    this, cs, g.rs, ds, g.startRow, colCount, stripe);

            this.doGroupEnd(buf, g, cs, ds, colCount);
        }
        return buf.join('');
    },

   =20
    getGroupId : function(value){
        var gidPrefix =3D this.grid.getGridEl().id;
        var groupField =3D this.getGroupField();
        var colIndex =3D this.cm.findColumnIndex(groupField);
        var cfg =3D this.cm.config[colIndex];
        var groupRenderer =3D cfg.groupRenderer || cfg.renderer;
        var gtext =3D this.getGroup(value, {data:{}}, groupRenderer, 0, =
colIndex, this.ds);
        return gidPrefix + '-gp-' + groupField + '-' + =
Ext.util.Format.htmlEncode(value);
    },

    =0A=
    doGroupStart : function(buf, g, cs, ds, colCount){
        buf[buf.length] =3D this.startGroup.apply(g);
    },

    =0A=
    doGroupEnd : function(buf, g, cs, ds, colCount){
        buf[buf.length] =3D this.endGroup;
    },

    =0A=
    getRows : function(){
        if(!this.enableGrouping){
            return Ext.grid.GroupingView.superclass.getRows.call(this);
        }
        var r =3D [];
        var g, gs =3D this.getGroups();
        for(var i =3D 0, len =3D gs.length; i < len; i++){
            g =3D gs[i].childNodes[1].childNodes;
            for(var j =3D 0, jlen =3D g.length; j < jlen; j++){
                r[r.length] =3D g[j];
            }
        }
        return r;
    },

    =0A=
    updateGroupWidths : function(){
        if(!this.enableGrouping || !this.hasRows()){
            return;
        }
        var tw =3D Math.max(this.cm.getTotalWidth(), =
this.el.dom.offsetWidth-this.scrollOffset) +'px';
        var gs =3D this.getGroups();
        for(var i =3D 0, len =3D gs.length; i < len; i++){
            gs[i].firstChild.style.width =3D tw;
        }
    },

    =0A=
    onColumnWidthUpdated : function(col, w, tw){
        this.updateGroupWidths();
    },

    =0A=
    onAllColumnWidthsUpdated : function(ws, tw){
        this.updateGroupWidths();
    },

    =0A=
    onColumnHiddenUpdated : function(col, hidden, tw){
        this.updateGroupWidths();
    },

    =0A=
    onLayout : function(){
        this.updateGroupWidths();
    },

    =0A=
    onBeforeRowSelect : function(sm, rowIndex){
        if(!this.enableGrouping){
            return;
        }
        var row =3D this.getRow(rowIndex);
        if(row && !row.offsetParent){
            var g =3D this.findGroup(row);
            this.toggleGroup(g, true);
        }
    },

   =20
    groupByText: 'Group By This Field',
   =20
    showGroupsText: 'Show in Groups'
});
=0A=
Ext.grid.GroupingView.GROUP_ID =3D 1000;=0A=
=0A=
=0A=
Ext.grid.HeaderDragZone =3D function(grid, hd, hd2){
    this.grid =3D grid;
    this.view =3D grid.getView();
    this.ddGroup =3D "gridHeader" + this.grid.getGridEl().id;
    Ext.grid.HeaderDragZone.superclass.constructor.call(this, hd);
    if(hd2){
        this.setHandleElId(Ext.id(hd));
        this.setOuterHandleElId(Ext.id(hd2));
    }
    this.scroll =3D false;
};
Ext.extend(Ext.grid.HeaderDragZone, Ext.dd.DragZone, {
    maxDragWidth: 120,
    getDragData : function(e){
        var t =3D Ext.lib.Event.getTarget(e);
        var h =3D this.view.findHeaderCell(t);
        if(h){
            return {ddel: h.firstChild, header:h};
        }
        return false;
    },

    onInitDrag : function(e){
        this.view.headersDisabled =3D true;
        var clone =3D this.dragData.ddel.cloneNode(true);
        clone.id =3D Ext.id();
        clone.style.width =3D =
Math.min(this.dragData.header.offsetWidth,this.maxDragWidth) + "px";
        this.proxy.update(clone);
        return true;
    },

    afterValidDrop : function(){
        var v =3D this.view;
        setTimeout(function(){
            v.headersDisabled =3D false;
        }, 50);
    },

    afterInvalidDrop : function(){
        var v =3D this.view;
        setTimeout(function(){
            v.headersDisabled =3D false;
        }, 50);
    }
});

=0A=
=0A=
Ext.grid.HeaderDropZone =3D function(grid, hd, hd2){
    this.grid =3D grid;
    this.view =3D grid.getView();
    =0A=
    this.proxyTop =3D Ext.DomHelper.append(document.body, {
        cls:"col-move-top", html:"&#160;"
    }, true);
    this.proxyBottom =3D Ext.DomHelper.append(document.body, {
        cls:"col-move-bottom", html:"&#160;"
    }, true);
    this.proxyTop.hide =3D this.proxyBottom.hide =3D function(){
        this.setLeftTop(-100,-100);
        this.setStyle("visibility", "hidden");
    };
    this.ddGroup =3D "gridHeader" + this.grid.getGridEl().id;
    =0A=
    =0A=
    Ext.grid.HeaderDropZone.superclass.constructor.call(this, =
grid.getGridEl().dom);
};
Ext.extend(Ext.grid.HeaderDropZone, Ext.dd.DropZone, {
    proxyOffsets : [-4, -9],
    fly: Ext.Element.fly,

    getTargetFromEvent : function(e){
        var t =3D Ext.lib.Event.getTarget(e);
        var cindex =3D this.view.findCellIndex(t);
        if(cindex !=3D=3D false){
            return this.view.getHeaderCell(cindex);
        }
    },

    nextVisible : function(h){
        var v =3D this.view, cm =3D this.grid.colModel;
        h =3D h.nextSibling;
        while(h){
            if(!cm.isHidden(v.getCellIndex(h))){
                return h;
            }
            h =3D h.nextSibling;
        }
        return null;
    },

    prevVisible : function(h){
        var v =3D this.view, cm =3D this.grid.colModel;
        h =3D h.prevSibling;
        while(h){
            if(!cm.isHidden(v.getCellIndex(h))){
                return h;
            }
            h =3D h.prevSibling;
        }
        return null;
    },

    positionIndicator : function(h, n, e){
        var x =3D Ext.lib.Event.getPageX(e);
        var r =3D Ext.lib.Dom.getRegion(n.firstChild);
        var px, pt, py =3D r.top + this.proxyOffsets[1];
        if((r.right - x) <=3D (r.right-r.left)/2){
            px =3D r.right+this.view.borderWidth;
            pt =3D "after";
        }else{
            px =3D r.left;
            pt =3D "before";
        }
        var oldIndex =3D this.view.getCellIndex(h);
        var newIndex =3D this.view.getCellIndex(n);

        if(this.grid.colModel.isFixed(newIndex)){
            return false;
        }

        var locked =3D this.grid.colModel.isLocked(newIndex);

        if(pt =3D=3D "after"){
            newIndex++;
        }
        if(oldIndex < newIndex){
            newIndex--;
        }
        if(oldIndex =3D=3D newIndex && (locked =3D=3D =
this.grid.colModel.isLocked(oldIndex))){
            return false;
        }
        px +=3D  this.proxyOffsets[0];
        this.proxyTop.setLeftTop(px, py);
        this.proxyTop.show();
        if(!this.bottomOffset){
            this.bottomOffset =3D this.view.mainHd.getHeight();
        }
        this.proxyBottom.setLeftTop(px, =
py+this.proxyTop.dom.offsetHeight+this.bottomOffset);
        this.proxyBottom.show();
        return pt;
    },

    onNodeEnter : function(n, dd, e, data){
        if(data.header !=3D n){
            this.positionIndicator(data.header, n, e);
        }
    },

    onNodeOver : function(n, dd, e, data){
        var result =3D false;
        if(data.header !=3D n){
            result =3D this.positionIndicator(data.header, n, e);
        }
        if(!result){
            this.proxyTop.hide();
            this.proxyBottom.hide();
        }
        return result ? this.dropAllowed : this.dropNotAllowed;
    },

    onNodeOut : function(n, dd, e, data){
        this.proxyTop.hide();
        this.proxyBottom.hide();
    },

    onNodeDrop : function(n, dd, e, data){
        var h =3D data.header;
        if(h !=3D n){
            var cm =3D this.grid.colModel;
            var x =3D Ext.lib.Event.getPageX(e);
            var r =3D Ext.lib.Dom.getRegion(n.firstChild);
            var pt =3D (r.right - x) <=3D ((r.right-r.left)/2) ? "after" =
: "before";
            var oldIndex =3D this.view.getCellIndex(h);
            var newIndex =3D this.view.getCellIndex(n);
            var locked =3D cm.isLocked(newIndex);
            if(pt =3D=3D "after"){
                newIndex++;
            }
            if(oldIndex < newIndex){
                newIndex--;
            }
            if(oldIndex =3D=3D newIndex && (locked =3D=3D =
cm.isLocked(oldIndex))){
                return false;
            }
            cm.setLocked(oldIndex, locked, true);
            cm.moveColumn(oldIndex, newIndex);
            this.grid.fireEvent("columnmove", oldIndex, newIndex);
            return true;
        }
        return false;
    }
});


Ext.grid.GridView.ColumnDragZone =3D function(grid, hd){
    Ext.grid.GridView.ColumnDragZone.superclass.constructor.call(this, =
grid, hd, null);
    this.proxy.el.addClass('x-grid3-col-dd');
};

Ext.extend(Ext.grid.GridView.ColumnDragZone, Ext.grid.HeaderDragZone, {
    handleMouseDown : function(e){

    },

    callHandleMouseDown : function(e){
        =
Ext.grid.GridView.ColumnDragZone.superclass.handleMouseDown.call(this, =
e);
    }
});=0A=
Ext.grid.SplitDragZone =3D function(grid, hd, hd2){=0A=
    this.grid =3D grid;=0A=
    this.view =3D grid.getView();=0A=
    this.proxy =3D this.view.resizeProxy;=0A=
    Ext.grid.SplitDragZone.superclass.constructor.call(this, hd,=0A=
        "gridSplitters" + this.grid.getGridEl().id, {=0A=
        dragElId : Ext.id(this.proxy.dom), resizeFrame:false=0A=
    });=0A=
    this.setHandleElId(Ext.id(hd));=0A=
    this.setOuterHandleElId(Ext.id(hd2));=0A=
    this.scroll =3D false;=0A=
};=0A=
Ext.extend(Ext.grid.SplitDragZone, Ext.dd.DDProxy, {=0A=
    fly: Ext.Element.fly,=0A=
=0A=
    b4StartDrag : function(x, y){=0A=
        this.view.headersDisabled =3D true;=0A=
        this.proxy.setHeight(this.view.mainWrap.getHeight());=0A=
        var w =3D this.cm.getColumnWidth(this.cellIndex);=0A=
        var minw =3D Math.max(w-this.grid.minColumnWidth, 0);=0A=
        this.resetConstraints();=0A=
        this.setXConstraint(minw, 1000);=0A=
        this.setYConstraint(0, 0);=0A=
        this.minX =3D x - minw;=0A=
        this.maxX =3D x + 1000;=0A=
        this.startPos =3D x;=0A=
        Ext.dd.DDProxy.prototype.b4StartDrag.call(this, x, y);=0A=
    },=0A=
=0A=
=0A=
    handleMouseDown : function(e){=0A=
        ev =3D Ext.EventObject.setEvent(e);=0A=
        var t =3D this.fly(ev.getTarget());=0A=
        if(t.hasClass("x-grid-split")){=0A=
            this.cellIndex =3D this.view.getCellIndex(t.dom);=0A=
            this.split =3D t.dom;=0A=
            this.cm =3D this.grid.colModel;=0A=
            if(this.cm.isResizable(this.cellIndex) && =
!this.cm.isFixed(this.cellIndex)){=0A=
                =
Ext.grid.SplitDragZone.superclass.handleMouseDown.apply(this, arguments);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    endDrag : function(e){=0A=
        this.view.headersDisabled =3D false;=0A=
        var endX =3D Math.max(this.minX, Ext.lib.Event.getPageX(e));=0A=
        var diff =3D endX - this.startPos;=0A=
        this.view.onColumnSplitterMoved(this.cellIndex, =
this.cm.getColumnWidth(this.cellIndex)+diff);=0A=
    },=0A=
=0A=
    autoOffset : function(){=0A=
        this.setDelta(0,0);=0A=
    }=0A=
});=0A=
Ext.grid.GridDragZone =3D function(grid, config){=0A=
    this.view =3D grid.getView();=0A=
    Ext.grid.GridDragZone.superclass.constructor.call(this, =
this.view.mainBody.dom, config);=0A=
    if(this.view.lockedBody){=0A=
        this.setHandleElId(Ext.id(this.view.mainBody.dom));=0A=
        this.setOuterHandleElId(Ext.id(this.view.lockedBody.dom));=0A=
    }=0A=
    this.scroll =3D false;=0A=
    this.grid =3D grid;=0A=
    this.ddel =3D document.createElement('div');=0A=
    this.ddel.className =3D 'x-grid-dd-wrap';=0A=
};=0A=
=0A=
Ext.extend(Ext.grid.GridDragZone, Ext.dd.DragZone, {=0A=
    ddGroup : "GridDD",=0A=
=0A=
    getDragData : function(e){=0A=
        var t =3D Ext.lib.Event.getTarget(e);=0A=
        var rowIndex =3D this.view.findRowIndex(t);=0A=
        if(rowIndex !=3D=3D false){=0A=
            var sm =3D this.grid.selModel;=0A=
            if(!sm.isSelected(rowIndex) || e.hasModifier()){=0A=
                sm.handleMouseDown(this.grid, rowIndex, e);=0A=
            }=0A=
            return {grid: this.grid, ddel: this.ddel, rowIndex: =
rowIndex, selections:sm.getSelections()};=0A=
        }=0A=
        return false;=0A=
    },=0A=
=0A=
    onInitDrag : function(e){=0A=
        var data =3D this.dragData;=0A=
        this.ddel.innerHTML =3D this.grid.getDragDropText();=0A=
        this.proxy.update(this.ddel);=0A=
            },=0A=
=0A=
    afterRepair : function(){=0A=
        this.dragging =3D false;=0A=
    },=0A=
=0A=
    getRepairXY : function(e, data){=0A=
        return false;=0A=
    },=0A=
=0A=
    onEndDrag : function(data, e){=0A=
            },=0A=
=0A=
    onValidDrop : function(dd, e, id){=0A=
                this.hideProxy();=0A=
    },=0A=
=0A=
    beforeInvalidDrop : function(e, id){=0A=
=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.grid.ColumnModel =3D function(config){=0A=
	=0A=
    this.defaultWidth =3D 100;=0A=
=0A=
    =0A=
    this.defaultSortable =3D false;=0A=
=0A=
    =0A=
    if(config.columns){=0A=
        Ext.apply(this, config);=0A=
        this.setConfig(config.columns, true);=0A=
    }else{=0A=
        this.setConfig(config, true);=0A=
    }=0A=
    this.addEvents(=0A=
        =0A=
	    "widthchange",=0A=
        =0A=
	    "headerchange",=0A=
        =0A=
	    "hiddenchange",=0A=
	    =0A=
        "columnmoved",=0A=
                "columnlockchange",=0A=
        =0A=
        "configchange"=0A=
    );=0A=
    Ext.grid.ColumnModel.superclass.constructor.call(this);=0A=
};=0A=
Ext.extend(Ext.grid.ColumnModel, Ext.util.Observable, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
=0A=
    =0A=
    getColumnId : function(index){=0A=
        return this.config[index].id;=0A=
    },=0A=
=0A=
    =0A=
    setConfig : function(config, initial){=0A=
        if(!initial){             delete this.totalWidth;=0A=
            for(var i =3D 0, len =3D this.config.length; i < len; i++){=0A=
                var c =3D this.config[i];=0A=
                if(c.editor){=0A=
                    c.editor.destroy();=0A=
                }=0A=
            }=0A=
        }=0A=
        this.config =3D config;=0A=
        this.lookup =3D {};=0A=
                for(var i =3D 0, len =3D config.length; i < len; i++){=0A=
            var c =3D config[i];=0A=
            if(typeof c.renderer =3D=3D "string"){=0A=
                c.renderer =3D Ext.util.Format[c.renderer];=0A=
            }=0A=
            if(typeof c.id =3D=3D "undefined"){=0A=
                c.id =3D i;=0A=
            }=0A=
            if(c.editor && c.editor.isFormField){=0A=
                c.editor =3D new Ext.grid.GridEditor(c.editor);=0A=
            }=0A=
            this.lookup[c.id] =3D c;=0A=
        }=0A=
        if(!initial){=0A=
            this.fireEvent('configchange', this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getColumnById : function(id){=0A=
        return this.lookup[id];=0A=
    },=0A=
=0A=
    =0A=
    getIndexById : function(id){=0A=
        for(var i =3D 0, len =3D this.config.length; i < len; i++){=0A=
            if(this.config[i].id =3D=3D id){=0A=
                return i;=0A=
            }=0A=
        }=0A=
        return -1;=0A=
    },=0A=
=0A=
        moveColumn : function(oldIndex, newIndex){=0A=
        var c =3D this.config[oldIndex];=0A=
        this.config.splice(oldIndex, 1);=0A=
        this.config.splice(newIndex, 0, c);=0A=
        this.dataMap =3D null;=0A=
        this.fireEvent("columnmoved", this, oldIndex, newIndex);=0A=
    },=0A=
=0A=
        isLocked : function(colIndex){=0A=
        return this.config[colIndex].locked =3D=3D=3D true;=0A=
    },=0A=
=0A=
        setLocked : function(colIndex, value, suppressEvent){=0A=
        if(this.isLocked(colIndex) =3D=3D value){=0A=
            return;=0A=
        }=0A=
        this.config[colIndex].locked =3D value;=0A=
        if(!suppressEvent){=0A=
            this.fireEvent("columnlockchange", this, colIndex, value);=0A=
        }=0A=
    },=0A=
=0A=
        getTotalLockedWidth : function(){=0A=
        var totalWidth =3D 0;=0A=
        for(var i =3D 0; i < this.config.length; i++){=0A=
            if(this.isLocked(i) && !this.isHidden(i)){=0A=
                this.totalWidth +=3D this.getColumnWidth(i);=0A=
            }=0A=
        }=0A=
        return totalWidth;=0A=
    },=0A=
=0A=
        getLockedCount : function(){=0A=
        for(var i =3D 0, len =3D this.config.length; i < len; i++){=0A=
            if(!this.isLocked(i)){=0A=
                return i;=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getColumnCount : function(visibleOnly){=0A=
        if(visibleOnly =3D=3D=3D true){=0A=
            var c =3D 0;=0A=
            for(var i =3D 0, len =3D this.config.length; i < len; i++){=0A=
                if(!this.isHidden(i)){=0A=
                    c++;=0A=
                }=0A=
            }=0A=
            return c;=0A=
        }=0A=
        return this.config.length;=0A=
    },=0A=
=0A=
    =0A=
    getColumnsBy : function(fn, scope){=0A=
        var r =3D [];=0A=
        for(var i =3D 0, len =3D this.config.length; i < len; i++){=0A=
            var c =3D this.config[i];=0A=
            if(fn.call(scope||this, c, i) =3D=3D=3D true){=0A=
                r[r.length] =3D c;=0A=
            }=0A=
        }=0A=
        return r;=0A=
    },=0A=
=0A=
    =0A=
    isSortable : function(col){=0A=
        if(typeof this.config[col].sortable =3D=3D "undefined"){=0A=
            return this.defaultSortable;=0A=
        }=0A=
        return this.config[col].sortable;=0A=
    },=0A=
=0A=
    =0A=
    isMenuDisabled : function(col){=0A=
        return !!this.config[col].menuDisabled;=0A=
    },=0A=
=0A=
    =0A=
    getRenderer : function(col){=0A=
        if(!this.config[col].renderer){=0A=
            return Ext.grid.ColumnModel.defaultRenderer;=0A=
        }=0A=
        return this.config[col].renderer;=0A=
    },=0A=
=0A=
    =0A=
    setRenderer : function(col, fn){=0A=
        this.config[col].renderer =3D fn;=0A=
    },=0A=
=0A=
    =0A=
    getColumnWidth : function(col){=0A=
        return this.config[col].width || this.defaultWidth;=0A=
    },=0A=
=0A=
    =0A=
    setColumnWidth : function(col, width, suppressEvent){=0A=
        this.config[col].width =3D width;=0A=
        this.totalWidth =3D null;=0A=
        if(!suppressEvent){=0A=
             this.fireEvent("widthchange", this, col, width);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getTotalWidth : function(includeHidden){=0A=
        if(!this.totalWidth){=0A=
            this.totalWidth =3D 0;=0A=
            for(var i =3D 0, len =3D this.config.length; i < len; i++){=0A=
                if(includeHidden || !this.isHidden(i)){=0A=
                    this.totalWidth +=3D this.getColumnWidth(i);=0A=
                }=0A=
            }=0A=
        }=0A=
        return this.totalWidth;=0A=
    },=0A=
=0A=
    =0A=
    getColumnHeader : function(col){=0A=
        return this.config[col].header;=0A=
    },=0A=
=0A=
    =0A=
    setColumnHeader : function(col, header){=0A=
        this.config[col].header =3D header;=0A=
        this.fireEvent("headerchange", this, col, header);=0A=
    },=0A=
=0A=
    =0A=
    getColumnTooltip : function(col){=0A=
            return this.config[col].tooltip;=0A=
    },=0A=
    =0A=
    setColumnTooltip : function(col, tooltip){=0A=
            this.config[col].tooltip =3D tooltip;=0A=
    },=0A=
=0A=
    =0A=
    getDataIndex : function(col){=0A=
        return this.config[col].dataIndex;=0A=
    },=0A=
=0A=
    =0A=
    setDataIndex : function(col, dataIndex){=0A=
        this.config[col].dataIndex =3D dataIndex;=0A=
    },=0A=
=0A=
    =0A=
    findColumnIndex : function(dataIndex){=0A=
        var c =3D this.config;=0A=
        for(var i =3D 0, len =3D c.length; i < len; i++){=0A=
            if(c[i].dataIndex =3D=3D dataIndex){=0A=
                return i;=0A=
            }=0A=
        }=0A=
        return -1;=0A=
    },=0A=
=0A=
    =0A=
    isCellEditable : function(colIndex, rowIndex){=0A=
        return (this.config[colIndex].editable || (typeof =
this.config[colIndex].editable =3D=3D "undefined" && =
this.config[colIndex].editor)) ? true : false;=0A=
    },=0A=
=0A=
    =0A=
    getCellEditor : function(colIndex, rowIndex){=0A=
        return this.config[colIndex].editor;=0A=
    },=0A=
=0A=
    =0A=
    setEditable : function(col, editable){=0A=
        this.config[col].editable =3D editable;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    isHidden : function(colIndex){=0A=
        return this.config[colIndex].hidden;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    isFixed : function(colIndex){=0A=
        return this.config[colIndex].fixed;=0A=
    },=0A=
=0A=
    =0A=
    isResizable : function(colIndex){=0A=
        return colIndex >=3D 0 && this.config[colIndex].resizable =
!=3D=3D false && this.config[colIndex].fixed !=3D=3D true;=0A=
    },=0A=
    =0A=
    setHidden : function(colIndex, hidden){=0A=
        var c =3D this.config[colIndex];=0A=
        if(c.hidden !=3D=3D hidden){=0A=
            c.hidden =3D hidden;=0A=
            this.totalWidth =3D null;=0A=
            this.fireEvent("hiddenchange", this, colIndex, hidden);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setEditor : function(col, editor){=0A=
        this.config[col].editor =3D editor;=0A=
    }=0A=
});=0A=
=0A=
Ext.grid.ColumnModel.defaultRenderer =3D function(value){=0A=
	if(typeof value =3D=3D "string" && value.length < 1){=0A=
	    return "&#160;";=0A=
	}=0A=
	return value;=0A=
};=0A=
=0A=
Ext.grid.DefaultColumnModel =3D Ext.grid.ColumnModel;=0A=
=0A=

Ext.grid.AbstractSelectionModel =3D function(){
    this.locked =3D false;
    Ext.grid.AbstractSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.grid.AbstractSelectionModel, Ext.util.Observable,  {
   =20
    init : function(grid){
        this.grid =3D grid;
        this.initEvents();
    },

   =20
    lock : function(){
        this.locked =3D true;
    },

   =20
    unlock : function(){
        this.locked =3D false;
    },

   =20
    isLocked : function(){
        return this.locked;
    }
});=0A=
=0A=
Ext.grid.RowSelectionModel =3D function(config){=0A=
    Ext.apply(this, config);=0A=
    this.selections =3D new Ext.util.MixedCollection(false, function(o){=0A=
        return o.id;=0A=
    });=0A=
=0A=
    this.last =3D false;=0A=
    this.lastActive =3D false;=0A=
=0A=
    this.addEvents(=0A=
        =0A=
	    "selectionchange",=0A=
        =0A=
	    "beforerowselect",=0A=
        =0A=
	    "rowselect",=0A=
        =0A=
	    "rowdeselect"=0A=
    );=0A=
=0A=
    Ext.grid.RowSelectionModel.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.grid.RowSelectionModel, Ext.grid.AbstractSelectionModel,  =
{=0A=
    =0A=
    singleSelect : false,=0A=
=0A=
	=0A=
        initEvents : function(){=0A=
=0A=
        if(!this.grid.enableDragDrop && !this.grid.enableDrag){=0A=
            this.grid.on("rowmousedown", this.handleMouseDown, this);=0A=
        }else{             this.grid.on("rowclick", function(grid, =
rowIndex, e) {=0A=
                if(e.button =3D=3D=3D 0 && !e.shiftKey && !e.ctrlKey) {=0A=
                    this.selectRow(rowIndex, false);=0A=
                    grid.view.focusRow(rowIndex);=0A=
                }=0A=
            }, this);=0A=
        }=0A=
=0A=
        this.rowNav =3D new Ext.KeyNav(this.grid.getGridEl(), {=0A=
            "up" : function(e){=0A=
                if(!e.shiftKey){=0A=
                    this.selectPrevious(e.shiftKey);=0A=
                }else if(this.last !=3D=3D false && this.lastActive =
!=3D=3D false){=0A=
                    var last =3D this.last;=0A=
                    this.selectRange(this.last,  this.lastActive-1);=0A=
                    this.grid.getView().focusRow(this.lastActive);=0A=
                    if(last !=3D=3D false){=0A=
                        this.last =3D last;=0A=
                    }=0A=
                }else{=0A=
                    this.selectFirstRow();=0A=
                }=0A=
            },=0A=
            "down" : function(e){=0A=
                if(!e.shiftKey){=0A=
                    this.selectNext(e.shiftKey);=0A=
                }else if(this.last !=3D=3D false && this.lastActive =
!=3D=3D false){=0A=
                    var last =3D this.last;=0A=
                    this.selectRange(this.last,  this.lastActive+1);=0A=
                    this.grid.getView().focusRow(this.lastActive);=0A=
                    if(last !=3D=3D false){=0A=
                        this.last =3D last;=0A=
                    }=0A=
                }else{=0A=
                    this.selectFirstRow();=0A=
                }=0A=
            },=0A=
            scope: this=0A=
        });=0A=
=0A=
        var view =3D this.grid.view;=0A=
        view.on("refresh", this.onRefresh, this);=0A=
        view.on("rowupdated", this.onRowUpdated, this);=0A=
        view.on("rowremoved", this.onRemove, this);=0A=
    },=0A=
=0A=
        onRefresh : function(){=0A=
        var ds =3D this.grid.store, index;=0A=
        var s =3D this.getSelections();=0A=
        this.clearSelections(true);=0A=
        for(var i =3D 0, len =3D s.length; i < len; i++){=0A=
            var r =3D s[i];=0A=
            if((index =3D ds.indexOfId(r.id)) !=3D -1){=0A=
                this.selectRow(index, true);=0A=
            }=0A=
        }=0A=
        if(s.length !=3D this.selections.getCount()){=0A=
            this.fireEvent("selectionchange", this);=0A=
        }=0A=
    },=0A=
=0A=
        onRemove : function(v, index, r){=0A=
        if(this.selections.remove(r) !=3D=3D false){=0A=
            this.fireEvent('selectionchange', this);=0A=
        }=0A=
    },=0A=
=0A=
        onRowUpdated : function(v, index, r){=0A=
        if(this.isSelected(r)){=0A=
            v.onRowSelect(index);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    selectRecords : function(records, keepExisting){=0A=
        if(!keepExisting){=0A=
            this.clearSelections();=0A=
        }=0A=
        var ds =3D this.grid.store;=0A=
        for(var i =3D 0, len =3D records.length; i < len; i++){=0A=
            this.selectRow(ds.indexOf(records[i]), true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    getCount : function(){=0A=
        return this.selections.length;=0A=
    },=0A=
=0A=
    =0A=
    selectFirstRow : function(){=0A=
        this.selectRow(0);=0A=
    },=0A=
=0A=
    =0A=
    selectLastRow : function(keepExisting){=0A=
        this.selectRow(this.grid.store.getCount() - 1, keepExisting);=0A=
    },=0A=
=0A=
    =0A=
    selectNext : function(keepExisting){=0A=
        if(this.hasNext()){=0A=
            this.selectRow(this.last+1, keepExisting);=0A=
            this.grid.getView().focusRow(this.last);=0A=
			return true;=0A=
        }=0A=
		return false;=0A=
    },=0A=
=0A=
    =0A=
    selectPrevious : function(keepExisting){=0A=
        if(this.hasPrevious()){=0A=
            this.selectRow(this.last-1, keepExisting);=0A=
            this.grid.getView().focusRow(this.last);=0A=
			return true;=0A=
        }=0A=
		return false;=0A=
    },=0A=
=0A=
    =0A=
    hasNext : function(){=0A=
        return this.last !=3D=3D false && (this.last+1) < =
this.grid.store.getCount();=0A=
    },=0A=
=0A=
    =0A=
    hasPrevious : function(){=0A=
        return !!this.last;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    getSelections : function(){=0A=
        return [].concat(this.selections.items);=0A=
    },=0A=
=0A=
    =0A=
    getSelected : function(){=0A=
        return this.selections.itemAt(0);=0A=
    },=0A=
=0A=
    =0A=
    each : function(fn, scope){=0A=
        var s =3D this.getSelections();=0A=
        for(var i =3D 0, len =3D s.length; i < len; i++){=0A=
            if(fn.call(scope || this, s[i], i) =3D=3D=3D false){=0A=
                return false;=0A=
            }=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
    =0A=
    clearSelections : function(fast){=0A=
        if(this.locked) return;=0A=
        if(fast !=3D=3D true){=0A=
            var ds =3D this.grid.store;=0A=
            var s =3D this.selections;=0A=
            s.each(function(r){=0A=
                this.deselectRow(ds.indexOfId(r.id));=0A=
            }, this);=0A=
            s.clear();=0A=
        }else{=0A=
            this.selections.clear();=0A=
        }=0A=
        this.last =3D false;=0A=
    },=0A=
=0A=
=0A=
    =0A=
    selectAll : function(){=0A=
        if(this.locked) return;=0A=
        this.selections.clear();=0A=
        for(var i =3D 0, len =3D this.grid.store.getCount(); i < len; =
i++){=0A=
            this.selectRow(i, true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    hasSelection : function(){=0A=
        return this.selections.length > 0;=0A=
    },=0A=
=0A=
    =0A=
    isSelected : function(index){=0A=
        var r =3D typeof index =3D=3D "number" ? =
this.grid.store.getAt(index) : index;=0A=
        return (r && this.selections.key(r.id) ? true : false);=0A=
    },=0A=
=0A=
    =0A=
    isIdSelected : function(id){=0A=
        return (this.selections.key(id) ? true : false);=0A=
    },=0A=
=0A=
        handleMouseDown : function(g, rowIndex, e){=0A=
        if(e.button !=3D=3D 0 || this.isLocked()){=0A=
            return;=0A=
        };=0A=
        var view =3D this.grid.getView();=0A=
        if(e.shiftKey && this.last !=3D=3D false){=0A=
            var last =3D this.last;=0A=
            this.selectRange(last, rowIndex, e.ctrlKey);=0A=
            this.last =3D last;             view.focusRow(rowIndex);=0A=
        }else{=0A=
            var isSelected =3D this.isSelected(rowIndex);=0A=
            if(e.ctrlKey && isSelected){=0A=
                this.deselectRow(rowIndex);=0A=
            }else if(!isSelected || this.getCount() > 1){=0A=
                this.selectRow(rowIndex, e.ctrlKey || e.shiftKey);=0A=
                view.focusRow(rowIndex);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    selectRows : function(rows, keepExisting){=0A=
        if(!keepExisting){=0A=
            this.clearSelections();=0A=
        }=0A=
        for(var i =3D 0, len =3D rows.length; i < len; i++){=0A=
            this.selectRow(rows[i], true);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    selectRange : function(startRow, endRow, keepExisting){=0A=
        if(this.locked) return;=0A=
        if(!keepExisting){=0A=
            this.clearSelections();=0A=
        }=0A=
        if(startRow <=3D endRow){=0A=
            for(var i =3D startRow; i <=3D endRow; i++){=0A=
                this.selectRow(i, true);=0A=
            }=0A=
        }else{=0A=
            for(var i =3D startRow; i >=3D endRow; i--){=0A=
                this.selectRow(i, true);=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    deselectRange : function(startRow, endRow, preventViewNotify){=0A=
        if(this.locked) return;=0A=
        for(var i =3D startRow; i <=3D endRow; i++){=0A=
            this.deselectRow(i, preventViewNotify);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    selectRow : function(index, keepExisting, preventViewNotify){=0A=
        if(this.locked || (index < 0 || index >=3D =
this.grid.store.getCount())) return;=0A=
        var r =3D this.grid.store.getAt(index);=0A=
        if(r && this.fireEvent("beforerowselect", this, index, =
keepExisting, r) !=3D=3D false){=0A=
            if(!keepExisting || this.singleSelect){=0A=
                this.clearSelections();=0A=
            }=0A=
            this.selections.add(r);=0A=
            this.last =3D this.lastActive =3D index;=0A=
            if(!preventViewNotify){=0A=
                this.grid.getView().onRowSelect(index);=0A=
            }=0A=
            this.fireEvent("rowselect", this, index, r);=0A=
            this.fireEvent("selectionchange", this);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    deselectRow : function(index, preventViewNotify){=0A=
        if(this.locked) return;=0A=
        if(this.last =3D=3D index){=0A=
            this.last =3D false;=0A=
        }=0A=
        if(this.lastActive =3D=3D index){=0A=
            this.lastActive =3D false;=0A=
        }=0A=
        var r =3D this.grid.store.getAt(index);=0A=
        if(r){=0A=
            this.selections.remove(r);=0A=
            if(!preventViewNotify){=0A=
                this.grid.getView().onRowDeselect(index);=0A=
            }=0A=
            this.fireEvent("rowdeselect", this, index, r);=0A=
            this.fireEvent("selectionchange", this);=0A=
        }=0A=
    },=0A=
=0A=
        restoreLast : function(){=0A=
        if(this._last){=0A=
            this.last =3D this._last;=0A=
        }=0A=
    },=0A=
=0A=
        acceptsNav : function(row, col, cm){=0A=
        return !cm.isHidden(col) && cm.isCellEditable(col, row);=0A=
    },=0A=
=0A=
        onEditorKey : function(field, e){=0A=
        var k =3D e.getKey(), newCell, g =3D this.grid, ed =3D =
g.activeEditor;=0A=
        var shift =3D e.shiftKey;=0A=
        if(k =3D=3D e.TAB){=0A=
            e.stopEvent();=0A=
            ed.completeEdit();=0A=
            if(shift){=0A=
                newCell =3D g.walkCells(ed.row, ed.col-1, -1, =
this.acceptsNav, this);=0A=
            }else{=0A=
                newCell =3D g.walkCells(ed.row, ed.col+1, 1, =
this.acceptsNav, this);=0A=
            }=0A=
        }else if(k =3D=3D e.ENTER){=0A=
            e.stopEvent();=0A=
            ed.completeEdit();=0A=
			if(this.moveEditorOnEnter !=3D=3D false){=0A=
				if(shift){=0A=
					newCell =3D g.walkCells(ed.row - 1, ed.col, -1, this.acceptsNav, =
this);=0A=
				}else{=0A=
					newCell =3D g.walkCells(ed.row + 1, ed.col, 1, this.acceptsNav, =
this);=0A=
				}=0A=
			}=0A=
        }else if(k =3D=3D e.ESC){=0A=
            ed.cancelEdit();=0A=
        }=0A=
        if(newCell){=0A=
            g.startEditing(newCell[0], newCell[1]);=0A=
        }=0A=
    }=0A=
});=0A=
=0A=
Ext.grid.CellSelectionModel =3D function(config){=0A=
    Ext.apply(this, config);=0A=
=0A=
    this.selection =3D null;=0A=
=0A=
    this.addEvents(=0A=
        =0A=
	    "beforecellselect",=0A=
        =0A=
	    "cellselect",=0A=
        =0A=
	    "selectionchange"=0A=
    );=0A=
=0A=
    Ext.grid.CellSelectionModel.superclass.constructor.call(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.grid.CellSelectionModel, Ext.grid.AbstractSelectionModel, =
 {=0A=
=0A=
    =0A=
    initEvents : function(){=0A=
        this.grid.on("cellmousedown", this.handleMouseDown, this);=0A=
        this.grid.getGridEl().on(Ext.isIE || Ext.isSafari3 ? "keydown" : =
"keypress", this.handleKeyDown, this);=0A=
        var view =3D this.grid.view;=0A=
        view.on("refresh", this.onViewChange, this);=0A=
        view.on("rowupdated", this.onRowUpdated, this);=0A=
        view.on("beforerowremoved", this.clearSelections, this);=0A=
        view.on("beforerowsinserted", this.clearSelections, this);=0A=
        if(this.grid.isEditor){=0A=
            this.grid.on("beforeedit", this.beforeEdit,  this);=0A=
        }=0A=
    },=0A=
=0A=
	    beforeEdit : function(e){=0A=
        this.select(e.row, e.column, false, true, e.record);=0A=
    },=0A=
=0A=
	    onRowUpdated : function(v, index, r){=0A=
        if(this.selection && this.selection.record =3D=3D r){=0A=
            v.onCellSelect(index, this.selection.cell[1]);=0A=
        }=0A=
    },=0A=
=0A=
	    onViewChange : function(){=0A=
        this.clearSelections(true);=0A=
    },=0A=
=0A=
	=0A=
    getSelectedCell : function(){=0A=
        return this.selection ? this.selection.cell : null;=0A=
    },=0A=
=0A=
    =0A=
    clearSelections : function(preventNotify){=0A=
        var s =3D this.selection;=0A=
        if(s){=0A=
            if(preventNotify !=3D=3D true){=0A=
                this.grid.view.onCellDeselect(s.cell[0], s.cell[1]);=0A=
            }=0A=
            this.selection =3D null;=0A=
            this.fireEvent("selectionchange", this, null);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    hasSelection : function(){=0A=
        return this.selection ? true : false;=0A=
    },=0A=
=0A=
    =0A=
    handleMouseDown : function(g, row, cell, e){=0A=
        if(e.button !=3D=3D 0 || this.isLocked()){=0A=
            return;=0A=
        };=0A=
        this.select(row, cell);=0A=
    },=0A=
=0A=
    =0A=
    select : function(rowIndex, colIndex, preventViewNotify, =
preventFocus,  r){=0A=
        if(this.fireEvent("beforecellselect", this, rowIndex, colIndex) =
!=3D=3D false){=0A=
            this.clearSelections();=0A=
            r =3D r || this.grid.store.getAt(rowIndex);=0A=
            this.selection =3D {=0A=
                record : r,=0A=
                cell : [rowIndex, colIndex]=0A=
            };=0A=
            if(!preventViewNotify){=0A=
                var v =3D this.grid.getView();=0A=
                v.onCellSelect(rowIndex, colIndex);=0A=
                if(preventFocus !=3D=3D true){=0A=
                    v.focusCell(rowIndex, colIndex);=0A=
                }=0A=
            }=0A=
            this.fireEvent("cellselect", this, rowIndex, colIndex);=0A=
            this.fireEvent("selectionchange", this, this.selection);=0A=
        }=0A=
    },=0A=
=0A=
	    isSelectable : function(rowIndex, colIndex, cm){=0A=
        return !cm.isHidden(colIndex);=0A=
    },=0A=
=0A=
    =0A=
    handleKeyDown : function(e){=0A=
        if(!e.isNavKeyPress()){=0A=
            return;=0A=
        }=0A=
        var g =3D this.grid, s =3D this.selection;=0A=
        if(!s){=0A=
            e.stopEvent();=0A=
            var cell =3D g.walkCells(0, 0, 1, this.isSelectable,  this);=0A=
            if(cell){=0A=
                this.select(cell[0], cell[1]);=0A=
            }=0A=
            return;=0A=
        }=0A=
        var sm =3D this;=0A=
        var walk =3D function(row, col, step){=0A=
            return g.walkCells(row, col, step, sm.isSelectable,  sm);=0A=
        };=0A=
        var k =3D e.getKey(), r =3D s.cell[0], c =3D s.cell[1];=0A=
        var newCell;=0A=
=0A=
        switch(k){=0A=
             case e.TAB:=0A=
                 if(e.shiftKey){=0A=
                     newCell =3D walk(r, c-1, -1);=0A=
                 }else{=0A=
                     newCell =3D walk(r, c+1, 1);=0A=
                 }=0A=
             break;=0A=
             case e.DOWN:=0A=
                 newCell =3D walk(r+1, c, 1);=0A=
             break;=0A=
             case e.UP:=0A=
                 newCell =3D walk(r-1, c, -1);=0A=
             break;=0A=
             case e.RIGHT:=0A=
                 newCell =3D walk(r, c+1, 1);=0A=
             break;=0A=
             case e.LEFT:=0A=
                 newCell =3D walk(r, c-1, -1);=0A=
             break;=0A=
             case e.ENTER:=0A=
                 if(g.isEditor && !g.editing){=0A=
                    g.startEditing(r, c);=0A=
                    e.stopEvent();=0A=
                    return;=0A=
                }=0A=
             break;=0A=
        };=0A=
        if(newCell){=0A=
            this.select(newCell[0], newCell[1]);=0A=
            e.stopEvent();=0A=
        }=0A=
    },=0A=
=0A=
    acceptsNav : function(row, col, cm){=0A=
        return !cm.isHidden(col) && cm.isCellEditable(col, row);=0A=
    },=0A=
=0A=
    onEditorKey : function(field, e){=0A=
        var k =3D e.getKey(), newCell, g =3D this.grid, ed =3D =
g.activeEditor;=0A=
        if(k =3D=3D e.TAB){=0A=
            if(e.shiftKey){=0A=
                newCell =3D g.walkCells(ed.row, ed.col-1, -1, =
this.acceptsNav, this);=0A=
            }else{=0A=
                newCell =3D g.walkCells(ed.row, ed.col+1, 1, =
this.acceptsNav, this);=0A=
            }=0A=
            e.stopEvent();=0A=
        }else if(k =3D=3D e.ENTER){=0A=
            ed.completeEdit();=0A=
            e.stopEvent();=0A=
        }else if(k =3D=3D e.ESC){=0A=
        	e.stopEvent();=0A=
            ed.cancelEdit();=0A=
        }=0A=
        if(newCell){=0A=
            g.startEditing(newCell[0], newCell[1]);=0A=
        }=0A=
    }=0A=
});=0A=
=0A=
Ext.grid.EditorGridPanel =3D Ext.extend(Ext.grid.GridPanel, {=0A=
    =0A=
    clicksToEdit: 2,=0A=
=0A=
        isEditor : true,=0A=
        detectEdit: false,=0A=
=0A=
	=0A=
	autoEncode : false,=0A=
=0A=
	=0A=
        trackMouseOver: false,     =0A=
        initComponent : function(){=0A=
        Ext.grid.EditorGridPanel.superclass.initComponent.call(this);=0A=
=0A=
        if(!this.selModel){=0A=
            =0A=
            this.selModel =3D new Ext.grid.CellSelectionModel();=0A=
        }=0A=
=0A=
        this.activeEditor =3D null;=0A=
=0A=
	    this.addEvents(=0A=
            =0A=
            "beforeedit",=0A=
            =0A=
            "afteredit",=0A=
            =0A=
            "validateedit"=0A=
        );=0A=
    },=0A=
=0A=
        initEvents : function(){=0A=
        Ext.grid.EditorGridPanel.superclass.initEvents.call(this);=0A=
        =0A=
        this.on("bodyscroll", this.stopEditing, this, [true]);=0A=
=0A=
        if(this.clicksToEdit =3D=3D 1){=0A=
            this.on("cellclick", this.onCellDblClick, this);=0A=
        }else {=0A=
            if(this.clicksToEdit =3D=3D 'auto' && this.view.mainBody){=0A=
                this.view.mainBody.on("mousedown", this.onAutoEditClick, =
this);=0A=
            }=0A=
            this.on("celldblclick", this.onCellDblClick, this);=0A=
        }=0A=
        this.getGridEl().addClass("xedit-grid");=0A=
    },=0A=
=0A=
        onCellDblClick : function(g, row, col){=0A=
        this.startEditing(row, col);=0A=
    },=0A=
=0A=
        onAutoEditClick : function(e, t){=0A=
        if(e.button !=3D=3D 0){=0A=
            return;=0A=
        }=0A=
        var row =3D this.view.findRowIndex(t);=0A=
        var col =3D this.view.findCellIndex(t);=0A=
        if(row !=3D=3D false && col !=3D=3D false){=0A=
            this.stopEditing();=0A=
            if(this.selModel.getSelectedCell){                 var sc =
=3D this.selModel.getSelectedCell();=0A=
                if(sc && sc.cell[0] =3D=3D=3D row && sc.cell[1] =
=3D=3D=3D col){=0A=
                    this.startEditing(row, col);=0A=
                }=0A=
            }else{=0A=
                if(this.selModel.isSelected(row)){=0A=
                    this.startEditing(row, col);=0A=
                }=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        onEditComplete : function(ed, value, startValue){=0A=
        this.editing =3D false;=0A=
        this.activeEditor =3D null;=0A=
        ed.un("specialkey", this.selModel.onEditorKey, this.selModel);=0A=
		var r =3D ed.record;=0A=
        var field =3D this.colModel.getDataIndex(ed.col);=0A=
        value =3D this.postEditValue(value, startValue, r, field);=0A=
        if(String(value) !=3D=3D String(startValue)){=0A=
            var e =3D {=0A=
                grid: this,=0A=
                record: r,=0A=
                field: field,=0A=
                originalValue: startValue,=0A=
                value: value,=0A=
                row: ed.row,=0A=
                column: ed.col,=0A=
                cancel:false=0A=
            };=0A=
            if(this.fireEvent("validateedit", e) !=3D=3D false && =
!e.cancel){=0A=
                r.set(field, e.value);=0A=
                delete e.cancel;=0A=
                this.fireEvent("afteredit", e);=0A=
            }=0A=
        }=0A=
        this.view.focusCell(ed.row, ed.col);=0A=
    },=0A=
=0A=
    =0A=
    startEditing : function(row, col){=0A=
        this.stopEditing();=0A=
        if(this.colModel.isCellEditable(col, row)){=0A=
            this.view.ensureVisible(row, col, true);=0A=
            var r =3D this.store.getAt(row);=0A=
            var field =3D this.colModel.getDataIndex(col);=0A=
            var e =3D {=0A=
                grid: this,=0A=
                record: r,=0A=
                field: field,=0A=
                value: r.data[field],=0A=
                row: row,=0A=
                column: col,=0A=
                cancel:false=0A=
            };=0A=
            if(this.fireEvent("beforeedit", e) !=3D=3D false && =
!e.cancel){=0A=
                this.editing =3D true;=0A=
                var ed =3D this.colModel.getCellEditor(col, row);=0A=
                if(!ed.rendered){=0A=
                    ed.render(this.view.getEditorParent(ed));=0A=
                }=0A=
                (function(){                     ed.row =3D row;=0A=
                    ed.col =3D col;=0A=
                    ed.record =3D r;=0A=
                    ed.on("complete", this.onEditComplete, this, =
{single: true});=0A=
                    ed.on("specialkey", this.selModel.onEditorKey, =
this.selModel);=0A=
                    this.activeEditor =3D ed;=0A=
                    var v =3D this.preEditValue(r, field);=0A=
                    ed.startEdit(this.view.getCell(row, col), v);=0A=
                }).defer(50, this);=0A=
            }=0A=
        }=0A=
    },=0A=
    =0A=
	preEditValue : function(r, field){=0A=
		return this.autoEncode && typeof value =3D=3D 'string' ? =
Ext.util.Format.htmlDecode(r.data[field]) : r.data[field];=0A=
	},=0A=
	=0A=
	postEditValue : function(value, originalValue, r, field){=0A=
		return this.autoEncode && typeof value =3D=3D 'string' ? =
Ext.util.Format.htmlEncode(value) : value;=0A=
	},=0A=
	    =0A=
    =0A=
    stopEditing : function(cancel){=0A=
        if(this.activeEditor){=0A=
            this.activeEditor[cancel =3D=3D=3D true ? 'cancelEdit' : =
'completeEdit']();=0A=
        }=0A=
        this.activeEditor =3D null;=0A=
    }=0A=
});=0A=
Ext.reg('editorgrid', Ext.grid.EditorGridPanel);=0A=
Ext.grid.GridEditor =3D function(field, config){=0A=
    Ext.grid.GridEditor.superclass.constructor.call(this, field, config);=0A=
    field.monitorTab =3D false;=0A=
};=0A=
=0A=
Ext.extend(Ext.grid.GridEditor, Ext.Editor, {=0A=
    alignment: "tl-tl",=0A=
    autoSize: "width",=0A=
    hideEl : false,=0A=
    cls: "x-small-editor x-grid-editor",=0A=
    shim:false,=0A=
    shadow:false=0A=
});=0A=
=0A=
Ext.grid.PropertyRecord =3D Ext.data.Record.create([=0A=
    {name:'name',type:'string'}, 'value'=0A=
]);=0A=
=0A=
=0A=
Ext.grid.PropertyStore =3D function(grid, source){=0A=
    this.grid =3D grid;=0A=
    this.store =3D new Ext.data.Store({=0A=
        recordType : Ext.grid.PropertyRecord=0A=
    });=0A=
    this.store.on('update', this.onUpdate,  this);=0A=
    if(source){=0A=
        this.setSource(source);=0A=
    }=0A=
    Ext.grid.PropertyStore.superclass.constructor.call(this);=0A=
};=0A=
Ext.extend(Ext.grid.PropertyStore, Ext.util.Observable, {=0A=
        setSource : function(o){=0A=
        this.source =3D o;=0A=
        this.store.removeAll();=0A=
        var data =3D [];=0A=
        for(var k in o){=0A=
            if(this.isEditableValue(o[k])){=0A=
                data.push(new Ext.grid.PropertyRecord({name: k, value: =
o[k]}, k));=0A=
            }=0A=
        }=0A=
        this.store.loadRecords({records: data}, {}, true);=0A=
    },=0A=
=0A=
        onUpdate : function(ds, record, type){=0A=
        if(type =3D=3D Ext.data.Record.EDIT){=0A=
            var v =3D record.data['value'];=0A=
            var oldValue =3D record.modified['value'];=0A=
            if(this.grid.fireEvent('beforepropertychange', this.source, =
record.id, v, oldValue) !=3D=3D false){=0A=
                this.source[record.id] =3D v;=0A=
                record.commit();=0A=
                this.grid.fireEvent('propertychange', this.source, =
record.id, v, oldValue);=0A=
            }else{=0A=
                record.reject();=0A=
            }=0A=
        }=0A=
    },=0A=
=0A=
        getProperty : function(row){=0A=
       return this.store.getAt(row);=0A=
    },=0A=
=0A=
        isEditableValue: function(val){=0A=
        if(Ext.isDate(val)){=0A=
            return true;=0A=
        }else if(typeof val =3D=3D 'object' || typeof val =3D=3D =
'function'){=0A=
            return false;=0A=
        }=0A=
        return true;=0A=
    },=0A=
=0A=
        setValue : function(prop, value){=0A=
        this.source[prop] =3D value;=0A=
        this.store.getById(prop).set('value', value);=0A=
    },=0A=
=0A=
        getSource : function(){=0A=
        return this.source;=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.grid.PropertyColumnModel =3D function(grid, store){=0A=
    this.grid =3D grid;=0A=
    var g =3D Ext.grid;=0A=
    g.PropertyColumnModel.superclass.constructor.call(this, [=0A=
        {header: this.nameText, width:50, sortable: true, =
dataIndex:'name', id: 'name', menuDisabled:true},=0A=
        {header: this.valueText, width:50, resizable:false, dataIndex: =
'value', id: 'value', menuDisabled:true}=0A=
    ]);=0A=
    this.store =3D store;=0A=
    this.bselect =3D Ext.DomHelper.append(document.body, {=0A=
        tag: 'select', cls: 'x-grid-editor x-hide-display', children: [=0A=
            {tag: 'option', value: 'true', html: 'true'},=0A=
            {tag: 'option', value: 'false', html: 'false'}=0A=
        ]=0A=
    });=0A=
    var f =3D Ext.form;=0A=
=0A=
    var bfield =3D new f.Field({=0A=
        el:this.bselect,=0A=
        bselect : this.bselect,=0A=
        autoShow: true,=0A=
        getValue : function(){=0A=
            return this.bselect.value =3D=3D 'true';=0A=
        }=0A=
    });=0A=
    this.editors =3D {=0A=
        'date' : new g.GridEditor(new f.DateField({selectOnFocus:true})),=0A=
        'string' : new g.GridEditor(new =
f.TextField({selectOnFocus:true})),=0A=
        'number' : new g.GridEditor(new =
f.NumberField({selectOnFocus:true, style:'text-align:left;'})),=0A=
        'boolean' : new g.GridEditor(bfield)=0A=
    };=0A=
    this.renderCellDelegate =3D this.renderCell.createDelegate(this);=0A=
    this.renderPropDelegate =3D this.renderProp.createDelegate(this);=0A=
};=0A=
=0A=
Ext.extend(Ext.grid.PropertyColumnModel, Ext.grid.ColumnModel, {=0A=
        nameText : 'Name',=0A=
    valueText : 'Value',=0A=
    dateFormat : 'm/j/Y',=0A=
=0A=
        renderDate : function(dateVal){=0A=
        return dateVal.dateFormat(this.dateFormat);=0A=
    },=0A=
=0A=
        renderBool : function(bVal){=0A=
        return bVal ? 'true' : 'false';=0A=
    },=0A=
=0A=
        isCellEditable : function(colIndex, rowIndex){=0A=
        return colIndex =3D=3D 1;=0A=
    },=0A=
=0A=
        getRenderer : function(col){=0A=
        return col =3D=3D 1 ?=0A=
            this.renderCellDelegate : this.renderPropDelegate;=0A=
    },=0A=
=0A=
        renderProp : function(v){=0A=
        return this.getPropertyName(v);=0A=
    },=0A=
=0A=
        renderCell : function(val){=0A=
        var rv =3D val;=0A=
        if(Ext.isDate(val)){=0A=
            rv =3D this.renderDate(val);=0A=
        }else if(typeof val =3D=3D 'boolean'){=0A=
            rv =3D this.renderBool(val);=0A=
        }=0A=
        return Ext.util.Format.htmlEncode(rv);=0A=
    },=0A=
=0A=
        getPropertyName : function(name){=0A=
        var pn =3D this.grid.propertyNames;=0A=
        return pn && pn[name] ? pn[name] : name;=0A=
    },=0A=
=0A=
        getCellEditor : function(colIndex, rowIndex){=0A=
        var p =3D this.store.getProperty(rowIndex);=0A=
        var n =3D p.data['name'], val =3D p.data['value'];=0A=
        if(this.grid.customEditors[n]){=0A=
            return this.grid.customEditors[n];=0A=
        }=0A=
        if(Ext.isDate(val)){=0A=
            return this.editors['date'];=0A=
        }else if(typeof val =3D=3D 'number'){=0A=
            return this.editors['number'];=0A=
        }else if(typeof val =3D=3D 'boolean'){=0A=
            return this.editors['boolean'];=0A=
        }else{=0A=
            return this.editors['string'];=0A=
        }=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.grid.PropertyGrid =3D Ext.extend(Ext.grid.EditorGridPanel, {=0A=
    =0A=
    =0A=
=0A=
        enableColumnMove:false,=0A=
    stripeRows:false,=0A=
    trackMouseOver: false,=0A=
    clicksToEdit:1,=0A=
    enableHdMenu : false,=0A=
    viewConfig : {=0A=
        forceFit:true=0A=
    },=0A=
=0A=
        initComponent : function(){=0A=
        this.customEditors =3D this.customEditors || {};=0A=
        this.lastEditRow =3D null;=0A=
        var store =3D new Ext.grid.PropertyStore(this);=0A=
        this.propStore =3D store;=0A=
        var cm =3D new Ext.grid.PropertyColumnModel(this, store);=0A=
        store.store.sort('name', 'ASC');=0A=
        this.addEvents(=0A=
            =0A=
            'beforepropertychange',=0A=
            =0A=
            'propertychange'=0A=
        );=0A=
        this.cm =3D cm;=0A=
        this.ds =3D store.store;=0A=
        Ext.grid.PropertyGrid.superclass.initComponent.call(this);=0A=
=0A=
        this.selModel.on('beforecellselect', function(sm, rowIndex, =
colIndex){=0A=
            if(colIndex =3D=3D=3D 0){=0A=
                this.startEditing.defer(200, this, [rowIndex, 1]);=0A=
                return false;=0A=
            }=0A=
        }, this);=0A=
    },=0A=
=0A=
        onRender : function(){=0A=
        Ext.grid.PropertyGrid.superclass.onRender.apply(this, arguments);=0A=
=0A=
        this.getGridEl().addClass('x-props-grid');=0A=
    },=0A=
=0A=
        afterRender: function(){=0A=
        Ext.grid.PropertyGrid.superclass.afterRender.apply(this, =
arguments);=0A=
        if(this.source){=0A=
            this.setSource(this.source);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    setSource : function(source){=0A=
        this.propStore.setSource(source);=0A=
    },=0A=
=0A=
    =0A=
    getSource : function(){=0A=
        return this.propStore.getSource();=0A=
    }=0A=
});=0A=
Ext.reg("propertygrid", Ext.grid.PropertyGrid);=0A=
=0A=

Ext.grid.RowNumberer =3D function(config){
    Ext.apply(this, config);
    if(this.rowspan){
        this.renderer =3D this.renderer.createDelegate(this);
    }
};

Ext.grid.RowNumberer.prototype =3D {
   =20
    header: "",
   =20
    width: 23,
   =20
    sortable: false,

    =0A=
    fixed:true,
    menuDisabled:true,
    dataIndex: '',
    id: 'numberer',
    rowspan: undefined,

    =0A=
    renderer : function(v, p, record, rowIndex){
        if(this.rowspan){
            p.cellAttr =3D 'rowspan=3D"'+this.rowspan+'"';
        }
        return rowIndex+1;
    }
};=0A=

Ext.grid.CheckboxSelectionModel =3D =
Ext.extend(Ext.grid.RowSelectionModel, {
   =20
    header: '<div class=3D"x-grid3-hd-checker">&#160;</div>',
   =20
    width: 20,
   =20
    sortable: false,

    =0A=
    menuDisabled:true,
    fixed:true,
    dataIndex: '',
    id: 'checker',

    =0A=
    initEvents : function(){
        =
Ext.grid.CheckboxSelectionModel.superclass.initEvents.call(this);
        this.grid.on('render', function(){
            var view =3D this.grid.getView();
            view.mainBody.on('mousedown', this.onMouseDown, this);
            Ext.fly(view.innerHd).on('mousedown', this.onHdMouseDown, =
this);

        }, this);
    },

    =0A=
    onMouseDown : function(e, t){
        if(e.button =3D=3D=3D 0 && t.className =3D=3D =
'x-grid3-row-checker'){ =0A=
            e.stopEvent();
            var row =3D e.getTarget('.x-grid3-row');
            if(row){
                var index =3D row.rowIndex;
                if(this.isSelected(index)){
                    this.deselectRow(index);
                }else{
                    this.selectRow(index, true);
                }
            }
        }
    },

    =0A=
    onHdMouseDown : function(e, t){
        if(t.className =3D=3D 'x-grid3-hd-checker'){
            e.stopEvent();
            var hd =3D Ext.fly(t.parentNode);
            var isChecked =3D hd.hasClass('x-grid3-hd-checker-on');
            if(isChecked){
                hd.removeClass('x-grid3-hd-checker-on');
                this.clearSelections();
            }else{
                hd.addClass('x-grid3-hd-checker-on');
                this.selectAll();
            }
        }
    },

    =0A=
    renderer : function(v, p, record){
        return '<div class=3D"x-grid3-row-checker">&#160;</div>';
    }
});=0A=
=0A=
Ext.LoadMask =3D function(el, config){=0A=
    this.el =3D Ext.get(el);=0A=
    Ext.apply(this, config);=0A=
    if(this.store){=0A=
        this.store.on('beforeload', this.onBeforeLoad, this);=0A=
        this.store.on('load', this.onLoad, this);=0A=
        this.store.on('loadexception', this.onLoad, this);=0A=
        this.removeMask =3D Ext.value(this.removeMask, false);=0A=
    }else{=0A=
        var um =3D this.el.getUpdater();=0A=
        um.showLoadIndicator =3D false;         um.on('beforeupdate', =
this.onBeforeLoad, this);=0A=
        um.on('update', this.onLoad, this);=0A=
        um.on('failure', this.onLoad, this);=0A=
        this.removeMask =3D Ext.value(this.removeMask, true);=0A=
    }=0A=
};=0A=
=0A=
Ext.LoadMask.prototype =3D {=0A=
    =0A=
    =0A=
    =0A=
    msg : 'Loading...',=0A=
    =0A=
    msgCls : 'x-mask-loading',=0A=
=0A=
    =0A=
    disabled: false,=0A=
=0A=
    =0A=
    disable : function(){=0A=
       this.disabled =3D true;=0A=
    },=0A=
=0A=
    =0A=
    enable : function(){=0A=
        this.disabled =3D false;=0A=
    },=0A=
=0A=
        onLoad : function(){=0A=
        this.el.unmask(this.removeMask);=0A=
    },=0A=
=0A=
        onBeforeLoad : function(){=0A=
        if(!this.disabled){=0A=
            this.el.mask(this.msg, this.msgCls);=0A=
        }=0A=
    },=0A=
=0A=
    =0A=
    show: function(){=0A=
        this.onBeforeLoad();=0A=
    },=0A=
=0A=
    =0A=
    hide: function(){=0A=
        this.onLoad();    =0A=
    },=0A=
=0A=
        destroy : function(){=0A=
        if(this.store){=0A=
            this.store.un('beforeload', this.onBeforeLoad, this);=0A=
            this.store.un('load', this.onLoad, this);=0A=
            this.store.un('loadexception', this.onLoad, this);=0A=
        }else{=0A=
            var um =3D this.el.getUpdater();=0A=
            um.un('beforeupdate', this.onBeforeLoad, this);=0A=
            um.un('update', this.onLoad, this);=0A=
            um.un('failure', this.onLoad, this);=0A=
        }=0A=
    }=0A=
};=0A=

Ext.ProgressBar =3D Ext.extend(Ext.BoxComponent, {
  =20
    baseCls : 'x-progress',

    =0A=
    waitTimer : null,

    =0A=
    initComponent : function(){
        Ext.ProgressBar.superclass.initComponent.call(this);
        this.addEvents(
           =20
            "update"
        );
    },

    =0A=
    onRender : function(ct, position){
        Ext.ProgressBar.superclass.onRender.call(this, ct, position);

        var tpl =3D new Ext.Template(
            '<div class=3D"{cls}-wrap">',
                '<div class=3D"{cls}-inner">',
                    '<div class=3D"{cls}-bar">',
                        '<div class=3D"{cls}-text">',
                            '<div>&#160;</div>',
                        '</div>',
                    '</div>',
                    '<div class=3D"{cls}-text {cls}-text-back">',
                        '<div>&#160;</div>',
                    '</div>',
                '</div>',
            '</div>'
        );

        if(position){
            this.el =3D tpl.insertBefore(position, {cls: this.baseCls}, =
true);
        }else{
            this.el =3D tpl.append(ct, {cls: this.baseCls}, true);
        }
        if(this.id){
            this.el.dom.id =3D this.id;
        }
        var inner =3D this.el.dom.firstChild;
        this.progressBar =3D Ext.get(inner.firstChild);

        if(this.textEl){
            =0A=
            this.textEl =3D Ext.get(this.textEl);
            delete this.textTopEl;
        }else{
            =0A=
            this.textTopEl =3D Ext.get(this.progressBar.dom.firstChild);
            var textBackEl =3D Ext.get(inner.childNodes[1]);
            this.textTopEl.setStyle("z-index", 99).addClass('x-hidden');
            this.textEl =3D new =
Ext.CompositeElement([this.textTopEl.dom.firstChild, =
textBackEl.dom.firstChild]);
            this.textEl.setWidth(inner.offsetWidth);
        }
        this.progressBar.setHeight(inner.offsetHeight);
    },
   =20
    =0A=
	afterRender : function(){
		Ext.ProgressBar.superclass.afterRender.call(this);
		if(this.value){
			this.updateProgress(this.value, this.text);
		}else{
			this.updateText(this.text);
		}
	},

   =20
    updateProgress : function(value, text){
        this.value =3D value || 0;
        if(text){
            this.updateText(text);
        }
        var w =3D Math.floor(value*this.el.dom.firstChild.offsetWidth);
        this.progressBar.setWidth(w);
        if(this.textTopEl){
            =0A=
            this.textTopEl.removeClass('x-hidden').setWidth(w);
        }
        this.fireEvent('update', this, value, text);
        return this;
    },

   =20
    wait : function(o){
        if(!this.waitTimer){
            var scope =3D this;
            o =3D o || {};
            this.waitTimer =3D Ext.TaskMgr.start({
                run: function(i){
                    var inc =3D o.increment || 10;
                    =
this.updateProgress(((((i+inc)%inc)+1)*(100/inc))*.01);
                },
                interval: o.interval || 1000,
                duration: o.duration,
                onStop: function(){
                    if(o.fn){
                        o.fn.apply(o.scope || this);
                    }
                    this.reset();
                },
                scope: scope
            });
        }
        return this;
    },

   =20
    isWaiting : function(){
        return this.waitTimer !=3D null;
    },

   =20
    updateText : function(text){
        this.text =3D text || '&#160;';
        this.textEl.update(this.text);
        return this;
    },

   =20
    setSize : function(w, h){
        Ext.ProgressBar.superclass.setSize.call(this, w, h);
        if(this.textTopEl){
            var inner =3D this.el.dom.firstChild;
            this.textEl.setSize(inner.offsetWidth, inner.offsetHeight);
        }
        return this;
    },

   =20
    reset : function(hide){
        this.updateProgress(0);
        if(this.textTopEl){
            this.textTopEl.addClass('x-hidden');
        }
        if(this.waitTimer){
            this.waitTimer.onStop =3D null; =0A=
            Ext.TaskMgr.stop(this.waitTimer);
            this.waitTimer =3D null;
        }
        if(hide =3D=3D=3D true){
            this.hide();
        }
        return this;
    }
});
Ext.reg('progress', Ext.ProgressBar);=0A=

Ext.Slider =3D Ext.extend(Ext.BoxComponent, {
=09
=09
    vertical: false,
=09
    minValue: 0,
	=09
    maxValue: 100,
=09
    keyIncrement: 1,
=09
    increment: 0,
	=0A=
    clickRange: [5,15],
=09
    clickToChange : true,
=09
    animate: true,

	=0A=
    initComponent : function(){
        if(this.value =3D=3D=3D undefined){
            this.value =3D this.minValue;
        }
        Ext.Slider.superclass.initComponent.call(this);
        this.keyIncrement =3D Math.max(this.increment, =
this.keyIncrement);=20
        this.addEvents(
            	=09
			'beforechange',=20
		=09
			'change',=20
		=09
			'dragstart',=20
		=09
			'drag',=20
		=09
			'dragend'
		);

        if(this.vertical){
            Ext.apply(this, Ext.Slider.Vertical);
        }
    },

	=0A=
    onRender : function(){
        this.autoEl =3D {
            cls: 'x-slider ' + (this.vertical ? 'x-slider-vert' : =
'x-slider-horz'),
            =
cn:{cls:'x-slider-end',cn:{cls:'x-slider-inner',cn:[{cls:'x-slider-thumb'=
},{tag:'a', cls:'x-slider-focus', href:"#", tabIndex: '-1', =
hidefocus:'on'}]}}
        };
        Ext.Slider.superclass.onRender.apply(this, arguments);
        this.endEl =3D this.el.first();
        this.innerEl =3D this.endEl.first();
        this.thumb =3D this.innerEl.first();
        this.halfThumb =3D (this.vertical ? this.thumb.getHeight() : =
this.thumb.getWidth())/2;
        this.focusEl =3D this.thumb.next();
        this.initEvents();
    },

	=0A=
    initEvents : function(){
        this.thumb.addClassOnOver('x-slider-thumb-over');
        this.mon(this.el, 'mousedown', this.onMouseDown, this);
        this.mon(this.el, 'keydown', this.onKeyDown, this);

        this.tracker =3D new Ext.dd.DragTracker({
            onBeforeStart: this.onBeforeDragStart.createDelegate(this),
            onStart: this.onDragStart.createDelegate(this),
            onDrag: this.onDrag.createDelegate(this),
            onEnd: this.onDragEnd.createDelegate(this),
            tolerance: 3,
            autoStart: 300
        });
        this.tracker.initEl(this.thumb);
        this.on('beforedestroy', this.tracker.destroy, this.tracker);
    },

	=0A=
    onMouseDown : function(e){
        if(this.disabled) {return;}
        if(this.clickToChange && e.target !=3D this.thumb.dom){
            var local =3D this.innerEl.translatePoints(e.getXY());
            this.onClickChange(local);
        }
        this.focus();
    },

	=0A=
    onClickChange : function(local){
        if(local.top > this.clickRange[0] && local.top < =
this.clickRange[1]){
            this.setValue(Math.round(local.left/this.getRatio()));
        }
    },
=09
	=0A=
    onKeyDown : function(e){
        if(this.disabled){e.preventDefault();return;}
        var k =3D e.getKey();
        switch(k){
            case e.UP:
            case e.RIGHT:
                e.stopEvent();
                if(e.ctrlKey){
                    this.setValue(this.maxValue);
                }else{
                    this.setValue(this.value+this.keyIncrement);
                }
            break;
            case e.DOWN:
            case e.LEFT:
                e.stopEvent();
                if(e.ctrlKey){
                    this.setValue(this.minValue);
                }else{
                    this.setValue(this.value-this.keyIncrement);
                }
            break;
            default:
                e.preventDefault();
        }
    },
=09
	=0A=
    doSnap : function(value){
        if(!this.increment || this.increment =3D=3D 1 || !value) {
            return value;
        }
        var newValue =3D value, inc =3D this.increment;
        var m =3D value % inc;
        if(m > 0){
            if(m > (inc/2)){
                newValue =3D value + (inc-m);
            }else{
                newValue =3D value - m;
            }
        }
        return newValue.constrain(this.minValue,  this.maxValue);
    },
=09
	=0A=
    afterRender : function(){
        Ext.Slider.superclass.afterRender.apply(this, arguments);
        if(this.value !=3D=3D undefined){
            var v =3D this.normalizeValue(this.value);
            if(v !=3D=3D this.value){
                delete this.value;
                this.setValue(v, false);
            }else{
                this.moveThumb(this.translateValue(v), false);
            }
        }
    },

	=0A=
    getRatio : function(){
        var w =3D this.innerEl.getWidth();
        var v =3D this.maxValue - this.minValue;
        return w/v;
    },

	=0A=
    normalizeValue : function(v){
       if(typeof v !=3D 'number'){
            v =3D parseInt(v);
        }
        v =3D Math.round(v);
        v =3D this.doSnap(v);
        v =3D v.constrain(this.minValue, this.maxValue);
        return v;
    },

=09
    setValue : function(v, animate){
        v =3D this.normalizeValue(v);
        if(v !=3D=3D this.value && this.fireEvent('beforechange', this, =
v, this.value) !=3D=3D false){
            this.value =3D v;
            this.moveThumb(this.translateValue(v), animate !=3D=3D =
false);
            this.fireEvent('change', this, v);
        }
    },

	=0A=
    translateValue : function(v){
        return (v * this.getRatio())-this.halfThumb;
    },

	=0A=
    moveThumb: function(v, animate){
        if(!animate || this.animate =3D=3D=3D false){
            this.thumb.setLeft(v);
        }else{
            this.thumb.shift({left: v, stopFx: true, duration:.35});
        }
    },

	=0A=
    focus : function(){
        this.focusEl.focus(10);
    },

	=0A=
    onBeforeDragStart : function(e){
        return !this.disabled;
    },

	=0A=
    onDragStart: function(e){
        this.thumb.addClass('x-slider-thumb-drag');
        this.fireEvent('dragstart', this, e);
    },

	=0A=
    onDrag: function(e){
        var pos =3D this.innerEl.translatePoints(this.tracker.getXY());
        this.setValue(Math.round(pos.left/this.getRatio()), false);
        this.fireEvent('drag', this, e);
    },
=09
	=0A=
    onDragEnd: function(e){
        this.thumb.removeClass('x-slider-thumb-drag');
        this.fireEvent('dragend', this, e);
    },

	=0A=
    onResize : function(w, h){
        this.innerEl.setWidth(w - (this.el.getPadding('l') + =
this.endEl.getPadding('r')));
    },
=09
=09
    getValue : function(){
        return this.value;
    }
});
Ext.reg('slider', Ext.Slider);

=0A=
Ext.Slider.Vertical =3D {
    onResize : function(w, h){
        this.innerEl.setHeight(h - (this.el.getPadding('t') + =
this.endEl.getPadding('b')));
    },

    getRatio : function(){
        var h =3D this.innerEl.getHeight();
        var v =3D this.maxValue - this.minValue;
        return h/v;
    },

    moveThumb: function(v, animate){
        if(!animate || this.animate =3D=3D=3D false){
            this.thumb.setBottom(v);
        }else{
            this.thumb.shift({bottom: v, stopFx: true, duration:.35});
        }
    },

    onDrag: function(e){
        var pos =3D this.innerEl.translatePoints(this.tracker.getXY());
        var bottom =3D this.innerEl.getHeight()-pos.top;
        this.setValue(Math.round(bottom/this.getRatio()), false);
        this.fireEvent('drag', this, e);
    },

    onClickChange : function(local){
        if(local.left > this.clickRange[0] && local.left < =
this.clickRange[1]){
            var bottom =3D this.innerEl.getHeight()-local.top;
            this.setValue(Math.round(bottom/this.getRatio()));
        }
    }
};=0A=
=0A=
Ext.StatusBar =3D Ext.extend(Ext.Toolbar, {=0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    =0A=
    cls : 'x-statusbar',=0A=
    =0A=
    busyIconCls : 'x-status-busy',=0A=
    =0A=
    busyText : 'Loading...',=0A=
    =0A=
    autoClear : 5000,=0A=
    =0A=
        activeThreadId : 0,=0A=
    =0A=
        initComponent : function(){=0A=
        if(this.statusAlign=3D=3D'right'){=0A=
            this.cls +=3D ' x-status-right';=0A=
        }=0A=
        Ext.StatusBar.superclass.initComponent.call(this);=0A=
    },=0A=
    =0A=
        afterRender : function(){=0A=
        Ext.StatusBar.superclass.afterRender.call(this);=0A=
        =0A=
        var right =3D this.statusAlign=3D=3D'right',=0A=
            td =3D Ext.get(this.nextBlock());=0A=
        =0A=
        if(right){=0A=
            this.tr.appendChild(td.dom);=0A=
        }else{=0A=
            td.insertBefore(this.tr.firstChild);=0A=
        }=0A=
        =0A=
        this.statusEl =3D td.createChild({=0A=
            cls: 'x-status-text ' + (this.iconCls || this.defaultIconCls =
|| ''),=0A=
            html: this.text || this.defaultText || ''=0A=
        });=0A=
        this.statusEl.unselectable();=0A=
        =0A=
        this.spacerEl =3D td.insertSibling({=0A=
            tag: 'td',=0A=
            style: 'width:100%',=0A=
            cn: [{cls:'ytb-spacer'}]=0A=
        }, right ? 'before' : 'after');=0A=
    },=0A=
=0A=
    =0A=
    setStatus : function(o){=0A=
        o =3D o || {};=0A=
        =0A=
        if(typeof o =3D=3D 'string'){=0A=
            o =3D {text:o};=0A=
        }=0A=
        if(o.text !=3D=3D undefined){=0A=
            this.setText(o.text);=0A=
        }=0A=
        if(o.iconCls !=3D=3D undefined){=0A=
            this.setIcon(o.iconCls);=0A=
        }=0A=
        =0A=
        if(o.clear){=0A=
            var c =3D o.clear,=0A=
                wait =3D this.autoClear,=0A=
                defaults =3D {useDefaults: true, anim: true};=0A=
            =0A=
            if(typeof c =3D=3D 'object'){=0A=
                c =3D Ext.applyIf(c, defaults);=0A=
                if(c.wait){=0A=
                    wait =3D c.wait;=0A=
                }=0A=
            }else if(typeof c =3D=3D 'number'){=0A=
                wait =3D c;=0A=
                c =3D defaults;=0A=
            }else if(typeof c =3D=3D 'boolean'){=0A=
                c =3D defaults;=0A=
            }=0A=
            =0A=
            c.threadId =3D this.activeThreadId;=0A=
            this.clearStatus.defer(wait, this, [c]);=0A=
        }=0A=
        return this;=0A=
    },=0A=
     =0A=
    =0A=
    clearStatus : function(o){=0A=
        o =3D o || {};=0A=
        =0A=
        if(o.threadId && o.threadId !=3D=3D this.activeThreadId){=0A=
                                                return this;=0A=
        }=0A=
        =0A=
        var text =3D o.useDefaults ? this.defaultText : '',=0A=
            iconCls =3D o.useDefaults ? this.defaultIconCls : '';=0A=
            =0A=
        if(o.anim){=0A=
            this.statusEl.fadeOut({=0A=
                remove: false,=0A=
                useDisplay: true,=0A=
                scope: this,=0A=
                callback: function(){=0A=
                    this.setStatus({=0A=
	                    text: text, =0A=
	                    iconCls: iconCls=0A=
	                });=0A=
                    this.statusEl.show();=0A=
                }=0A=
            });=0A=
        }else{=0A=
                        this.statusEl.hide();=0A=
	        this.setStatus({=0A=
	            text: text,=0A=
	            iconCls: iconCls=0A=
	        });=0A=
            this.statusEl.show();=0A=
        }=0A=
        return this;=0A=
    },=0A=
    =0A=
    =0A=
    setText : function(text){=0A=
        this.activeThreadId++;=0A=
        this.text =3D text || '';=0A=
        if(this.rendered){=0A=
            this.statusEl.update(this.text);=0A=
        }=0A=
        return this;=0A=
    },=0A=
    =0A=
    =0A=
    getText : function(){=0A=
        return this.text;=0A=
    },=0A=
=0A=
    =0A=
    setIcon : function(cls){=0A=
        this.activeThreadId++;=0A=
        cls =3D cls || '';=0A=
        =0A=
        if(this.rendered){=0A=
	        if(this.currIconCls){=0A=
	            this.statusEl.removeClass(this.currIconCls);=0A=
	            this.currIconCls =3D null;=0A=
	        }=0A=
	        if(cls.length > 0){=0A=
	            this.statusEl.addClass(cls);=0A=
	            this.currIconCls =3D cls;=0A=
	        }=0A=
        }else{=0A=
            this.currIconCls =3D cls;=0A=
        }=0A=
        return this;=0A=
    },=0A=
    =0A=
    =0A=
    showBusy : function(o){=0A=
        if(typeof o =3D=3D 'string'){=0A=
            o =3D {text:o};=0A=
        }=0A=
        o =3D Ext.applyIf(o || {}, {=0A=
            text: this.busyText,=0A=
            iconCls: this.busyIconCls=0A=
        });=0A=
        return this.setStatus(o);=0A=
    }=0A=
});=0A=
Ext.reg('statusbar', Ext.StatusBar);=0A=
=0A=
Ext.debug =3D {};=0A=
=0A=
(function(){=0A=
=0A=
var cp;=0A=
=0A=
function createConsole(){=0A=
=0A=
    var scriptPanel =3D new Ext.debug.ScriptsPanel();=0A=
    var logView =3D new Ext.debug.LogPanel();=0A=
    var tree =3D new Ext.debug.DomTree();=0A=
=0A=
    var tabs =3D new Ext.TabPanel({=0A=
        activeTab: 0,=0A=
        border: false,=0A=
        tabPosition: 'bottom',=0A=
        items: [{=0A=
            title: 'Debug Console',=0A=
            layout:'border',=0A=
            items: [logView, scriptPanel]=0A=
        },{=0A=
            title: 'DOM Inspector',=0A=
            layout:'border',=0A=
            items: [tree]=0A=
        }]=0A=
    });=0A=
=0A=
    cp =3D new Ext.Panel({=0A=
        id: 'x-debug-browser',=0A=
        title: 'Console',=0A=
        collapsible: true,=0A=
        animCollapse: false,=0A=
        style: 'position:absolute;left:0;bottom:0;',=0A=
        height:200,=0A=
        logView: logView,=0A=
        layout: 'fit',=0A=
        =0A=
        tools:[{=0A=
            id: 'close',=0A=
            handler: function(){=0A=
                cp.destroy();=0A=
                cp =3D null;=0A=
                Ext.EventManager.removeResizeListener(handleResize);=0A=
            }=0A=
        }],=0A=
=0A=
        items: tabs=0A=
    });=0A=
=0A=
    cp.render(document.body);=0A=
=0A=
    cp.resizer =3D new Ext.Resizable(cp.el, {=0A=
        minHeight:50,=0A=
        handles: "n",=0A=
        pinned: true,=0A=
        transparent:true,=0A=
        resizeElement : function(){=0A=
            var box =3D this.proxy.getBox();=0A=
            this.proxy.hide();=0A=
            cp.setHeight(box.height);=0A=
            return box;=0A=
        }=0A=
    });=0A=
=0A=
    function handleResize(){=0A=
        cp.setWidth(Ext.getBody().getViewSize().width);=0A=
    }=0A=
    Ext.EventManager.onWindowResize(handleResize);=0A=
=0A=
    handleResize();=0A=
}=0A=
=0A=
=0A=
Ext.apply(Ext, {=0A=
    log : function(){=0A=
        if(!cp){=0A=
            createConsole();=0A=
        }=0A=
        cp.logView.log.apply(cp.logView, arguments);=0A=
    },=0A=
=0A=
    logf : function(format, arg1, arg2, etc){=0A=
        Ext.log(String.format.apply(String, arguments));=0A=
    },=0A=
=0A=
    dump : function(o){=0A=
        if(typeof o =3D=3D 'string' || typeof o =3D=3D 'number' || =
typeof o =3D=3D 'undefined' || Ext.isDate(o)){=0A=
            Ext.log(o);=0A=
        }else if(!o){=0A=
            Ext.log("null");=0A=
        }else if(typeof o !=3D "object"){=0A=
            Ext.log('Unknown return type');=0A=
        }else if(Ext.isArray(o)){=0A=
            Ext.log('['+o.join(',')+']');=0A=
        }else{=0A=
            var b =3D ["{\n"];=0A=
            for(var key in o){=0A=
                var to =3D typeof o[key];=0A=
                if(to !=3D "function" && to !=3D "object"){=0A=
                    b.push(String.format("  {0}: {1},\n", key, o[key]));=0A=
                }=0A=
            }=0A=
            var s =3D b.join("");=0A=
            if(s.length > 3){=0A=
                s =3D s.substr(0, s.length-2);=0A=
            }=0A=
            Ext.log(s + "\n}");=0A=
        }=0A=
    },=0A=
=0A=
    _timers : {},=0A=
=0A=
    time : function(name){=0A=
        name =3D name || "def";=0A=
        Ext._timers[name] =3D new Date().getTime();=0A=
    },=0A=
=0A=
    timeEnd : function(name, printResults){=0A=
        var t =3D new Date().getTime();=0A=
        name =3D name || "def";=0A=
        var v =3D String.format("{0} ms", t-Ext._timers[name]);=0A=
        Ext._timers[name] =3D new Date().getTime();=0A=
        if(printResults !=3D=3D false){=0A=
            Ext.log('Timer ' + (name =3D=3D "def" ? v : name + ": " + =
v));=0A=
        }=0A=
        return v;=0A=
    }=0A=
});=0A=
=0A=
})();=0A=
=0A=
=0A=
Ext.debug.ScriptsPanel =3D Ext.extend(Ext.Panel, {=0A=
    id:'x-debug-scripts',=0A=
    region: 'east',=0A=
    minWidth: 200,=0A=
    split: true,=0A=
    width: 350,=0A=
    border: false,=0A=
    layout:'anchor',=0A=
    style:'border-width:0 0 0 1px;',=0A=
=0A=
    initComponent : function(){=0A=
=0A=
        this.scriptField =3D new Ext.form.TextArea({=0A=
            anchor: '100% -26',=0A=
            style:'border-width:0;'=0A=
        });=0A=
=0A=
        this.trapBox =3D new Ext.form.Checkbox({=0A=
            id: 'console-trap',=0A=
            boxLabel: 'Trap Errors',=0A=
            checked: true=0A=
        });=0A=
=0A=
        this.toolbar =3D new Ext.Toolbar([{=0A=
                text: 'Run',=0A=
                scope: this,=0A=
                handler: this.evalScript=0A=
            },{=0A=
                text: 'Clear',=0A=
                scope: this,=0A=
                handler: this.clear=0A=
            },=0A=
            '->',=0A=
            this.trapBox,=0A=
            ' ', ' '=0A=
        ]);=0A=
=0A=
        this.items =3D [this.toolbar, this.scriptField];=0A=
=0A=
        Ext.debug.ScriptsPanel.superclass.initComponent.call(this);=0A=
    },=0A=
=0A=
    evalScript : function(){=0A=
        var s =3D this.scriptField.getValue();=0A=
        if(this.trapBox.getValue()){=0A=
            try{=0A=
                var rt =3D eval(s);=0A=
                Ext.dump(rt =3D=3D=3D undefined? '(no return)' : rt);=0A=
            }catch(e){=0A=
                Ext.log(e.message || e.descript);=0A=
            }=0A=
        }else{=0A=
            var rt =3D eval(s);=0A=
            Ext.dump(rt =3D=3D=3D undefined? '(no return)' : rt);=0A=
        }=0A=
    },=0A=
=0A=
    clear : function(){=0A=
        this.scriptField.setValue('');=0A=
        this.scriptField.focus();=0A=
    }=0A=
=0A=
});=0A=
=0A=
Ext.debug.LogPanel =3D Ext.extend(Ext.Panel, {=0A=
    autoScroll: true,=0A=
    region: 'center',=0A=
    border: false,=0A=
    style:'border-width:0 1px 0 0',=0A=
=0A=
    log : function(){=0A=
        var markup =3D [  '<div style=3D"padding:5px =
!important;border-bottom:1px solid #ccc;">',=0A=
                    =
Ext.util.Format.htmlEncode(Array.prototype.join.call(arguments, ', =
')).replace(/\n/g, '<br />').replace(/\s/g, '&#160;'),=0A=
                    '</div>'].join('');=0A=
=0A=
        this.body.insertHtml('beforeend', markup);=0A=
        this.body.scrollTo('top', 100000);=0A=
    },=0A=
=0A=
    clear : function(){=0A=
        this.body.update('');=0A=
        this.body.dom.scrollTop =3D 0;=0A=
    }=0A=
});=0A=
=0A=
Ext.debug.DomTree =3D Ext.extend(Ext.tree.TreePanel, {=0A=
    enableDD:false ,=0A=
    lines:false,=0A=
    rootVisible:false,=0A=
    animate:false,=0A=
    hlColor:'ffff9c',=0A=
    autoScroll: true,=0A=
    region:'center',=0A=
    border:false,=0A=
=0A=
    initComponent : function(){=0A=
=0A=
=0A=
        Ext.debug.DomTree.superclass.initComponent.call(this);=0A=
        =0A=
                var styles =3D false, hnode;=0A=
        var nonSpace =3D /^\s*$/;=0A=
        var html =3D Ext.util.Format.htmlEncode;=0A=
        var ellipsis =3D Ext.util.Format.ellipsis;=0A=
        var styleRe =3D /\s?([a-z\-]*)\:([^;]*)(?:[;\s\n\r]*)/gi;=0A=
=0A=
        function findNode(n){=0A=
            if(!n || n.nodeType !=3D 1 || n =3D=3D document.body || n =
=3D=3D document){=0A=
                return false;=0A=
            }=0A=
            var pn =3D [n], p =3D n;=0A=
            while((p =3D p.parentNode) && p.nodeType =3D=3D 1 && =
p.tagName.toUpperCase() !=3D 'HTML'){=0A=
                pn.unshift(p);=0A=
            }=0A=
            var cn =3D hnode;=0A=
            for(var i =3D 0, len =3D pn.length; i < len; i++){=0A=
                cn.expand();=0A=
                cn =3D cn.findChild('htmlNode', pn[i]);=0A=
                if(!cn){                     return false;=0A=
                }=0A=
            }=0A=
            cn.select();=0A=
            var a =3D cn.ui.anchor;=0A=
            treeEl.dom.scrollTop =3D Math.max(0 ,a.offsetTop-10);=0A=
                        cn.highlight();=0A=
            return true;=0A=
        }=0A=
=0A=
        function nodeTitle(n){=0A=
            var s =3D n.tagName;=0A=
            if(n.id){=0A=
                s +=3D '#'+n.id;=0A=
            }else if(n.className){=0A=
                s +=3D '.'+n.className;=0A=
            }=0A=
            return s;=0A=
        }=0A=
=0A=
        function onNodeSelect(t, n, last){=0A=
            return;=0A=
            if(last && last.unframe){=0A=
                last.unframe();=0A=
            }=0A=
            var props =3D {};=0A=
            if(n && n.htmlNode){=0A=
                if(frameEl.pressed){=0A=
                    n.frame();=0A=
                }=0A=
                if(inspecting){=0A=
                    return;=0A=
                }=0A=
                addStyle.enable();=0A=
                reload.setDisabled(n.leaf);=0A=
                var dom =3D n.htmlNode;=0A=
                stylePanel.setTitle(nodeTitle(dom));=0A=
                if(styles && !showAll.pressed){=0A=
                    var s =3D dom.style ? dom.style.cssText : '';=0A=
                    if(s){=0A=
                        var m;=0A=
                        while ((m =3D styleRe.exec(s)) !=3D null){=0A=
                            props[m[1].toLowerCase()] =3D m[2];=0A=
                        }=0A=
                    }=0A=
                }else if(styles){=0A=
                    var cl =3D Ext.debug.cssList;=0A=
                    var s =3D dom.style, fly =3D Ext.fly(dom);=0A=
                    if(s){=0A=
                        for(var i =3D 0, len =3D cl.length; i<len; i++){=0A=
                            var st =3D cl[i];=0A=
                            var v =3D s[st] || fly.getStyle(st);=0A=
                            if(v !=3D undefined && v !=3D=3D null && v =
!=3D=3D ''){=0A=
                                props[st] =3D v;=0A=
                            }=0A=
                        }=0A=
                    }=0A=
                }else{=0A=
                    for(var a in dom){=0A=
                        var v =3D dom[a];=0A=
                        if((isNaN(a+10)) && v !=3D undefined && v =
!=3D=3D null && v !=3D=3D '' && !(Ext.isGecko && a[0] =3D=3D =
a[0].toUpperCase())){=0A=
                            props[a] =3D v;=0A=
                        }=0A=
                    }=0A=
                }=0A=
            }else{=0A=
                if(inspecting){=0A=
                    return;=0A=
                }=0A=
                addStyle.disable();=0A=
                reload.disabled();=0A=
            }=0A=
            stylesGrid.setSource(props);=0A=
            stylesGrid.treeNode =3D n;=0A=
            stylesGrid.view.fitColumns();=0A=
        }=0A=
=0A=
        this.loader =3D new Ext.tree.TreeLoader();=0A=
        this.loader.load =3D function(n, cb){=0A=
            var isBody =3D n.htmlNode =3D=3D document.body;=0A=
            var cn =3D n.htmlNode.childNodes;=0A=
            for(var i =3D 0, c; c =3D cn[i]; i++){=0A=
                if(isBody && c.id =3D=3D 'x-debug-browser'){=0A=
                    continue;=0A=
                }=0A=
                if(c.nodeType =3D=3D 1){=0A=
                    n.appendChild(new Ext.debug.HtmlNode(c));=0A=
                }else if(c.nodeType =3D=3D 3 && =
!nonSpace.test(c.nodeValue)){=0A=
                    n.appendChild(new Ext.tree.TreeNode({=0A=
                        text:'<em>' + =
ellipsis(html(String(c.nodeValue)), 35) + '</em>',=0A=
                        cls: 'x-tree-noicon'=0A=
                    }));=0A=
                }=0A=
            }=0A=
            cb();=0A=
        };=0A=
=0A=
        =0A=
        this.root =3D this.setRootNode(new Ext.tree.TreeNode('Ext'));=0A=
=0A=
        hnode =3D this.root.appendChild(new Ext.debug.HtmlNode(=0A=
                document.getElementsByTagName('html')[0]=0A=
        ));=0A=
=0A=
    }=0A=
});=0A=
=0A=
=0A=
Ext.debug.HtmlNode =3D function(){=0A=
    var html =3D Ext.util.Format.htmlEncode;=0A=
    var ellipsis =3D Ext.util.Format.ellipsis;=0A=
    var nonSpace =3D /^\s*$/;=0A=
=0A=
    var attrs =3D [=0A=
        {n: 'id', v: 'id'},=0A=
        {n: 'className', v: 'class'},=0A=
        {n: 'name', v: 'name'},=0A=
        {n: 'type', v: 'type'},=0A=
        {n: 'src', v: 'src'},=0A=
        {n: 'href', v: 'href'}=0A=
    ];=0A=
=0A=
    function hasChild(n){=0A=
        for(var i =3D 0, c; c =3D n.childNodes[i]; i++){=0A=
            if(c.nodeType =3D=3D 1){=0A=
                return true;=0A=
            }=0A=
        }=0A=
        return false;=0A=
    }=0A=
=0A=
    function renderNode(n, leaf){=0A=
        var tag =3D n.tagName.toLowerCase();=0A=
        var s =3D '&lt;' + tag;=0A=
        for(var i =3D 0, len =3D attrs.length; i < len; i++){=0A=
            var a =3D attrs[i];=0A=
            var v =3D n[a.n];=0A=
            if(v && !nonSpace.test(v)){=0A=
                s +=3D ' ' + a.v + '=3D&quot;<i>' + html(v) =
+'</i>&quot;';=0A=
            }=0A=
        }=0A=
        var style =3D n.style ? n.style.cssText : '';=0A=
        if(style){=0A=
            s +=3D ' style=3D&quot;<i>' + html(style.toLowerCase()) =
+'</i>&quot;';=0A=
        }=0A=
        if(leaf && n.childNodes.length > 0){=0A=
            s+=3D'&gt;<em>' + ellipsis(html(String(n.innerHTML)), 35) + =
'</em>&lt;/'+tag+'&gt;';=0A=
        }else if(leaf){=0A=
            s +=3D ' /&gt;';=0A=
        }else{=0A=
            s +=3D '&gt;';=0A=
        }=0A=
        return s;=0A=
    }=0A=
=0A=
    var HtmlNode =3D function(n){=0A=
        var leaf =3D !hasChild(n);=0A=
        this.htmlNode =3D n;=0A=
        this.tagName =3D n.tagName.toLowerCase();=0A=
        var attr =3D {=0A=
            text : renderNode(n, leaf),=0A=
            leaf : leaf,=0A=
            cls: 'x-tree-noicon'=0A=
        };=0A=
        HtmlNode.superclass.constructor.call(this, attr);=0A=
        this.attributes.htmlNode =3D n;         if(!leaf){=0A=
            this.on('expand', this.onExpand,  this);=0A=
            this.on('collapse', this.onCollapse,  this);=0A=
        }=0A=
    };=0A=
=0A=
=0A=
    Ext.extend(HtmlNode, Ext.tree.AsyncTreeNode, {=0A=
        cls: 'x-tree-noicon',=0A=
        preventHScroll: true,=0A=
        refresh : function(highlight){=0A=
            var leaf =3D !hasChild(this.htmlNode);=0A=
            this.setText(renderNode(this.htmlNode, leaf));=0A=
            if(highlight){=0A=
                Ext.fly(this.ui.textNode).highlight();=0A=
            }=0A=
        },=0A=
=0A=
        onExpand : function(){=0A=
            if(!this.closeNode && this.parentNode){=0A=
                this.closeNode =3D this.parentNode.insertBefore(new =
Ext.tree.TreeNode({=0A=
                    text:'&lt;/' + this.tagName + '&gt;',=0A=
                    cls: 'x-tree-noicon'=0A=
                }), this.nextSibling);=0A=
            }else if(this.closeNode){=0A=
                this.closeNode.ui.show();=0A=
            }=0A=
        },=0A=
=0A=
        onCollapse : function(){=0A=
            if(this.closeNode){=0A=
                this.closeNode.ui.hide();=0A=
            }=0A=
        },=0A=
=0A=
        render : function(bulkRender){=0A=
            HtmlNode.superclass.render.call(this, bulkRender);=0A=
        },=0A=
=0A=
        highlightNode : function(){=0A=
                    },=0A=
=0A=
        highlight : function(){=0A=
                    },=0A=
=0A=
        frame : function(){=0A=
            this.htmlNode.style.border =3D '1px solid #0000ff';=0A=
                    },=0A=
=0A=
        unframe : function(){=0A=
                        this.htmlNode.style.border =3D '';=0A=
        }=0A=
    });=0A=
=0A=
    return HtmlNode;=0A=
}();=0A=
=0A=
=0A=
=0A=

------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/upload-dialog-2.0/ExtJS.ux/UploadDialog/Ext.ux.UploadDialog.js

/**
 * This namespace should be in another file but I dicided to put it here =
for consistancy.
 */
Ext.namespace('Ext.ux.Utils');

/**
 * This class implements event queue behaviour.
 *
 * @class Ext.ux.Utils.EventQueue
 * @param function  handler  Event handler.
 * @param object    scope    Handler scope.
 */
Ext.ux.Utils.EventQueue =3D function(handler, scope)
{
  if (!handler) {
    throw 'Handler is required.';
  }
  this.handler =3D handler;
  this.scope =3D scope || window;
  this.queue =3D [];
  this.is_processing =3D false;
 =20
  /**
   * Posts event into the queue.
   * =0A=
   * @access public
   * @param mixed event Event identificator.
   * @param mixed data  Event data.
   */
  this.postEvent =3D function(event, data)
  {
    data =3D data || null;
    this.queue.push({event: event, data: data});
    if (!this.is_processing) {
      this.process();
    }
  }
 =20
  this.flushEventQueue =3D function()
  {
    this.queue =3D [];
  },
 =20
  /**
   * @access private
   */
  this.process =3D function()
  {
    while (this.queue.length > 0) {
      this.is_processing =3D true;
      var event_data =3D this.queue.shift();
      this.handler.call(this.scope, event_data.event, event_data.data);
    }
    this.is_processing =3D false;
  }
}

/**
 * This class implements Mili's finite state automata behaviour.
 * =20
 *  Transition / output table format:
 *  {
 *    'state_1' : {
 *      'event_1' : [
 *        {
 *          p|predicate: function,    // Transition predicate, optional, =
default to true.
 *                                    // If array then conjunction will =
be applyed to the operands.
 *                                    // Predicate signature is (data, =
event, this).
 *          a|action: function|array, // Transition action, optional, =
default to Ext.emptyFn.
 *                                    // If array then methods will be =
called sequentially.
 *                                    // Action signature is (data, =
event, this).
 *          s|state: 'state_x',       // New state - transition =
destination, optional, default to=20
 *                                    // current state.
 *          scope: object             // Predicate and action scope, =
optional, default to=20
 *                                    // trans_table_scope or window.
 *        }
 *      ]
 *    },
 *
 *    'state_2' : {
 *      ...
 *    }
 *    ...
 *  }
 *
 *  @param  mixed initial_state Initial state.
 *  @param  object trans_table Transition / output table.
 *  @param  trans_table_scope Transition / output table's methods scope.
 */
Ext.ux.Utils.FSA =3D function(initial_state, trans_table, =
trans_table_scope)
{
  this.current_state =3D initial_state;
  this.trans_table =3D trans_table || {};
  this.trans_table_scope =3D trans_table_scope || window;
  Ext.ux.Utils.FSA.superclass.constructor.call(this, this.processEvent, =
this);
}

Ext.extend(Ext.ux.Utils.FSA, Ext.ux.Utils.EventQueue, {

  current_state : null,
  trans_table : null, =20
  trans_table_scope : null,
 =20
  /**
   * Returns current state
   *=20
   * @access public
   * @return mixed Current state.
   */
  state : function()
  {
    return this.current_state;
  },
 =20
  /**
   * @access public
   */
  processEvent : function(event, data)
  {
    var transitions =3D this.currentStateEventTransitions(event);
    if (!transitions) {
      throw "State '" + this.current_state + "' has no transition for =
event '" + event + "'.";
    }
    for (var i =3D 0, len =3D transitions.length; i < len; i++) {
      var transition =3D transitions[i];

      var predicate =3D transition.predicate || transition.p || true;
      var action =3D transition.action || transition.a || Ext.emptyFn;
      var new_state =3D transition.state || transition.s || =
this.current_state;
      var scope =3D transition.scope || this.trans_table_scope;
     =20
      if (this.computePredicate(predicate, scope, data, event)) {
        this.callAction(action, scope, data, event);
        this.current_state =3D new_state;=20
        return;
      }
    }
   =20
    throw "State '" + this.current_state + "' has no transition for =
event '" + event + "' in current context";
  },
 =20
  /**
   * @access private
   */
  currentStateEventTransitions : function(event)
  {
    return this.trans_table[this.current_state] ?=20
      this.trans_table[this.current_state][event] || false
      :
      false;
  },
 =20
  /**
   * @access private
   */
  computePredicate : function(predicate, scope, data, event)
  {
    var result =3D false;=20
   =20
    switch (Ext.type(predicate)) {
     case 'function':
       result =3D predicate.call(scope, data, event, this);
       break;
     case 'array':
       result =3D true;
       for (var i =3D 0, len =3D predicate.length; result && (i < len); =
i++) {
         if (Ext.type(predicate[i]) =3D=3D 'function') {
           result =3D predicate[i].call(scope, data, event, this);
         }
         else {
           throw [
             'Predicate: ',
             predicate[i],
             ' is not callable in "',
             this.current_state,
             '" state for event "',
             event
           ].join('');
         }
       }
       break;
     case 'boolean':
       result =3D predicate;
       break;
     default:
       throw [
         'Predicate: ',
         predicate,
         ' is not callable in "',
         this.current_state,
         '" state for event "',
         event
       ].join('');
    }
    return result;
  },
 =20
  /**
   * @access private
   */
  callAction : function(action, scope, data, event)
  {
    switch (Ext.type(action)) {
       case 'array':
       for (var i =3D 0, len =3D action.length; i < len; i++) {
         if (Ext.type(action[i]) =3D=3D 'function') {
           action[i].call(scope, data, event, this);
         }
         else {
           throw [
             'Action: ',
             action[i],
             ' is not callable in "',
             this.current_state,
             '" state for event "',
             event
           ].join('');
         }
       }
         break;
     case 'function':
       action.call(scope, data, event, this);
       break;
     default:
       throw [
         'Action: ',
         action,
         ' is not callable in "',
         this.current_state,
         '" state for event "',
         event
       ].join('');
    }
  }
});

// =
-------------------------------------------------------------------------=
--------------------- //

/**
 * Ext.ux.UploadDialog namespace.
 */
Ext.namespace('Ext.ux.UploadDialog');

/**
 * File upload browse button.
 *
 * @class Ext.ux.UploadDialog.BrowseButton
 */=20
Ext.ux.UploadDialog.BrowseButton =3D Ext.extend(Ext.Button,=20
{
  input_name : 'file',
 =20
  input_file : null,
 =20
  original_handler : null,
 =20
  original_scope : null,
 =20
  /**
   * @access private
   */
  initComponent : function()
  {
    =
Ext.ux.UploadDialog.BrowseButton.superclass.initComponent.call(this);
    this.original_handler =3D this.handler || null;
    this.original_scope =3D this.scope || window;
    this.handler =3D null;
    this.scope =3D null;
  },
 =20
  /**
   * @access private
   */
  onRender : function(ct, position)
  {
    Ext.ux.UploadDialog.BrowseButton.superclass.onRender.call(this, ct, =
position);
    this.createInputFile();
  },
 =20
  /**
   * @access private
   */
  createInputFile : function()
  {
    var button_container =3D this.el.child('.x-btn-center');
    button_container.position('relative');
    this.input_file =3D Ext.DomHelper.append(
      button_container,=20
      {
        tag: 'input',
        type: 'file',
        size: 1,
        name: this.input_name || Ext.id(this.el),
        style: 'position: absolute; display: block; border: none; =
cursor: pointer'
      },
      true
    );
   =20
    var button_box =3D button_container.getBox();
    this.input_file.setStyle('font-size', (button_box.width * 0.5) + =
'px');

    var input_box =3D this.input_file.getBox();
    var adj =3D {x: 3, y: 3}
    if (Ext.isIE) {
      adj =3D {x: 0, y: 3}
    }
   =20
    this.input_file.setLeft(button_box.width - input_box.width + adj.x + =
'px');
    this.input_file.setTop(button_box.height - input_box.height + adj.y =
+ 'px');
    this.input_file.setOpacity(0.0);
       =20
    if (this.handleMouseEvents) {
      this.input_file.on('mouseover', this.onMouseOver, this);
        this.input_file.on('mousedown', this.onMouseDown, this);
    }
   =20
    if(this.tooltip){
      if(typeof this.tooltip =3D=3D 'object'){
        Ext.QuickTips.register(Ext.apply({target: this.input_file}, =
this.tooltip));
      }=20
      else {
        this.input_file.dom[this.tooltipType] =3D this.tooltip;
        }
      }
   =20
    this.input_file.on('change', this.onInputFileChange, this);
    this.input_file.on('click', function(e) { e.stopPropagation(); });=20
  },
 =20
  /**
   * @access public
   */
  detachInputFile : function(no_create)
  {
    var result =3D this.input_file;
   =20
    no_create =3D no_create || false;
   =20
    if (typeof this.tooltip =3D=3D 'object') {
      Ext.QuickTips.unregister(this.input_file);
    }
    else {
      this.input_file.dom[this.tooltipType] =3D null;
    }
    this.input_file.removeAllListeners();
    this.input_file =3D null;
   =20
    if (!no_create) {
      this.createInputFile();
    }
    return result;
  },
 =20
  /**
   * @access public
   */
  getInputFile : function()
  {
    return this.input_file;
  },
 =20
  /**
   * @access public
   */
  disable : function()
  {
    Ext.ux.UploadDialog.BrowseButton.superclass.disable.call(this); =20
    this.input_file.dom.disabled =3D true;
  },
 =20
  /**
   * @access public
   */
  enable : function()
  {
    Ext.ux.UploadDialog.BrowseButton.superclass.enable.call(this);
    this.input_file.dom.disabled =3D false;
  },
 =20
  /**
   * @access public
   */
  destroy : function()
  {
    var input_file =3D this.detachInputFile(true);
    input_file.remove();
    input_file =3D null;
    Ext.ux.UploadDialog.BrowseButton.superclass.destroy.call(this);      =

  },
 =20
  /**
   * @access private
   */
  onInputFileChange : function()
  {
    if (this.original_handler) {
      this.original_handler.call(this.original_scope, this);
    }
  } =20
});

/**
 * Toolbar file upload browse button.
 *
 * @class Ext.ux.UploadDialog.TBBrowseButton
 */
Ext.ux.UploadDialog.TBBrowseButton =3D =
Ext.extend(Ext.ux.UploadDialog.BrowseButton,=20
{
  hideParent : true,

  onDestroy : function()
  {
    Ext.ux.UploadDialog.TBBrowseButton.superclass.onDestroy.call(this);
    if(this.container) {
      this.container.remove();
      }
  }
});

/**
 * Record type for dialogs grid.
 *
 * @class Ext.ux.UploadDialog.FileRecord=20
 */
Ext.ux.UploadDialog.FileRecord =3D Ext.data.Record.create([
  {name: 'filename'},
  {name: 'state', type: 'int'},
  {name: 'note'},
  {name: 'input_element'}
]);

Ext.ux.UploadDialog.FileRecord.STATE_QUEUE =3D 0;
Ext.ux.UploadDialog.FileRecord.STATE_FINISHED =3D 1;
Ext.ux.UploadDialog.FileRecord.STATE_FAILED =3D 2;
Ext.ux.UploadDialog.FileRecord.STATE_PROCESSING =3D 3;

/**
 * Dialog class.
 *
 * @class Ext.ux.UploadDialog.Dialog
 */
Ext.ux.UploadDialog.Dialog =3D function(config)
{
  var default_config =3D {
    border: false,
    width: 450,
    height: 300,
    minWidth: 450,
    minHeight: 300,
    plain: true,
    constrainHeader: true,
    draggable: true,
    closable: true,
    maximizable: false,
    minimizable: false,
    resizable: true,
    autoDestroy: true,
    closeAction: 'hide',
    title: this.i18n.title,
    cls: 'ext-ux-uploaddialog-dialog',
    // --------
    url: '',
    base_params: {},
    permitted_extensions: [],
    reset_on_hide: true,
    allow_close_on_upload: false,
    upload_autostart: false,
    post_var_name: 'file'
  }
  config =3D Ext.applyIf(config || {}, default_config);
  config.layout =3D 'absolute';
 =20
  Ext.ux.UploadDialog.Dialog.superclass.constructor.call(this, config);
}

Ext.extend(Ext.ux.UploadDialog.Dialog, Ext.Window, {

  fsa : null,
 =20
  state_tpl : null,
 =20
  form : null,
 =20
  grid_panel : null,
 =20
  progress_bar : null,
 =20
  is_uploading : false,
 =20
  initial_queued_count : 0,
 =20
  upload_frame : null,
 =20
  /**
   * @access private
   */
  =
//-----------------------------------------------------------------------=
---------------------- //
  initComponent : function()
  {
    Ext.ux.UploadDialog.Dialog.superclass.initComponent.call(this);
   =20
    // Setting automata protocol
    var tt =3D {
      // --------------
      'created' : {
      // --------------
        'window-render' : [
          {
            action: [this.createForm, this.createProgressBar, =
this.createGrid],
            state: 'rendering'
          }
        ],
        'destroy' : [
          {
            action: this.flushEventQueue,
            state: 'destroyed'
          }
        ]
      },
      // --------------
      'rendering' : {
      // --------------
        'grid-render' : [
          {
            action: [this.fillToolbar, this.updateToolbar],
            state: 'ready'
          }
        ],
        'destroy' : [
          {
            action: this.flushEventQueue,
            state: 'destroyed'
          }
        ]
      },
      // --------------
      'ready' : {
      // --------------
        'file-selected' : [
          {
            predicate: [this.fireFileTestEvent, this.isPermittedFile],
            action: this.addFileToUploadQueue,
            state: 'adding-file'
          },
          {
            // If file is not permitted then resetting internal input =
type file.
            action: this.resetAddButton
          }
        ],
        'grid-selection-change' : [
          {
            action: this.updateToolbar
          }
        ],
        'remove-files' : [
          {
            action: [this.removeFiles, this.fireFileRemoveEvent]
          }
        ],
        'reset-queue' : [
          {
            action: [this.resetQueue, this.fireResetQueueEvent]
          }
        ],
        'start-upload' : [
          {
            predicate: this.hasUnuploadedFiles,
            action: [
              this.setUploadingFlag, this.saveInitialQueuedCount, =
this.updateToolbar,=20
              this.updateProgressBar, this.prepareNextUploadTask, =
this.fireUploadStartEvent
            ],
            state: 'uploading'
          },
          {
            // Has nothing to upload, do nothing.
          }
        ],
        'stop-upload' : [
          {
            // We are not uploading, do nothing. Can be posted by user =
only at this state.=20
          }
        ],
        'hide' : [
          {
            predicate: [this.isNotEmptyQueue, this.getResetOnHide],
            action: [this.resetQueue, this.fireResetQueueEvent]
          },
          {
            // Do nothing
          }
        ],
        'destroy' : [
          {
            action: this.flushEventQueue,
            state: 'destroyed'
          }
        ]
      },
      // --------------
      'adding-file' : {
      // --------------
        'file-added' : [
          {
            predicate: this.isUploading,
            action: [this.incInitialQueuedCount, this.updateProgressBar, =
this.fireFileAddEvent],
            state: 'uploading'=20
          },
          {
            predicate: this.getUploadAutostart,
            action: [this.startUpload, this.fireFileAddEvent],
            state: 'ready'
          },
          {
            action: [this.updateToolbar, this.fireFileAddEvent],
            state: 'ready'
          }
        ]
      },
      // --------------
      'uploading' : {
      // --------------
        'file-selected' : [
          {
            predicate: [this.fireFileTestEvent, this.isPermittedFile],
            action: this.addFileToUploadQueue,
            state: 'adding-file'
          },
          {
            // If file is not permitted then resetting internal input =
type file.
            action: this.resetAddButton
          }
        ],
        'grid-selection-change' : [
          {
            // Do nothing.
          }
        ],
        'start-upload' : [
          {
            // Can be posted only by user in this state.=20
          }
        ],
        'stop-upload' : [
          {
            predicate: this.hasUnuploadedFiles,
            action: [
              this.resetUploadingFlag, this.abortUpload, =
this.updateToolbar,=20
              this.updateProgressBar, this.fireUploadStopEvent
            ],
            state: 'ready'
          },
          {
            action: [
              this.resetUploadingFlag, this.abortUpload, =
this.updateToolbar,=20
              this.updateProgressBar, this.fireUploadStopEvent, =
this.fireUploadCompleteEvent
            ],
            state: 'ready'
          }
        ],
        'file-upload-start' : [
          {
            action: [this.uploadFile, this.findUploadFrame, =
this.fireFileUploadStartEvent]
          }
        ],
        'file-upload-success' : [
          {
            predicate: this.hasUnuploadedFiles,
            action: [
              this.resetUploadFrame, this.updateRecordState, =
this.updateProgressBar,=20
              this.prepareNextUploadTask, this.fireUploadSuccessEvent
            ]
          },
          {
            action: [
              this.resetUploadFrame, this.resetUploadingFlag, =
this.updateRecordState,=20
              this.updateToolbar, this.updateProgressBar, =
this.fireUploadSuccessEvent,=20
              this.fireUploadCompleteEvent
            ],
            state: 'ready'
          }
        ],
        'file-upload-error' : [
          {
            predicate: this.hasUnuploadedFiles,
            action: [
              this.resetUploadFrame, this.updateRecordState, =
this.updateProgressBar,=20
              this.prepareNextUploadTask, this.fireUploadErrorEvent
            ]
          },
          {
            action: [
              this.resetUploadFrame, this.resetUploadingFlag, =
this.updateRecordState,=20
              this.updateToolbar, this.updateProgressBar, =
this.fireUploadErrorEvent,=20
              this.fireUploadCompleteEvent
            ],
            state: 'ready'
          }
        ],
        'file-upload-failed' : [
          {
            predicate: this.hasUnuploadedFiles,
            action: [
              this.resetUploadFrame, this.updateRecordState, =
this.updateProgressBar,=20
              this.prepareNextUploadTask, this.fireUploadFailedEvent
            ]
          },
          {
            action: [
              this.resetUploadFrame, this.resetUploadingFlag, =
this.updateRecordState,=20
              this.updateToolbar, this.updateProgressBar, =
this.fireUploadFailedEvent,=20
              this.fireUploadCompleteEvent
            ],
            state: 'ready'
          }
        ],
        'hide' : [
          {
            predicate: this.getResetOnHide,
            action: [this.stopUpload, this.repostHide]
          },
          {
            // Do nothing.
          }
        ],
        'destroy' : [
          {
            predicate: this.hasUnuploadedFiles,
            action: [
              this.resetUploadingFlag, this.abortUpload,
              this.fireUploadStopEvent, this.flushEventQueue
            ],
            state: 'destroyed'
          },
          {
            action: [
              this.resetUploadingFlag, this.abortUpload,
              this.fireUploadStopEvent, this.fireUploadCompleteEvent, =
this.flushEventQueue
            ],=20
            state: 'destroyed'
          }
        ]
      },
      // --------------
      'destroyed' : {
      // --------------
      }
    }
    this.fsa =3D new Ext.ux.Utils.FSA('created', tt, this);
   =20
    // Registering dialog events.
    this.addEvents({
      'filetest': true,
      'fileadd' : true,
      'fileremove' : true,
      'resetqueue' : true,
      'uploadsuccess' : true,
      'uploaderror' : true,
      'uploadfailed' : true,
      'uploadstart' : true,
      'uploadstop' : true,
      'uploadcomplete' : true,
      'fileuploadstart' : true
    });
   =20
    // Attaching to window events.
    this.on('render', this.onWindowRender, this);
    this.on('beforehide', this.onWindowBeforeHide, this);
    this.on('hide', this.onWindowHide, this);
    this.on('destroy', this.onWindowDestroy, this);
   =20
    // Compiling state template.
    this.state_tpl =3D new Ext.Template(
      "<div class=3D'ext-ux-uploaddialog-state =
ext-ux-uploaddialog-state-{state}'>&#160;</div>"
    ).compile();
  },
 =20
  createForm : function()
  {
    this.form =3D Ext.DomHelper.append(this.body, {
      tag: 'form',
      method: 'post',
      action: this.url,
      style: 'position: absolute; left: -100px; top: -100px; width: =
100px; height: 100px'
    });
  },
 =20
  createProgressBar : function()
  {
    this.progress_bar =3D this.add(
      new Ext.ProgressBar({
        x: 0,
        y: 0,
        anchor: '0',
        value: 0.0,
        text: this.i18n.progress_waiting_text
      })
    );
  },
 =20
  createGrid : function()
  {
    var store =3D new Ext.data.Store({
      proxy: new Ext.data.MemoryProxy([]),
      reader: new Ext.data.JsonReader({}, =
Ext.ux.UploadDialog.FileRecord),
      sortInfo: {field: 'state', direction: 'DESC'},
      pruneModifiedRecords: true
    });
   =20
    var cm =3D new Ext.grid.ColumnModel([
      {
        header: this.i18n.state_col_title,
        width: this.i18n.state_col_width,
        resizable: false,
        dataIndex: 'state',
        sortable: true,
        renderer: this.renderStateCell.createDelegate(this)
      },
      {
        header: this.i18n.filename_col_title,
        width: this.i18n.filename_col_width,
        dataIndex: 'filename',
        sortable: true,
        renderer: this.renderFilenameCell.createDelegate(this)
      },
      {
        header: this.i18n.note_col_title,
        width: this.i18n.note_col_width,=20
        dataIndex: 'note',
        sortable: true,
        renderer: this.renderNoteCell.createDelegate(this)
      }
    ]);
 =20
      this.grid_panel =3D new Ext.grid.GridPanel({
      ds: store,
      cm: cm,
   =20
      x: 0,
      y: 22,
      anchor: '0 -22',
      border: true,
     =20
        viewConfig: {
        autoFill: true,
          forceFit: true
        },
     =20
      bbar : new Ext.Toolbar()
    });
    this.grid_panel.on('render', this.onGridRender, this);
   =20
    this.add(this.grid_panel);
   =20
    this.grid_panel.getSelectionModel().on('selectionchange', =
this.onGridSelectionChange, this);
  },
 =20
  fillToolbar : function()
  {
    var tb =3D this.grid_panel.getBottomToolbar();
    tb.x_buttons =3D {}
   =20
    tb.x_buttons.add =3D tb.addItem(new =
Ext.ux.UploadDialog.TBBrowseButton({
      input_name: this.post_var_name,
      text: this.i18n.add_btn_text,
      tooltip: this.i18n.add_btn_tip,
      iconCls: 'ext-ux-uploaddialog-addbtn',
      handler: this.onAddButtonFileSelected,
      scope: this
    }));
   =20
    tb.x_buttons.remove =3D tb.addButton({
      text: this.i18n.remove_btn_text,
      tooltip: this.i18n.remove_btn_tip,
      iconCls: 'ext-ux-uploaddialog-removebtn',
      handler: this.onRemoveButtonClick,
      scope: this
    });
   =20
    tb.x_buttons.reset =3D tb.addButton({
      text: this.i18n.reset_btn_text,
      tooltip: this.i18n.reset_btn_tip,
      iconCls: 'ext-ux-uploaddialog-resetbtn',
      handler: this.onResetButtonClick,
      scope: this
    });
   =20
    tb.add('-');
   =20
    tb.x_buttons.upload =3D tb.addButton({
      text: this.i18n.upload_btn_start_text,
      tooltip: this.i18n.upload_btn_start_tip,
      iconCls: 'ext-ux-uploaddialog-uploadstartbtn',
      handler: this.onUploadButtonClick,
      scope: this
    });
   =20
    tb.add('-');
   =20
    tb.x_buttons.indicator =3D tb.addItem(
      new Ext.Toolbar.Item(
        Ext.DomHelper.append(tb.getEl(), {
          tag: 'div',
          cls: 'ext-ux-uploaddialog-indicator-stoped',
          html: '&#160'
        })
      )
    );
   =20
    tb.add('->');
   =20
    tb.x_buttons.close =3D tb.addButton({
      text: this.i18n.close_btn_text,
      tooltip: this.i18n.close_btn_tip,
      handler: this.onCloseButtonClick,
      scope: this
    });
  },
 =20
  renderStateCell : function(data, cell, record, row_index, =
column_index, store)
  {
    return this.state_tpl.apply({state: data});
  },
 =20
  renderFilenameCell : function(data, cell, record, row_index, =
column_index, store)
  {
    var view =3D this.grid_panel.getView();
    var f =3D function() {
      try {
        Ext.fly(
          view.getCell(row_index, column_index)
        ).child('.x-grid3-cell-inner').dom['qtip'] =3D data;
      }
      catch (e)
      {}
    }
    f.defer(1000);
    return data;
  },
 =20
  renderNoteCell : function(data, cell, record, row_index, column_index, =
store)
  {
    var view =3D this.grid_panel.getView();
    var f =3D function() {
      try {
        Ext.fly(
          view.getCell(row_index, column_index)
        ).child('.x-grid3-cell-inner').dom['qtip'] =3D data;
      }
      catch (e)
      {}
      }
    f.defer(1000);
    return data;
  },
 =20
  getFileExtension : function(filename)
  {
    var result =3D null;
    var parts =3D filename.split('.');
    if (parts.length > 1) {
      result =3D parts.pop();
    }
    return result;
  },
 =20
  isPermittedFileType : function(filename)
  {
    var result =3D true;
    if (this.permitted_extensions.length > 0) {
      result =3D =
this.permitted_extensions.indexOf(this.getFileExtension(filename)) !=3D =
-1;
    }
    return result;
  },

  isPermittedFile : function(browse_btn)
  {
    var result =3D false;
    var filename =3D browse_btn.getInputFile().dom.value;
   =20
    if (this.isPermittedFileType(filename)) {
      result =3D true;
    }
    else {
      Ext.Msg.alert(
        this.i18n.error_msgbox_title,=20
        String.format(
          this.i18n.err_file_type_not_permitted,
          filename,
          =
this.permitted_extensions.join(this.i18n.permitted_extensions_join_str)
        )
      );
      result =3D false;
    }
   =20
    return result;
  },
 =20
  fireFileTestEvent : function(browse_btn)
  {
    return this.fireEvent('filetest', this, =
browse_btn.getInputFile().dom.value) !=3D=3D false;
  },
 =20
  addFileToUploadQueue : function(browse_btn)
  {
    var input_file =3D browse_btn.detachInputFile();
   =20
    input_file.appendTo(this.form);
    input_file.setStyle('width', '100px');
    input_file.dom.disabled =3D true;
   =20
    var store =3D this.grid_panel.getStore();
    store.add(
      new Ext.ux.UploadDialog.FileRecord({
          state: Ext.ux.UploadDialog.FileRecord.STATE_QUEUE,
          filename: input_file.dom.value,
          note: this.i18n.note_queued_to_upload,
          input_element: input_file
        })
      );
    this.fsa.postEvent('file-added', input_file.dom.value);
  },
 =20
  fireFileAddEvent : function(filename)
  {
    this.fireEvent('fileadd', this, filename);
  },
 =20
  updateProgressBar : function()
  {
    if (this.is_uploading) {
      var queued =3D this.getQueuedCount(true);
      var value =3D 1 - queued / this.initial_queued_count;
      this.progress_bar.updateProgress(
        value,
        String.format(
          this.i18n.progress_uploading_text,=20
          this.initial_queued_count - queued,
          this.initial_queued_count
        )
      );
    }
    else {
      this.progress_bar.updateProgress(0, =
this.i18n.progress_waiting_text);
    }
  },
 =20
  updateToolbar : function()
  {
    var tb =3D this.grid_panel.getBottomToolbar();
    if (this.is_uploading) {
      tb.x_buttons.remove.disable();
      tb.x_buttons.reset.disable();
      tb.x_buttons.upload.enable();
      if (!this.getAllowCloseOnUpload()) {
        tb.x_buttons.close.disable();
      }
      Ext.fly(tb.x_buttons.indicator.getEl()).replaceClass(
        'ext-ux-uploaddialog-indicator-stoped',
        'ext-ux-uploaddialog-indicator-processing'
      );
      =
tb.x_buttons.upload.setIconClass('ext-ux-uploaddialog-uploadstopbtn');
      tb.x_buttons.upload.setText(this.i18n.upload_btn_stop_text);
      tb.x_buttons.upload.getEl()
        .child(tb.x_buttons.upload.buttonSelector)
        .dom[tb.x_buttons.upload.tooltipType] =3D =
this.i18n.upload_btn_stop_tip;
    }
    else {
      tb.x_buttons.remove.enable();
      tb.x_buttons.reset.enable();
      tb.x_buttons.close.enable();
      Ext.fly(tb.x_buttons.indicator.getEl()).replaceClass(
        'ext-ux-uploaddialog-indicator-processing',
        'ext-ux-uploaddialog-indicator-stoped'
      );
      =
tb.x_buttons.upload.setIconClass('ext-ux-uploaddialog-uploadstartbtn');
      tb.x_buttons.upload.setText(this.i18n.upload_btn_start_text);
      tb.x_buttons.upload.getEl()
        .child(tb.x_buttons.upload.buttonSelector)
        .dom[tb.x_buttons.upload.tooltipType] =3D =
this.i18n.upload_btn_start_tip;
     =20
      if (this.getQueuedCount() > 0) {
        tb.x_buttons.upload.enable();
      }
      else {
        tb.x_buttons.upload.disable();     =20
      }
     =20
      if (this.grid_panel.getSelectionModel().hasSelection()) {
        tb.x_buttons.remove.enable();
      }
      else {
        tb.x_buttons.remove.disable();
      }
     =20
      if (this.grid_panel.getStore().getCount() > 0) {
        tb.x_buttons.reset.enable();
      }
      else {
        tb.x_buttons.reset.disable();
      }
    }
  },
 =20
  saveInitialQueuedCount : function()
  {
    this.initial_queued_count =3D this.getQueuedCount();
  },
 =20
  incInitialQueuedCount : function()
  {
    this.initial_queued_count++;
  },
 =20
  setUploadingFlag : function()
  {
    this.is_uploading =3D true;
  },=20
 =20
  resetUploadingFlag : function()
  {
    this.is_uploading =3D false;
  },

  prepareNextUploadTask : function()
  {
    // Searching for first unuploaded file.
    var store =3D this.grid_panel.getStore();
    var record =3D null;
   =20
    store.each(function(r) {
      if (!record && r.get('state') =3D=3D =
Ext.ux.UploadDialog.FileRecord.STATE_QUEUE) {
        record =3D r;
      }
      else {
        r.get('input_element').dom.disabled =3D true;
      }
    });
   =20
    record.get('input_element').dom.disabled =3D false;
    record.set('state', =
Ext.ux.UploadDialog.FileRecord.STATE_PROCESSING);
    record.set('note', this.i18n.note_processing);
    record.commit();
   =20
    this.fsa.postEvent('file-upload-start', record);
  },
  =20
  fireUploadStartEvent : function()
  {
    this.fireEvent('uploadstart', this);
  },
 =20
  removeFiles : function(file_records)
  {
    var store =3D this.grid_panel.getStore();
    for (var i =3D 0, len =3D file_records.length; i < len; i++) {
      var r =3D file_records[i];
      r.get('input_element').remove();
      store.remove(r);
    }
  },
 =20
  fireFileRemoveEvent : function(file_records)
  {
    for (var i =3D 0, len =3D file_records.length; i < len; i++) {
      this.fireEvent('fileremove', this, =
file_records[i].get('filename'));
    }
  },
 =20
  resetQueue : function()
  {
    var store =3D this.grid_panel.getStore();
    store.each(
      function(r) {
        r.get('input_element').remove();
      }
    );
    store.removeAll();
  },
 =20
  fireResetQueueEvent : function()
  {
    this.fireEvent('resetqueue', this);
  },
 =20
  uploadFile : function(record)
  {
    Ext.Ajax.request({
      url : this.url,
      params : this.base_params || this.baseParams || this.params,
      method : 'POST',
      form : this.form,
      isUpload : true,
      success : this.onAjaxSuccess,
      failure : this.onAjaxFailure,
      scope : this,
      record: record
    });
  },
  =20
  fireFileUploadStartEvent : function(record)
  {
    this.fireEvent('fileuploadstart', this, record.get('filename'));
  },
 =20
  updateRecordState : function(data)
  {
    if ('success' in data.response && data.response.success) {
      data.record.set('state', =
Ext.ux.UploadDialog.FileRecord.STATE_FINISHED);
      data.record.set(
        'note', data.response.message || data.response.error || =
this.i18n.note_upload_success
      );
    }
    else {
      data.record.set('state', =
Ext.ux.UploadDialog.FileRecord.STATE_FAILED);
      data.record.set(
        'note', data.response.message || data.response.error || =
this.i18n.note_upload_error
      );
    }
   =20
    data.record.commit();
  },
 =20
  fireUploadSuccessEvent : function(data)
  {
    this.fireEvent('uploadsuccess', this, data.record.get('filename'), =
data.response);
  },
 =20
  fireUploadErrorEvent : function(data)
  {
    this.fireEvent('uploaderror', this, data.record.get('filename'), =
data.response);
  },
 =20
  fireUploadFailedEvent : function(data)
  {
    this.fireEvent('uploadfailed', this, data.record.get('filename'));
  },
 =20
  fireUploadCompleteEvent : function()
  {
    this.fireEvent('uploadcomplete', this);
  },
 =20
  findUploadFrame : function()=20
  {
    this.upload_frame =3D Ext.getBody().child('iframe.x-hidden:last');
  },
 =20
  resetUploadFrame : function()
  {
    this.upload_frame =3D null;
  },
 =20
  removeUploadFrame : function()
  {
    if (this.upload_frame) {
      this.upload_frame.removeAllListeners();
      this.upload_frame.dom.src =3D 'about:blank';
      this.upload_frame.remove();
    }
    this.upload_frame =3D null;
  },
 =20
  abortUpload : function()
  {
    this.removeUploadFrame();
   =20
    var store =3D this.grid_panel.getStore();
    var record =3D null;
    store.each(function(r) {
      if (r.get('state') =3D=3D =
Ext.ux.UploadDialog.FileRecord.STATE_PROCESSING) {
        record =3D r;
        return false;
      }
    });
   =20
    record.set('state', Ext.ux.UploadDialog.FileRecord.STATE_FAILED);
    record.set('note', this.i18n.note_aborted);
    record.commit();
  },
 =20
  fireUploadStopEvent : function()
  {
    this.fireEvent('uploadstop', this);
  },
 =20
  repostHide : function()
  {
    this.fsa.postEvent('hide');
  },
 =20
  flushEventQueue : function()
  {
    this.fsa.flushEventQueue();
  },

  resetAddButton : function(browse_btn)
  {
    browse_btn.detachInputFile();
  },
 =20
  /**
   * @access private
   */
  // =
-------------------------------------------------------------------------=
------------------- //
  onWindowRender : function()
  {
    this.fsa.postEvent('window-render');
  },
 =20
  onWindowBeforeHide : function()
  {
    return this.isUploading() ? this.getAllowCloseOnUpload() : true;
  },
 =20
  onWindowHide : function()
  {
    this.fsa.postEvent('hide');
  },
 =20
  onWindowDestroy : function()
  {
    this.fsa.postEvent('destroy');
  },
 =20
  onGridRender : function()
  {
    this.fsa.postEvent('grid-render');
  },
 =20
  onGridSelectionChange : function()
  {
    this.fsa.postEvent('grid-selection-change');
  },
 =20
  onAddButtonFileSelected : function(btn)
  {
    this.fsa.postEvent('file-selected', btn);
  },
 =20
  onUploadButtonClick : function()
  {
    if (this.is_uploading) {
      this.fsa.postEvent('stop-upload');
    }
    else {
      this.fsa.postEvent('start-upload');
    }
  },
 =20
  onRemoveButtonClick : function()
  {
    var selections =3D =
this.grid_panel.getSelectionModel().getSelections();
    this.fsa.postEvent('remove-files', selections);
  },
 =20
  onResetButtonClick : function()
  {
    this.fsa.postEvent('reset-queue');
  },
 =20
  onCloseButtonClick : function()
  {
    this[this.closeAction].call(this);
  },
 =20
  onAjaxSuccess : function(response, options)
  {
    var json_response =3D {
      'success' : false,
      'error' : this.i18n.note_upload_error
    }
    try {=20
        var rt =3D response.responseText;
        var filter =3D rt.match(/^<[^>]+>((?:.|\n)*)<\/[^>]+>$/);
        if (filter) {
            rt =3D filter[1];
        }
        json_response =3D Ext.util.JSON.decode(rt);=20
    }=20
    catch (e) {}
   =20
    var data =3D {
      record: options.record,
      response: json_response
    }
   =20
    if ('success' in json_response && json_response.success) {
      this.fsa.postEvent('file-upload-success', data);
    }
    else {
      this.fsa.postEvent('file-upload-error', data);
    }
  },
 =20
  onAjaxFailure : function(response, options)
  {
    var data =3D {
      record : options.record,
      response : {
        'success' : false,
        'error' : this.i18n.note_upload_failed
      }
    }

    this.fsa.postEvent('file-upload-failed', data);
  },
 =20
  /**
   * @access public
   */
  // =
-------------------------------------------------------------------------=
------------------- //
  startUpload : function()
  {
    this.fsa.postEvent('start-upload');
  },
 =20
  stopUpload : function()
  {
    this.fsa.postEvent('stop-upload');
  },
 =20
  getUrl : function()
  {
    return this.url;
  },
 =20
  setUrl : function(url)
  {
    this.url =3D url;
  },
 =20
  getBaseParams : function()
  {
    return this.base_params;
  },
 =20
  setBaseParams : function(params)
  {
    this.base_params =3D params;
  },
 =20
  getUploadAutostart : function()
  {
    return this.upload_autostart;
  },
 =20
  setUploadAutostart : function(value)
  {
    this.upload_autostart =3D value;
  },
 =20
  getAllowCloseOnUpload : function()
  {
    return this.allow_close_on_upload;
  },
 =20
  setAllowCloseOnUpload : function(value)
  {
    this.allow_close_on_upload =3D value;
  },
 =20
  getResetOnHide : function()
  {
    return this.reset_on_hide;
  },
 =20
  setResetOnHide : function(value)
  {
    this.reset_on_hide =3D value;
  },
 =20
  getPermittedExtensions : function()
  {
    return this.permitted_extensions;
  },
 =20
  setPermittedExtensions : function(value)
  {
    this.permitted_extensions =3D value;
  },
 =20
  isUploading : function()
  {
    return this.is_uploading;
  },
 =20
  isNotEmptyQueue : function()
  {
    return this.grid_panel.getStore().getCount() > 0;
  },
 =20
  getQueuedCount : function(count_processing)
  {
    var count =3D 0;
    var store =3D this.grid_panel.getStore();
    store.each(function(r) {
      if (r.get('state') =3D=3D =
Ext.ux.UploadDialog.FileRecord.STATE_QUEUE) {
        count++;
      }
      if (count_processing && r.get('state') =3D=3D =
Ext.ux.UploadDialog.FileRecord.STATE_PROCESSING) {
        count++;
      }
    });
    return count;
  },
 =20
  hasUnuploadedFiles : function()
  {
    return this.getQueuedCount() > 0;
  }
});

// =
-------------------------------------------------------------------------=
--------------------- //

var p =3D Ext.ux.UploadDialog.Dialog.prototype;
p.i18n =3D {
  title: 'File upload dialog',
  state_col_title: 'State',
  state_col_width: 70,
  filename_col_title: 'Filename',
  filename_col_width: 230, =20
  note_col_title: 'Note',
  note_col_width: 150,
  add_btn_text: 'Add',
  add_btn_tip: 'Add file into upload queue.',
  remove_btn_text: 'Remove',
  remove_btn_tip: 'Remove file from upload queue.',
  reset_btn_text: 'Reset',
  reset_btn_tip: 'Reset queue.',
  upload_btn_start_text: 'Upload',
  upload_btn_stop_text: 'Abort',
  upload_btn_start_tip: 'Upload queued files to the server.',
  upload_btn_stop_tip: 'Stop upload.',
  close_btn_text: 'Close',
  close_btn_tip: 'Close the dialog.',
  progress_waiting_text: 'Waiting...',
  progress_uploading_text: 'Uploading: {0} of {1} files complete.',
  error_msgbox_title: 'Error',
  permitted_extensions_join_str: ',',
  err_file_type_not_permitted: 'Selected file extension isn\'t =
permitted.<br/>Please select files with following extensions: {1}',
  note_queued_to_upload: 'Queued for upload.',
  note_processing: 'Uploading...',
  note_upload_failed: 'Server is unavailable or internal server error =
occured.',
  note_upload_success: 'OK.',
  note_upload_error: 'Upload error.',
  note_aborted: 'Aborted by user.'
}
------=_NextPart_000_0000_01C8DF8A.E1D9FE20
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://max-bazhenov.com/dev/upload-dialog-2.0/upload-dialog.js

var UploadDialogController =3D function()
{
  var dialog =3D null; =20
  var button =3D null;
  var file_list_tpl =3D new Ext.Template(
    "<div class=3D'file-list-entry'>File {name} successfuly =
uploaded.</div>"
  );
  file_list_tpl.compile();

  function hideLoadingMask()
  {
    var loading =3D Ext.get('loading');
    var mask =3D Ext.get('loading-mask');
    mask.remove();
    loading.remove();
    Ext.get(document.body).setStyle('overflow', 'visible');
  }

	function askUser()=20
	{=20
		return confirm('Are you sure?');=20
	}

  function getDialog()
  {
    if (!dialog) {
      dialog =3D new Ext.ux.UploadDialog.Dialog({
        url: 'upload-dialog-request.php',
        reset_on_hide: false,
        allow_close_on_upload: true,
        upload_autostart: false, //true,
        post_var_name: 'upload'
      });
     =20
      dialog.on('uploadsuccess', onUploadSuccess);
//			dialog.on('filetest', askUser);
    }
    return dialog;
  }
 =20
  function showDialog(button)
  {
    getDialog().show(button.getEl());
  }
 =20
  function onUploadSuccess(dialog, filename, resp_data)
  {
    var parts =3D filename.split(/\/|\\/);
    if (parts.length =3D=3D 1) {
      filename =3D parts[0];
    }
    else {
      filename =3D parts.pop();
    }
    file_list_tpl.append('file-list', {name: filename});
  }
 =20
  return {
    init : function()
    {
      Ext.QuickTips.init();

      button =3D new Ext.Button({
        renderTo: 'show-dialog-btn',
        id: 'show-button',
        text: 'Show dialog',
        handler: showDialog
      });

      hideLoadingMask();
      Ext.get(document.body).setStyle('overflow', 'auto');
    }
  }
}();

Ext.BLANK_IMAGE_URL =3D '../ExtJS/resources/images/default/s.gif';
Ext.onReady(UploadDialogController.init);
------=_NextPart_000_0000_01C8DF8A.E1D9FE20--
