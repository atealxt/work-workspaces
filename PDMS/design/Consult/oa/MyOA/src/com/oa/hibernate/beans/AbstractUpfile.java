/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Thu Aug 23 16:46:04 CST 2007 by MyEclipse Hibernate Tool.
 */
package com.oa.hibernate.beans;

import java.io.Serializable;

/**
 * A class that represents a row in the address table. 
 * You can customize the behavior of this class by editing the class, {@link Address()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractUpfile 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.Integer id;

    /** The value of the simple username property. */
    private java.lang.String filename;

    /** The value of the simple name property. */
    private java.lang.String fileuper;

    /** The value of the simple sex property. */
    private java.lang.String filesize;

    /** The value of the simple mobile property. */
    private java.lang.String fileuptime;

    /** The value of the simple email property. */
    private java.lang.String fileinfo;

    /**
     * Simple constructor of AbstractAddress instances.
     */
    public AbstractUpfile()
    {
    }

    /**
     * Constructor of AbstractAddress instances given a simple primary key.
     * @param id
     */
    public AbstractUpfile(java.lang.Integer id)
    {
        this.setId(id);
    }
    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof Upfile))
            return false;
        Upfile that = (Upfile) rhs;
        if (this.getId() == null || that.getId() == null)
            return false;
        return (this.getId().equals(that.getId()));
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int idValue = this.getId() == null ? 0 : this.getId().hashCode();
            result = result * 37 + idValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }

	public java.lang.Integer getId() {
		return id;
	}

	public void setId(java.lang.Integer id) {
		this.id = id;
	}

	public java.lang.String getFilename() {
		return filename;
	}

	public void setFilename(java.lang.String filename) {
		this.filename = filename;
	}

	public java.lang.String getFileuper() {
		return fileuper;
	}

	public void setFileuper(java.lang.String fileuper) {
		this.fileuper = fileuper;
	}

	public java.lang.String getFilesize() {
		return filesize;
	}

	public void setFilesize(java.lang.String filesize) {
		this.filesize = filesize;
	}

	public java.lang.String getFileuptime() {
		return fileuptime;
	}

	public void setFileuptime(java.lang.String fileuptime) {
		this.fileuptime = fileuptime;
	}

	public java.lang.String getFileinfo() {
		return fileinfo;
	}

	public void setFileinfo(java.lang.String fileinfo) {
		this.fileinfo = fileinfo;
	}
}
